/* Generated code for Python module 'hikari.api.rest'
 * created by Nuitka version 0.7.3
 *
 * This code is in part copyright 2021 Kay Hayen.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

#include "nuitka/prelude.h"

#include "nuitka/unfreezing.h"

#include "__helpers.h"

/* The "module_hikari$api$rest" is a Python object pointer of module type.
 *
 * Note: For full compatibility with CPython, every module variable access
 * needs to go through it except for cases where the module cannot possibly
 * have changed in the mean time.
 */

PyObject *module_hikari$api$rest;
PyDictObject *moduledict_hikari$api$rest;

/* The declarations of module constants used, if any. */
static PyObject *mod_consts[863];
#ifndef __NUITKA_NO_ASSERT__
static Py_hash_t mod_consts_hash[863];
#endif

static PyObject *module_filename_obj = NULL;

/* Indicator if this modules private constants were created yet. */
static bool constants_created = false;

/* Function to create module private constants. */
static void createModuleConstants(void) {
    if (constants_created == false) {
        loadConstantsBlob(&mod_consts[0], UNTRANSLATE("hikari.api.rest"));
        constants_created = true;

#ifndef __NUITKA_NO_ASSERT__
        for(int i = 0; i < 863; i++) {
            mod_consts_hash[i] = DEEP_HASH(mod_consts[i]);
        }
#endif
    }
}

// We want to be able to initialize the "__main__" constants in any case.
#if 0
void createMainModuleConstants(void) {
    createModuleConstants();
}
#endif

/* Function to verify module private constants for non-corruption. */
#ifndef __NUITKA_NO_ASSERT__
void checkModuleConstants_hikari$api$rest(void) {
    // The module may not have been used at all, then ignore this.
    if (constants_created == false) return;

    for(int i = 0; i < 863; i++) {
        assert(mod_consts_hash[i] == DEEP_HASH(mod_consts[i]));
        CHECK_OBJECT_DEEP(mod_consts[i]);
    }
}
#endif

// The module code objects.
static PyCodeObject *codeobj_79a9a0fab045cdec33bf55099eaef1e6;
static PyCodeObject *codeobj_862833cacd6e5ba73c351f8d132a7b6b;
static PyCodeObject *codeobj_a29cd1033c35705b678c14be18c09b67;
static PyCodeObject *codeobj_a3b66de07a5a56caeac07c4f5f6b2072;
static PyCodeObject *codeobj_ac7bcdd10415602e1bfc4f64aaa95484;
static PyCodeObject *codeobj_c9b70cf909535cbe61a3202904fcaa58;
static PyCodeObject *codeobj_f7ad739545259fd887ee27d5abe8dfc5;
static PyCodeObject *codeobj_32467e33cd28d3358caa3d9f6420fea5;
static PyCodeObject *codeobj_a3b80c10bdf5d2012014f19665cea711;
static PyCodeObject *codeobj_35ebd76f91d08bc354810abbda010b3c;
static PyCodeObject *codeobj_d06e651baef5db298c98b1ed57a7f633;
static PyCodeObject *codeobj_ec36952ea8a1addd56b6c08cbedf834c;
static PyCodeObject *codeobj_9b44f8a6f8f5db01cd6b2aa27458a5df;
static PyCodeObject *codeobj_db4161e2ae125e244e16b35b876d55a6;
static PyCodeObject *codeobj_5a03703e17e71a855c8c54c1608fa785;
static PyCodeObject *codeobj_cb9fdefa53037775142c55b0c6fd00f4;
static PyCodeObject *codeobj_5bda4d556e57a53f6b364e6d8209fa90;
static PyCodeObject *codeobj_ec131d13f2837723addc4e5d122b3408;
static PyCodeObject *codeobj_e6e428f02370f7d65a3c77e9cc8932ac;
static PyCodeObject *codeobj_7a4b026e3f6658c2da5a749149872aa6;
static PyCodeObject *codeobj_20827cf562e1f90f7639c4c86616d85d;
static PyCodeObject *codeobj_03d62ee6529c757418777148f1c01630;
static PyCodeObject *codeobj_4371d9d20ead35c704a0e86e924d663a;
static PyCodeObject *codeobj_96dfc981e71339bc0521217827aaa0e7;
static PyCodeObject *codeobj_fcb3282dfce94e0118b54ed974ea5dca;
static PyCodeObject *codeobj_bacc75bdb9795bb19510517993550d92;
static PyCodeObject *codeobj_3b902179d941a30fc767e6b081474834;
static PyCodeObject *codeobj_404b46a06bf1bbaeece956d0adc5120e;
static PyCodeObject *codeobj_809e84358e6d962649ea9268ed569283;
static PyCodeObject *codeobj_767f83eeec40354df8c763fa4489d51f;
static PyCodeObject *codeobj_047e2ec99402d774dfea4cdf299e1c3e;
static PyCodeObject *codeobj_b837f4182e1d25b057a9d369fed91d85;
static PyCodeObject *codeobj_67885ec34cfe5c794df9b1bb57a1735f;
static PyCodeObject *codeobj_c14228a11640df809168a49140f38b28;
static PyCodeObject *codeobj_6bc646cda82f339b5a37035a5de12a5a;
static PyCodeObject *codeobj_49a2ca747b1f693086c26a3c7b50502f;
static PyCodeObject *codeobj_ab29f44c657c056b9a281e02adb179e8;
static PyCodeObject *codeobj_32581de60cadc43f2b7b4dfd037bddfa;
static PyCodeObject *codeobj_9637bd02e99b409ff1d86f4c8ad8277e;
static PyCodeObject *codeobj_61a49502c9c457fcc45436725e3f5e94;
static PyCodeObject *codeobj_21f21cd388273606498c1eaa8c0d785c;
static PyCodeObject *codeobj_d702236d8f737f29ae70a12e5a516434;
static PyCodeObject *codeobj_191f810972cc4fc165bd3f760134ec02;
static PyCodeObject *codeobj_de12df71da1209e15e5aeca52e934193;
static PyCodeObject *codeobj_c04fe507f41b0ac3283d08bde3e7eb5e;
static PyCodeObject *codeobj_2be1316070137c932a8bc1d29c537b01;
static PyCodeObject *codeobj_a7cff8c269d3d4bb6d35ad3514fa1ef1;
static PyCodeObject *codeobj_84ac493bc93d1770b2e4e186c670939e;
static PyCodeObject *codeobj_1522b298d93f7d1a07c24ed0046572b3;
static PyCodeObject *codeobj_f8f22833d3bb72cf4a61f8d6ceb03817;
static PyCodeObject *codeobj_c1e059673a38603153eaa38eae37353a;
static PyCodeObject *codeobj_d7b2eac5b38cc41eb3f05e85890e9bf7;
static PyCodeObject *codeobj_c49241596d5f07638dab6d6627305dc5;
static PyCodeObject *codeobj_a62973ef75efa5d41f4ca8934be55fef;
static PyCodeObject *codeobj_409e13cb5f1475225f2cbc531c685ea2;
static PyCodeObject *codeobj_edf59de9273ddf1ce806b7723d4dafc9;
static PyCodeObject *codeobj_f175bac38463ebaf7f6b7020a9f501eb;
static PyCodeObject *codeobj_3794b902c3f3b912d5c9431679faf993;
static PyCodeObject *codeobj_bc8ea0df74490d43da889b08e74a02b8;
static PyCodeObject *codeobj_dddd995be6c3c59c8e1d62868bffbbbf;
static PyCodeObject *codeobj_a5b60d65171b73bfba9097d900ee5da7;
static PyCodeObject *codeobj_b8572edead035d292c542034f790156d;
static PyCodeObject *codeobj_7ec667c02a18fca3f0a3cc3a8ff7c3ec;
static PyCodeObject *codeobj_ce648f5c121accd4aa67977eb5913b0a;
static PyCodeObject *codeobj_c40e2a6aa5050635853eda66b5668072;
static PyCodeObject *codeobj_3b5a99cecd12f7345243374797db49a1;
static PyCodeObject *codeobj_e151f143653c171d06140f26248a3786;
static PyCodeObject *codeobj_d1a9c3d728bb5f40e935c92a1bda0a4b;
static PyCodeObject *codeobj_6d7a8ac8b3cc128aa461e10c7269212c;
static PyCodeObject *codeobj_15ce8a3d530670d458af7373cf6fbb19;
static PyCodeObject *codeobj_d07e6291bdc309dd83bfdf05d0bf6f71;
static PyCodeObject *codeobj_b123d3753856d90ff010c7d7665460f7;
static PyCodeObject *codeobj_2230d268d52a85d1da02a1f8aa186e87;
static PyCodeObject *codeobj_56759f70da9f186d1b1d80e49a8c062f;
static PyCodeObject *codeobj_43593321256b83bcc2a2e1cfcd1c76ba;
static PyCodeObject *codeobj_687e8c3e10ec2434c0e1610c5ca60b01;
static PyCodeObject *codeobj_66f4c634fd3531c33dfb8e9b2827d550;
static PyCodeObject *codeobj_ab6ce3071043fa65a772b73f31b733d2;
static PyCodeObject *codeobj_6ecc85b2a92137e7d96b51706f98b305;
static PyCodeObject *codeobj_7d7f01753630829fa482ebf47fbd2024;
static PyCodeObject *codeobj_354598dc7fcb79428a2609775650f364;
static PyCodeObject *codeobj_cff92b81f13f66788bdc5087de6f07bb;
static PyCodeObject *codeobj_02259e45cb66359f9532b2a1fad93e11;
static PyCodeObject *codeobj_740e80e9d704456a9c1a4a09c2019ff4;
static PyCodeObject *codeobj_1e700c87f1dae51368614adf81318717;
static PyCodeObject *codeobj_ba311f99d46acd00b1206631c059fe96;
static PyCodeObject *codeobj_ed9e9604447b8f482f5ab9203a34afa4;
static PyCodeObject *codeobj_9c51094b7172a5c5db393be7f201e43e;
static PyCodeObject *codeobj_6e78df246d5c48b01ed235092320fffb;
static PyCodeObject *codeobj_85d832edea87824ef43e543419803e0e;
static PyCodeObject *codeobj_b3a4e0500c34d0c9bc55478f050e5d98;
static PyCodeObject *codeobj_0b6d0220a08979869f0a012939b4b77a;
static PyCodeObject *codeobj_e64bde9ce978560a4a00d42dee53992a;
static PyCodeObject *codeobj_58ffb98f50e237e5f9fa7695302ebf98;
static PyCodeObject *codeobj_b717f6be8a19f27f2c33558c9a709ffe;
static PyCodeObject *codeobj_892d739b78730b5f9d943817bbcf335c;
static PyCodeObject *codeobj_7fec987c5efd78706d159b41f6a66254;
static PyCodeObject *codeobj_48f65a01e4048f6d2bfef10fdc0bc7ef;
static PyCodeObject *codeobj_1b8b30e8f0275ccaf868189a8ed3f51d;
static PyCodeObject *codeobj_9a178547a7eb03437641e09b597ccba0;
static PyCodeObject *codeobj_9fa1bb76afe2555b4f588c1284a2fcd4;
static PyCodeObject *codeobj_f02c9c1a79dfd00d4112cd96a363cef4;
static PyCodeObject *codeobj_0c318e3d7579272de92091dec1b02e7b;
static PyCodeObject *codeobj_eebffecbdd74e836b4e468c7c6968b8b;
static PyCodeObject *codeobj_b12e50ac6a955e7d9814a32bcafb352f;
static PyCodeObject *codeobj_95dc29580b8b5a29e1de025f1a9194a2;
static PyCodeObject *codeobj_da885abe69f64210f2ff5c028e5ccd26;
static PyCodeObject *codeobj_44182ab55be0bec741c65d777f4cfe71;
static PyCodeObject *codeobj_bcfed686f72d490bf234f356c3cca423;
static PyCodeObject *codeobj_897da39a3921a4fb20f81c67aebf9615;
static PyCodeObject *codeobj_48438a3b55123a6b9c581ff0b64203a4;
static PyCodeObject *codeobj_7eda04693b599ad7b84817589d86ac9f;
static PyCodeObject *codeobj_1cfe50d4370a8a818a27570fe3dd1f60;
static PyCodeObject *codeobj_31b7bb0b4f6644f676934d3da23556f7;
static PyCodeObject *codeobj_1748bb80dc27bac8e0d68641a4b9032a;
static PyCodeObject *codeobj_a6aa071612c3ccf585b57b9abcf3bded;
static PyCodeObject *codeobj_c43f3622966175a9df896aabfe0178c7;
static PyCodeObject *codeobj_ba1ec6f1e1d723bafa837c4ba4beb49b;
static PyCodeObject *codeobj_72bd5001662f78b8bb6f4ef730616043;
static PyCodeObject *codeobj_91bc149cc3afebf8779254973ad93480;
static PyCodeObject *codeobj_f7f835fee11a2ba50d39fdcf49417e24;
static PyCodeObject *codeobj_6890d6669b24051880ade97e5903d02a;
static PyCodeObject *codeobj_abb9569d8efb3255e82275ba2ccc153e;
static PyCodeObject *codeobj_22bd2cf7b9ec29dce5c000522e288d52;
static PyCodeObject *codeobj_6316c02615d76ac4fa4c4f4a94f98c2f;
static PyCodeObject *codeobj_4ae2fab4850752e0e6ce74522f50458d;
static PyCodeObject *codeobj_b4909d4177445a7598bf0e970661e7bc;
static PyCodeObject *codeobj_db5e2fbdef3512cdeead2e78f1d550e7;
static PyCodeObject *codeobj_0b81a2ebe62b3844e214112a73fefc6e;
static PyCodeObject *codeobj_21257f50bcc408d47f2b7c8ad85ae262;
static PyCodeObject *codeobj_5052bc86c7530427f9e7f965949c58db;
static PyCodeObject *codeobj_38a4907eea8f3097aa485e442ef45566;
static PyCodeObject *codeobj_3ec2c4b987f49482becf480c5d7cfc03;
static PyCodeObject *codeobj_3f78627ed1169b7991275a5b616d81a3;
static PyCodeObject *codeobj_ca7bfd654ee8af862dbe34bfefe49f74;
static PyCodeObject *codeobj_2d2c32ef18588b2fd5dfdcadf00cf350;
static PyCodeObject *codeobj_e6971230dc348ac59f39bdf0cd231da8;
static PyCodeObject *codeobj_f40deb0035a1b642c13dfde4396dde8c;
static PyCodeObject *codeobj_503d6540a65c336ba3afce23367ff4ea;
static PyCodeObject *codeobj_a8961d64e8b0099b7704c8a06beb4d7a;
static PyCodeObject *codeobj_9bf28fb394d8904a97188da2986fe348;
static PyCodeObject *codeobj_7931c42c07e0d2d5a43e627bdc83d325;
static PyCodeObject *codeobj_192e3ea626b9d275dbd02aa153fccda6;
static PyCodeObject *codeobj_b87093cffa77cb82afbaad84c7ddabf6;
static PyCodeObject *codeobj_b8d5560f0a83750dfcbd1dc10dfd5505;
static PyCodeObject *codeobj_54c4d39f47ffa80ae28f5f1176582446;
static PyCodeObject *codeobj_e02c07dc535f721d44993adb05cf68d1;
static PyCodeObject *codeobj_e349be883605ec25793c958e80d35ba0;
static PyCodeObject *codeobj_4e6209d5f6349c83f3cf0fdc61051eef;
static PyCodeObject *codeobj_6034723cc1f266b6ddd3d11b6b282685;
static PyCodeObject *codeobj_121158bdab91854dd12714c6230cff5d;
static PyCodeObject *codeobj_d71591a07208a7d80804c9be3581fa8f;
static PyCodeObject *codeobj_78d93943367f049d329e24c4fa8caba5;
static PyCodeObject *codeobj_a2868142c34175a8858d585b546b7499;
static PyCodeObject *codeobj_61e52a923ef10e5edbc1371948361d2f;
static PyCodeObject *codeobj_84185994553865b34b5efdd7de67ba0a;
static PyCodeObject *codeobj_d75ee286b3add60a3cc472d0fcff5e04;
static PyCodeObject *codeobj_81bdb131e32de9c52c4392e95cb181a2;
static PyCodeObject *codeobj_6c0b925d29e6f67c920eff7a01a42634;
static PyCodeObject *codeobj_0187f19cf2c55c79d079ab7595edb960;
static PyCodeObject *codeobj_bcca91d182457884f0ef137e0755d5b4;
static PyCodeObject *codeobj_5f9292db0891d6d836dea94d0407da9b;
static PyCodeObject *codeobj_5bd68a48b272ab644aaad0f48e8af30a;
static PyCodeObject *codeobj_4b0df3364f3e1bcbca4bd177abb02aa3;

static void createModuleCodeObjects(void) {
    module_filename_obj = MAKE_RELATIVE_PATH(mod_consts[765]); CHECK_OBJECT(module_filename_obj);
    codeobj_79a9a0fab045cdec33bf55099eaef1e6 = MAKE_CODEOBJECT(module_filename_obj, 1, CO_NOFREE | CO_FUTURE_ANNOTATIONS, mod_consts[766], NULL, NULL, 0, 0, 0);
    codeobj_862833cacd6e5ba73c351f8d132a7b6b = MAKE_CODEOBJECT(module_filename_obj, 110, CO_NOFREE | CO_FUTURE_ANNOTATIONS, mod_consts[469], mod_consts[767], NULL, 0, 0, 0);
    codeobj_a29cd1033c35705b678c14be18c09b67 = MAKE_CODEOBJECT(module_filename_obj, 65, CO_NOFREE | CO_FUTURE_ANNOTATIONS, mod_consts[444], mod_consts[767], NULL, 0, 0, 0);
    codeobj_a3b66de07a5a56caeac07c4f5f6b2072 = MAKE_CODEOBJECT(module_filename_obj, 82, CO_COROUTINE | CO_NOFREE | CO_FUTURE_ANNOTATIONS, mod_consts[1], mod_consts[768], NULL, 2, 0, 0);
    codeobj_ac7bcdd10415602e1bfc4f64aaa95484 = MAKE_CODEOBJECT(module_filename_obj, 1580, CO_COROUTINE | CO_NOFREE | CO_FUTURE_ANNOTATIONS, mod_consts[66], mod_consts[769], NULL, 5, 0, 0);
    codeobj_c9b70cf909535cbe61a3202904fcaa58 = MAKE_CODEOBJECT(module_filename_obj, 5181, CO_COROUTINE | CO_NOFREE | CO_FUTURE_ANNOTATIONS, mod_consts[252], mod_consts[770], NULL, 4, 1, 0);
    codeobj_f7ad739545259fd887ee27d5abe8dfc5 = MAKE_CODEOBJECT(module_filename_obj, 3250, CO_COROUTINE | CO_NOFREE | CO_FUTURE_ANNOTATIONS, mod_consts[156], mod_consts[771], NULL, 4, 5, 0);
    codeobj_32467e33cd28d3358caa3d9f6420fea5 = MAKE_CODEOBJECT(module_filename_obj, 3106, CO_COROUTINE | CO_NOFREE | CO_FUTURE_ANNOTATIONS, mod_consts[147], mod_consts[772], NULL, 5, 0, 0);
    codeobj_a3b80c10bdf5d2012014f19665cea711 = MAKE_CODEOBJECT(module_filename_obj, 3061, CO_COROUTINE | CO_NOFREE | CO_FUTURE_ANNOTATIONS, mod_consts[144], mod_consts[773], NULL, 4, 0, 0);
    codeobj_35ebd76f91d08bc354810abbda010b3c = MAKE_CODEOBJECT(module_filename_obj, 5397, CO_COROUTINE | CO_NOFREE | CO_FUTURE_ANNOTATIONS, mod_consts[267], mod_consts[774], NULL, 3, 2, 0);
    codeobj_d06e651baef5db298c98b1ed57a7f633 = MAKE_CODEOBJECT(module_filename_obj, 5343, CO_COROUTINE | CO_NOFREE | CO_FUTURE_ANNOTATIONS, mod_consts[264], mod_consts[774], NULL, 3, 2, 0);
    codeobj_ec36952ea8a1addd56b6c08cbedf834c = MAKE_CODEOBJECT(module_filename_obj, 5891, CO_COROUTINE | CO_NOFREE | CO_FUTURE_ANNOTATIONS, mod_consts[300], mod_consts[775], NULL, 2, 4, 0);
    codeobj_9b44f8a6f8f5db01cd6b2aa27458a5df = MAKE_CODEOBJECT(module_filename_obj, 7820, CO_NOFREE | CO_FUTURE_ANNOTATIONS, mod_consts[743], mod_consts[776], NULL, 1, 0, 0);
    codeobj_db4161e2ae125e244e16b35b876d55a6 = MAKE_CODEOBJECT(module_filename_obj, 140, CO_COROUTINE | CO_NOFREE | CO_FUTURE_ANNOTATIONS, mod_consts[4], mod_consts[776], NULL, 1, 0, 0);
    codeobj_5a03703e17e71a855c8c54c1608fa785 = MAKE_CODEOBJECT(module_filename_obj, 6634, CO_NOFREE | CO_FUTURE_ANNOTATIONS, mod_consts[701], mod_consts[777], NULL, 3, 0, 0);
    codeobj_cb9fdefa53037775142c55b0c6fd00f4 = MAKE_CODEOBJECT(module_filename_obj, 6679, CO_NOFREE | CO_FUTURE_ANNOTATIONS, mod_consts[708], mod_consts[778], NULL, 3, 0, 0);
    codeobj_5bda4d556e57a53f6b364e6d8209fa90 = MAKE_CODEOBJECT(module_filename_obj, 6802, CO_COROUTINE | CO_NOFREE | CO_FUTURE_ANNOTATIONS, mod_consts[354], mod_consts[779], NULL, 5, 2, 0);
    codeobj_ec131d13f2837723addc4e5d122b3408 = MAKE_CODEOBJECT(module_filename_obj, 7777, CO_COROUTINE | CO_NOFREE | CO_FUTURE_ANNOTATIONS, mod_consts[396], mod_consts[780], NULL, 4, 0, 0);
    codeobj_e6e428f02370f7d65a3c77e9cc8932ac = MAKE_CODEOBJECT(module_filename_obj, 6941, CO_COROUTINE | CO_NOFREE | CO_FUTURE_ANNOTATIONS, mod_consts[360], mod_consts[781], NULL, 4, 2, 0);
    codeobj_7a4b026e3f6658c2da5a749149872aa6 = MAKE_CODEOBJECT(module_filename_obj, 2959, CO_COROUTINE | CO_NOFREE | CO_FUTURE_ANNOTATIONS, mod_consts[135], mod_consts[782], NULL, 2, 0, 2);
    codeobj_20827cf562e1f90f7639c4c86616d85d = MAKE_CODEOBJECT(module_filename_obj, 3551, CO_COROUTINE | CO_NOFREE | CO_FUTURE_ANNOTATIONS, mod_consts[171], mod_consts[783], NULL, 4, 2, 0);
    codeobj_03d62ee6529c757418777148f1c01630 = MAKE_CODEOBJECT(module_filename_obj, 8075, CO_COROUTINE | CO_NOFREE | CO_FUTURE_ANNOTATIONS, mod_consts[411], mod_consts[784], NULL, 6, 4, 3);
    codeobj_4371d9d20ead35c704a0e86e924d663a = MAKE_CODEOBJECT(module_filename_obj, 4692, CO_COROUTINE | CO_NOFREE | CO_FUTURE_ANNOTATIONS, mod_consts[228], mod_consts[785], NULL, 3, 3, 0);
    codeobj_96dfc981e71339bc0521217827aaa0e7 = MAKE_CODEOBJECT(module_filename_obj, 6364, CO_COROUTINE | CO_NOFREE | CO_FUTURE_ANNOTATIONS, mod_consts[330], mod_consts[786], NULL, 3, 1, 0);
    codeobj_fcb3282dfce94e0118b54ed974ea5dca = MAKE_CODEOBJECT(module_filename_obj, 4447, CO_COROUTINE | CO_NOFREE | CO_FUTURE_ANNOTATIONS, mod_consts[219], mod_consts[787], NULL, 3, 7, 0);
    codeobj_bacc75bdb9795bb19510517993550d92 = MAKE_CODEOBJECT(module_filename_obj, 4610, CO_COROUTINE | CO_NOFREE | CO_FUTURE_ANNOTATIONS, mod_consts[225], mod_consts[788], NULL, 3, 7, 0);
    codeobj_3b902179d941a30fc767e6b081474834 = MAKE_CODEOBJECT(module_filename_obj, 4369, CO_COROUTINE | CO_NOFREE | CO_FUTURE_ANNOTATIONS, mod_consts[216], mod_consts[787], NULL, 3, 7, 0);
    codeobj_404b46a06bf1bbaeece956d0adc5120e = MAKE_CODEOBJECT(module_filename_obj, 4525, CO_COROUTINE | CO_NOFREE | CO_FUTURE_ANNOTATIONS, mod_consts[222], mod_consts[789], NULL, 3, 8, 0);
    codeobj_809e84358e6d962649ea9268ed569283 = MAKE_CODEOBJECT(module_filename_obj, 7457, CO_COROUTINE | CO_NOFREE | CO_FUTURE_ANNOTATIONS, mod_consts[387], mod_consts[790], NULL, 5, 11, 0);
    codeobj_767f83eeec40354df8c763fa4489d51f = MAKE_CODEOBJECT(module_filename_obj, 681, CO_COROUTINE | CO_NOFREE | CO_FUTURE_ANNOTATIONS, mod_consts[36], mod_consts[791], NULL, 2, 8, 0);
    codeobj_047e2ec99402d774dfea4cdf299e1c3e = MAKE_CODEOBJECT(module_filename_obj, 1074, CO_COROUTINE | CO_NOFREE | CO_FUTURE_ANNOTATIONS, mod_consts[51], mod_consts[792], NULL, 3, 12, 0);
    codeobj_b837f4182e1d25b057a9d369fed91d85 = MAKE_CODEOBJECT(module_filename_obj, 5592, CO_COROUTINE | CO_NOFREE | CO_FUTURE_ANNOTATIONS, mod_consts[285], mod_consts[793], NULL, 2, 9, 0);
    codeobj_67885ec34cfe5c794df9b1bb57a1735f = MAKE_CODEOBJECT(module_filename_obj, 6873, CO_COROUTINE | CO_NOFREE | CO_FUTURE_ANNOTATIONS, mod_consts[357], mod_consts[779], NULL, 4, 3, 0);
    codeobj_c14228a11640df809168a49140f38b28 = MAKE_CODEOBJECT(module_filename_obj, 7917, CO_COROUTINE | CO_NOFREE | CO_FUTURE_ANNOTATIONS, mod_consts[405], mod_consts[794], NULL, 5, 5, 4);
    codeobj_6bc646cda82f339b5a37035a5de12a5a = MAKE_CODEOBJECT(module_filename_obj, 3876, CO_COROUTINE | CO_NOFREE | CO_FUTURE_ANNOTATIONS, mod_consts[192], mod_consts[795], NULL, 5, 2, 0);
    codeobj_49a2ca747b1f693086c26a3c7b50502f = MAKE_CODEOBJECT(module_filename_obj, 6313, CO_COROUTINE | CO_NOFREE | CO_FUTURE_ANNOTATIONS, mod_consts[327], mod_consts[796], NULL, 3, 1, 0);
    codeobj_ab29f44c657c056b9a281e02adb179e8 = MAKE_CODEOBJECT(module_filename_obj, 7996, CO_COROUTINE | CO_NOFREE | CO_FUTURE_ANNOTATIONS, mod_consts[408], mod_consts[794], NULL, 5, 5, 4);
    codeobj_32581de60cadc43f2b7b4dfd037bddfa = MAKE_CODEOBJECT(module_filename_obj, 1912, CO_COROUTINE | CO_NOFREE | CO_FUTURE_ANNOTATIONS, mod_consts[81], mod_consts[797], NULL, 3, 2, 0);
    codeobj_9637bd02e99b409ff1d86f4c8ad8277e = MAKE_CODEOBJECT(module_filename_obj, 1235, CO_COROUTINE | CO_NOFREE | CO_FUTURE_ANNOTATIONS, mod_consts[54], mod_consts[798], NULL, 3, 0, 0);
    codeobj_61a49502c9c457fcc45436725e3f5e94 = MAKE_CODEOBJECT(module_filename_obj, 1802, CO_COROUTINE | CO_NOFREE | CO_FUTURE_ANNOTATIONS, mod_consts[78], mod_consts[798], NULL, 3, 0, 0);
    codeobj_21f21cd388273606498c1eaa8c0d785c = MAKE_CODEOBJECT(module_filename_obj, 1688, CO_COROUTINE | CO_NOFREE | CO_FUTURE_ANNOTATIONS, mod_consts[72], mod_consts[769], NULL, 5, 0, 0);
    codeobj_d702236d8f737f29ae70a12e5a516434 = MAKE_CODEOBJECT(module_filename_obj, 7127, CO_COROUTINE | CO_NOFREE | CO_FUTURE_ANNOTATIONS, mod_consts[369], mod_consts[799], NULL, 4, 0, 0);
    codeobj_191f810972cc4fc165bd3f760134ec02 = MAKE_CODEOBJECT(module_filename_obj, 343, CO_COROUTINE | CO_NOFREE | CO_FUTURE_ANNOTATIONS, mod_consts[16], mod_consts[800], NULL, 2, 0, 0);
    codeobj_de12df71da1209e15e5aeca52e934193 = MAKE_CODEOBJECT(module_filename_obj, 3678, CO_COROUTINE | CO_NOFREE | CO_FUTURE_ANNOTATIONS, mod_consts[177], mod_consts[801], NULL, 3, 1, 0);
    codeobj_c04fe507f41b0ac3283d08bde3e7eb5e = MAKE_CODEOBJECT(module_filename_obj, 4298, CO_COROUTINE | CO_NOFREE | CO_FUTURE_ANNOTATIONS, mod_consts[210], mod_consts[802], NULL, 2, 0, 0);
    codeobj_2be1316070137c932a8bc1d29c537b01 = MAKE_CODEOBJECT(module_filename_obj, 7743, CO_COROUTINE | CO_NOFREE | CO_FUTURE_ANNOTATIONS, mod_consts[393], mod_consts[803], NULL, 3, 0, 0);
    codeobj_a7cff8c269d3d4bb6d35ad3514fa1ef1 = MAKE_CODEOBJECT(module_filename_obj, 2741, CO_COROUTINE | CO_NOFREE | CO_FUTURE_ANNOTATIONS, mod_consts[120], mod_consts[804], NULL, 2, 0, 0);
    codeobj_84ac493bc93d1770b2e4e186c670939e = MAKE_CODEOBJECT(module_filename_obj, 1482, CO_COROUTINE | CO_NOFREE | CO_FUTURE_ANNOTATIONS, mod_consts[60], mod_consts[798], NULL, 3, 0, 0);
    codeobj_1522b298d93f7d1a07c24ed0046572b3 = MAKE_CODEOBJECT(module_filename_obj, 1523, CO_COROUTINE | CO_VARARGS | CO_NOFREE | CO_FUTURE_ANNOTATIONS, mod_consts[63], mod_consts[805], NULL, 3, 0, 3);
    codeobj_f8f22833d3bb72cf4a61f8d6ceb03817 = MAKE_CODEOBJECT(module_filename_obj, 1636, CO_COROUTINE | CO_NOFREE | CO_FUTURE_ANNOTATIONS, mod_consts[69], mod_consts[769], NULL, 5, 0, 0);
    codeobj_c1e059673a38603153eaa38eae37353a = MAKE_CODEOBJECT(module_filename_obj, 600, CO_COROUTINE | CO_NOFREE | CO_FUTURE_ANNOTATIONS, mod_consts[30], mod_consts[806], NULL, 3, 0, 0);
    codeobj_d7b2eac5b38cc41eb3f05e85890e9bf7 = MAKE_CODEOBJECT(module_filename_obj, 1742, CO_COROUTINE | CO_NOFREE | CO_FUTURE_ANNOTATIONS, mod_consts[75], mod_consts[807], NULL, 6, 0, 0);
    codeobj_c49241596d5f07638dab6d6627305dc5 = MAKE_CODEOBJECT(module_filename_obj, 5795, CO_COROUTINE | CO_NOFREE | CO_FUTURE_ANNOTATIONS, mod_consts[294], mod_consts[808], NULL, 3, 0, 0);
    codeobj_a62973ef75efa5d41f4ca8934be55fef = MAKE_CODEOBJECT(module_filename_obj, 8255, CO_COROUTINE | CO_NOFREE | CO_FUTURE_ANNOTATIONS, mod_consts[417], mod_consts[809], NULL, 3, 0, 3);
    codeobj_409e13cb5f1475225f2cbc531c685ea2 = MAKE_CODEOBJECT(module_filename_obj, 4009, CO_COROUTINE | CO_NOFREE | CO_FUTURE_ANNOTATIONS, mod_consts[198], mod_consts[810], NULL, 3, 1, 0);
    codeobj_edf59de9273ddf1ce806b7723d4dafc9 = MAKE_CODEOBJECT(module_filename_obj, 6417, CO_COROUTINE | CO_NOFREE | CO_FUTURE_ANNOTATIONS, mod_consts[333], mod_consts[811], NULL, 3, 0, 0);
    codeobj_f175bac38463ebaf7f6b7020a9f501eb = MAKE_CODEOBJECT(module_filename_obj, 2166, CO_COROUTINE | CO_NOFREE | CO_FUTURE_ANNOTATIONS, mod_consts[96], mod_consts[812], NULL, 2, 1, 0);
    codeobj_3794b902c3f3b912d5c9431679faf993 = MAKE_CODEOBJECT(module_filename_obj, 2611, CO_COROUTINE | CO_NOFREE | CO_FUTURE_ANNOTATIONS, mod_consts[108], mod_consts[813], NULL, 4, 0, 0);
    codeobj_bc8ea0df74490d43da889b08e74a02b8 = MAKE_CODEOBJECT(module_filename_obj, 7061, CO_COROUTINE | CO_NOFREE | CO_FUTURE_ANNOTATIONS, mod_consts[366], mod_consts[814], NULL, 4, 3, 0);
    codeobj_dddd995be6c3c59c8e1d62868bffbbbf = MAKE_CODEOBJECT(module_filename_obj, 202, CO_COROUTINE | CO_NOFREE | CO_FUTURE_ANNOTATIONS, mod_consts[10], mod_consts[815], NULL, 2, 12, 2);
    codeobj_a5b60d65171b73bfba9097d900ee5da7 = MAKE_CODEOBJECT(module_filename_obj, 3615, CO_COROUTINE | CO_NOFREE | CO_FUTURE_ANNOTATIONS, mod_consts[174], mod_consts[816], NULL, 3, 3, 0);
    codeobj_b8572edead035d292c542034f790156d = MAKE_CODEOBJECT(module_filename_obj, 4184, CO_COROUTINE | CO_NOFREE | CO_FUTURE_ANNOTATIONS, mod_consts[207], mod_consts[817], NULL, 2, 15, 0);
    codeobj_7ec667c02a18fca3f0a3cc3a8ff7c3ec = MAKE_CODEOBJECT(module_filename_obj, 7585, CO_COROUTINE | CO_NOFREE | CO_FUTURE_ANNOTATIONS, mod_consts[390], mod_consts[818], NULL, 4, 10, 0);
    codeobj_ce648f5c121accd4aa67977eb5913b0a = MAKE_CODEOBJECT(module_filename_obj, 4973, CO_COROUTINE | CO_NOFREE | CO_FUTURE_ANNOTATIONS, mod_consts[243], mod_consts[819], NULL, 3, 8, 0);
    codeobj_c40e2a6aa5050635853eda66b5668072 = MAKE_CODEOBJECT(module_filename_obj, 1283, CO_COROUTINE | CO_NOFREE | CO_FUTURE_ANNOTATIONS, mod_consts[57], mod_consts[820], NULL, 4, 12, 0);
    codeobj_3b5a99cecd12f7345243374797db49a1 = MAKE_CODEOBJECT(module_filename_obj, 5074, CO_COROUTINE | CO_NOFREE | CO_FUTURE_ANNOTATIONS, mod_consts[246], mod_consts[821], NULL, 2, 2, 0);
    codeobj_e151f143653c171d06140f26248a3786 = MAKE_CODEOBJECT(module_filename_obj, 5130, CO_COROUTINE | CO_NOFREE | CO_FUTURE_ANNOTATIONS, mod_consts[249], mod_consts[822], NULL, 3, 1, 0);
    codeobj_d1a9c3d728bb5f40e935c92a1bda0a4b = MAKE_CODEOBJECT(module_filename_obj, 2809, CO_COROUTINE | CO_NOFREE | CO_FUTURE_ANNOTATIONS, mod_consts[126], mod_consts[823], NULL, 1, 2, 0);
    codeobj_6d7a8ac8b3cc128aa461e10c7269212c = MAKE_CODEOBJECT(module_filename_obj, 387, CO_COROUTINE | CO_NOFREE | CO_FUTURE_ANNOTATIONS, mod_consts[19], mod_consts[824], NULL, 3, 2, 0);
    codeobj_15ce8a3d530670d458af7373cf6fbb19 = MAKE_CODEOBJECT(module_filename_obj, 508, CO_COROUTINE | CO_NOFREE | CO_FUTURE_ANNOTATIONS, mod_consts[25], mod_consts[825], NULL, 3, 3, 0);
    codeobj_d07e6291bdc309dd83bfdf05d0bf6f71 = MAKE_CODEOBJECT(module_filename_obj, 521, CO_COROUTINE | CO_NOFREE | CO_FUTURE_ANNOTATIONS, mod_consts[25], mod_consts[826], NULL, 3, 4, 0);
    codeobj_b123d3753856d90ff010c7d7665460f7 = MAKE_CODEOBJECT(module_filename_obj, 534, CO_COROUTINE | CO_NOFREE | CO_FUTURE_ANNOTATIONS, mod_consts[25], mod_consts[826], NULL, 3, 4, 0);
    codeobj_2230d268d52a85d1da02a1f8aa186e87 = MAKE_CODEOBJECT(module_filename_obj, 5712, CO_COROUTINE | CO_NOFREE | CO_FUTURE_ANNOTATIONS, mod_consts[291], mod_consts[827], NULL, 3, 9, 0);
    codeobj_56759f70da9f186d1b1d80e49a8c062f = MAKE_CODEOBJECT(module_filename_obj, 8151, CO_COROUTINE | CO_NOFREE | CO_FUTURE_ANNOTATIONS, mod_consts[414], mod_consts[828], NULL, 3, 11, 3);
    codeobj_43593321256b83bcc2a2e1cfcd1c76ba = MAKE_CODEOBJECT(module_filename_obj, 3945, CO_COROUTINE | CO_NOFREE | CO_FUTURE_ANNOTATIONS, mod_consts[195], mod_consts[829], NULL, 3, 4, 0);
    codeobj_687e8c3e10ec2434c0e1610c5ca60b01 = MAKE_CODEOBJECT(module_filename_obj, 6461, CO_COROUTINE | CO_NOFREE | CO_FUTURE_ANNOTATIONS, mod_consts[336], mod_consts[830], NULL, 3, 2, 0);
    codeobj_66f4c634fd3531c33dfb8e9b2827d550 = MAKE_CODEOBJECT(module_filename_obj, 452, CO_COROUTINE | CO_NOFREE | CO_FUTURE_ANNOTATIONS, mod_consts[22], mod_consts[831], NULL, 4, 1, 0);
    codeobj_ab6ce3071043fa65a772b73f31b733d2 = MAKE_CODEOBJECT(module_filename_obj, 2102, CO_COROUTINE | CO_NOFREE | CO_FUTURE_ANNOTATIONS, mod_consts[93], mod_consts[832], NULL, 2, 5, 0);
    codeobj_6ecc85b2a92137e7d96b51706f98b305 = MAKE_CODEOBJECT(module_filename_obj, 2436, CO_COROUTINE | CO_NOFREE | CO_FUTURE_ANNOTATIONS, mod_consts[105], mod_consts[833], NULL, 5, 10, 0);
    codeobj_7d7f01753630829fa482ebf47fbd2024 = MAKE_CODEOBJECT(module_filename_obj, 6208, CO_COROUTINE | CO_NOFREE | CO_FUTURE_ANNOTATIONS, mod_consts[321], mod_consts[834], NULL, 2, 3, 0);
    codeobj_354598dc7fcb79428a2609775650f364 = MAKE_CODEOBJECT(module_filename_obj, 6115, CO_COROUTINE | CO_NOFREE | CO_FUTURE_ANNOTATIONS, mod_consts[315], mod_consts[835], NULL, 2, 3, 0);
    codeobj_cff92b81f13f66788bdc5087de6f07bb = MAKE_CODEOBJECT(module_filename_obj, 122, CO_NOFREE | CO_FUTURE_ANNOTATIONS, mod_consts[477], mod_consts[776], NULL, 1, 0, 0);
    codeobj_02259e45cb66359f9532b2a1fad93e11 = MAKE_CODEOBJECT(module_filename_obj, 5835, CO_COROUTINE | CO_NOFREE | CO_FUTURE_ANNOTATIONS, mod_consts[297], mod_consts[836], NULL, 2, 2, 0);
    codeobj_740e80e9d704456a9c1a4a09c2019ff4 = MAKE_CODEOBJECT(module_filename_obj, 2211, CO_COROUTINE | CO_NOFREE | CO_FUTURE_ANNOTATIONS, mod_consts[99], mod_consts[837], NULL, 4, 13, 0);
    codeobj_1e700c87f1dae51368614adf81318717 = MAKE_CODEOBJECT(module_filename_obj, 2996, CO_COROUTINE | CO_NOFREE | CO_FUTURE_ANNOTATIONS, mod_consts[138], mod_consts[776], NULL, 1, 0, 0);
    codeobj_ba311f99d46acd00b1206631c059fe96 = MAKE_CODEOBJECT(module_filename_obj, 6700, CO_COROUTINE | CO_NOFREE | CO_FUTURE_ANNOTATIONS, mod_consts[348], mod_consts[799], NULL, 4, 0, 0);
    codeobj_ed9e9604447b8f482f5ab9203a34afa4 = MAKE_CODEOBJECT(module_filename_obj, 7216, CO_COROUTINE | CO_NOFREE | CO_FUTURE_ANNOTATIONS, mod_consts[375], mod_consts[838], NULL, 4, 0, 0);
    codeobj_9c51094b7172a5c5db393be7f201e43e = MAKE_CODEOBJECT(module_filename_obj, 6751, CO_COROUTINE | CO_NOFREE | CO_FUTURE_ANNOTATIONS, mod_consts[351], mod_consts[839], NULL, 3, 0, 0);
    codeobj_6e78df246d5c48b01ed235092320fffb = MAKE_CODEOBJECT(module_filename_obj, 7173, CO_COROUTINE | CO_NOFREE | CO_FUTURE_ANNOTATIONS, mod_consts[372], mod_consts[839], NULL, 3, 0, 0);
    codeobj_85d832edea87824ef43e543419803e0e = MAKE_CODEOBJECT(module_filename_obj, 3403, CO_NOFREE | CO_FUTURE_ANNOTATIONS, mod_consts[605], mod_consts[840], NULL, 2, 3, 0);
    codeobj_b3a4e0500c34d0c9bc55478f050e5d98 = MAKE_CODEOBJECT(module_filename_obj, 3029, CO_COROUTINE | CO_NOFREE | CO_FUTURE_ANNOTATIONS, mod_consts[141], mod_consts[776], NULL, 1, 0, 0);
    codeobj_0b6d0220a08979869f0a012939b4b77a = MAKE_CODEOBJECT(module_filename_obj, 3726, CO_COROUTINE | CO_NOFREE | CO_FUTURE_ANNOTATIONS, mod_consts[180], mod_consts[776], NULL, 1, 0, 0);
    codeobj_e64bde9ce978560a4a00d42dee53992a = MAKE_CODEOBJECT(module_filename_obj, 5466, CO_COROUTINE | CO_NOFREE | CO_FUTURE_ANNOTATIONS, mod_consts[276], mod_consts[841], NULL, 3, 0, 0);
    codeobj_58ffb98f50e237e5f9fa7695302ebf98 = MAKE_CODEOBJECT(module_filename_obj, 5512, CO_COROUTINE | CO_NOFREE | CO_FUTURE_ANNOTATIONS, mod_consts[279], mod_consts[802], NULL, 2, 0, 0);
    codeobj_b717f6be8a19f27f2c33558c9a709ffe = MAKE_CODEOBJECT(module_filename_obj, 144, CO_COROUTINE | CO_NOFREE | CO_FUTURE_ANNOTATIONS, mod_consts[7], mod_consts[800], NULL, 2, 0, 0);
    codeobj_892d739b78730b5f9d943817bbcf335c = MAKE_CODEOBJECT(module_filename_obj, 641, CO_COROUTINE | CO_NOFREE | CO_FUTURE_ANNOTATIONS, mod_consts[33], mod_consts[800], NULL, 2, 0, 0);
    codeobj_7fec987c5efd78706d159b41f6a66254 = MAKE_CODEOBJECT(module_filename_obj, 2019, CO_COROUTINE | CO_NOFREE | CO_FUTURE_ANNOTATIONS, mod_consts[87], mod_consts[800], NULL, 2, 0, 0);
    codeobj_48f65a01e4048f6d2bfef10fdc0bc7ef = MAKE_CODEOBJECT(module_filename_obj, 3470, CO_COROUTINE | CO_NOFREE | CO_FUTURE_ANNOTATIONS, mod_consts[165], mod_consts[842], NULL, 3, 0, 0);
    codeobj_1b8b30e8f0275ccaf868189a8ed3f51d = MAKE_CODEOBJECT(module_filename_obj, 2677, CO_COROUTINE | CO_NOFREE | CO_FUTURE_ANNOTATIONS, mod_consts[114], mod_consts[776], NULL, 1, 0, 0);
    codeobj_9a178547a7eb03437641e09b597ccba0 = MAKE_CODEOBJECT(module_filename_obj, 2653, CO_COROUTINE | CO_NOFREE | CO_FUTURE_ANNOTATIONS, mod_consts[111], mod_consts[776], NULL, 1, 0, 0);
    codeobj_9fa1bb76afe2555b4f588c1284a2fcd4 = MAKE_CODEOBJECT(module_filename_obj, 4107, CO_COROUTINE | CO_NOFREE | CO_FUTURE_ANNOTATIONS, mod_consts[201], mod_consts[802], NULL, 2, 0, 0);
    codeobj_f02c9c1a79dfd00d4112cd96a363cef4 = MAKE_CODEOBJECT(module_filename_obj, 4331, CO_COROUTINE | CO_NOFREE | CO_FUTURE_ANNOTATIONS, mod_consts[213], mod_consts[802], NULL, 2, 0, 0);
    codeobj_0c318e3d7579272de92091dec1b02e7b = MAKE_CODEOBJECT(module_filename_obj, 3513, CO_COROUTINE | CO_NOFREE | CO_FUTURE_ANNOTATIONS, mod_consts[168], mod_consts[802], NULL, 2, 0, 0);
    codeobj_eebffecbdd74e836b4e468c7c6968b8b = MAKE_CODEOBJECT(module_filename_obj, 5995, CO_COROUTINE | CO_NOFREE | CO_FUTURE_ANNOTATIONS, mod_consts[306], mod_consts[802], NULL, 2, 0, 0);
    codeobj_b12e50ac6a955e7d9814a32bcafb352f = MAKE_CODEOBJECT(module_filename_obj, 4145, CO_COROUTINE | CO_NOFREE | CO_FUTURE_ANNOTATIONS, mod_consts[204], mod_consts[802], NULL, 2, 0, 0);
    codeobj_95dc29580b8b5a29e1de025f1a9194a2 = MAKE_CODEOBJECT(module_filename_obj, 3831, CO_COROUTINE | CO_NOFREE | CO_FUTURE_ANNOTATIONS, mod_consts[189], mod_consts[843], NULL, 3, 0, 0);
    codeobj_da885abe69f64210f2ff5c028e5ccd26 = MAKE_CODEOBJECT(module_filename_obj, 3791, CO_COROUTINE | CO_NOFREE | CO_FUTURE_ANNOTATIONS, mod_consts[186], mod_consts[802], NULL, 2, 0, 0);
    codeobj_44182ab55be0bec741c65d777f4cfe71 = MAKE_CODEOBJECT(module_filename_obj, 6550, CO_COROUTINE | CO_NOFREE | CO_FUTURE_ANNOTATIONS, mod_consts[342], mod_consts[802], NULL, 2, 0, 0);
    codeobj_bcfed686f72d490bf234f356c3cca423 = MAKE_CODEOBJECT(module_filename_obj, 5956, CO_COROUTINE | CO_NOFREE | CO_FUTURE_ANNOTATIONS, mod_consts[303], mod_consts[802], NULL, 2, 0, 0);
    codeobj_897da39a3921a4fb20f81c67aebf9615 = MAKE_CODEOBJECT(module_filename_obj, 2061, CO_COROUTINE | CO_NOFREE | CO_FUTURE_ANNOTATIONS, mod_consts[90], mod_consts[802], NULL, 2, 0, 0);
    codeobj_48438a3b55123a6b9c581ff0b64203a4 = MAKE_CODEOBJECT(module_filename_obj, 6036, CO_COROUTINE | CO_NOFREE | CO_FUTURE_ANNOTATIONS, mod_consts[309], mod_consts[802], NULL, 2, 0, 0);
    codeobj_7eda04693b599ad7b84817589d86ac9f = MAKE_CODEOBJECT(module_filename_obj, 7416, CO_COROUTINE | CO_NOFREE | CO_FUTURE_ANNOTATIONS, mod_consts[384], mod_consts[803], NULL, 3, 0, 0);
    codeobj_1cfe50d4370a8a818a27570fe3dd1f60 = MAKE_CODEOBJECT(module_filename_obj, 2705, CO_COROUTINE | CO_NOFREE | CO_FUTURE_ANNOTATIONS, mod_consts[117], mod_consts[804], NULL, 2, 0, 0);
    codeobj_31b7bb0b4f6644f676934d3da23556f7 = MAKE_CODEOBJECT(module_filename_obj, 4794, CO_COROUTINE | CO_NOFREE | CO_FUTURE_ANNOTATIONS, mod_consts[234], mod_consts[841], NULL, 3, 0, 0);
    codeobj_1748bb80dc27bac8e0d68641a4b9032a = MAKE_CODEOBJECT(module_filename_obj, 4837, CO_NOFREE | CO_FUTURE_ANNOTATIONS, mod_consts[652], mod_consts[802], NULL, 2, 0, 0);
    codeobj_a6aa071612c3ccf585b57b9abcf3bded = MAKE_CODEOBJECT(module_filename_obj, 1028, CO_COROUTINE | CO_NOFREE | CO_FUTURE_ANNOTATIONS, mod_consts[48], mod_consts[798], NULL, 3, 0, 0);
    codeobj_c43f3622966175a9df896aabfe0178c7 = MAKE_CODEOBJECT(module_filename_obj, 952, CO_NOFREE | CO_FUTURE_ANNOTATIONS, mod_consts[530], mod_consts[844], NULL, 2, 3, 0);
    codeobj_ba1ec6f1e1d723bafa837c4ba4beb49b = MAKE_CODEOBJECT(module_filename_obj, 2844, CO_COROUTINE | CO_NOFREE | CO_FUTURE_ANNOTATIONS, mod_consts[129], mod_consts[776], NULL, 1, 0, 0);
    codeobj_72bd5001662f78b8bb6f4ef730616043 = MAKE_CODEOBJECT(module_filename_obj, 2872, CO_NOFREE | CO_FUTURE_ANNOTATIONS, mod_consts[582], mod_consts[845], NULL, 1, 2, 0);
    codeobj_91bc149cc3afebf8779254973ad93480 = MAKE_CODEOBJECT(module_filename_obj, 4893, CO_COROUTINE | CO_NOFREE | CO_FUTURE_ANNOTATIONS, mod_consts[237], mod_consts[802], NULL, 2, 0, 0);
    codeobj_f7f835fee11a2ba50d39fdcf49417e24 = MAKE_CODEOBJECT(module_filename_obj, 2781, CO_COROUTINE | CO_NOFREE | CO_FUTURE_ANNOTATIONS, mod_consts[123], mod_consts[776], NULL, 1, 0, 0);
    codeobj_6890d6669b24051880ade97e5903d02a = MAKE_CODEOBJECT(module_filename_obj, 830, CO_COROUTINE | CO_NOFREE | CO_FUTURE_ANNOTATIONS, mod_consts[39], mod_consts[800], NULL, 2, 0, 0);
    codeobj_abb9569d8efb3255e82275ba2ccc153e = MAKE_CODEOBJECT(module_filename_obj, 1845, CO_NOFREE | CO_FUTURE_ANNOTATIONS, mod_consts[555], mod_consts[769], NULL, 5, 0, 0);
    codeobj_22bd2cf7b9ec29dce5c000522e288d52 = MAKE_CODEOBJECT(module_filename_obj, 5553, CO_COROUTINE | CO_NOFREE | CO_FUTURE_ANNOTATIONS, mod_consts[282], mod_consts[802], NULL, 2, 0, 0);
    codeobj_6316c02615d76ac4fa4c4f4a94f98c2f = MAKE_CODEOBJECT(module_filename_obj, 7830, CO_COROUTINE | CO_NOFREE | CO_FUTURE_ANNOTATIONS, mod_consts[399], mod_consts[809], NULL, 3, 0, 3);
    codeobj_4ae2fab4850752e0e6ce74522f50458d = MAKE_CODEOBJECT(module_filename_obj, 8294, CO_NOFREE | CO_FUTURE_ANNOTATIONS, mod_consts[763], mod_consts[846], NULL, 3, 2, 3);
    codeobj_b4909d4177445a7598bf0e970661e7bc = MAKE_CODEOBJECT(module_filename_obj, 7876, CO_COROUTINE | CO_NOFREE | CO_FUTURE_ANNOTATIONS, mod_consts[402], mod_consts[802], NULL, 2, 0, 2);
    codeobj_db5e2fbdef3512cdeead2e78f1d550e7 = MAKE_CODEOBJECT(module_filename_obj, 3752, CO_COROUTINE | CO_NOFREE | CO_FUTURE_ANNOTATIONS, mod_consts[183], mod_consts[847], NULL, 2, 0, 0);
    codeobj_0b81a2ebe62b3844e214112a73fefc6e = MAKE_CODEOBJECT(module_filename_obj, 6515, CO_COROUTINE | CO_NOFREE | CO_FUTURE_ANNOTATIONS, mod_consts[339], mod_consts[848], NULL, 2, 0, 0);
    codeobj_21257f50bcc408d47f2b7c8ad85ae262 = MAKE_CODEOBJECT(module_filename_obj, 3367, CO_COROUTINE | CO_NOFREE | CO_FUTURE_ANNOTATIONS, mod_consts[162], mod_consts[782], NULL, 2, 0, 0);
    codeobj_5052bc86c7530427f9e7f965949c58db = MAKE_CODEOBJECT(module_filename_obj, 6275, CO_COROUTINE | CO_NOFREE | CO_FUTURE_ANNOTATIONS, mod_consts[324], mod_consts[802], NULL, 2, 0, 0);
    codeobj_38a4907eea8f3097aa485e442ef45566 = MAKE_CODEOBJECT(module_filename_obj, 3339, CO_COROUTINE | CO_NOFREE | CO_FUTURE_ANNOTATIONS, mod_consts[159], mod_consts[776], NULL, 1, 0, 0);
    codeobj_3ec2c4b987f49482becf480c5d7cfc03 = MAKE_CODEOBJECT(module_filename_obj, 1969, CO_COROUTINE | CO_NOFREE | CO_FUTURE_ANNOTATIONS, mod_consts[84], mod_consts[812], NULL, 2, 1, 0);
    codeobj_3f78627ed1169b7991275a5b616d81a3 = MAKE_CODEOBJECT(module_filename_obj, 2389, CO_COROUTINE | CO_NOFREE | CO_FUTURE_ANNOTATIONS, mod_consts[102], mod_consts[813], NULL, 4, 0, 0);
    codeobj_ca7bfd654ee8af862dbe34bfefe49f74 = MAKE_CODEOBJECT(module_filename_obj, 6171, CO_COROUTINE | CO_NOFREE | CO_FUTURE_ANNOTATIONS, mod_consts[318], mod_consts[802], NULL, 2, 0, 0);
    codeobj_2d2c32ef18588b2fd5dfdcadf00cf350 = MAKE_CODEOBJECT(module_filename_obj, 6077, CO_COROUTINE | CO_NOFREE | CO_FUTURE_ANNOTATIONS, mod_consts[312], mod_consts[802], NULL, 2, 0, 0);
    codeobj_e6971230dc348ac59f39bdf0cd231da8 = MAKE_CODEOBJECT(module_filename_obj, 294, CO_COROUTINE | CO_NOFREE | CO_FUTURE_ANNOTATIONS, mod_consts[13], mod_consts[849], NULL, 3, 0, 0);
    codeobj_f40deb0035a1b642c13dfde4396dde8c = MAKE_CODEOBJECT(module_filename_obj, 4057, CO_NOFREE | CO_FUTURE_ANNOTATIONS, mod_consts[623], mod_consts[850], NULL, 2, 0, 2);
    codeobj_503d6540a65c336ba3afce23367ff4ea = MAKE_CODEOBJECT(module_filename_obj, 7387, CO_NOFREE | CO_FUTURE_ANNOTATIONS, mod_consts[730], mod_consts[851], NULL, 2, 0, 0);
    codeobj_a8961d64e8b0099b7704c8a06beb4d7a = MAKE_CODEOBJECT(module_filename_obj, 7370, CO_NOFREE | CO_FUTURE_ANNOTATIONS, mod_consts[726], mod_consts[852], NULL, 2, 0, 2);
    codeobj_9bf28fb394d8904a97188da2986fe348 = MAKE_CODEOBJECT(module_filename_obj, 7399, CO_NOFREE | CO_FUTURE_ANNOTATIONS, mod_consts[734], mod_consts[852], NULL, 2, 0, 2);
    codeobj_7931c42c07e0d2d5a43e627bdc83d325 = MAKE_CODEOBJECT(module_filename_obj, 93, CO_NOFREE | CO_FUTURE_ANNOTATIONS, mod_consts[465], mod_consts[853], NULL, 2, 0, 0);
    codeobj_192e3ea626b9d275dbd02aa153fccda6 = MAKE_CODEOBJECT(module_filename_obj, 117, CO_NOFREE | CO_FUTURE_ANNOTATIONS, mod_consts[473], mod_consts[776], NULL, 1, 0, 0);
    codeobj_b87093cffa77cb82afbaad84c7ddabf6 = MAKE_CODEOBJECT(module_filename_obj, 5333, CO_COROUTINE | CO_NOFREE | CO_FUTURE_ANNOTATIONS, mod_consts[261], mod_consts[854], NULL, 3, 1, 0);
    codeobj_b8d5560f0a83750dfcbd1dc10dfd5505 = MAKE_CODEOBJECT(module_filename_obj, 5285, CO_COROUTINE | CO_NOFREE | CO_FUTURE_ANNOTATIONS, mod_consts[258], mod_consts[854], NULL, 3, 1, 0);
    codeobj_54c4d39f47ffa80ae28f5f1176582446 = MAKE_CODEOBJECT(module_filename_obj, 2928, CO_COROUTINE | CO_NOFREE | CO_FUTURE_ANNOTATIONS, mod_consts[132], mod_consts[802], NULL, 2, 0, 2);
    codeobj_e02c07dc535f721d44993adb05cf68d1 = MAKE_CODEOBJECT(module_filename_obj, 870, CO_COROUTINE | CO_NOFREE | CO_FUTURE_ANNOTATIONS, mod_consts[42], mod_consts[798], NULL, 3, 0, 0);
    codeobj_e349be883605ec25793c958e80d35ba0 = MAKE_CODEOBJECT(module_filename_obj, 3153, CO_COROUTINE | CO_NOFREE | CO_FUTURE_ANNOTATIONS, mod_consts[150], mod_consts[855], NULL, 4, 1, 0);
    codeobj_4e6209d5f6349c83f3cf0fdc61051eef = MAKE_CODEOBJECT(module_filename_obj, 5233, CO_COROUTINE | CO_NOFREE | CO_FUTURE_ANNOTATIONS, mod_consts[255], mod_consts[770], NULL, 4, 1, 0);
    codeobj_6034723cc1f266b6ddd3d11b6b282685 = MAKE_CODEOBJECT(module_filename_obj, 4754, CO_COROUTINE | CO_NOFREE | CO_FUTURE_ANNOTATIONS, mod_consts[231], mod_consts[856], NULL, 3, 0, 0);
    codeobj_121158bdab91854dd12714c6230cff5d = MAKE_CODEOBJECT(module_filename_obj, 5673, CO_COROUTINE | CO_NOFREE | CO_FUTURE_ANNOTATIONS, mod_consts[288], mod_consts[856], NULL, 3, 0, 0);
    codeobj_d71591a07208a7d80804c9be3581fa8f = MAKE_CODEOBJECT(module_filename_obj, 3212, CO_COROUTINE | CO_NOFREE | CO_FUTURE_ANNOTATIONS, mod_consts[153], mod_consts[857], NULL, 4, 0, 0);
    codeobj_78d93943367f049d329e24c4fa8caba5 = MAKE_CODEOBJECT(module_filename_obj, 4927, CO_COROUTINE | CO_NOFREE | CO_FUTURE_ANNOTATIONS, mod_consts[240], mod_consts[858], NULL, 3, 0, 0);
    codeobj_a2868142c34175a8858d585b546b7499 = MAKE_CODEOBJECT(module_filename_obj, 7318, CO_COROUTINE | CO_NOFREE | CO_FUTURE_ANNOTATIONS, mod_consts[381], mod_consts[859], NULL, 5, 0, 0);
    codeobj_61e52a923ef10e5edbc1371948361d2f = MAKE_CODEOBJECT(module_filename_obj, 7003, CO_COROUTINE | CO_NOFREE | CO_FUTURE_ANNOTATIONS, mod_consts[363], mod_consts[860], NULL, 4, 0, 0);
    codeobj_84185994553865b34b5efdd7de67ba0a = MAKE_CODEOBJECT(module_filename_obj, 7262, CO_COROUTINE | CO_NOFREE | CO_FUTURE_ANNOTATIONS, mod_consts[378], mod_consts[861], NULL, 4, 0, 0);
    codeobj_d75ee286b3add60a3cc472d0fcff5e04 = MAKE_CODEOBJECT(module_filename_obj, 6656, CO_NOFREE | CO_FUTURE_ANNOTATIONS, mod_consts[704], mod_consts[777], NULL, 3, 0, 0);
    codeobj_81bdb131e32de9c52c4392e95cb181a2 = MAKE_CODEOBJECT(module_filename_obj, 6590, CO_COROUTINE | CO_NOFREE | CO_FUTURE_ANNOTATIONS, mod_consts[345], mod_consts[811], NULL, 3, 0, 0);
    codeobj_6c0b925d29e6f67c920eff7a01a42634 = MAKE_CODEOBJECT(module_filename_obj, 72, CO_NOFREE | CO_FUTURE_ANNOTATIONS, mod_consts[460], mod_consts[776], NULL, 1, 0, 0);
    codeobj_0187f19cf2c55c79d079ab7595edb960 = MAKE_CODEOBJECT(module_filename_obj, 127, CO_NOFREE | CO_FUTURE_ANNOTATIONS, mod_consts[460], mod_consts[776], NULL, 1, 0, 0);
    codeobj_bcca91d182457884f0ef137e0755d5b4 = MAKE_CODEOBJECT(module_filename_obj, 766, CO_NOFREE | CO_FUTURE_ANNOTATIONS, mod_consts[521], mod_consts[800], NULL, 2, 0, 0);
    codeobj_5f9292db0891d6d836dea94d0407da9b = MAKE_CODEOBJECT(module_filename_obj, 5456, CO_COROUTINE | CO_NOFREE | CO_FUTURE_ANNOTATIONS, mod_consts[273], mod_consts[854], NULL, 3, 1, 0);
    codeobj_5bd68a48b272ab644aaad0f48e8af30a = MAKE_CODEOBJECT(module_filename_obj, 5408, CO_COROUTINE | CO_NOFREE | CO_FUTURE_ANNOTATIONS, mod_consts[270], mod_consts[854], NULL, 3, 1, 0);
    codeobj_4b0df3364f3e1bcbca4bd177abb02aa3 = MAKE_CODEOBJECT(module_filename_obj, 911, CO_COROUTINE | CO_NOFREE | CO_FUTURE_ANNOTATIONS, mod_consts[45], mod_consts[798], NULL, 3, 0, 0);
}

// The module function declarations.
static PyObject *MAKE_COROUTINE_hikari$api$rest$$$function__2_acquire$$$coroutine__1_acquire();


static PyObject *MAKE_COROUTINE_hikari$api$rest$$$function__7_close$$$coroutine__1_close();


static PyObject *MAKE_COROUTINE_hikari$api$rest$$$function__8_fetch_channel$$$coroutine__1_fetch_channel();


static PyObject *MAKE_COROUTINE_hikari$api$rest$$$function__9_edit_channel$$$coroutine__1_edit_channel();


static PyObject *MAKE_COROUTINE_hikari$api$rest$$$function__10_follow_channel$$$coroutine__1_follow_channel();


static PyObject *MAKE_COROUTINE_hikari$api$rest$$$function__11_delete_channel$$$coroutine__1_delete_channel();


static PyObject *MAKE_COROUTINE_hikari$api$rest$$$function__12_edit_my_voice_state$$$coroutine__1_edit_my_voice_state();


static PyObject *MAKE_COROUTINE_hikari$api$rest$$$function__13_edit_voice_state$$$coroutine__1_edit_voice_state();


static PyObject *MAKE_COROUTINE_hikari$api$rest$$$function__14_edit_permission_overwrites$$$coroutine__1_edit_permission_overwrites();


static PyObject *MAKE_COROUTINE_hikari$api$rest$$$function__15_edit_permission_overwrites$$$coroutine__1_edit_permission_overwrites();


static PyObject *MAKE_COROUTINE_hikari$api$rest$$$function__16_edit_permission_overwrites$$$coroutine__1_edit_permission_overwrites();


static PyObject *MAKE_COROUTINE_hikari$api$rest$$$function__17_delete_permission_overwrite$$$coroutine__1_delete_permission_overwrite();


static PyObject *MAKE_COROUTINE_hikari$api$rest$$$function__18_fetch_channel_invites$$$coroutine__1_fetch_channel_invites();


static PyObject *MAKE_COROUTINE_hikari$api$rest$$$function__19_create_invite$$$coroutine__1_create_invite();


static PyObject *MAKE_COROUTINE_hikari$api$rest$$$function__21_fetch_pins$$$coroutine__1_fetch_pins();


static PyObject *MAKE_COROUTINE_hikari$api$rest$$$function__22_pin_message$$$coroutine__1_pin_message();


static PyObject *MAKE_COROUTINE_hikari$api$rest$$$function__23_unpin_message$$$coroutine__1_unpin_message();


static PyObject *MAKE_COROUTINE_hikari$api$rest$$$function__25_fetch_message$$$coroutine__1_fetch_message();


static PyObject *MAKE_COROUTINE_hikari$api$rest$$$function__26_create_message$$$coroutine__1_create_message();


static PyObject *MAKE_COROUTINE_hikari$api$rest$$$function__27_crosspost_message$$$coroutine__1_crosspost_message();


static PyObject *MAKE_COROUTINE_hikari$api$rest$$$function__28_edit_message$$$coroutine__1_edit_message();


static PyObject *MAKE_COROUTINE_hikari$api$rest$$$function__29_delete_message$$$coroutine__1_delete_message();


static PyObject *MAKE_COROUTINE_hikari$api$rest$$$function__30_delete_messages$$$coroutine__1_delete_messages();


static PyObject *MAKE_COROUTINE_hikari$api$rest$$$function__31_add_reaction$$$coroutine__1_add_reaction();


static PyObject *MAKE_COROUTINE_hikari$api$rest$$$function__32_delete_my_reaction$$$coroutine__1_delete_my_reaction();


static PyObject *MAKE_COROUTINE_hikari$api$rest$$$function__33_delete_all_reactions_for_emoji$$$coroutine__1_delete_all_reactions_for_emoji();


static PyObject *MAKE_COROUTINE_hikari$api$rest$$$function__34_delete_reaction$$$coroutine__1_delete_reaction();


static PyObject *MAKE_COROUTINE_hikari$api$rest$$$function__35_delete_all_reactions$$$coroutine__1_delete_all_reactions();


static PyObject *MAKE_COROUTINE_hikari$api$rest$$$function__37_create_webhook$$$coroutine__1_create_webhook();


static PyObject *MAKE_COROUTINE_hikari$api$rest$$$function__38_fetch_webhook$$$coroutine__1_fetch_webhook();


static PyObject *MAKE_COROUTINE_hikari$api$rest$$$function__39_fetch_channel_webhooks$$$coroutine__1_fetch_channel_webhooks();


static PyObject *MAKE_COROUTINE_hikari$api$rest$$$function__40_fetch_guild_webhooks$$$coroutine__1_fetch_guild_webhooks();


static PyObject *MAKE_COROUTINE_hikari$api$rest$$$function__41_edit_webhook$$$coroutine__1_edit_webhook();


static PyObject *MAKE_COROUTINE_hikari$api$rest$$$function__42_delete_webhook$$$coroutine__1_delete_webhook();


static PyObject *MAKE_COROUTINE_hikari$api$rest$$$function__43_execute_webhook$$$coroutine__1_execute_webhook();


static PyObject *MAKE_COROUTINE_hikari$api$rest$$$function__44_fetch_webhook_message$$$coroutine__1_fetch_webhook_message();


static PyObject *MAKE_COROUTINE_hikari$api$rest$$$function__45_edit_webhook_message$$$coroutine__1_edit_webhook_message();


static PyObject *MAKE_COROUTINE_hikari$api$rest$$$function__46_delete_webhook_message$$$coroutine__1_delete_webhook_message();


static PyObject *MAKE_COROUTINE_hikari$api$rest$$$function__47_fetch_gateway_url$$$coroutine__1_fetch_gateway_url();


static PyObject *MAKE_COROUTINE_hikari$api$rest$$$function__48_fetch_gateway_bot_info$$$coroutine__1_fetch_gateway_bot_info();


static PyObject *MAKE_COROUTINE_hikari$api$rest$$$function__49_fetch_invite$$$coroutine__1_fetch_invite();


static PyObject *MAKE_COROUTINE_hikari$api$rest$$$function__50_delete_invite$$$coroutine__1_delete_invite();


static PyObject *MAKE_COROUTINE_hikari$api$rest$$$function__51_fetch_my_user$$$coroutine__1_fetch_my_user();


static PyObject *MAKE_COROUTINE_hikari$api$rest$$$function__52_edit_my_user$$$coroutine__1_edit_my_user();


static PyObject *MAKE_COROUTINE_hikari$api$rest$$$function__53_fetch_my_connections$$$coroutine__1_fetch_my_connections();


static PyObject *MAKE_COROUTINE_hikari$api$rest$$$function__55_leave_guild$$$coroutine__1_leave_guild();


static PyObject *MAKE_COROUTINE_hikari$api$rest$$$function__56_create_dm_channel$$$coroutine__1_create_dm_channel();


static PyObject *MAKE_COROUTINE_hikari$api$rest$$$function__57_fetch_application$$$coroutine__1_fetch_application();


static PyObject *MAKE_COROUTINE_hikari$api$rest$$$function__58_fetch_authorization$$$coroutine__1_fetch_authorization();


static PyObject *MAKE_COROUTINE_hikari$api$rest$$$function__59_authorize_client_credentials_token$$$coroutine__1_authorize_client_credentials_token();


static PyObject *MAKE_COROUTINE_hikari$api$rest$$$function__60_authorize_access_token$$$coroutine__1_authorize_access_token();


static PyObject *MAKE_COROUTINE_hikari$api$rest$$$function__61_refresh_access_token$$$coroutine__1_refresh_access_token();


static PyObject *MAKE_COROUTINE_hikari$api$rest$$$function__62_revoke_access_token$$$coroutine__1_revoke_access_token();


static PyObject *MAKE_COROUTINE_hikari$api$rest$$$function__63_add_user_to_guild$$$coroutine__1_add_user_to_guild();


static PyObject *MAKE_COROUTINE_hikari$api$rest$$$function__64_fetch_voice_regions$$$coroutine__1_fetch_voice_regions();


static PyObject *MAKE_COROUTINE_hikari$api$rest$$$function__65_fetch_user$$$coroutine__1_fetch_user();


static PyObject *MAKE_COROUTINE_hikari$api$rest$$$function__67_fetch_emoji$$$coroutine__1_fetch_emoji();


static PyObject *MAKE_COROUTINE_hikari$api$rest$$$function__68_fetch_guild_emojis$$$coroutine__1_fetch_guild_emojis();


static PyObject *MAKE_COROUTINE_hikari$api$rest$$$function__69_create_emoji$$$coroutine__1_create_emoji();


static PyObject *MAKE_COROUTINE_hikari$api$rest$$$function__70_edit_emoji$$$coroutine__1_edit_emoji();


static PyObject *MAKE_COROUTINE_hikari$api$rest$$$function__71_delete_emoji$$$coroutine__1_delete_emoji();


static PyObject *MAKE_COROUTINE_hikari$api$rest$$$function__72_fetch_available_sticker_packs$$$coroutine__1_fetch_available_sticker_packs();


static PyObject *MAKE_COROUTINE_hikari$api$rest$$$function__73_fetch_sticker$$$coroutine__1_fetch_sticker();


static PyObject *MAKE_COROUTINE_hikari$api$rest$$$function__74_fetch_guild_stickers$$$coroutine__1_fetch_guild_stickers();


static PyObject *MAKE_COROUTINE_hikari$api$rest$$$function__75_fetch_guild_sticker$$$coroutine__1_fetch_guild_sticker();


static PyObject *MAKE_COROUTINE_hikari$api$rest$$$function__76_create_sticker$$$coroutine__1_create_sticker();


static PyObject *MAKE_COROUTINE_hikari$api$rest$$$function__77_edit_sticker$$$coroutine__1_edit_sticker();


static PyObject *MAKE_COROUTINE_hikari$api$rest$$$function__78_delete_sticker$$$coroutine__1_delete_sticker();


static PyObject *MAKE_COROUTINE_hikari$api$rest$$$function__80_fetch_guild$$$coroutine__1_fetch_guild();


static PyObject *MAKE_COROUTINE_hikari$api$rest$$$function__81_fetch_guild_preview$$$coroutine__1_fetch_guild_preview();


static PyObject *MAKE_COROUTINE_hikari$api$rest$$$function__82_edit_guild$$$coroutine__1_edit_guild();


static PyObject *MAKE_COROUTINE_hikari$api$rest$$$function__83_delete_guild$$$coroutine__1_delete_guild();


static PyObject *MAKE_COROUTINE_hikari$api$rest$$$function__84_fetch_guild_channels$$$coroutine__1_fetch_guild_channels();


static PyObject *MAKE_COROUTINE_hikari$api$rest$$$function__85_create_guild_text_channel$$$coroutine__1_create_guild_text_channel();


static PyObject *MAKE_COROUTINE_hikari$api$rest$$$function__86_create_guild_news_channel$$$coroutine__1_create_guild_news_channel();


static PyObject *MAKE_COROUTINE_hikari$api$rest$$$function__87_create_guild_voice_channel$$$coroutine__1_create_guild_voice_channel();


static PyObject *MAKE_COROUTINE_hikari$api$rest$$$function__88_create_guild_stage_channel$$$coroutine__1_create_guild_stage_channel();


static PyObject *MAKE_COROUTINE_hikari$api$rest$$$function__89_create_guild_category$$$coroutine__1_create_guild_category();


static PyObject *MAKE_COROUTINE_hikari$api$rest$$$function__90_reposition_channels$$$coroutine__1_reposition_channels();


static PyObject *MAKE_COROUTINE_hikari$api$rest$$$function__91_fetch_member$$$coroutine__1_fetch_member();


static PyObject *MAKE_COROUTINE_hikari$api$rest$$$function__93_fetch_my_member$$$coroutine__1_fetch_my_member();


static PyObject *MAKE_COROUTINE_hikari$api$rest$$$function__94_search_members$$$coroutine__1_search_members();


static PyObject *MAKE_COROUTINE_hikari$api$rest$$$function__95_edit_member$$$coroutine__1_edit_member();


static PyObject *MAKE_COROUTINE_hikari$api$rest$$$function__96_edit_my_member$$$coroutine__1_edit_my_member();


static PyObject *MAKE_COROUTINE_hikari$api$rest$$$function__97_edit_my_nick$$$coroutine__1_edit_my_nick();


static PyObject *MAKE_COROUTINE_hikari$api$rest$$$function__98_add_role_to_member$$$coroutine__1_add_role_to_member();


static PyObject *MAKE_COROUTINE_hikari$api$rest$$$function__99_remove_role_from_member$$$coroutine__1_remove_role_from_member();


static PyObject *MAKE_COROUTINE_hikari$api$rest$$$function__100_kick_user$$$coroutine__1_kick_user();


static PyObject *MAKE_COROUTINE_hikari$api$rest$$$function__101_kick_member$$$coroutine__1_kick_member();


static PyObject *MAKE_COROUTINE_hikari$api$rest$$$function__102_ban_user$$$coroutine__1_ban_user();


static PyObject *MAKE_COROUTINE_hikari$api$rest$$$function__103_ban_member$$$coroutine__1_ban_member();


static PyObject *MAKE_COROUTINE_hikari$api$rest$$$function__104_unban_user$$$coroutine__1_unban_user();


static PyObject *MAKE_COROUTINE_hikari$api$rest$$$function__105_unban_member$$$coroutine__1_unban_member();


static PyObject *MAKE_COROUTINE_hikari$api$rest$$$function__106_fetch_ban$$$coroutine__1_fetch_ban();


static PyObject *MAKE_COROUTINE_hikari$api$rest$$$function__107_fetch_bans$$$coroutine__1_fetch_bans();


static PyObject *MAKE_COROUTINE_hikari$api$rest$$$function__108_fetch_roles$$$coroutine__1_fetch_roles();


static PyObject *MAKE_COROUTINE_hikari$api$rest$$$function__109_create_role$$$coroutine__1_create_role();


static PyObject *MAKE_COROUTINE_hikari$api$rest$$$function__110_reposition_roles$$$coroutine__1_reposition_roles();


static PyObject *MAKE_COROUTINE_hikari$api$rest$$$function__111_edit_role$$$coroutine__1_edit_role();


static PyObject *MAKE_COROUTINE_hikari$api$rest$$$function__112_delete_role$$$coroutine__1_delete_role();


static PyObject *MAKE_COROUTINE_hikari$api$rest$$$function__113_estimate_guild_prune_count$$$coroutine__1_estimate_guild_prune_count();


static PyObject *MAKE_COROUTINE_hikari$api$rest$$$function__114_begin_guild_prune$$$coroutine__1_begin_guild_prune();


static PyObject *MAKE_COROUTINE_hikari$api$rest$$$function__115_fetch_guild_voice_regions$$$coroutine__1_fetch_guild_voice_regions();


static PyObject *MAKE_COROUTINE_hikari$api$rest$$$function__116_fetch_guild_invites$$$coroutine__1_fetch_guild_invites();


static PyObject *MAKE_COROUTINE_hikari$api$rest$$$function__117_fetch_integrations$$$coroutine__1_fetch_integrations();


static PyObject *MAKE_COROUTINE_hikari$api$rest$$$function__118_fetch_widget$$$coroutine__1_fetch_widget();


static PyObject *MAKE_COROUTINE_hikari$api$rest$$$function__119_edit_widget$$$coroutine__1_edit_widget();


static PyObject *MAKE_COROUTINE_hikari$api$rest$$$function__120_fetch_welcome_screen$$$coroutine__1_fetch_welcome_screen();


static PyObject *MAKE_COROUTINE_hikari$api$rest$$$function__121_edit_welcome_screen$$$coroutine__1_edit_welcome_screen();


static PyObject *MAKE_COROUTINE_hikari$api$rest$$$function__122_fetch_vanity_url$$$coroutine__1_fetch_vanity_url();


static PyObject *MAKE_COROUTINE_hikari$api$rest$$$function__123_create_template$$$coroutine__1_create_template();


static PyObject *MAKE_COROUTINE_hikari$api$rest$$$function__124_create_guild_from_template$$$coroutine__1_create_guild_from_template();


static PyObject *MAKE_COROUTINE_hikari$api$rest$$$function__125_delete_template$$$coroutine__1_delete_template();


static PyObject *MAKE_COROUTINE_hikari$api$rest$$$function__126_edit_template$$$coroutine__1_edit_template();


static PyObject *MAKE_COROUTINE_hikari$api$rest$$$function__127_fetch_template$$$coroutine__1_fetch_template();


static PyObject *MAKE_COROUTINE_hikari$api$rest$$$function__128_fetch_guild_templates$$$coroutine__1_fetch_guild_templates();


static PyObject *MAKE_COROUTINE_hikari$api$rest$$$function__129_sync_guild_template$$$coroutine__1_sync_guild_template();


static PyObject *MAKE_COROUTINE_hikari$api$rest$$$function__133_fetch_application_command$$$coroutine__1_fetch_application_command();


static PyObject *MAKE_COROUTINE_hikari$api$rest$$$function__134_fetch_application_commands$$$coroutine__1_fetch_application_commands();


static PyObject *MAKE_COROUTINE_hikari$api$rest$$$function__135_create_application_command$$$coroutine__1_create_application_command();


static PyObject *MAKE_COROUTINE_hikari$api$rest$$$function__136_create_slash_command$$$coroutine__1_create_slash_command();


static PyObject *MAKE_COROUTINE_hikari$api$rest$$$function__137_create_context_menu_command$$$coroutine__1_create_context_menu_command();


static PyObject *MAKE_COROUTINE_hikari$api$rest$$$function__138_set_application_commands$$$coroutine__1_set_application_commands();


static PyObject *MAKE_COROUTINE_hikari$api$rest$$$function__139_edit_application_command$$$coroutine__1_edit_application_command();


static PyObject *MAKE_COROUTINE_hikari$api$rest$$$function__140_delete_application_command$$$coroutine__1_delete_application_command();


static PyObject *MAKE_COROUTINE_hikari$api$rest$$$function__141_fetch_application_guild_commands_permissions$$$coroutine__1_fetch_application_guild_commands_permissions();


static PyObject *MAKE_COROUTINE_hikari$api$rest$$$function__142_fetch_application_command_permissions$$$coroutine__1_fetch_application_command_permissions();


static PyObject *MAKE_COROUTINE_hikari$api$rest$$$function__143_set_application_guild_commands_permissions$$$coroutine__1_set_application_guild_commands_permissions();


static PyObject *MAKE_COROUTINE_hikari$api$rest$$$function__144_set_application_command_permissions$$$coroutine__1_set_application_command_permissions();


static PyObject *MAKE_COROUTINE_hikari$api$rest$$$function__148_fetch_interaction_response$$$coroutine__1_fetch_interaction_response();


static PyObject *MAKE_COROUTINE_hikari$api$rest$$$function__149_create_interaction_response$$$coroutine__1_create_interaction_response();


static PyObject *MAKE_COROUTINE_hikari$api$rest$$$function__150_edit_interaction_response$$$coroutine__1_edit_interaction_response();


static PyObject *MAKE_COROUTINE_hikari$api$rest$$$function__151_delete_interaction_response$$$coroutine__1_delete_interaction_response();


static PyObject *MAKE_COROUTINE_hikari$api$rest$$$function__152_create_autocomplete_response$$$coroutine__1_create_autocomplete_response();


static PyObject *MAKE_COROUTINE_hikari$api$rest$$$function__154_fetch_scheduled_event$$$coroutine__1_fetch_scheduled_event();


static PyObject *MAKE_COROUTINE_hikari$api$rest$$$function__155_fetch_scheduled_events$$$coroutine__1_fetch_scheduled_events();


static PyObject *MAKE_COROUTINE_hikari$api$rest$$$function__156_create_stage_event$$$coroutine__1_create_stage_event();


static PyObject *MAKE_COROUTINE_hikari$api$rest$$$function__157_create_voice_event$$$coroutine__1_create_voice_event();


static PyObject *MAKE_COROUTINE_hikari$api$rest$$$function__158_create_external_event$$$coroutine__1_create_external_event();


static PyObject *MAKE_COROUTINE_hikari$api$rest$$$function__159_edit_scheduled_event$$$coroutine__1_edit_scheduled_event();


static PyObject *MAKE_COROUTINE_hikari$api$rest$$$function__160_delete_scheduled_event$$$coroutine__1_delete_scheduled_event();


NUITKA_CROSS_MODULE PyObject *impl___main__$$$function__4__mro_entries_conversion(PyObject **python_pars);


static PyObject *MAKE_FUNCTION_hikari$api$rest$$$function__100_kick_user(PyObject *kw_defaults, PyObject *annotations);


static PyObject *MAKE_FUNCTION_hikari$api$rest$$$function__101_kick_member(PyObject *kw_defaults, PyObject *annotations);


static PyObject *MAKE_FUNCTION_hikari$api$rest$$$function__102_ban_user(PyObject *kw_defaults, PyObject *annotations);


static PyObject *MAKE_FUNCTION_hikari$api$rest$$$function__103_ban_member(PyObject *kw_defaults, PyObject *annotations);


static PyObject *MAKE_FUNCTION_hikari$api$rest$$$function__104_unban_user(PyObject *kw_defaults, PyObject *annotations);


static PyObject *MAKE_FUNCTION_hikari$api$rest$$$function__105_unban_member(PyObject *kw_defaults, PyObject *annotations);


static PyObject *MAKE_FUNCTION_hikari$api$rest$$$function__106_fetch_ban(PyObject *annotations);


static PyObject *MAKE_FUNCTION_hikari$api$rest$$$function__107_fetch_bans(PyObject *annotations);


static PyObject *MAKE_FUNCTION_hikari$api$rest$$$function__108_fetch_roles(PyObject *annotations);


static PyObject *MAKE_FUNCTION_hikari$api$rest$$$function__109_create_role(PyObject *kw_defaults, PyObject *annotations);


static PyObject *MAKE_FUNCTION_hikari$api$rest$$$function__10_follow_channel(PyObject *annotations);


static PyObject *MAKE_FUNCTION_hikari$api$rest$$$function__110_reposition_roles(PyObject *annotations);


static PyObject *MAKE_FUNCTION_hikari$api$rest$$$function__111_edit_role(PyObject *kw_defaults, PyObject *annotations);


static PyObject *MAKE_FUNCTION_hikari$api$rest$$$function__112_delete_role(PyObject *annotations);


static PyObject *MAKE_FUNCTION_hikari$api$rest$$$function__113_estimate_guild_prune_count(PyObject *kw_defaults, PyObject *annotations);


static PyObject *MAKE_FUNCTION_hikari$api$rest$$$function__114_begin_guild_prune(PyObject *kw_defaults, PyObject *annotations);


static PyObject *MAKE_FUNCTION_hikari$api$rest$$$function__115_fetch_guild_voice_regions(PyObject *annotations);


static PyObject *MAKE_FUNCTION_hikari$api$rest$$$function__116_fetch_guild_invites(PyObject *annotations);


static PyObject *MAKE_FUNCTION_hikari$api$rest$$$function__117_fetch_integrations(PyObject *annotations);


static PyObject *MAKE_FUNCTION_hikari$api$rest$$$function__118_fetch_widget(PyObject *annotations);


static PyObject *MAKE_FUNCTION_hikari$api$rest$$$function__119_edit_widget(PyObject *kw_defaults, PyObject *annotations);


static PyObject *MAKE_FUNCTION_hikari$api$rest$$$function__11_delete_channel(PyObject *annotations);


static PyObject *MAKE_FUNCTION_hikari$api$rest$$$function__120_fetch_welcome_screen(PyObject *annotations);


static PyObject *MAKE_FUNCTION_hikari$api$rest$$$function__121_edit_welcome_screen(PyObject *kw_defaults, PyObject *annotations);


static PyObject *MAKE_FUNCTION_hikari$api$rest$$$function__122_fetch_vanity_url(PyObject *annotations);


static PyObject *MAKE_FUNCTION_hikari$api$rest$$$function__123_create_template(PyObject *kw_defaults, PyObject *annotations);


static PyObject *MAKE_FUNCTION_hikari$api$rest$$$function__124_create_guild_from_template(PyObject *kw_defaults, PyObject *annotations);


static PyObject *MAKE_FUNCTION_hikari$api$rest$$$function__125_delete_template(PyObject *annotations);


static PyObject *MAKE_FUNCTION_hikari$api$rest$$$function__126_edit_template(PyObject *kw_defaults, PyObject *annotations);


static PyObject *MAKE_FUNCTION_hikari$api$rest$$$function__127_fetch_template(PyObject *annotations);


static PyObject *MAKE_FUNCTION_hikari$api$rest$$$function__128_fetch_guild_templates(PyObject *annotations);


static PyObject *MAKE_FUNCTION_hikari$api$rest$$$function__129_sync_guild_template(PyObject *annotations);


static PyObject *MAKE_FUNCTION_hikari$api$rest$$$function__12_edit_my_voice_state(PyObject *kw_defaults, PyObject *annotations);


static PyObject *MAKE_FUNCTION_hikari$api$rest$$$function__130_command_builder(PyObject *annotations);


static PyObject *MAKE_FUNCTION_hikari$api$rest$$$function__131_slash_command_builder(PyObject *annotations);


static PyObject *MAKE_FUNCTION_hikari$api$rest$$$function__132_context_menu_command_builder(PyObject *annotations);


static PyObject *MAKE_FUNCTION_hikari$api$rest$$$function__133_fetch_application_command(PyObject *defaults, PyObject *annotations);


static PyObject *MAKE_FUNCTION_hikari$api$rest$$$function__134_fetch_application_commands(PyObject *defaults, PyObject *annotations);


static PyObject *MAKE_FUNCTION_hikari$api$rest$$$function__135_create_application_command(PyObject *defaults, PyObject *kw_defaults, PyObject *annotations);


static PyObject *MAKE_FUNCTION_hikari$api$rest$$$function__136_create_slash_command(PyObject *kw_defaults, PyObject *annotations);


static PyObject *MAKE_FUNCTION_hikari$api$rest$$$function__137_create_context_menu_command(PyObject *kw_defaults, PyObject *annotations);


static PyObject *MAKE_FUNCTION_hikari$api$rest$$$function__138_set_application_commands(PyObject *defaults, PyObject *annotations);


static PyObject *MAKE_FUNCTION_hikari$api$rest$$$function__139_edit_application_command(PyObject *defaults, PyObject *kw_defaults, PyObject *annotations);


static PyObject *MAKE_FUNCTION_hikari$api$rest$$$function__13_edit_voice_state(PyObject *kw_defaults, PyObject *annotations);


static PyObject *MAKE_FUNCTION_hikari$api$rest$$$function__140_delete_application_command(PyObject *defaults, PyObject *annotations);


static PyObject *MAKE_FUNCTION_hikari$api$rest$$$function__141_fetch_application_guild_commands_permissions(PyObject *annotations);


static PyObject *MAKE_FUNCTION_hikari$api$rest$$$function__142_fetch_application_command_permissions(PyObject *annotations);


static PyObject *MAKE_FUNCTION_hikari$api$rest$$$function__143_set_application_guild_commands_permissions(PyObject *annotations);


static PyObject *MAKE_FUNCTION_hikari$api$rest$$$function__144_set_application_command_permissions(PyObject *annotations);


static PyObject *MAKE_FUNCTION_hikari$api$rest$$$function__145_interaction_deferred_builder(PyObject *annotations);


static PyObject *MAKE_FUNCTION_hikari$api$rest$$$function__146_interaction_autocomplete_builder(PyObject *annotations);


static PyObject *MAKE_FUNCTION_hikari$api$rest$$$function__147_interaction_message_builder(PyObject *annotations);


static PyObject *MAKE_FUNCTION_hikari$api$rest$$$function__148_fetch_interaction_response(PyObject *annotations);


static PyObject *MAKE_FUNCTION_hikari$api$rest$$$function__149_create_interaction_response(PyObject *defaults, PyObject *kw_defaults, PyObject *annotations);


static PyObject *MAKE_FUNCTION_hikari$api$rest$$$function__14_edit_permission_overwrites(PyObject *kw_defaults, PyObject *annotations);


static PyObject *MAKE_FUNCTION_hikari$api$rest$$$function__150_edit_interaction_response(PyObject *defaults, PyObject *kw_defaults, PyObject *annotations);


static PyObject *MAKE_FUNCTION_hikari$api$rest$$$function__151_delete_interaction_response(PyObject *annotations);


static PyObject *MAKE_FUNCTION_hikari$api$rest$$$function__152_create_autocomplete_response(PyObject *annotations);


static PyObject *MAKE_FUNCTION_hikari$api$rest$$$function__153_build_action_row(PyObject *annotations);


static PyObject *MAKE_FUNCTION_hikari$api$rest$$$function__154_fetch_scheduled_event(PyObject *annotations);


static PyObject *MAKE_FUNCTION_hikari$api$rest$$$function__155_fetch_scheduled_events(PyObject *annotations);


static PyObject *MAKE_FUNCTION_hikari$api$rest$$$function__156_create_stage_event(PyObject *kw_defaults, PyObject *annotations);


static PyObject *MAKE_FUNCTION_hikari$api$rest$$$function__157_create_voice_event(PyObject *kw_defaults, PyObject *annotations);


static PyObject *MAKE_FUNCTION_hikari$api$rest$$$function__158_create_external_event(PyObject *kw_defaults, PyObject *annotations);


static PyObject *MAKE_FUNCTION_hikari$api$rest$$$function__159_edit_scheduled_event(PyObject *kw_defaults, PyObject *annotations);


static PyObject *MAKE_FUNCTION_hikari$api$rest$$$function__15_edit_permission_overwrites(PyObject *kw_defaults, PyObject *annotations);


static PyObject *MAKE_FUNCTION_hikari$api$rest$$$function__160_delete_scheduled_event(PyObject *annotations);


static PyObject *MAKE_FUNCTION_hikari$api$rest$$$function__161_fetch_scheduled_event_users(PyObject *kw_defaults, PyObject *annotations);


static PyObject *MAKE_FUNCTION_hikari$api$rest$$$function__16_edit_permission_overwrites(PyObject *kw_defaults, PyObject *annotations);


static PyObject *MAKE_FUNCTION_hikari$api$rest$$$function__17_delete_permission_overwrite(PyObject *annotations);


static PyObject *MAKE_FUNCTION_hikari$api$rest$$$function__18_fetch_channel_invites(PyObject *annotations);


static PyObject *MAKE_FUNCTION_hikari$api$rest$$$function__19_create_invite(PyObject *kw_defaults, PyObject *annotations);


static PyObject *MAKE_FUNCTION_hikari$api$rest$$$function__1_token_type(PyObject *annotations);


static PyObject *MAKE_FUNCTION_hikari$api$rest$$$function__20_trigger_typing(PyObject *annotations);


static PyObject *MAKE_FUNCTION_hikari$api$rest$$$function__21_fetch_pins(PyObject *annotations);


static PyObject *MAKE_FUNCTION_hikari$api$rest$$$function__22_pin_message(PyObject *annotations);


static PyObject *MAKE_FUNCTION_hikari$api$rest$$$function__23_unpin_message(PyObject *annotations);


static PyObject *MAKE_FUNCTION_hikari$api$rest$$$function__24_fetch_messages(PyObject *kw_defaults, PyObject *annotations);


static PyObject *MAKE_FUNCTION_hikari$api$rest$$$function__25_fetch_message(PyObject *annotations);


static PyObject *MAKE_FUNCTION_hikari$api$rest$$$function__26_create_message(PyObject *defaults, PyObject *kw_defaults, PyObject *annotations);


static PyObject *MAKE_FUNCTION_hikari$api$rest$$$function__27_crosspost_message(PyObject *annotations);


static PyObject *MAKE_FUNCTION_hikari$api$rest$$$function__28_edit_message(PyObject *defaults, PyObject *kw_defaults, PyObject *annotations);


static PyObject *MAKE_FUNCTION_hikari$api$rest$$$function__29_delete_message(PyObject *annotations);


static PyObject *MAKE_FUNCTION_hikari$api$rest$$$function__2_acquire(PyObject *annotations);


static PyObject *MAKE_FUNCTION_hikari$api$rest$$$function__30_delete_messages(PyObject *annotations);


static PyObject *MAKE_FUNCTION_hikari$api$rest$$$function__31_add_reaction(PyObject *defaults, PyObject *annotations);


static PyObject *MAKE_FUNCTION_hikari$api$rest$$$function__32_delete_my_reaction(PyObject *defaults, PyObject *annotations);


static PyObject *MAKE_FUNCTION_hikari$api$rest$$$function__33_delete_all_reactions_for_emoji(PyObject *defaults, PyObject *annotations);


static PyObject *MAKE_FUNCTION_hikari$api$rest$$$function__34_delete_reaction(PyObject *defaults, PyObject *annotations);


static PyObject *MAKE_FUNCTION_hikari$api$rest$$$function__35_delete_all_reactions(PyObject *annotations);


static PyObject *MAKE_FUNCTION_hikari$api$rest$$$function__36_fetch_reactions_for_emoji(PyObject *defaults, PyObject *annotations);


static PyObject *MAKE_FUNCTION_hikari$api$rest$$$function__37_create_webhook(PyObject *kw_defaults, PyObject *annotations);


static PyObject *MAKE_FUNCTION_hikari$api$rest$$$function__38_fetch_webhook(PyObject *kw_defaults, PyObject *annotations);


static PyObject *MAKE_FUNCTION_hikari$api$rest$$$function__39_fetch_channel_webhooks(PyObject *annotations);


static PyObject *MAKE_FUNCTION_hikari$api$rest$$$function__3_invalidate(PyObject *annotations);


static PyObject *MAKE_FUNCTION_hikari$api$rest$$$function__40_fetch_guild_webhooks(PyObject *annotations);


static PyObject *MAKE_FUNCTION_hikari$api$rest$$$function__41_edit_webhook(PyObject *kw_defaults, PyObject *annotations);


static PyObject *MAKE_FUNCTION_hikari$api$rest$$$function__42_delete_webhook(PyObject *kw_defaults, PyObject *annotations);


static PyObject *MAKE_FUNCTION_hikari$api$rest$$$function__43_execute_webhook(PyObject *defaults, PyObject *kw_defaults, PyObject *annotations);


static PyObject *MAKE_FUNCTION_hikari$api$rest$$$function__44_fetch_webhook_message(PyObject *annotations);


static PyObject *MAKE_FUNCTION_hikari$api$rest$$$function__45_edit_webhook_message(PyObject *defaults, PyObject *kw_defaults, PyObject *annotations);


static PyObject *MAKE_FUNCTION_hikari$api$rest$$$function__46_delete_webhook_message(PyObject *annotations);


static PyObject *MAKE_FUNCTION_hikari$api$rest$$$function__47_fetch_gateway_url(PyObject *annotations);


static PyObject *MAKE_FUNCTION_hikari$api$rest$$$function__48_fetch_gateway_bot_info(PyObject *annotations);


static PyObject *MAKE_FUNCTION_hikari$api$rest$$$function__49_fetch_invite(PyObject *annotations);


static PyObject *MAKE_FUNCTION_hikari$api$rest$$$function__4_is_alive(PyObject *annotations);


static PyObject *MAKE_FUNCTION_hikari$api$rest$$$function__50_delete_invite(PyObject *annotations);


static PyObject *MAKE_FUNCTION_hikari$api$rest$$$function__51_fetch_my_user(PyObject *annotations);


static PyObject *MAKE_FUNCTION_hikari$api$rest$$$function__52_edit_my_user(PyObject *kw_defaults, PyObject *annotations);


static PyObject *MAKE_FUNCTION_hikari$api$rest$$$function__53_fetch_my_connections(PyObject *annotations);


static PyObject *MAKE_FUNCTION_hikari$api$rest$$$function__54_fetch_my_guilds(PyObject *kw_defaults, PyObject *annotations);


static PyObject *MAKE_FUNCTION_hikari$api$rest$$$function__55_leave_guild(PyObject *annotations);


static PyObject *MAKE_FUNCTION_hikari$api$rest$$$function__56_create_dm_channel(PyObject *annotations);


static PyObject *MAKE_FUNCTION_hikari$api$rest$$$function__57_fetch_application(PyObject *annotations);


static PyObject *MAKE_FUNCTION_hikari$api$rest$$$function__58_fetch_authorization(PyObject *annotations);


static PyObject *MAKE_FUNCTION_hikari$api$rest$$$function__59_authorize_client_credentials_token(PyObject *annotations);


static PyObject *MAKE_FUNCTION_hikari$api$rest$$$function__5_entity_factory(PyObject *annotations);


static PyObject *MAKE_FUNCTION_hikari$api$rest$$$function__60_authorize_access_token(PyObject *annotations);


static PyObject *MAKE_FUNCTION_hikari$api$rest$$$function__61_refresh_access_token(PyObject *kw_defaults, PyObject *annotations);


static PyObject *MAKE_FUNCTION_hikari$api$rest$$$function__62_revoke_access_token(PyObject *annotations);


static PyObject *MAKE_FUNCTION_hikari$api$rest$$$function__63_add_user_to_guild(PyObject *kw_defaults, PyObject *annotations);


static PyObject *MAKE_FUNCTION_hikari$api$rest$$$function__64_fetch_voice_regions(PyObject *annotations);


static PyObject *MAKE_FUNCTION_hikari$api$rest$$$function__65_fetch_user(PyObject *annotations);


static PyObject *MAKE_FUNCTION_hikari$api$rest$$$function__66_fetch_audit_log(PyObject *kw_defaults, PyObject *annotations);


static PyObject *MAKE_FUNCTION_hikari$api$rest$$$function__67_fetch_emoji(PyObject *annotations);


static PyObject *MAKE_FUNCTION_hikari$api$rest$$$function__68_fetch_guild_emojis(PyObject *annotations);


static PyObject *MAKE_FUNCTION_hikari$api$rest$$$function__69_create_emoji(PyObject *kw_defaults, PyObject *annotations);


static PyObject *MAKE_FUNCTION_hikari$api$rest$$$function__6_token_type(PyObject *annotations);


static PyObject *MAKE_FUNCTION_hikari$api$rest$$$function__70_edit_emoji(PyObject *kw_defaults, PyObject *annotations);


static PyObject *MAKE_FUNCTION_hikari$api$rest$$$function__71_delete_emoji(PyObject *kw_defaults, PyObject *annotations);


static PyObject *MAKE_FUNCTION_hikari$api$rest$$$function__72_fetch_available_sticker_packs(PyObject *annotations);


static PyObject *MAKE_FUNCTION_hikari$api$rest$$$function__73_fetch_sticker(PyObject *annotations);


static PyObject *MAKE_FUNCTION_hikari$api$rest$$$function__74_fetch_guild_stickers(PyObject *annotations);


static PyObject *MAKE_FUNCTION_hikari$api$rest$$$function__75_fetch_guild_sticker(PyObject *annotations);


static PyObject *MAKE_FUNCTION_hikari$api$rest$$$function__76_create_sticker(PyObject *kw_defaults, PyObject *annotations);


static PyObject *MAKE_FUNCTION_hikari$api$rest$$$function__77_edit_sticker(PyObject *kw_defaults, PyObject *annotations);


static PyObject *MAKE_FUNCTION_hikari$api$rest$$$function__78_delete_sticker(PyObject *kw_defaults, PyObject *annotations);


static PyObject *MAKE_FUNCTION_hikari$api$rest$$$function__79_guild_builder(PyObject *annotations);


static PyObject *MAKE_FUNCTION_hikari$api$rest$$$function__7_close(PyObject *annotations);


static PyObject *MAKE_FUNCTION_hikari$api$rest$$$function__80_fetch_guild(PyObject *annotations);


static PyObject *MAKE_FUNCTION_hikari$api$rest$$$function__81_fetch_guild_preview(PyObject *annotations);


static PyObject *MAKE_FUNCTION_hikari$api$rest$$$function__82_edit_guild(PyObject *kw_defaults, PyObject *annotations);


static PyObject *MAKE_FUNCTION_hikari$api$rest$$$function__83_delete_guild(PyObject *annotations);


static PyObject *MAKE_FUNCTION_hikari$api$rest$$$function__84_fetch_guild_channels(PyObject *annotations);


static PyObject *MAKE_FUNCTION_hikari$api$rest$$$function__85_create_guild_text_channel(PyObject *kw_defaults, PyObject *annotations);


static PyObject *MAKE_FUNCTION_hikari$api$rest$$$function__86_create_guild_news_channel(PyObject *kw_defaults, PyObject *annotations);


static PyObject *MAKE_FUNCTION_hikari$api$rest$$$function__87_create_guild_voice_channel(PyObject *kw_defaults, PyObject *annotations);


static PyObject *MAKE_FUNCTION_hikari$api$rest$$$function__88_create_guild_stage_channel(PyObject *kw_defaults, PyObject *annotations);


static PyObject *MAKE_FUNCTION_hikari$api$rest$$$function__89_create_guild_category(PyObject *kw_defaults, PyObject *annotations);


static PyObject *MAKE_FUNCTION_hikari$api$rest$$$function__8_fetch_channel(PyObject *annotations);


static PyObject *MAKE_FUNCTION_hikari$api$rest$$$function__90_reposition_channels(PyObject *annotations);


static PyObject *MAKE_FUNCTION_hikari$api$rest$$$function__91_fetch_member(PyObject *annotations);


static PyObject *MAKE_FUNCTION_hikari$api$rest$$$function__92_fetch_members(PyObject *annotations);


static PyObject *MAKE_FUNCTION_hikari$api$rest$$$function__93_fetch_my_member(PyObject *annotations);


static PyObject *MAKE_FUNCTION_hikari$api$rest$$$function__94_search_members(PyObject *annotations);


static PyObject *MAKE_FUNCTION_hikari$api$rest$$$function__95_edit_member(PyObject *kw_defaults, PyObject *annotations);


static PyObject *MAKE_FUNCTION_hikari$api$rest$$$function__96_edit_my_member(PyObject *kw_defaults, PyObject *annotations);


static PyObject *MAKE_FUNCTION_hikari$api$rest$$$function__97_edit_my_nick(PyObject *kw_defaults, PyObject *annotations);


static PyObject *MAKE_FUNCTION_hikari$api$rest$$$function__98_add_role_to_member(PyObject *kw_defaults, PyObject *annotations);


static PyObject *MAKE_FUNCTION_hikari$api$rest$$$function__99_remove_role_from_member(PyObject *kw_defaults, PyObject *annotations);


static PyObject *MAKE_FUNCTION_hikari$api$rest$$$function__9_edit_channel(PyObject *kw_defaults, PyObject *annotations);


// The module function definitions.
static PyObject *impl_hikari$api$rest$$$function__2_acquire(struct Nuitka_FunctionObject const *self, PyObject **python_pars) {
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_self = python_pars[0];
    PyObject *par_client = python_pars[1];
    PyObject *tmp_return_value = NULL;

    // Actual function body.


    tmp_return_value = MAKE_COROUTINE_hikari$api$rest$$$function__2_acquire$$$coroutine__1_acquire();

    goto function_return_exit;

    NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
    return NULL;


function_return_exit:
   // Function cleanup code if any.
    CHECK_OBJECT(par_self);
    Py_DECREF(par_self);
    CHECK_OBJECT(par_client);
    Py_DECREF(par_client);

   // Actual function exit with return value, making sure we did not make
   // the error status worse despite non-NULL return.
   CHECK_OBJECT(tmp_return_value);
   assert(had_error || !ERROR_OCCURRED());
   return tmp_return_value;
}



struct hikari$api$rest$$$function__2_acquire$$$coroutine__1_acquire_locals {
    PyObject *tmp_return_value;
};

static PyObject *hikari$api$rest$$$function__2_acquire$$$coroutine__1_acquire_context(struct Nuitka_CoroutineObject *coroutine, PyObject *yield_return_value) {
    CHECK_OBJECT(coroutine);
    assert(Nuitka_Coroutine_Check((PyObject *)coroutine));

    // Heap access if used.
    struct hikari$api$rest$$$function__2_acquire$$$coroutine__1_acquire_locals *coroutine_heap = (struct hikari$api$rest$$$function__2_acquire$$$coroutine__1_acquire_locals *)coroutine->m_heap_storage;

    // Dispatch to yield based on return label index:


    // Local variable initialization
    coroutine_heap->tmp_return_value = NULL;

    // Actual coroutine body.
    coroutine_heap->tmp_return_value = Py_None;
    Py_INCREF(coroutine_heap->tmp_return_value);
    goto function_return_exit;

    NUITKA_CANNOT_GET_HERE("Return statement must be present");


    return NULL;
    function_return_exit:;

    coroutine->m_returned = coroutine_heap->tmp_return_value;

    return NULL;

}

static PyObject *MAKE_COROUTINE_hikari$api$rest$$$function__2_acquire$$$coroutine__1_acquire() {
    return Nuitka_Coroutine_New(
        hikari$api$rest$$$function__2_acquire$$$coroutine__1_acquire_context,
        module_hikari$api$rest,
        mod_consts[1],
        mod_consts[2],
        codeobj_a3b66de07a5a56caeac07c4f5f6b2072,
        NULL,
        0,
        sizeof(struct hikari$api$rest$$$function__2_acquire$$$coroutine__1_acquire_locals)
    );
}


static PyObject *impl_hikari$api$rest$$$function__7_close(struct Nuitka_FunctionObject const *self, PyObject **python_pars) {
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_self = python_pars[0];
    PyObject *tmp_return_value = NULL;

    // Actual function body.


    tmp_return_value = MAKE_COROUTINE_hikari$api$rest$$$function__7_close$$$coroutine__1_close();

    goto function_return_exit;

    NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
    return NULL;


function_return_exit:
   // Function cleanup code if any.
    CHECK_OBJECT(par_self);
    Py_DECREF(par_self);

   // Actual function exit with return value, making sure we did not make
   // the error status worse despite non-NULL return.
   CHECK_OBJECT(tmp_return_value);
   assert(had_error || !ERROR_OCCURRED());
   return tmp_return_value;
}



struct hikari$api$rest$$$function__7_close$$$coroutine__1_close_locals {
    PyObject *tmp_return_value;
};

static PyObject *hikari$api$rest$$$function__7_close$$$coroutine__1_close_context(struct Nuitka_CoroutineObject *coroutine, PyObject *yield_return_value) {
    CHECK_OBJECT(coroutine);
    assert(Nuitka_Coroutine_Check((PyObject *)coroutine));

    // Heap access if used.
    struct hikari$api$rest$$$function__7_close$$$coroutine__1_close_locals *coroutine_heap = (struct hikari$api$rest$$$function__7_close$$$coroutine__1_close_locals *)coroutine->m_heap_storage;

    // Dispatch to yield based on return label index:


    // Local variable initialization
    coroutine_heap->tmp_return_value = NULL;

    // Actual coroutine body.
    coroutine_heap->tmp_return_value = Py_None;
    Py_INCREF(coroutine_heap->tmp_return_value);
    goto function_return_exit;

    NUITKA_CANNOT_GET_HERE("Return statement must be present");


    return NULL;
    function_return_exit:;

    coroutine->m_returned = coroutine_heap->tmp_return_value;

    return NULL;

}

static PyObject *MAKE_COROUTINE_hikari$api$rest$$$function__7_close$$$coroutine__1_close() {
    return Nuitka_Coroutine_New(
        hikari$api$rest$$$function__7_close$$$coroutine__1_close_context,
        module_hikari$api$rest,
        mod_consts[4],
        mod_consts[5],
        codeobj_db4161e2ae125e244e16b35b876d55a6,
        NULL,
        0,
        sizeof(struct hikari$api$rest$$$function__7_close$$$coroutine__1_close_locals)
    );
}


static PyObject *impl_hikari$api$rest$$$function__8_fetch_channel(struct Nuitka_FunctionObject const *self, PyObject **python_pars) {
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_self = python_pars[0];
    PyObject *par_channel = python_pars[1];
    PyObject *tmp_return_value = NULL;

    // Actual function body.


    tmp_return_value = MAKE_COROUTINE_hikari$api$rest$$$function__8_fetch_channel$$$coroutine__1_fetch_channel();

    goto function_return_exit;

    NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
    return NULL;


function_return_exit:
   // Function cleanup code if any.
    CHECK_OBJECT(par_self);
    Py_DECREF(par_self);
    CHECK_OBJECT(par_channel);
    Py_DECREF(par_channel);

   // Actual function exit with return value, making sure we did not make
   // the error status worse despite non-NULL return.
   CHECK_OBJECT(tmp_return_value);
   assert(had_error || !ERROR_OCCURRED());
   return tmp_return_value;
}



struct hikari$api$rest$$$function__8_fetch_channel$$$coroutine__1_fetch_channel_locals {
    PyObject *tmp_return_value;
};

static PyObject *hikari$api$rest$$$function__8_fetch_channel$$$coroutine__1_fetch_channel_context(struct Nuitka_CoroutineObject *coroutine, PyObject *yield_return_value) {
    CHECK_OBJECT(coroutine);
    assert(Nuitka_Coroutine_Check((PyObject *)coroutine));

    // Heap access if used.
    struct hikari$api$rest$$$function__8_fetch_channel$$$coroutine__1_fetch_channel_locals *coroutine_heap = (struct hikari$api$rest$$$function__8_fetch_channel$$$coroutine__1_fetch_channel_locals *)coroutine->m_heap_storage;

    // Dispatch to yield based on return label index:


    // Local variable initialization
    coroutine_heap->tmp_return_value = NULL;

    // Actual coroutine body.
    coroutine_heap->tmp_return_value = Py_None;
    Py_INCREF(coroutine_heap->tmp_return_value);
    goto function_return_exit;

    NUITKA_CANNOT_GET_HERE("Return statement must be present");


    return NULL;
    function_return_exit:;

    coroutine->m_returned = coroutine_heap->tmp_return_value;

    return NULL;

}

static PyObject *MAKE_COROUTINE_hikari$api$rest$$$function__8_fetch_channel$$$coroutine__1_fetch_channel() {
    return Nuitka_Coroutine_New(
        hikari$api$rest$$$function__8_fetch_channel$$$coroutine__1_fetch_channel_context,
        module_hikari$api$rest,
        mod_consts[7],
        mod_consts[8],
        codeobj_b717f6be8a19f27f2c33558c9a709ffe,
        NULL,
        0,
        sizeof(struct hikari$api$rest$$$function__8_fetch_channel$$$coroutine__1_fetch_channel_locals)
    );
}


static PyObject *impl_hikari$api$rest$$$function__9_edit_channel(struct Nuitka_FunctionObject const *self, PyObject **python_pars) {
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_self = python_pars[0];
    PyObject *par_channel = python_pars[1];
    PyObject *par_name = python_pars[2];
    PyObject *par_position = python_pars[3];
    PyObject *par_topic = python_pars[4];
    PyObject *par_nsfw = python_pars[5];
    PyObject *par_bitrate = python_pars[6];
    PyObject *par_video_quality_mode = python_pars[7];
    PyObject *par_user_limit = python_pars[8];
    PyObject *par_rate_limit_per_user = python_pars[9];
    PyObject *par_region = python_pars[10];
    PyObject *par_permission_overwrites = python_pars[11];
    PyObject *par_parent_category = python_pars[12];
    PyObject *par_reason = python_pars[13];
    PyObject *tmp_return_value = NULL;

    // Actual function body.


    tmp_return_value = MAKE_COROUTINE_hikari$api$rest$$$function__9_edit_channel$$$coroutine__1_edit_channel();

    goto function_return_exit;

    NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
    return NULL;


function_return_exit:
   // Function cleanup code if any.
    CHECK_OBJECT(par_self);
    Py_DECREF(par_self);
    CHECK_OBJECT(par_channel);
    Py_DECREF(par_channel);
    CHECK_OBJECT(par_name);
    Py_DECREF(par_name);
    CHECK_OBJECT(par_position);
    Py_DECREF(par_position);
    CHECK_OBJECT(par_topic);
    Py_DECREF(par_topic);
    CHECK_OBJECT(par_nsfw);
    Py_DECREF(par_nsfw);
    CHECK_OBJECT(par_bitrate);
    Py_DECREF(par_bitrate);
    CHECK_OBJECT(par_video_quality_mode);
    Py_DECREF(par_video_quality_mode);
    CHECK_OBJECT(par_user_limit);
    Py_DECREF(par_user_limit);
    CHECK_OBJECT(par_rate_limit_per_user);
    Py_DECREF(par_rate_limit_per_user);
    CHECK_OBJECT(par_region);
    Py_DECREF(par_region);
    CHECK_OBJECT(par_permission_overwrites);
    Py_DECREF(par_permission_overwrites);
    CHECK_OBJECT(par_parent_category);
    Py_DECREF(par_parent_category);
    CHECK_OBJECT(par_reason);
    Py_DECREF(par_reason);

   // Actual function exit with return value, making sure we did not make
   // the error status worse despite non-NULL return.
   CHECK_OBJECT(tmp_return_value);
   assert(had_error || !ERROR_OCCURRED());
   return tmp_return_value;
}



struct hikari$api$rest$$$function__9_edit_channel$$$coroutine__1_edit_channel_locals {
    PyObject *tmp_return_value;
};

static PyObject *hikari$api$rest$$$function__9_edit_channel$$$coroutine__1_edit_channel_context(struct Nuitka_CoroutineObject *coroutine, PyObject *yield_return_value) {
    CHECK_OBJECT(coroutine);
    assert(Nuitka_Coroutine_Check((PyObject *)coroutine));

    // Heap access if used.
    struct hikari$api$rest$$$function__9_edit_channel$$$coroutine__1_edit_channel_locals *coroutine_heap = (struct hikari$api$rest$$$function__9_edit_channel$$$coroutine__1_edit_channel_locals *)coroutine->m_heap_storage;

    // Dispatch to yield based on return label index:


    // Local variable initialization
    coroutine_heap->tmp_return_value = NULL;

    // Actual coroutine body.
    coroutine_heap->tmp_return_value = Py_None;
    Py_INCREF(coroutine_heap->tmp_return_value);
    goto function_return_exit;

    NUITKA_CANNOT_GET_HERE("Return statement must be present");


    return NULL;
    function_return_exit:;

    coroutine->m_returned = coroutine_heap->tmp_return_value;

    return NULL;

}

static PyObject *MAKE_COROUTINE_hikari$api$rest$$$function__9_edit_channel$$$coroutine__1_edit_channel() {
    return Nuitka_Coroutine_New(
        hikari$api$rest$$$function__9_edit_channel$$$coroutine__1_edit_channel_context,
        module_hikari$api$rest,
        mod_consts[10],
        mod_consts[11],
        codeobj_dddd995be6c3c59c8e1d62868bffbbbf,
        NULL,
        0,
        sizeof(struct hikari$api$rest$$$function__9_edit_channel$$$coroutine__1_edit_channel_locals)
    );
}


static PyObject *impl_hikari$api$rest$$$function__10_follow_channel(struct Nuitka_FunctionObject const *self, PyObject **python_pars) {
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_self = python_pars[0];
    PyObject *par_news_channel = python_pars[1];
    PyObject *par_target_channel = python_pars[2];
    PyObject *tmp_return_value = NULL;

    // Actual function body.


    tmp_return_value = MAKE_COROUTINE_hikari$api$rest$$$function__10_follow_channel$$$coroutine__1_follow_channel();

    goto function_return_exit;

    NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
    return NULL;


function_return_exit:
   // Function cleanup code if any.
    CHECK_OBJECT(par_self);
    Py_DECREF(par_self);
    CHECK_OBJECT(par_news_channel);
    Py_DECREF(par_news_channel);
    CHECK_OBJECT(par_target_channel);
    Py_DECREF(par_target_channel);

   // Actual function exit with return value, making sure we did not make
   // the error status worse despite non-NULL return.
   CHECK_OBJECT(tmp_return_value);
   assert(had_error || !ERROR_OCCURRED());
   return tmp_return_value;
}



struct hikari$api$rest$$$function__10_follow_channel$$$coroutine__1_follow_channel_locals {
    PyObject *tmp_return_value;
};

static PyObject *hikari$api$rest$$$function__10_follow_channel$$$coroutine__1_follow_channel_context(struct Nuitka_CoroutineObject *coroutine, PyObject *yield_return_value) {
    CHECK_OBJECT(coroutine);
    assert(Nuitka_Coroutine_Check((PyObject *)coroutine));

    // Heap access if used.
    struct hikari$api$rest$$$function__10_follow_channel$$$coroutine__1_follow_channel_locals *coroutine_heap = (struct hikari$api$rest$$$function__10_follow_channel$$$coroutine__1_follow_channel_locals *)coroutine->m_heap_storage;

    // Dispatch to yield based on return label index:


    // Local variable initialization
    coroutine_heap->tmp_return_value = NULL;

    // Actual coroutine body.
    coroutine_heap->tmp_return_value = Py_None;
    Py_INCREF(coroutine_heap->tmp_return_value);
    goto function_return_exit;

    NUITKA_CANNOT_GET_HERE("Return statement must be present");


    return NULL;
    function_return_exit:;

    coroutine->m_returned = coroutine_heap->tmp_return_value;

    return NULL;

}

static PyObject *MAKE_COROUTINE_hikari$api$rest$$$function__10_follow_channel$$$coroutine__1_follow_channel() {
    return Nuitka_Coroutine_New(
        hikari$api$rest$$$function__10_follow_channel$$$coroutine__1_follow_channel_context,
        module_hikari$api$rest,
        mod_consts[13],
        mod_consts[14],
        codeobj_e6971230dc348ac59f39bdf0cd231da8,
        NULL,
        0,
        sizeof(struct hikari$api$rest$$$function__10_follow_channel$$$coroutine__1_follow_channel_locals)
    );
}


static PyObject *impl_hikari$api$rest$$$function__11_delete_channel(struct Nuitka_FunctionObject const *self, PyObject **python_pars) {
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_self = python_pars[0];
    PyObject *par_channel = python_pars[1];
    PyObject *tmp_return_value = NULL;

    // Actual function body.


    tmp_return_value = MAKE_COROUTINE_hikari$api$rest$$$function__11_delete_channel$$$coroutine__1_delete_channel();

    goto function_return_exit;

    NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
    return NULL;


function_return_exit:
   // Function cleanup code if any.
    CHECK_OBJECT(par_self);
    Py_DECREF(par_self);
    CHECK_OBJECT(par_channel);
    Py_DECREF(par_channel);

   // Actual function exit with return value, making sure we did not make
   // the error status worse despite non-NULL return.
   CHECK_OBJECT(tmp_return_value);
   assert(had_error || !ERROR_OCCURRED());
   return tmp_return_value;
}



struct hikari$api$rest$$$function__11_delete_channel$$$coroutine__1_delete_channel_locals {
    PyObject *tmp_return_value;
};

static PyObject *hikari$api$rest$$$function__11_delete_channel$$$coroutine__1_delete_channel_context(struct Nuitka_CoroutineObject *coroutine, PyObject *yield_return_value) {
    CHECK_OBJECT(coroutine);
    assert(Nuitka_Coroutine_Check((PyObject *)coroutine));

    // Heap access if used.
    struct hikari$api$rest$$$function__11_delete_channel$$$coroutine__1_delete_channel_locals *coroutine_heap = (struct hikari$api$rest$$$function__11_delete_channel$$$coroutine__1_delete_channel_locals *)coroutine->m_heap_storage;

    // Dispatch to yield based on return label index:


    // Local variable initialization
    coroutine_heap->tmp_return_value = NULL;

    // Actual coroutine body.
    coroutine_heap->tmp_return_value = Py_None;
    Py_INCREF(coroutine_heap->tmp_return_value);
    goto function_return_exit;

    NUITKA_CANNOT_GET_HERE("Return statement must be present");


    return NULL;
    function_return_exit:;

    coroutine->m_returned = coroutine_heap->tmp_return_value;

    return NULL;

}

static PyObject *MAKE_COROUTINE_hikari$api$rest$$$function__11_delete_channel$$$coroutine__1_delete_channel() {
    return Nuitka_Coroutine_New(
        hikari$api$rest$$$function__11_delete_channel$$$coroutine__1_delete_channel_context,
        module_hikari$api$rest,
        mod_consts[16],
        mod_consts[17],
        codeobj_191f810972cc4fc165bd3f760134ec02,
        NULL,
        0,
        sizeof(struct hikari$api$rest$$$function__11_delete_channel$$$coroutine__1_delete_channel_locals)
    );
}


static PyObject *impl_hikari$api$rest$$$function__12_edit_my_voice_state(struct Nuitka_FunctionObject const *self, PyObject **python_pars) {
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_self = python_pars[0];
    PyObject *par_guild = python_pars[1];
    PyObject *par_channel = python_pars[2];
    PyObject *par_suppress = python_pars[3];
    PyObject *par_request_to_speak = python_pars[4];
    PyObject *tmp_return_value = NULL;

    // Actual function body.


    tmp_return_value = MAKE_COROUTINE_hikari$api$rest$$$function__12_edit_my_voice_state$$$coroutine__1_edit_my_voice_state();

    goto function_return_exit;

    NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
    return NULL;


function_return_exit:
   // Function cleanup code if any.
    CHECK_OBJECT(par_self);
    Py_DECREF(par_self);
    CHECK_OBJECT(par_guild);
    Py_DECREF(par_guild);
    CHECK_OBJECT(par_channel);
    Py_DECREF(par_channel);
    CHECK_OBJECT(par_suppress);
    Py_DECREF(par_suppress);
    CHECK_OBJECT(par_request_to_speak);
    Py_DECREF(par_request_to_speak);

   // Actual function exit with return value, making sure we did not make
   // the error status worse despite non-NULL return.
   CHECK_OBJECT(tmp_return_value);
   assert(had_error || !ERROR_OCCURRED());
   return tmp_return_value;
}



struct hikari$api$rest$$$function__12_edit_my_voice_state$$$coroutine__1_edit_my_voice_state_locals {
    PyObject *tmp_return_value;
};

static PyObject *hikari$api$rest$$$function__12_edit_my_voice_state$$$coroutine__1_edit_my_voice_state_context(struct Nuitka_CoroutineObject *coroutine, PyObject *yield_return_value) {
    CHECK_OBJECT(coroutine);
    assert(Nuitka_Coroutine_Check((PyObject *)coroutine));

    // Heap access if used.
    struct hikari$api$rest$$$function__12_edit_my_voice_state$$$coroutine__1_edit_my_voice_state_locals *coroutine_heap = (struct hikari$api$rest$$$function__12_edit_my_voice_state$$$coroutine__1_edit_my_voice_state_locals *)coroutine->m_heap_storage;

    // Dispatch to yield based on return label index:


    // Local variable initialization
    coroutine_heap->tmp_return_value = NULL;

    // Actual coroutine body.
    coroutine_heap->tmp_return_value = Py_None;
    Py_INCREF(coroutine_heap->tmp_return_value);
    goto function_return_exit;

    NUITKA_CANNOT_GET_HERE("Return statement must be present");


    return NULL;
    function_return_exit:;

    coroutine->m_returned = coroutine_heap->tmp_return_value;

    return NULL;

}

static PyObject *MAKE_COROUTINE_hikari$api$rest$$$function__12_edit_my_voice_state$$$coroutine__1_edit_my_voice_state() {
    return Nuitka_Coroutine_New(
        hikari$api$rest$$$function__12_edit_my_voice_state$$$coroutine__1_edit_my_voice_state_context,
        module_hikari$api$rest,
        mod_consts[19],
        mod_consts[20],
        codeobj_6d7a8ac8b3cc128aa461e10c7269212c,
        NULL,
        0,
        sizeof(struct hikari$api$rest$$$function__12_edit_my_voice_state$$$coroutine__1_edit_my_voice_state_locals)
    );
}


static PyObject *impl_hikari$api$rest$$$function__13_edit_voice_state(struct Nuitka_FunctionObject const *self, PyObject **python_pars) {
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_self = python_pars[0];
    PyObject *par_guild = python_pars[1];
    PyObject *par_channel = python_pars[2];
    PyObject *par_user = python_pars[3];
    PyObject *par_suppress = python_pars[4];
    PyObject *tmp_return_value = NULL;

    // Actual function body.


    tmp_return_value = MAKE_COROUTINE_hikari$api$rest$$$function__13_edit_voice_state$$$coroutine__1_edit_voice_state();

    goto function_return_exit;

    NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
    return NULL;


function_return_exit:
   // Function cleanup code if any.
    CHECK_OBJECT(par_self);
    Py_DECREF(par_self);
    CHECK_OBJECT(par_guild);
    Py_DECREF(par_guild);
    CHECK_OBJECT(par_channel);
    Py_DECREF(par_channel);
    CHECK_OBJECT(par_user);
    Py_DECREF(par_user);
    CHECK_OBJECT(par_suppress);
    Py_DECREF(par_suppress);

   // Actual function exit with return value, making sure we did not make
   // the error status worse despite non-NULL return.
   CHECK_OBJECT(tmp_return_value);
   assert(had_error || !ERROR_OCCURRED());
   return tmp_return_value;
}



struct hikari$api$rest$$$function__13_edit_voice_state$$$coroutine__1_edit_voice_state_locals {
    PyObject *tmp_return_value;
};

static PyObject *hikari$api$rest$$$function__13_edit_voice_state$$$coroutine__1_edit_voice_state_context(struct Nuitka_CoroutineObject *coroutine, PyObject *yield_return_value) {
    CHECK_OBJECT(coroutine);
    assert(Nuitka_Coroutine_Check((PyObject *)coroutine));

    // Heap access if used.
    struct hikari$api$rest$$$function__13_edit_voice_state$$$coroutine__1_edit_voice_state_locals *coroutine_heap = (struct hikari$api$rest$$$function__13_edit_voice_state$$$coroutine__1_edit_voice_state_locals *)coroutine->m_heap_storage;

    // Dispatch to yield based on return label index:


    // Local variable initialization
    coroutine_heap->tmp_return_value = NULL;

    // Actual coroutine body.
    coroutine_heap->tmp_return_value = Py_None;
    Py_INCREF(coroutine_heap->tmp_return_value);
    goto function_return_exit;

    NUITKA_CANNOT_GET_HERE("Return statement must be present");


    return NULL;
    function_return_exit:;

    coroutine->m_returned = coroutine_heap->tmp_return_value;

    return NULL;

}

static PyObject *MAKE_COROUTINE_hikari$api$rest$$$function__13_edit_voice_state$$$coroutine__1_edit_voice_state() {
    return Nuitka_Coroutine_New(
        hikari$api$rest$$$function__13_edit_voice_state$$$coroutine__1_edit_voice_state_context,
        module_hikari$api$rest,
        mod_consts[22],
        mod_consts[23],
        codeobj_66f4c634fd3531c33dfb8e9b2827d550,
        NULL,
        0,
        sizeof(struct hikari$api$rest$$$function__13_edit_voice_state$$$coroutine__1_edit_voice_state_locals)
    );
}


static PyObject *impl_hikari$api$rest$$$function__14_edit_permission_overwrites(struct Nuitka_FunctionObject const *self, PyObject **python_pars) {
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_self = python_pars[0];
    PyObject *par_channel = python_pars[1];
    PyObject *par_target = python_pars[2];
    PyObject *par_allow = python_pars[3];
    PyObject *par_deny = python_pars[4];
    PyObject *par_reason = python_pars[5];
    PyObject *tmp_return_value = NULL;

    // Actual function body.


    tmp_return_value = MAKE_COROUTINE_hikari$api$rest$$$function__14_edit_permission_overwrites$$$coroutine__1_edit_permission_overwrites();

    goto function_return_exit;

    NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
    return NULL;


function_return_exit:
   // Function cleanup code if any.
    CHECK_OBJECT(par_self);
    Py_DECREF(par_self);
    CHECK_OBJECT(par_channel);
    Py_DECREF(par_channel);
    CHECK_OBJECT(par_target);
    Py_DECREF(par_target);
    CHECK_OBJECT(par_allow);
    Py_DECREF(par_allow);
    CHECK_OBJECT(par_deny);
    Py_DECREF(par_deny);
    CHECK_OBJECT(par_reason);
    Py_DECREF(par_reason);

   // Actual function exit with return value, making sure we did not make
   // the error status worse despite non-NULL return.
   CHECK_OBJECT(tmp_return_value);
   assert(had_error || !ERROR_OCCURRED());
   return tmp_return_value;
}



struct hikari$api$rest$$$function__14_edit_permission_overwrites$$$coroutine__1_edit_permission_overwrites_locals {
    PyObject *tmp_return_value;
};

static PyObject *hikari$api$rest$$$function__14_edit_permission_overwrites$$$coroutine__1_edit_permission_overwrites_context(struct Nuitka_CoroutineObject *coroutine, PyObject *yield_return_value) {
    CHECK_OBJECT(coroutine);
    assert(Nuitka_Coroutine_Check((PyObject *)coroutine));

    // Heap access if used.
    struct hikari$api$rest$$$function__14_edit_permission_overwrites$$$coroutine__1_edit_permission_overwrites_locals *coroutine_heap = (struct hikari$api$rest$$$function__14_edit_permission_overwrites$$$coroutine__1_edit_permission_overwrites_locals *)coroutine->m_heap_storage;

    // Dispatch to yield based on return label index:


    // Local variable initialization
    coroutine_heap->tmp_return_value = NULL;

    // Actual coroutine body.
    coroutine_heap->tmp_return_value = Py_None;
    Py_INCREF(coroutine_heap->tmp_return_value);
    goto function_return_exit;

    NUITKA_CANNOT_GET_HERE("Return statement must be present");


    return NULL;
    function_return_exit:;

    coroutine->m_returned = coroutine_heap->tmp_return_value;

    return NULL;

}

static PyObject *MAKE_COROUTINE_hikari$api$rest$$$function__14_edit_permission_overwrites$$$coroutine__1_edit_permission_overwrites() {
    return Nuitka_Coroutine_New(
        hikari$api$rest$$$function__14_edit_permission_overwrites$$$coroutine__1_edit_permission_overwrites_context,
        module_hikari$api$rest,
        mod_consts[25],
        mod_consts[26],
        codeobj_15ce8a3d530670d458af7373cf6fbb19,
        NULL,
        0,
        sizeof(struct hikari$api$rest$$$function__14_edit_permission_overwrites$$$coroutine__1_edit_permission_overwrites_locals)
    );
}


static PyObject *impl_hikari$api$rest$$$function__15_edit_permission_overwrites(struct Nuitka_FunctionObject const *self, PyObject **python_pars) {
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_self = python_pars[0];
    PyObject *par_channel = python_pars[1];
    PyObject *par_target = python_pars[2];
    PyObject *par_target_type = python_pars[3];
    PyObject *par_allow = python_pars[4];
    PyObject *par_deny = python_pars[5];
    PyObject *par_reason = python_pars[6];
    PyObject *tmp_return_value = NULL;

    // Actual function body.


    tmp_return_value = MAKE_COROUTINE_hikari$api$rest$$$function__15_edit_permission_overwrites$$$coroutine__1_edit_permission_overwrites();

    goto function_return_exit;

    NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
    return NULL;


function_return_exit:
   // Function cleanup code if any.
    CHECK_OBJECT(par_self);
    Py_DECREF(par_self);
    CHECK_OBJECT(par_channel);
    Py_DECREF(par_channel);
    CHECK_OBJECT(par_target);
    Py_DECREF(par_target);
    CHECK_OBJECT(par_target_type);
    Py_DECREF(par_target_type);
    CHECK_OBJECT(par_allow);
    Py_DECREF(par_allow);
    CHECK_OBJECT(par_deny);
    Py_DECREF(par_deny);
    CHECK_OBJECT(par_reason);
    Py_DECREF(par_reason);

   // Actual function exit with return value, making sure we did not make
   // the error status worse despite non-NULL return.
   CHECK_OBJECT(tmp_return_value);
   assert(had_error || !ERROR_OCCURRED());
   return tmp_return_value;
}



struct hikari$api$rest$$$function__15_edit_permission_overwrites$$$coroutine__1_edit_permission_overwrites_locals {
    PyObject *tmp_return_value;
};

static PyObject *hikari$api$rest$$$function__15_edit_permission_overwrites$$$coroutine__1_edit_permission_overwrites_context(struct Nuitka_CoroutineObject *coroutine, PyObject *yield_return_value) {
    CHECK_OBJECT(coroutine);
    assert(Nuitka_Coroutine_Check((PyObject *)coroutine));

    // Heap access if used.
    struct hikari$api$rest$$$function__15_edit_permission_overwrites$$$coroutine__1_edit_permission_overwrites_locals *coroutine_heap = (struct hikari$api$rest$$$function__15_edit_permission_overwrites$$$coroutine__1_edit_permission_overwrites_locals *)coroutine->m_heap_storage;

    // Dispatch to yield based on return label index:


    // Local variable initialization
    coroutine_heap->tmp_return_value = NULL;

    // Actual coroutine body.
    coroutine_heap->tmp_return_value = Py_None;
    Py_INCREF(coroutine_heap->tmp_return_value);
    goto function_return_exit;

    NUITKA_CANNOT_GET_HERE("Return statement must be present");


    return NULL;
    function_return_exit:;

    coroutine->m_returned = coroutine_heap->tmp_return_value;

    return NULL;

}

static PyObject *MAKE_COROUTINE_hikari$api$rest$$$function__15_edit_permission_overwrites$$$coroutine__1_edit_permission_overwrites() {
    return Nuitka_Coroutine_New(
        hikari$api$rest$$$function__15_edit_permission_overwrites$$$coroutine__1_edit_permission_overwrites_context,
        module_hikari$api$rest,
        mod_consts[25],
        mod_consts[26],
        codeobj_d07e6291bdc309dd83bfdf05d0bf6f71,
        NULL,
        0,
        sizeof(struct hikari$api$rest$$$function__15_edit_permission_overwrites$$$coroutine__1_edit_permission_overwrites_locals)
    );
}


static PyObject *impl_hikari$api$rest$$$function__16_edit_permission_overwrites(struct Nuitka_FunctionObject const *self, PyObject **python_pars) {
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_self = python_pars[0];
    PyObject *par_channel = python_pars[1];
    PyObject *par_target = python_pars[2];
    PyObject *par_target_type = python_pars[3];
    PyObject *par_allow = python_pars[4];
    PyObject *par_deny = python_pars[5];
    PyObject *par_reason = python_pars[6];
    PyObject *tmp_return_value = NULL;

    // Actual function body.


    tmp_return_value = MAKE_COROUTINE_hikari$api$rest$$$function__16_edit_permission_overwrites$$$coroutine__1_edit_permission_overwrites();

    goto function_return_exit;

    NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
    return NULL;


function_return_exit:
   // Function cleanup code if any.
    CHECK_OBJECT(par_self);
    Py_DECREF(par_self);
    CHECK_OBJECT(par_channel);
    Py_DECREF(par_channel);
    CHECK_OBJECT(par_target);
    Py_DECREF(par_target);
    CHECK_OBJECT(par_target_type);
    Py_DECREF(par_target_type);
    CHECK_OBJECT(par_allow);
    Py_DECREF(par_allow);
    CHECK_OBJECT(par_deny);
    Py_DECREF(par_deny);
    CHECK_OBJECT(par_reason);
    Py_DECREF(par_reason);

   // Actual function exit with return value, making sure we did not make
   // the error status worse despite non-NULL return.
   CHECK_OBJECT(tmp_return_value);
   assert(had_error || !ERROR_OCCURRED());
   return tmp_return_value;
}



struct hikari$api$rest$$$function__16_edit_permission_overwrites$$$coroutine__1_edit_permission_overwrites_locals {
    PyObject *tmp_return_value;
};

static PyObject *hikari$api$rest$$$function__16_edit_permission_overwrites$$$coroutine__1_edit_permission_overwrites_context(struct Nuitka_CoroutineObject *coroutine, PyObject *yield_return_value) {
    CHECK_OBJECT(coroutine);
    assert(Nuitka_Coroutine_Check((PyObject *)coroutine));

    // Heap access if used.
    struct hikari$api$rest$$$function__16_edit_permission_overwrites$$$coroutine__1_edit_permission_overwrites_locals *coroutine_heap = (struct hikari$api$rest$$$function__16_edit_permission_overwrites$$$coroutine__1_edit_permission_overwrites_locals *)coroutine->m_heap_storage;

    // Dispatch to yield based on return label index:


    // Local variable initialization
    coroutine_heap->tmp_return_value = NULL;

    // Actual coroutine body.
    coroutine_heap->tmp_return_value = Py_None;
    Py_INCREF(coroutine_heap->tmp_return_value);
    goto function_return_exit;

    NUITKA_CANNOT_GET_HERE("Return statement must be present");


    return NULL;
    function_return_exit:;

    coroutine->m_returned = coroutine_heap->tmp_return_value;

    return NULL;

}

static PyObject *MAKE_COROUTINE_hikari$api$rest$$$function__16_edit_permission_overwrites$$$coroutine__1_edit_permission_overwrites() {
    return Nuitka_Coroutine_New(
        hikari$api$rest$$$function__16_edit_permission_overwrites$$$coroutine__1_edit_permission_overwrites_context,
        module_hikari$api$rest,
        mod_consts[25],
        mod_consts[26],
        codeobj_b123d3753856d90ff010c7d7665460f7,
        NULL,
        0,
        sizeof(struct hikari$api$rest$$$function__16_edit_permission_overwrites$$$coroutine__1_edit_permission_overwrites_locals)
    );
}


static PyObject *impl_hikari$api$rest$$$function__17_delete_permission_overwrite(struct Nuitka_FunctionObject const *self, PyObject **python_pars) {
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_self = python_pars[0];
    PyObject *par_channel = python_pars[1];
    PyObject *par_target = python_pars[2];
    PyObject *tmp_return_value = NULL;

    // Actual function body.


    tmp_return_value = MAKE_COROUTINE_hikari$api$rest$$$function__17_delete_permission_overwrite$$$coroutine__1_delete_permission_overwrite();

    goto function_return_exit;

    NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
    return NULL;


function_return_exit:
   // Function cleanup code if any.
    CHECK_OBJECT(par_self);
    Py_DECREF(par_self);
    CHECK_OBJECT(par_channel);
    Py_DECREF(par_channel);
    CHECK_OBJECT(par_target);
    Py_DECREF(par_target);

   // Actual function exit with return value, making sure we did not make
   // the error status worse despite non-NULL return.
   CHECK_OBJECT(tmp_return_value);
   assert(had_error || !ERROR_OCCURRED());
   return tmp_return_value;
}



struct hikari$api$rest$$$function__17_delete_permission_overwrite$$$coroutine__1_delete_permission_overwrite_locals {
    PyObject *tmp_return_value;
};

static PyObject *hikari$api$rest$$$function__17_delete_permission_overwrite$$$coroutine__1_delete_permission_overwrite_context(struct Nuitka_CoroutineObject *coroutine, PyObject *yield_return_value) {
    CHECK_OBJECT(coroutine);
    assert(Nuitka_Coroutine_Check((PyObject *)coroutine));

    // Heap access if used.
    struct hikari$api$rest$$$function__17_delete_permission_overwrite$$$coroutine__1_delete_permission_overwrite_locals *coroutine_heap = (struct hikari$api$rest$$$function__17_delete_permission_overwrite$$$coroutine__1_delete_permission_overwrite_locals *)coroutine->m_heap_storage;

    // Dispatch to yield based on return label index:


    // Local variable initialization
    coroutine_heap->tmp_return_value = NULL;

    // Actual coroutine body.
    coroutine_heap->tmp_return_value = Py_None;
    Py_INCREF(coroutine_heap->tmp_return_value);
    goto function_return_exit;

    NUITKA_CANNOT_GET_HERE("Return statement must be present");


    return NULL;
    function_return_exit:;

    coroutine->m_returned = coroutine_heap->tmp_return_value;

    return NULL;

}

static PyObject *MAKE_COROUTINE_hikari$api$rest$$$function__17_delete_permission_overwrite$$$coroutine__1_delete_permission_overwrite() {
    return Nuitka_Coroutine_New(
        hikari$api$rest$$$function__17_delete_permission_overwrite$$$coroutine__1_delete_permission_overwrite_context,
        module_hikari$api$rest,
        mod_consts[30],
        mod_consts[31],
        codeobj_c1e059673a38603153eaa38eae37353a,
        NULL,
        0,
        sizeof(struct hikari$api$rest$$$function__17_delete_permission_overwrite$$$coroutine__1_delete_permission_overwrite_locals)
    );
}


static PyObject *impl_hikari$api$rest$$$function__18_fetch_channel_invites(struct Nuitka_FunctionObject const *self, PyObject **python_pars) {
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_self = python_pars[0];
    PyObject *par_channel = python_pars[1];
    PyObject *tmp_return_value = NULL;

    // Actual function body.


    tmp_return_value = MAKE_COROUTINE_hikari$api$rest$$$function__18_fetch_channel_invites$$$coroutine__1_fetch_channel_invites();

    goto function_return_exit;

    NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
    return NULL;


function_return_exit:
   // Function cleanup code if any.
    CHECK_OBJECT(par_self);
    Py_DECREF(par_self);
    CHECK_OBJECT(par_channel);
    Py_DECREF(par_channel);

   // Actual function exit with return value, making sure we did not make
   // the error status worse despite non-NULL return.
   CHECK_OBJECT(tmp_return_value);
   assert(had_error || !ERROR_OCCURRED());
   return tmp_return_value;
}



struct hikari$api$rest$$$function__18_fetch_channel_invites$$$coroutine__1_fetch_channel_invites_locals {
    PyObject *tmp_return_value;
};

static PyObject *hikari$api$rest$$$function__18_fetch_channel_invites$$$coroutine__1_fetch_channel_invites_context(struct Nuitka_CoroutineObject *coroutine, PyObject *yield_return_value) {
    CHECK_OBJECT(coroutine);
    assert(Nuitka_Coroutine_Check((PyObject *)coroutine));

    // Heap access if used.
    struct hikari$api$rest$$$function__18_fetch_channel_invites$$$coroutine__1_fetch_channel_invites_locals *coroutine_heap = (struct hikari$api$rest$$$function__18_fetch_channel_invites$$$coroutine__1_fetch_channel_invites_locals *)coroutine->m_heap_storage;

    // Dispatch to yield based on return label index:


    // Local variable initialization
    coroutine_heap->tmp_return_value = NULL;

    // Actual coroutine body.
    coroutine_heap->tmp_return_value = Py_None;
    Py_INCREF(coroutine_heap->tmp_return_value);
    goto function_return_exit;

    NUITKA_CANNOT_GET_HERE("Return statement must be present");


    return NULL;
    function_return_exit:;

    coroutine->m_returned = coroutine_heap->tmp_return_value;

    return NULL;

}

static PyObject *MAKE_COROUTINE_hikari$api$rest$$$function__18_fetch_channel_invites$$$coroutine__1_fetch_channel_invites() {
    return Nuitka_Coroutine_New(
        hikari$api$rest$$$function__18_fetch_channel_invites$$$coroutine__1_fetch_channel_invites_context,
        module_hikari$api$rest,
        mod_consts[33],
        mod_consts[34],
        codeobj_892d739b78730b5f9d943817bbcf335c,
        NULL,
        0,
        sizeof(struct hikari$api$rest$$$function__18_fetch_channel_invites$$$coroutine__1_fetch_channel_invites_locals)
    );
}


static PyObject *impl_hikari$api$rest$$$function__19_create_invite(struct Nuitka_FunctionObject const *self, PyObject **python_pars) {
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_self = python_pars[0];
    PyObject *par_channel = python_pars[1];
    PyObject *par_max_age = python_pars[2];
    PyObject *par_max_uses = python_pars[3];
    PyObject *par_temporary = python_pars[4];
    PyObject *par_unique = python_pars[5];
    PyObject *par_target_type = python_pars[6];
    PyObject *par_target_user = python_pars[7];
    PyObject *par_target_application = python_pars[8];
    PyObject *par_reason = python_pars[9];
    PyObject *tmp_return_value = NULL;

    // Actual function body.


    tmp_return_value = MAKE_COROUTINE_hikari$api$rest$$$function__19_create_invite$$$coroutine__1_create_invite();

    goto function_return_exit;

    NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
    return NULL;


function_return_exit:
   // Function cleanup code if any.
    CHECK_OBJECT(par_self);
    Py_DECREF(par_self);
    CHECK_OBJECT(par_channel);
    Py_DECREF(par_channel);
    CHECK_OBJECT(par_max_age);
    Py_DECREF(par_max_age);
    CHECK_OBJECT(par_max_uses);
    Py_DECREF(par_max_uses);
    CHECK_OBJECT(par_temporary);
    Py_DECREF(par_temporary);
    CHECK_OBJECT(par_unique);
    Py_DECREF(par_unique);
    CHECK_OBJECT(par_target_type);
    Py_DECREF(par_target_type);
    CHECK_OBJECT(par_target_user);
    Py_DECREF(par_target_user);
    CHECK_OBJECT(par_target_application);
    Py_DECREF(par_target_application);
    CHECK_OBJECT(par_reason);
    Py_DECREF(par_reason);

   // Actual function exit with return value, making sure we did not make
   // the error status worse despite non-NULL return.
   CHECK_OBJECT(tmp_return_value);
   assert(had_error || !ERROR_OCCURRED());
   return tmp_return_value;
}



struct hikari$api$rest$$$function__19_create_invite$$$coroutine__1_create_invite_locals {
    PyObject *tmp_return_value;
};

static PyObject *hikari$api$rest$$$function__19_create_invite$$$coroutine__1_create_invite_context(struct Nuitka_CoroutineObject *coroutine, PyObject *yield_return_value) {
    CHECK_OBJECT(coroutine);
    assert(Nuitka_Coroutine_Check((PyObject *)coroutine));

    // Heap access if used.
    struct hikari$api$rest$$$function__19_create_invite$$$coroutine__1_create_invite_locals *coroutine_heap = (struct hikari$api$rest$$$function__19_create_invite$$$coroutine__1_create_invite_locals *)coroutine->m_heap_storage;

    // Dispatch to yield based on return label index:


    // Local variable initialization
    coroutine_heap->tmp_return_value = NULL;

    // Actual coroutine body.
    coroutine_heap->tmp_return_value = Py_None;
    Py_INCREF(coroutine_heap->tmp_return_value);
    goto function_return_exit;

    NUITKA_CANNOT_GET_HERE("Return statement must be present");


    return NULL;
    function_return_exit:;

    coroutine->m_returned = coroutine_heap->tmp_return_value;

    return NULL;

}

static PyObject *MAKE_COROUTINE_hikari$api$rest$$$function__19_create_invite$$$coroutine__1_create_invite() {
    return Nuitka_Coroutine_New(
        hikari$api$rest$$$function__19_create_invite$$$coroutine__1_create_invite_context,
        module_hikari$api$rest,
        mod_consts[36],
        mod_consts[37],
        codeobj_767f83eeec40354df8c763fa4489d51f,
        NULL,
        0,
        sizeof(struct hikari$api$rest$$$function__19_create_invite$$$coroutine__1_create_invite_locals)
    );
}


static PyObject *impl_hikari$api$rest$$$function__21_fetch_pins(struct Nuitka_FunctionObject const *self, PyObject **python_pars) {
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_self = python_pars[0];
    PyObject *par_channel = python_pars[1];
    PyObject *tmp_return_value = NULL;

    // Actual function body.


    tmp_return_value = MAKE_COROUTINE_hikari$api$rest$$$function__21_fetch_pins$$$coroutine__1_fetch_pins();

    goto function_return_exit;

    NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
    return NULL;


function_return_exit:
   // Function cleanup code if any.
    CHECK_OBJECT(par_self);
    Py_DECREF(par_self);
    CHECK_OBJECT(par_channel);
    Py_DECREF(par_channel);

   // Actual function exit with return value, making sure we did not make
   // the error status worse despite non-NULL return.
   CHECK_OBJECT(tmp_return_value);
   assert(had_error || !ERROR_OCCURRED());
   return tmp_return_value;
}



struct hikari$api$rest$$$function__21_fetch_pins$$$coroutine__1_fetch_pins_locals {
    PyObject *tmp_return_value;
};

static PyObject *hikari$api$rest$$$function__21_fetch_pins$$$coroutine__1_fetch_pins_context(struct Nuitka_CoroutineObject *coroutine, PyObject *yield_return_value) {
    CHECK_OBJECT(coroutine);
    assert(Nuitka_Coroutine_Check((PyObject *)coroutine));

    // Heap access if used.
    struct hikari$api$rest$$$function__21_fetch_pins$$$coroutine__1_fetch_pins_locals *coroutine_heap = (struct hikari$api$rest$$$function__21_fetch_pins$$$coroutine__1_fetch_pins_locals *)coroutine->m_heap_storage;

    // Dispatch to yield based on return label index:


    // Local variable initialization
    coroutine_heap->tmp_return_value = NULL;

    // Actual coroutine body.
    coroutine_heap->tmp_return_value = Py_None;
    Py_INCREF(coroutine_heap->tmp_return_value);
    goto function_return_exit;

    NUITKA_CANNOT_GET_HERE("Return statement must be present");


    return NULL;
    function_return_exit:;

    coroutine->m_returned = coroutine_heap->tmp_return_value;

    return NULL;

}

static PyObject *MAKE_COROUTINE_hikari$api$rest$$$function__21_fetch_pins$$$coroutine__1_fetch_pins() {
    return Nuitka_Coroutine_New(
        hikari$api$rest$$$function__21_fetch_pins$$$coroutine__1_fetch_pins_context,
        module_hikari$api$rest,
        mod_consts[39],
        mod_consts[40],
        codeobj_6890d6669b24051880ade97e5903d02a,
        NULL,
        0,
        sizeof(struct hikari$api$rest$$$function__21_fetch_pins$$$coroutine__1_fetch_pins_locals)
    );
}


static PyObject *impl_hikari$api$rest$$$function__22_pin_message(struct Nuitka_FunctionObject const *self, PyObject **python_pars) {
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_self = python_pars[0];
    PyObject *par_channel = python_pars[1];
    PyObject *par_message = python_pars[2];
    PyObject *tmp_return_value = NULL;

    // Actual function body.


    tmp_return_value = MAKE_COROUTINE_hikari$api$rest$$$function__22_pin_message$$$coroutine__1_pin_message();

    goto function_return_exit;

    NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
    return NULL;


function_return_exit:
   // Function cleanup code if any.
    CHECK_OBJECT(par_self);
    Py_DECREF(par_self);
    CHECK_OBJECT(par_channel);
    Py_DECREF(par_channel);
    CHECK_OBJECT(par_message);
    Py_DECREF(par_message);

   // Actual function exit with return value, making sure we did not make
   // the error status worse despite non-NULL return.
   CHECK_OBJECT(tmp_return_value);
   assert(had_error || !ERROR_OCCURRED());
   return tmp_return_value;
}



struct hikari$api$rest$$$function__22_pin_message$$$coroutine__1_pin_message_locals {
    PyObject *tmp_return_value;
};

static PyObject *hikari$api$rest$$$function__22_pin_message$$$coroutine__1_pin_message_context(struct Nuitka_CoroutineObject *coroutine, PyObject *yield_return_value) {
    CHECK_OBJECT(coroutine);
    assert(Nuitka_Coroutine_Check((PyObject *)coroutine));

    // Heap access if used.
    struct hikari$api$rest$$$function__22_pin_message$$$coroutine__1_pin_message_locals *coroutine_heap = (struct hikari$api$rest$$$function__22_pin_message$$$coroutine__1_pin_message_locals *)coroutine->m_heap_storage;

    // Dispatch to yield based on return label index:


    // Local variable initialization
    coroutine_heap->tmp_return_value = NULL;

    // Actual coroutine body.
    coroutine_heap->tmp_return_value = Py_None;
    Py_INCREF(coroutine_heap->tmp_return_value);
    goto function_return_exit;

    NUITKA_CANNOT_GET_HERE("Return statement must be present");


    return NULL;
    function_return_exit:;

    coroutine->m_returned = coroutine_heap->tmp_return_value;

    return NULL;

}

static PyObject *MAKE_COROUTINE_hikari$api$rest$$$function__22_pin_message$$$coroutine__1_pin_message() {
    return Nuitka_Coroutine_New(
        hikari$api$rest$$$function__22_pin_message$$$coroutine__1_pin_message_context,
        module_hikari$api$rest,
        mod_consts[42],
        mod_consts[43],
        codeobj_e02c07dc535f721d44993adb05cf68d1,
        NULL,
        0,
        sizeof(struct hikari$api$rest$$$function__22_pin_message$$$coroutine__1_pin_message_locals)
    );
}


static PyObject *impl_hikari$api$rest$$$function__23_unpin_message(struct Nuitka_FunctionObject const *self, PyObject **python_pars) {
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_self = python_pars[0];
    PyObject *par_channel = python_pars[1];
    PyObject *par_message = python_pars[2];
    PyObject *tmp_return_value = NULL;

    // Actual function body.


    tmp_return_value = MAKE_COROUTINE_hikari$api$rest$$$function__23_unpin_message$$$coroutine__1_unpin_message();

    goto function_return_exit;

    NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
    return NULL;


function_return_exit:
   // Function cleanup code if any.
    CHECK_OBJECT(par_self);
    Py_DECREF(par_self);
    CHECK_OBJECT(par_channel);
    Py_DECREF(par_channel);
    CHECK_OBJECT(par_message);
    Py_DECREF(par_message);

   // Actual function exit with return value, making sure we did not make
   // the error status worse despite non-NULL return.
   CHECK_OBJECT(tmp_return_value);
   assert(had_error || !ERROR_OCCURRED());
   return tmp_return_value;
}



struct hikari$api$rest$$$function__23_unpin_message$$$coroutine__1_unpin_message_locals {
    PyObject *tmp_return_value;
};

static PyObject *hikari$api$rest$$$function__23_unpin_message$$$coroutine__1_unpin_message_context(struct Nuitka_CoroutineObject *coroutine, PyObject *yield_return_value) {
    CHECK_OBJECT(coroutine);
    assert(Nuitka_Coroutine_Check((PyObject *)coroutine));

    // Heap access if used.
    struct hikari$api$rest$$$function__23_unpin_message$$$coroutine__1_unpin_message_locals *coroutine_heap = (struct hikari$api$rest$$$function__23_unpin_message$$$coroutine__1_unpin_message_locals *)coroutine->m_heap_storage;

    // Dispatch to yield based on return label index:


    // Local variable initialization
    coroutine_heap->tmp_return_value = NULL;

    // Actual coroutine body.
    coroutine_heap->tmp_return_value = Py_None;
    Py_INCREF(coroutine_heap->tmp_return_value);
    goto function_return_exit;

    NUITKA_CANNOT_GET_HERE("Return statement must be present");


    return NULL;
    function_return_exit:;

    coroutine->m_returned = coroutine_heap->tmp_return_value;

    return NULL;

}

static PyObject *MAKE_COROUTINE_hikari$api$rest$$$function__23_unpin_message$$$coroutine__1_unpin_message() {
    return Nuitka_Coroutine_New(
        hikari$api$rest$$$function__23_unpin_message$$$coroutine__1_unpin_message_context,
        module_hikari$api$rest,
        mod_consts[45],
        mod_consts[46],
        codeobj_4b0df3364f3e1bcbca4bd177abb02aa3,
        NULL,
        0,
        sizeof(struct hikari$api$rest$$$function__23_unpin_message$$$coroutine__1_unpin_message_locals)
    );
}


static PyObject *impl_hikari$api$rest$$$function__25_fetch_message(struct Nuitka_FunctionObject const *self, PyObject **python_pars) {
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_self = python_pars[0];
    PyObject *par_channel = python_pars[1];
    PyObject *par_message = python_pars[2];
    PyObject *tmp_return_value = NULL;

    // Actual function body.


    tmp_return_value = MAKE_COROUTINE_hikari$api$rest$$$function__25_fetch_message$$$coroutine__1_fetch_message();

    goto function_return_exit;

    NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
    return NULL;


function_return_exit:
   // Function cleanup code if any.
    CHECK_OBJECT(par_self);
    Py_DECREF(par_self);
    CHECK_OBJECT(par_channel);
    Py_DECREF(par_channel);
    CHECK_OBJECT(par_message);
    Py_DECREF(par_message);

   // Actual function exit with return value, making sure we did not make
   // the error status worse despite non-NULL return.
   CHECK_OBJECT(tmp_return_value);
   assert(had_error || !ERROR_OCCURRED());
   return tmp_return_value;
}



struct hikari$api$rest$$$function__25_fetch_message$$$coroutine__1_fetch_message_locals {
    PyObject *tmp_return_value;
};

static PyObject *hikari$api$rest$$$function__25_fetch_message$$$coroutine__1_fetch_message_context(struct Nuitka_CoroutineObject *coroutine, PyObject *yield_return_value) {
    CHECK_OBJECT(coroutine);
    assert(Nuitka_Coroutine_Check((PyObject *)coroutine));

    // Heap access if used.
    struct hikari$api$rest$$$function__25_fetch_message$$$coroutine__1_fetch_message_locals *coroutine_heap = (struct hikari$api$rest$$$function__25_fetch_message$$$coroutine__1_fetch_message_locals *)coroutine->m_heap_storage;

    // Dispatch to yield based on return label index:


    // Local variable initialization
    coroutine_heap->tmp_return_value = NULL;

    // Actual coroutine body.
    coroutine_heap->tmp_return_value = Py_None;
    Py_INCREF(coroutine_heap->tmp_return_value);
    goto function_return_exit;

    NUITKA_CANNOT_GET_HERE("Return statement must be present");


    return NULL;
    function_return_exit:;

    coroutine->m_returned = coroutine_heap->tmp_return_value;

    return NULL;

}

static PyObject *MAKE_COROUTINE_hikari$api$rest$$$function__25_fetch_message$$$coroutine__1_fetch_message() {
    return Nuitka_Coroutine_New(
        hikari$api$rest$$$function__25_fetch_message$$$coroutine__1_fetch_message_context,
        module_hikari$api$rest,
        mod_consts[48],
        mod_consts[49],
        codeobj_a6aa071612c3ccf585b57b9abcf3bded,
        NULL,
        0,
        sizeof(struct hikari$api$rest$$$function__25_fetch_message$$$coroutine__1_fetch_message_locals)
    );
}


static PyObject *impl_hikari$api$rest$$$function__26_create_message(struct Nuitka_FunctionObject const *self, PyObject **python_pars) {
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_self = python_pars[0];
    PyObject *par_channel = python_pars[1];
    PyObject *par_content = python_pars[2];
    PyObject *par_attachment = python_pars[3];
    PyObject *par_attachments = python_pars[4];
    PyObject *par_component = python_pars[5];
    PyObject *par_components = python_pars[6];
    PyObject *par_embed = python_pars[7];
    PyObject *par_embeds = python_pars[8];
    PyObject *par_tts = python_pars[9];
    PyObject *par_reply = python_pars[10];
    PyObject *par_mentions_everyone = python_pars[11];
    PyObject *par_mentions_reply = python_pars[12];
    PyObject *par_user_mentions = python_pars[13];
    PyObject *par_role_mentions = python_pars[14];
    PyObject *tmp_return_value = NULL;

    // Actual function body.


    tmp_return_value = MAKE_COROUTINE_hikari$api$rest$$$function__26_create_message$$$coroutine__1_create_message();

    goto function_return_exit;

    NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
    return NULL;


function_return_exit:
   // Function cleanup code if any.
    CHECK_OBJECT(par_self);
    Py_DECREF(par_self);
    CHECK_OBJECT(par_channel);
    Py_DECREF(par_channel);
    CHECK_OBJECT(par_content);
    Py_DECREF(par_content);
    CHECK_OBJECT(par_attachment);
    Py_DECREF(par_attachment);
    CHECK_OBJECT(par_attachments);
    Py_DECREF(par_attachments);
    CHECK_OBJECT(par_component);
    Py_DECREF(par_component);
    CHECK_OBJECT(par_components);
    Py_DECREF(par_components);
    CHECK_OBJECT(par_embed);
    Py_DECREF(par_embed);
    CHECK_OBJECT(par_embeds);
    Py_DECREF(par_embeds);
    CHECK_OBJECT(par_tts);
    Py_DECREF(par_tts);
    CHECK_OBJECT(par_reply);
    Py_DECREF(par_reply);
    CHECK_OBJECT(par_mentions_everyone);
    Py_DECREF(par_mentions_everyone);
    CHECK_OBJECT(par_mentions_reply);
    Py_DECREF(par_mentions_reply);
    CHECK_OBJECT(par_user_mentions);
    Py_DECREF(par_user_mentions);
    CHECK_OBJECT(par_role_mentions);
    Py_DECREF(par_role_mentions);

   // Actual function exit with return value, making sure we did not make
   // the error status worse despite non-NULL return.
   CHECK_OBJECT(tmp_return_value);
   assert(had_error || !ERROR_OCCURRED());
   return tmp_return_value;
}



struct hikari$api$rest$$$function__26_create_message$$$coroutine__1_create_message_locals {
    PyObject *tmp_return_value;
};

static PyObject *hikari$api$rest$$$function__26_create_message$$$coroutine__1_create_message_context(struct Nuitka_CoroutineObject *coroutine, PyObject *yield_return_value) {
    CHECK_OBJECT(coroutine);
    assert(Nuitka_Coroutine_Check((PyObject *)coroutine));

    // Heap access if used.
    struct hikari$api$rest$$$function__26_create_message$$$coroutine__1_create_message_locals *coroutine_heap = (struct hikari$api$rest$$$function__26_create_message$$$coroutine__1_create_message_locals *)coroutine->m_heap_storage;

    // Dispatch to yield based on return label index:


    // Local variable initialization
    coroutine_heap->tmp_return_value = NULL;

    // Actual coroutine body.
    coroutine_heap->tmp_return_value = Py_None;
    Py_INCREF(coroutine_heap->tmp_return_value);
    goto function_return_exit;

    NUITKA_CANNOT_GET_HERE("Return statement must be present");


    return NULL;
    function_return_exit:;

    coroutine->m_returned = coroutine_heap->tmp_return_value;

    return NULL;

}

static PyObject *MAKE_COROUTINE_hikari$api$rest$$$function__26_create_message$$$coroutine__1_create_message() {
    return Nuitka_Coroutine_New(
        hikari$api$rest$$$function__26_create_message$$$coroutine__1_create_message_context,
        module_hikari$api$rest,
        mod_consts[51],
        mod_consts[52],
        codeobj_047e2ec99402d774dfea4cdf299e1c3e,
        NULL,
        0,
        sizeof(struct hikari$api$rest$$$function__26_create_message$$$coroutine__1_create_message_locals)
    );
}


static PyObject *impl_hikari$api$rest$$$function__27_crosspost_message(struct Nuitka_FunctionObject const *self, PyObject **python_pars) {
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_self = python_pars[0];
    PyObject *par_channel = python_pars[1];
    PyObject *par_message = python_pars[2];
    PyObject *tmp_return_value = NULL;

    // Actual function body.


    tmp_return_value = MAKE_COROUTINE_hikari$api$rest$$$function__27_crosspost_message$$$coroutine__1_crosspost_message();

    goto function_return_exit;

    NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
    return NULL;


function_return_exit:
   // Function cleanup code if any.
    CHECK_OBJECT(par_self);
    Py_DECREF(par_self);
    CHECK_OBJECT(par_channel);
    Py_DECREF(par_channel);
    CHECK_OBJECT(par_message);
    Py_DECREF(par_message);

   // Actual function exit with return value, making sure we did not make
   // the error status worse despite non-NULL return.
   CHECK_OBJECT(tmp_return_value);
   assert(had_error || !ERROR_OCCURRED());
   return tmp_return_value;
}



struct hikari$api$rest$$$function__27_crosspost_message$$$coroutine__1_crosspost_message_locals {
    PyObject *tmp_return_value;
};

static PyObject *hikari$api$rest$$$function__27_crosspost_message$$$coroutine__1_crosspost_message_context(struct Nuitka_CoroutineObject *coroutine, PyObject *yield_return_value) {
    CHECK_OBJECT(coroutine);
    assert(Nuitka_Coroutine_Check((PyObject *)coroutine));

    // Heap access if used.
    struct hikari$api$rest$$$function__27_crosspost_message$$$coroutine__1_crosspost_message_locals *coroutine_heap = (struct hikari$api$rest$$$function__27_crosspost_message$$$coroutine__1_crosspost_message_locals *)coroutine->m_heap_storage;

    // Dispatch to yield based on return label index:


    // Local variable initialization
    coroutine_heap->tmp_return_value = NULL;

    // Actual coroutine body.
    coroutine_heap->tmp_return_value = Py_None;
    Py_INCREF(coroutine_heap->tmp_return_value);
    goto function_return_exit;

    NUITKA_CANNOT_GET_HERE("Return statement must be present");


    return NULL;
    function_return_exit:;

    coroutine->m_returned = coroutine_heap->tmp_return_value;

    return NULL;

}

static PyObject *MAKE_COROUTINE_hikari$api$rest$$$function__27_crosspost_message$$$coroutine__1_crosspost_message() {
    return Nuitka_Coroutine_New(
        hikari$api$rest$$$function__27_crosspost_message$$$coroutine__1_crosspost_message_context,
        module_hikari$api$rest,
        mod_consts[54],
        mod_consts[55],
        codeobj_9637bd02e99b409ff1d86f4c8ad8277e,
        NULL,
        0,
        sizeof(struct hikari$api$rest$$$function__27_crosspost_message$$$coroutine__1_crosspost_message_locals)
    );
}


static PyObject *impl_hikari$api$rest$$$function__28_edit_message(struct Nuitka_FunctionObject const *self, PyObject **python_pars) {
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_self = python_pars[0];
    PyObject *par_channel = python_pars[1];
    PyObject *par_message = python_pars[2];
    PyObject *par_content = python_pars[3];
    PyObject *par_attachment = python_pars[4];
    PyObject *par_attachments = python_pars[5];
    PyObject *par_component = python_pars[6];
    PyObject *par_components = python_pars[7];
    PyObject *par_embed = python_pars[8];
    PyObject *par_embeds = python_pars[9];
    PyObject *par_replace_attachments = python_pars[10];
    PyObject *par_mentions_everyone = python_pars[11];
    PyObject *par_mentions_reply = python_pars[12];
    PyObject *par_user_mentions = python_pars[13];
    PyObject *par_role_mentions = python_pars[14];
    PyObject *par_flags = python_pars[15];
    PyObject *tmp_return_value = NULL;

    // Actual function body.


    tmp_return_value = MAKE_COROUTINE_hikari$api$rest$$$function__28_edit_message$$$coroutine__1_edit_message();

    goto function_return_exit;

    NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
    return NULL;


function_return_exit:
   // Function cleanup code if any.
    CHECK_OBJECT(par_self);
    Py_DECREF(par_self);
    CHECK_OBJECT(par_channel);
    Py_DECREF(par_channel);
    CHECK_OBJECT(par_message);
    Py_DECREF(par_message);
    CHECK_OBJECT(par_content);
    Py_DECREF(par_content);
    CHECK_OBJECT(par_attachment);
    Py_DECREF(par_attachment);
    CHECK_OBJECT(par_attachments);
    Py_DECREF(par_attachments);
    CHECK_OBJECT(par_component);
    Py_DECREF(par_component);
    CHECK_OBJECT(par_components);
    Py_DECREF(par_components);
    CHECK_OBJECT(par_embed);
    Py_DECREF(par_embed);
    CHECK_OBJECT(par_embeds);
    Py_DECREF(par_embeds);
    CHECK_OBJECT(par_replace_attachments);
    Py_DECREF(par_replace_attachments);
    CHECK_OBJECT(par_mentions_everyone);
    Py_DECREF(par_mentions_everyone);
    CHECK_OBJECT(par_mentions_reply);
    Py_DECREF(par_mentions_reply);
    CHECK_OBJECT(par_user_mentions);
    Py_DECREF(par_user_mentions);
    CHECK_OBJECT(par_role_mentions);
    Py_DECREF(par_role_mentions);
    CHECK_OBJECT(par_flags);
    Py_DECREF(par_flags);

   // Actual function exit with return value, making sure we did not make
   // the error status worse despite non-NULL return.
   CHECK_OBJECT(tmp_return_value);
   assert(had_error || !ERROR_OCCURRED());
   return tmp_return_value;
}



struct hikari$api$rest$$$function__28_edit_message$$$coroutine__1_edit_message_locals {
    PyObject *tmp_return_value;
};

static PyObject *hikari$api$rest$$$function__28_edit_message$$$coroutine__1_edit_message_context(struct Nuitka_CoroutineObject *coroutine, PyObject *yield_return_value) {
    CHECK_OBJECT(coroutine);
    assert(Nuitka_Coroutine_Check((PyObject *)coroutine));

    // Heap access if used.
    struct hikari$api$rest$$$function__28_edit_message$$$coroutine__1_edit_message_locals *coroutine_heap = (struct hikari$api$rest$$$function__28_edit_message$$$coroutine__1_edit_message_locals *)coroutine->m_heap_storage;

    // Dispatch to yield based on return label index:


    // Local variable initialization
    coroutine_heap->tmp_return_value = NULL;

    // Actual coroutine body.
    coroutine_heap->tmp_return_value = Py_None;
    Py_INCREF(coroutine_heap->tmp_return_value);
    goto function_return_exit;

    NUITKA_CANNOT_GET_HERE("Return statement must be present");


    return NULL;
    function_return_exit:;

    coroutine->m_returned = coroutine_heap->tmp_return_value;

    return NULL;

}

static PyObject *MAKE_COROUTINE_hikari$api$rest$$$function__28_edit_message$$$coroutine__1_edit_message() {
    return Nuitka_Coroutine_New(
        hikari$api$rest$$$function__28_edit_message$$$coroutine__1_edit_message_context,
        module_hikari$api$rest,
        mod_consts[57],
        mod_consts[58],
        codeobj_c40e2a6aa5050635853eda66b5668072,
        NULL,
        0,
        sizeof(struct hikari$api$rest$$$function__28_edit_message$$$coroutine__1_edit_message_locals)
    );
}


static PyObject *impl_hikari$api$rest$$$function__29_delete_message(struct Nuitka_FunctionObject const *self, PyObject **python_pars) {
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_self = python_pars[0];
    PyObject *par_channel = python_pars[1];
    PyObject *par_message = python_pars[2];
    PyObject *tmp_return_value = NULL;

    // Actual function body.


    tmp_return_value = MAKE_COROUTINE_hikari$api$rest$$$function__29_delete_message$$$coroutine__1_delete_message();

    goto function_return_exit;

    NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
    return NULL;


function_return_exit:
   // Function cleanup code if any.
    CHECK_OBJECT(par_self);
    Py_DECREF(par_self);
    CHECK_OBJECT(par_channel);
    Py_DECREF(par_channel);
    CHECK_OBJECT(par_message);
    Py_DECREF(par_message);

   // Actual function exit with return value, making sure we did not make
   // the error status worse despite non-NULL return.
   CHECK_OBJECT(tmp_return_value);
   assert(had_error || !ERROR_OCCURRED());
   return tmp_return_value;
}



struct hikari$api$rest$$$function__29_delete_message$$$coroutine__1_delete_message_locals {
    PyObject *tmp_return_value;
};

static PyObject *hikari$api$rest$$$function__29_delete_message$$$coroutine__1_delete_message_context(struct Nuitka_CoroutineObject *coroutine, PyObject *yield_return_value) {
    CHECK_OBJECT(coroutine);
    assert(Nuitka_Coroutine_Check((PyObject *)coroutine));

    // Heap access if used.
    struct hikari$api$rest$$$function__29_delete_message$$$coroutine__1_delete_message_locals *coroutine_heap = (struct hikari$api$rest$$$function__29_delete_message$$$coroutine__1_delete_message_locals *)coroutine->m_heap_storage;

    // Dispatch to yield based on return label index:


    // Local variable initialization
    coroutine_heap->tmp_return_value = NULL;

    // Actual coroutine body.
    coroutine_heap->tmp_return_value = Py_None;
    Py_INCREF(coroutine_heap->tmp_return_value);
    goto function_return_exit;

    NUITKA_CANNOT_GET_HERE("Return statement must be present");


    return NULL;
    function_return_exit:;

    coroutine->m_returned = coroutine_heap->tmp_return_value;

    return NULL;

}

static PyObject *MAKE_COROUTINE_hikari$api$rest$$$function__29_delete_message$$$coroutine__1_delete_message() {
    return Nuitka_Coroutine_New(
        hikari$api$rest$$$function__29_delete_message$$$coroutine__1_delete_message_context,
        module_hikari$api$rest,
        mod_consts[60],
        mod_consts[61],
        codeobj_84ac493bc93d1770b2e4e186c670939e,
        NULL,
        0,
        sizeof(struct hikari$api$rest$$$function__29_delete_message$$$coroutine__1_delete_message_locals)
    );
}


static PyObject *impl_hikari$api$rest$$$function__30_delete_messages(struct Nuitka_FunctionObject const *self, PyObject **python_pars) {
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_self = python_pars[0];
    PyObject *par_channel = python_pars[1];
    PyObject *par_messages = python_pars[2];
    PyObject *par_other_messages = python_pars[3];
    PyObject *tmp_return_value = NULL;

    // Actual function body.


    tmp_return_value = MAKE_COROUTINE_hikari$api$rest$$$function__30_delete_messages$$$coroutine__1_delete_messages();

    goto function_return_exit;

    NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
    return NULL;


function_return_exit:
   // Function cleanup code if any.
    CHECK_OBJECT(par_self);
    Py_DECREF(par_self);
    CHECK_OBJECT(par_channel);
    Py_DECREF(par_channel);
    CHECK_OBJECT(par_messages);
    Py_DECREF(par_messages);
    CHECK_OBJECT(par_other_messages);
    Py_DECREF(par_other_messages);

   // Actual function exit with return value, making sure we did not make
   // the error status worse despite non-NULL return.
   CHECK_OBJECT(tmp_return_value);
   assert(had_error || !ERROR_OCCURRED());
   return tmp_return_value;
}



struct hikari$api$rest$$$function__30_delete_messages$$$coroutine__1_delete_messages_locals {
    PyObject *tmp_return_value;
};

static PyObject *hikari$api$rest$$$function__30_delete_messages$$$coroutine__1_delete_messages_context(struct Nuitka_CoroutineObject *coroutine, PyObject *yield_return_value) {
    CHECK_OBJECT(coroutine);
    assert(Nuitka_Coroutine_Check((PyObject *)coroutine));

    // Heap access if used.
    struct hikari$api$rest$$$function__30_delete_messages$$$coroutine__1_delete_messages_locals *coroutine_heap = (struct hikari$api$rest$$$function__30_delete_messages$$$coroutine__1_delete_messages_locals *)coroutine->m_heap_storage;

    // Dispatch to yield based on return label index:


    // Local variable initialization
    coroutine_heap->tmp_return_value = NULL;

    // Actual coroutine body.
    coroutine_heap->tmp_return_value = Py_None;
    Py_INCREF(coroutine_heap->tmp_return_value);
    goto function_return_exit;

    NUITKA_CANNOT_GET_HERE("Return statement must be present");


    return NULL;
    function_return_exit:;

    coroutine->m_returned = coroutine_heap->tmp_return_value;

    return NULL;

}

static PyObject *MAKE_COROUTINE_hikari$api$rest$$$function__30_delete_messages$$$coroutine__1_delete_messages() {
    return Nuitka_Coroutine_New(
        hikari$api$rest$$$function__30_delete_messages$$$coroutine__1_delete_messages_context,
        module_hikari$api$rest,
        mod_consts[63],
        mod_consts[64],
        codeobj_1522b298d93f7d1a07c24ed0046572b3,
        NULL,
        0,
        sizeof(struct hikari$api$rest$$$function__30_delete_messages$$$coroutine__1_delete_messages_locals)
    );
}


static PyObject *impl_hikari$api$rest$$$function__31_add_reaction(struct Nuitka_FunctionObject const *self, PyObject **python_pars) {
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_self = python_pars[0];
    PyObject *par_channel = python_pars[1];
    PyObject *par_message = python_pars[2];
    PyObject *par_emoji = python_pars[3];
    PyObject *par_emoji_id = python_pars[4];
    PyObject *tmp_return_value = NULL;

    // Actual function body.


    tmp_return_value = MAKE_COROUTINE_hikari$api$rest$$$function__31_add_reaction$$$coroutine__1_add_reaction();

    goto function_return_exit;

    NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
    return NULL;


function_return_exit:
   // Function cleanup code if any.
    CHECK_OBJECT(par_self);
    Py_DECREF(par_self);
    CHECK_OBJECT(par_channel);
    Py_DECREF(par_channel);
    CHECK_OBJECT(par_message);
    Py_DECREF(par_message);
    CHECK_OBJECT(par_emoji);
    Py_DECREF(par_emoji);
    CHECK_OBJECT(par_emoji_id);
    Py_DECREF(par_emoji_id);

   // Actual function exit with return value, making sure we did not make
   // the error status worse despite non-NULL return.
   CHECK_OBJECT(tmp_return_value);
   assert(had_error || !ERROR_OCCURRED());
   return tmp_return_value;
}



struct hikari$api$rest$$$function__31_add_reaction$$$coroutine__1_add_reaction_locals {
    PyObject *tmp_return_value;
};

static PyObject *hikari$api$rest$$$function__31_add_reaction$$$coroutine__1_add_reaction_context(struct Nuitka_CoroutineObject *coroutine, PyObject *yield_return_value) {
    CHECK_OBJECT(coroutine);
    assert(Nuitka_Coroutine_Check((PyObject *)coroutine));

    // Heap access if used.
    struct hikari$api$rest$$$function__31_add_reaction$$$coroutine__1_add_reaction_locals *coroutine_heap = (struct hikari$api$rest$$$function__31_add_reaction$$$coroutine__1_add_reaction_locals *)coroutine->m_heap_storage;

    // Dispatch to yield based on return label index:


    // Local variable initialization
    coroutine_heap->tmp_return_value = NULL;

    // Actual coroutine body.
    coroutine_heap->tmp_return_value = Py_None;
    Py_INCREF(coroutine_heap->tmp_return_value);
    goto function_return_exit;

    NUITKA_CANNOT_GET_HERE("Return statement must be present");


    return NULL;
    function_return_exit:;

    coroutine->m_returned = coroutine_heap->tmp_return_value;

    return NULL;

}

static PyObject *MAKE_COROUTINE_hikari$api$rest$$$function__31_add_reaction$$$coroutine__1_add_reaction() {
    return Nuitka_Coroutine_New(
        hikari$api$rest$$$function__31_add_reaction$$$coroutine__1_add_reaction_context,
        module_hikari$api$rest,
        mod_consts[66],
        mod_consts[67],
        codeobj_ac7bcdd10415602e1bfc4f64aaa95484,
        NULL,
        0,
        sizeof(struct hikari$api$rest$$$function__31_add_reaction$$$coroutine__1_add_reaction_locals)
    );
}


static PyObject *impl_hikari$api$rest$$$function__32_delete_my_reaction(struct Nuitka_FunctionObject const *self, PyObject **python_pars) {
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_self = python_pars[0];
    PyObject *par_channel = python_pars[1];
    PyObject *par_message = python_pars[2];
    PyObject *par_emoji = python_pars[3];
    PyObject *par_emoji_id = python_pars[4];
    PyObject *tmp_return_value = NULL;

    // Actual function body.


    tmp_return_value = MAKE_COROUTINE_hikari$api$rest$$$function__32_delete_my_reaction$$$coroutine__1_delete_my_reaction();

    goto function_return_exit;

    NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
    return NULL;


function_return_exit:
   // Function cleanup code if any.
    CHECK_OBJECT(par_self);
    Py_DECREF(par_self);
    CHECK_OBJECT(par_channel);
    Py_DECREF(par_channel);
    CHECK_OBJECT(par_message);
    Py_DECREF(par_message);
    CHECK_OBJECT(par_emoji);
    Py_DECREF(par_emoji);
    CHECK_OBJECT(par_emoji_id);
    Py_DECREF(par_emoji_id);

   // Actual function exit with return value, making sure we did not make
   // the error status worse despite non-NULL return.
   CHECK_OBJECT(tmp_return_value);
   assert(had_error || !ERROR_OCCURRED());
   return tmp_return_value;
}



struct hikari$api$rest$$$function__32_delete_my_reaction$$$coroutine__1_delete_my_reaction_locals {
    PyObject *tmp_return_value;
};

static PyObject *hikari$api$rest$$$function__32_delete_my_reaction$$$coroutine__1_delete_my_reaction_context(struct Nuitka_CoroutineObject *coroutine, PyObject *yield_return_value) {
    CHECK_OBJECT(coroutine);
    assert(Nuitka_Coroutine_Check((PyObject *)coroutine));

    // Heap access if used.
    struct hikari$api$rest$$$function__32_delete_my_reaction$$$coroutine__1_delete_my_reaction_locals *coroutine_heap = (struct hikari$api$rest$$$function__32_delete_my_reaction$$$coroutine__1_delete_my_reaction_locals *)coroutine->m_heap_storage;

    // Dispatch to yield based on return label index:


    // Local variable initialization
    coroutine_heap->tmp_return_value = NULL;

    // Actual coroutine body.
    coroutine_heap->tmp_return_value = Py_None;
    Py_INCREF(coroutine_heap->tmp_return_value);
    goto function_return_exit;

    NUITKA_CANNOT_GET_HERE("Return statement must be present");


    return NULL;
    function_return_exit:;

    coroutine->m_returned = coroutine_heap->tmp_return_value;

    return NULL;

}

static PyObject *MAKE_COROUTINE_hikari$api$rest$$$function__32_delete_my_reaction$$$coroutine__1_delete_my_reaction() {
    return Nuitka_Coroutine_New(
        hikari$api$rest$$$function__32_delete_my_reaction$$$coroutine__1_delete_my_reaction_context,
        module_hikari$api$rest,
        mod_consts[69],
        mod_consts[70],
        codeobj_f8f22833d3bb72cf4a61f8d6ceb03817,
        NULL,
        0,
        sizeof(struct hikari$api$rest$$$function__32_delete_my_reaction$$$coroutine__1_delete_my_reaction_locals)
    );
}


static PyObject *impl_hikari$api$rest$$$function__33_delete_all_reactions_for_emoji(struct Nuitka_FunctionObject const *self, PyObject **python_pars) {
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_self = python_pars[0];
    PyObject *par_channel = python_pars[1];
    PyObject *par_message = python_pars[2];
    PyObject *par_emoji = python_pars[3];
    PyObject *par_emoji_id = python_pars[4];
    PyObject *tmp_return_value = NULL;

    // Actual function body.


    tmp_return_value = MAKE_COROUTINE_hikari$api$rest$$$function__33_delete_all_reactions_for_emoji$$$coroutine__1_delete_all_reactions_for_emoji();

    goto function_return_exit;

    NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
    return NULL;


function_return_exit:
   // Function cleanup code if any.
    CHECK_OBJECT(par_self);
    Py_DECREF(par_self);
    CHECK_OBJECT(par_channel);
    Py_DECREF(par_channel);
    CHECK_OBJECT(par_message);
    Py_DECREF(par_message);
    CHECK_OBJECT(par_emoji);
    Py_DECREF(par_emoji);
    CHECK_OBJECT(par_emoji_id);
    Py_DECREF(par_emoji_id);

   // Actual function exit with return value, making sure we did not make
   // the error status worse despite non-NULL return.
   CHECK_OBJECT(tmp_return_value);
   assert(had_error || !ERROR_OCCURRED());
   return tmp_return_value;
}



struct hikari$api$rest$$$function__33_delete_all_reactions_for_emoji$$$coroutine__1_delete_all_reactions_for_emoji_locals {
    PyObject *tmp_return_value;
};

static PyObject *hikari$api$rest$$$function__33_delete_all_reactions_for_emoji$$$coroutine__1_delete_all_reactions_for_emoji_context(struct Nuitka_CoroutineObject *coroutine, PyObject *yield_return_value) {
    CHECK_OBJECT(coroutine);
    assert(Nuitka_Coroutine_Check((PyObject *)coroutine));

    // Heap access if used.
    struct hikari$api$rest$$$function__33_delete_all_reactions_for_emoji$$$coroutine__1_delete_all_reactions_for_emoji_locals *coroutine_heap = (struct hikari$api$rest$$$function__33_delete_all_reactions_for_emoji$$$coroutine__1_delete_all_reactions_for_emoji_locals *)coroutine->m_heap_storage;

    // Dispatch to yield based on return label index:


    // Local variable initialization
    coroutine_heap->tmp_return_value = NULL;

    // Actual coroutine body.
    coroutine_heap->tmp_return_value = Py_None;
    Py_INCREF(coroutine_heap->tmp_return_value);
    goto function_return_exit;

    NUITKA_CANNOT_GET_HERE("Return statement must be present");


    return NULL;
    function_return_exit:;

    coroutine->m_returned = coroutine_heap->tmp_return_value;

    return NULL;

}

static PyObject *MAKE_COROUTINE_hikari$api$rest$$$function__33_delete_all_reactions_for_emoji$$$coroutine__1_delete_all_reactions_for_emoji() {
    return Nuitka_Coroutine_New(
        hikari$api$rest$$$function__33_delete_all_reactions_for_emoji$$$coroutine__1_delete_all_reactions_for_emoji_context,
        module_hikari$api$rest,
        mod_consts[72],
        mod_consts[73],
        codeobj_21f21cd388273606498c1eaa8c0d785c,
        NULL,
        0,
        sizeof(struct hikari$api$rest$$$function__33_delete_all_reactions_for_emoji$$$coroutine__1_delete_all_reactions_for_emoji_locals)
    );
}


static PyObject *impl_hikari$api$rest$$$function__34_delete_reaction(struct Nuitka_FunctionObject const *self, PyObject **python_pars) {
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_self = python_pars[0];
    PyObject *par_channel = python_pars[1];
    PyObject *par_message = python_pars[2];
    PyObject *par_user = python_pars[3];
    PyObject *par_emoji = python_pars[4];
    PyObject *par_emoji_id = python_pars[5];
    PyObject *tmp_return_value = NULL;

    // Actual function body.


    tmp_return_value = MAKE_COROUTINE_hikari$api$rest$$$function__34_delete_reaction$$$coroutine__1_delete_reaction();

    goto function_return_exit;

    NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
    return NULL;


function_return_exit:
   // Function cleanup code if any.
    CHECK_OBJECT(par_self);
    Py_DECREF(par_self);
    CHECK_OBJECT(par_channel);
    Py_DECREF(par_channel);
    CHECK_OBJECT(par_message);
    Py_DECREF(par_message);
    CHECK_OBJECT(par_user);
    Py_DECREF(par_user);
    CHECK_OBJECT(par_emoji);
    Py_DECREF(par_emoji);
    CHECK_OBJECT(par_emoji_id);
    Py_DECREF(par_emoji_id);

   // Actual function exit with return value, making sure we did not make
   // the error status worse despite non-NULL return.
   CHECK_OBJECT(tmp_return_value);
   assert(had_error || !ERROR_OCCURRED());
   return tmp_return_value;
}



struct hikari$api$rest$$$function__34_delete_reaction$$$coroutine__1_delete_reaction_locals {
    PyObject *tmp_return_value;
};

static PyObject *hikari$api$rest$$$function__34_delete_reaction$$$coroutine__1_delete_reaction_context(struct Nuitka_CoroutineObject *coroutine, PyObject *yield_return_value) {
    CHECK_OBJECT(coroutine);
    assert(Nuitka_Coroutine_Check((PyObject *)coroutine));

    // Heap access if used.
    struct hikari$api$rest$$$function__34_delete_reaction$$$coroutine__1_delete_reaction_locals *coroutine_heap = (struct hikari$api$rest$$$function__34_delete_reaction$$$coroutine__1_delete_reaction_locals *)coroutine->m_heap_storage;

    // Dispatch to yield based on return label index:


    // Local variable initialization
    coroutine_heap->tmp_return_value = NULL;

    // Actual coroutine body.
    coroutine_heap->tmp_return_value = Py_None;
    Py_INCREF(coroutine_heap->tmp_return_value);
    goto function_return_exit;

    NUITKA_CANNOT_GET_HERE("Return statement must be present");


    return NULL;
    function_return_exit:;

    coroutine->m_returned = coroutine_heap->tmp_return_value;

    return NULL;

}

static PyObject *MAKE_COROUTINE_hikari$api$rest$$$function__34_delete_reaction$$$coroutine__1_delete_reaction() {
    return Nuitka_Coroutine_New(
        hikari$api$rest$$$function__34_delete_reaction$$$coroutine__1_delete_reaction_context,
        module_hikari$api$rest,
        mod_consts[75],
        mod_consts[76],
        codeobj_d7b2eac5b38cc41eb3f05e85890e9bf7,
        NULL,
        0,
        sizeof(struct hikari$api$rest$$$function__34_delete_reaction$$$coroutine__1_delete_reaction_locals)
    );
}


static PyObject *impl_hikari$api$rest$$$function__35_delete_all_reactions(struct Nuitka_FunctionObject const *self, PyObject **python_pars) {
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_self = python_pars[0];
    PyObject *par_channel = python_pars[1];
    PyObject *par_message = python_pars[2];
    PyObject *tmp_return_value = NULL;

    // Actual function body.


    tmp_return_value = MAKE_COROUTINE_hikari$api$rest$$$function__35_delete_all_reactions$$$coroutine__1_delete_all_reactions();

    goto function_return_exit;

    NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
    return NULL;


function_return_exit:
   // Function cleanup code if any.
    CHECK_OBJECT(par_self);
    Py_DECREF(par_self);
    CHECK_OBJECT(par_channel);
    Py_DECREF(par_channel);
    CHECK_OBJECT(par_message);
    Py_DECREF(par_message);

   // Actual function exit with return value, making sure we did not make
   // the error status worse despite non-NULL return.
   CHECK_OBJECT(tmp_return_value);
   assert(had_error || !ERROR_OCCURRED());
   return tmp_return_value;
}



struct hikari$api$rest$$$function__35_delete_all_reactions$$$coroutine__1_delete_all_reactions_locals {
    PyObject *tmp_return_value;
};

static PyObject *hikari$api$rest$$$function__35_delete_all_reactions$$$coroutine__1_delete_all_reactions_context(struct Nuitka_CoroutineObject *coroutine, PyObject *yield_return_value) {
    CHECK_OBJECT(coroutine);
    assert(Nuitka_Coroutine_Check((PyObject *)coroutine));

    // Heap access if used.
    struct hikari$api$rest$$$function__35_delete_all_reactions$$$coroutine__1_delete_all_reactions_locals *coroutine_heap = (struct hikari$api$rest$$$function__35_delete_all_reactions$$$coroutine__1_delete_all_reactions_locals *)coroutine->m_heap_storage;

    // Dispatch to yield based on return label index:


    // Local variable initialization
    coroutine_heap->tmp_return_value = NULL;

    // Actual coroutine body.
    coroutine_heap->tmp_return_value = Py_None;
    Py_INCREF(coroutine_heap->tmp_return_value);
    goto function_return_exit;

    NUITKA_CANNOT_GET_HERE("Return statement must be present");


    return NULL;
    function_return_exit:;

    coroutine->m_returned = coroutine_heap->tmp_return_value;

    return NULL;

}

static PyObject *MAKE_COROUTINE_hikari$api$rest$$$function__35_delete_all_reactions$$$coroutine__1_delete_all_reactions() {
    return Nuitka_Coroutine_New(
        hikari$api$rest$$$function__35_delete_all_reactions$$$coroutine__1_delete_all_reactions_context,
        module_hikari$api$rest,
        mod_consts[78],
        mod_consts[79],
        codeobj_61a49502c9c457fcc45436725e3f5e94,
        NULL,
        0,
        sizeof(struct hikari$api$rest$$$function__35_delete_all_reactions$$$coroutine__1_delete_all_reactions_locals)
    );
}


static PyObject *impl_hikari$api$rest$$$function__37_create_webhook(struct Nuitka_FunctionObject const *self, PyObject **python_pars) {
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_self = python_pars[0];
    PyObject *par_channel = python_pars[1];
    PyObject *par_name = python_pars[2];
    PyObject *par_avatar = python_pars[3];
    PyObject *par_reason = python_pars[4];
    PyObject *tmp_return_value = NULL;

    // Actual function body.


    tmp_return_value = MAKE_COROUTINE_hikari$api$rest$$$function__37_create_webhook$$$coroutine__1_create_webhook();

    goto function_return_exit;

    NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
    return NULL;


function_return_exit:
   // Function cleanup code if any.
    CHECK_OBJECT(par_self);
    Py_DECREF(par_self);
    CHECK_OBJECT(par_channel);
    Py_DECREF(par_channel);
    CHECK_OBJECT(par_name);
    Py_DECREF(par_name);
    CHECK_OBJECT(par_avatar);
    Py_DECREF(par_avatar);
    CHECK_OBJECT(par_reason);
    Py_DECREF(par_reason);

   // Actual function exit with return value, making sure we did not make
   // the error status worse despite non-NULL return.
   CHECK_OBJECT(tmp_return_value);
   assert(had_error || !ERROR_OCCURRED());
   return tmp_return_value;
}



struct hikari$api$rest$$$function__37_create_webhook$$$coroutine__1_create_webhook_locals {
    PyObject *tmp_return_value;
};

static PyObject *hikari$api$rest$$$function__37_create_webhook$$$coroutine__1_create_webhook_context(struct Nuitka_CoroutineObject *coroutine, PyObject *yield_return_value) {
    CHECK_OBJECT(coroutine);
    assert(Nuitka_Coroutine_Check((PyObject *)coroutine));

    // Heap access if used.
    struct hikari$api$rest$$$function__37_create_webhook$$$coroutine__1_create_webhook_locals *coroutine_heap = (struct hikari$api$rest$$$function__37_create_webhook$$$coroutine__1_create_webhook_locals *)coroutine->m_heap_storage;

    // Dispatch to yield based on return label index:


    // Local variable initialization
    coroutine_heap->tmp_return_value = NULL;

    // Actual coroutine body.
    coroutine_heap->tmp_return_value = Py_None;
    Py_INCREF(coroutine_heap->tmp_return_value);
    goto function_return_exit;

    NUITKA_CANNOT_GET_HERE("Return statement must be present");


    return NULL;
    function_return_exit:;

    coroutine->m_returned = coroutine_heap->tmp_return_value;

    return NULL;

}

static PyObject *MAKE_COROUTINE_hikari$api$rest$$$function__37_create_webhook$$$coroutine__1_create_webhook() {
    return Nuitka_Coroutine_New(
        hikari$api$rest$$$function__37_create_webhook$$$coroutine__1_create_webhook_context,
        module_hikari$api$rest,
        mod_consts[81],
        mod_consts[82],
        codeobj_32581de60cadc43f2b7b4dfd037bddfa,
        NULL,
        0,
        sizeof(struct hikari$api$rest$$$function__37_create_webhook$$$coroutine__1_create_webhook_locals)
    );
}


static PyObject *impl_hikari$api$rest$$$function__38_fetch_webhook(struct Nuitka_FunctionObject const *self, PyObject **python_pars) {
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_self = python_pars[0];
    PyObject *par_webhook = python_pars[1];
    PyObject *par_token = python_pars[2];
    PyObject *tmp_return_value = NULL;

    // Actual function body.


    tmp_return_value = MAKE_COROUTINE_hikari$api$rest$$$function__38_fetch_webhook$$$coroutine__1_fetch_webhook();

    goto function_return_exit;

    NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
    return NULL;


function_return_exit:
   // Function cleanup code if any.
    CHECK_OBJECT(par_self);
    Py_DECREF(par_self);
    CHECK_OBJECT(par_webhook);
    Py_DECREF(par_webhook);
    CHECK_OBJECT(par_token);
    Py_DECREF(par_token);

   // Actual function exit with return value, making sure we did not make
   // the error status worse despite non-NULL return.
   CHECK_OBJECT(tmp_return_value);
   assert(had_error || !ERROR_OCCURRED());
   return tmp_return_value;
}



struct hikari$api$rest$$$function__38_fetch_webhook$$$coroutine__1_fetch_webhook_locals {
    PyObject *tmp_return_value;
};

static PyObject *hikari$api$rest$$$function__38_fetch_webhook$$$coroutine__1_fetch_webhook_context(struct Nuitka_CoroutineObject *coroutine, PyObject *yield_return_value) {
    CHECK_OBJECT(coroutine);
    assert(Nuitka_Coroutine_Check((PyObject *)coroutine));

    // Heap access if used.
    struct hikari$api$rest$$$function__38_fetch_webhook$$$coroutine__1_fetch_webhook_locals *coroutine_heap = (struct hikari$api$rest$$$function__38_fetch_webhook$$$coroutine__1_fetch_webhook_locals *)coroutine->m_heap_storage;

    // Dispatch to yield based on return label index:


    // Local variable initialization
    coroutine_heap->tmp_return_value = NULL;

    // Actual coroutine body.
    coroutine_heap->tmp_return_value = Py_None;
    Py_INCREF(coroutine_heap->tmp_return_value);
    goto function_return_exit;

    NUITKA_CANNOT_GET_HERE("Return statement must be present");


    return NULL;
    function_return_exit:;

    coroutine->m_returned = coroutine_heap->tmp_return_value;

    return NULL;

}

static PyObject *MAKE_COROUTINE_hikari$api$rest$$$function__38_fetch_webhook$$$coroutine__1_fetch_webhook() {
    return Nuitka_Coroutine_New(
        hikari$api$rest$$$function__38_fetch_webhook$$$coroutine__1_fetch_webhook_context,
        module_hikari$api$rest,
        mod_consts[84],
        mod_consts[85],
        codeobj_3ec2c4b987f49482becf480c5d7cfc03,
        NULL,
        0,
        sizeof(struct hikari$api$rest$$$function__38_fetch_webhook$$$coroutine__1_fetch_webhook_locals)
    );
}


static PyObject *impl_hikari$api$rest$$$function__39_fetch_channel_webhooks(struct Nuitka_FunctionObject const *self, PyObject **python_pars) {
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_self = python_pars[0];
    PyObject *par_channel = python_pars[1];
    PyObject *tmp_return_value = NULL;

    // Actual function body.


    tmp_return_value = MAKE_COROUTINE_hikari$api$rest$$$function__39_fetch_channel_webhooks$$$coroutine__1_fetch_channel_webhooks();

    goto function_return_exit;

    NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
    return NULL;


function_return_exit:
   // Function cleanup code if any.
    CHECK_OBJECT(par_self);
    Py_DECREF(par_self);
    CHECK_OBJECT(par_channel);
    Py_DECREF(par_channel);

   // Actual function exit with return value, making sure we did not make
   // the error status worse despite non-NULL return.
   CHECK_OBJECT(tmp_return_value);
   assert(had_error || !ERROR_OCCURRED());
   return tmp_return_value;
}



struct hikari$api$rest$$$function__39_fetch_channel_webhooks$$$coroutine__1_fetch_channel_webhooks_locals {
    PyObject *tmp_return_value;
};

static PyObject *hikari$api$rest$$$function__39_fetch_channel_webhooks$$$coroutine__1_fetch_channel_webhooks_context(struct Nuitka_CoroutineObject *coroutine, PyObject *yield_return_value) {
    CHECK_OBJECT(coroutine);
    assert(Nuitka_Coroutine_Check((PyObject *)coroutine));

    // Heap access if used.
    struct hikari$api$rest$$$function__39_fetch_channel_webhooks$$$coroutine__1_fetch_channel_webhooks_locals *coroutine_heap = (struct hikari$api$rest$$$function__39_fetch_channel_webhooks$$$coroutine__1_fetch_channel_webhooks_locals *)coroutine->m_heap_storage;

    // Dispatch to yield based on return label index:


    // Local variable initialization
    coroutine_heap->tmp_return_value = NULL;

    // Actual coroutine body.
    coroutine_heap->tmp_return_value = Py_None;
    Py_INCREF(coroutine_heap->tmp_return_value);
    goto function_return_exit;

    NUITKA_CANNOT_GET_HERE("Return statement must be present");


    return NULL;
    function_return_exit:;

    coroutine->m_returned = coroutine_heap->tmp_return_value;

    return NULL;

}

static PyObject *MAKE_COROUTINE_hikari$api$rest$$$function__39_fetch_channel_webhooks$$$coroutine__1_fetch_channel_webhooks() {
    return Nuitka_Coroutine_New(
        hikari$api$rest$$$function__39_fetch_channel_webhooks$$$coroutine__1_fetch_channel_webhooks_context,
        module_hikari$api$rest,
        mod_consts[87],
        mod_consts[88],
        codeobj_7fec987c5efd78706d159b41f6a66254,
        NULL,
        0,
        sizeof(struct hikari$api$rest$$$function__39_fetch_channel_webhooks$$$coroutine__1_fetch_channel_webhooks_locals)
    );
}


static PyObject *impl_hikari$api$rest$$$function__40_fetch_guild_webhooks(struct Nuitka_FunctionObject const *self, PyObject **python_pars) {
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_self = python_pars[0];
    PyObject *par_guild = python_pars[1];
    PyObject *tmp_return_value = NULL;

    // Actual function body.


    tmp_return_value = MAKE_COROUTINE_hikari$api$rest$$$function__40_fetch_guild_webhooks$$$coroutine__1_fetch_guild_webhooks();

    goto function_return_exit;

    NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
    return NULL;


function_return_exit:
   // Function cleanup code if any.
    CHECK_OBJECT(par_self);
    Py_DECREF(par_self);
    CHECK_OBJECT(par_guild);
    Py_DECREF(par_guild);

   // Actual function exit with return value, making sure we did not make
   // the error status worse despite non-NULL return.
   CHECK_OBJECT(tmp_return_value);
   assert(had_error || !ERROR_OCCURRED());
   return tmp_return_value;
}



struct hikari$api$rest$$$function__40_fetch_guild_webhooks$$$coroutine__1_fetch_guild_webhooks_locals {
    PyObject *tmp_return_value;
};

static PyObject *hikari$api$rest$$$function__40_fetch_guild_webhooks$$$coroutine__1_fetch_guild_webhooks_context(struct Nuitka_CoroutineObject *coroutine, PyObject *yield_return_value) {
    CHECK_OBJECT(coroutine);
    assert(Nuitka_Coroutine_Check((PyObject *)coroutine));

    // Heap access if used.
    struct hikari$api$rest$$$function__40_fetch_guild_webhooks$$$coroutine__1_fetch_guild_webhooks_locals *coroutine_heap = (struct hikari$api$rest$$$function__40_fetch_guild_webhooks$$$coroutine__1_fetch_guild_webhooks_locals *)coroutine->m_heap_storage;

    // Dispatch to yield based on return label index:


    // Local variable initialization
    coroutine_heap->tmp_return_value = NULL;

    // Actual coroutine body.
    coroutine_heap->tmp_return_value = Py_None;
    Py_INCREF(coroutine_heap->tmp_return_value);
    goto function_return_exit;

    NUITKA_CANNOT_GET_HERE("Return statement must be present");


    return NULL;
    function_return_exit:;

    coroutine->m_returned = coroutine_heap->tmp_return_value;

    return NULL;

}

static PyObject *MAKE_COROUTINE_hikari$api$rest$$$function__40_fetch_guild_webhooks$$$coroutine__1_fetch_guild_webhooks() {
    return Nuitka_Coroutine_New(
        hikari$api$rest$$$function__40_fetch_guild_webhooks$$$coroutine__1_fetch_guild_webhooks_context,
        module_hikari$api$rest,
        mod_consts[90],
        mod_consts[91],
        codeobj_897da39a3921a4fb20f81c67aebf9615,
        NULL,
        0,
        sizeof(struct hikari$api$rest$$$function__40_fetch_guild_webhooks$$$coroutine__1_fetch_guild_webhooks_locals)
    );
}


static PyObject *impl_hikari$api$rest$$$function__41_edit_webhook(struct Nuitka_FunctionObject const *self, PyObject **python_pars) {
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_self = python_pars[0];
    PyObject *par_webhook = python_pars[1];
    PyObject *par_token = python_pars[2];
    PyObject *par_name = python_pars[3];
    PyObject *par_avatar = python_pars[4];
    PyObject *par_channel = python_pars[5];
    PyObject *par_reason = python_pars[6];
    PyObject *tmp_return_value = NULL;

    // Actual function body.


    tmp_return_value = MAKE_COROUTINE_hikari$api$rest$$$function__41_edit_webhook$$$coroutine__1_edit_webhook();

    goto function_return_exit;

    NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
    return NULL;


function_return_exit:
   // Function cleanup code if any.
    CHECK_OBJECT(par_self);
    Py_DECREF(par_self);
    CHECK_OBJECT(par_webhook);
    Py_DECREF(par_webhook);
    CHECK_OBJECT(par_token);
    Py_DECREF(par_token);
    CHECK_OBJECT(par_name);
    Py_DECREF(par_name);
    CHECK_OBJECT(par_avatar);
    Py_DECREF(par_avatar);
    CHECK_OBJECT(par_channel);
    Py_DECREF(par_channel);
    CHECK_OBJECT(par_reason);
    Py_DECREF(par_reason);

   // Actual function exit with return value, making sure we did not make
   // the error status worse despite non-NULL return.
   CHECK_OBJECT(tmp_return_value);
   assert(had_error || !ERROR_OCCURRED());
   return tmp_return_value;
}



struct hikari$api$rest$$$function__41_edit_webhook$$$coroutine__1_edit_webhook_locals {
    PyObject *tmp_return_value;
};

static PyObject *hikari$api$rest$$$function__41_edit_webhook$$$coroutine__1_edit_webhook_context(struct Nuitka_CoroutineObject *coroutine, PyObject *yield_return_value) {
    CHECK_OBJECT(coroutine);
    assert(Nuitka_Coroutine_Check((PyObject *)coroutine));

    // Heap access if used.
    struct hikari$api$rest$$$function__41_edit_webhook$$$coroutine__1_edit_webhook_locals *coroutine_heap = (struct hikari$api$rest$$$function__41_edit_webhook$$$coroutine__1_edit_webhook_locals *)coroutine->m_heap_storage;

    // Dispatch to yield based on return label index:


    // Local variable initialization
    coroutine_heap->tmp_return_value = NULL;

    // Actual coroutine body.
    coroutine_heap->tmp_return_value = Py_None;
    Py_INCREF(coroutine_heap->tmp_return_value);
    goto function_return_exit;

    NUITKA_CANNOT_GET_HERE("Return statement must be present");


    return NULL;
    function_return_exit:;

    coroutine->m_returned = coroutine_heap->tmp_return_value;

    return NULL;

}

static PyObject *MAKE_COROUTINE_hikari$api$rest$$$function__41_edit_webhook$$$coroutine__1_edit_webhook() {
    return Nuitka_Coroutine_New(
        hikari$api$rest$$$function__41_edit_webhook$$$coroutine__1_edit_webhook_context,
        module_hikari$api$rest,
        mod_consts[93],
        mod_consts[94],
        codeobj_ab6ce3071043fa65a772b73f31b733d2,
        NULL,
        0,
        sizeof(struct hikari$api$rest$$$function__41_edit_webhook$$$coroutine__1_edit_webhook_locals)
    );
}


static PyObject *impl_hikari$api$rest$$$function__42_delete_webhook(struct Nuitka_FunctionObject const *self, PyObject **python_pars) {
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_self = python_pars[0];
    PyObject *par_webhook = python_pars[1];
    PyObject *par_token = python_pars[2];
    PyObject *tmp_return_value = NULL;

    // Actual function body.


    tmp_return_value = MAKE_COROUTINE_hikari$api$rest$$$function__42_delete_webhook$$$coroutine__1_delete_webhook();

    goto function_return_exit;

    NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
    return NULL;


function_return_exit:
   // Function cleanup code if any.
    CHECK_OBJECT(par_self);
    Py_DECREF(par_self);
    CHECK_OBJECT(par_webhook);
    Py_DECREF(par_webhook);
    CHECK_OBJECT(par_token);
    Py_DECREF(par_token);

   // Actual function exit with return value, making sure we did not make
   // the error status worse despite non-NULL return.
   CHECK_OBJECT(tmp_return_value);
   assert(had_error || !ERROR_OCCURRED());
   return tmp_return_value;
}



struct hikari$api$rest$$$function__42_delete_webhook$$$coroutine__1_delete_webhook_locals {
    PyObject *tmp_return_value;
};

static PyObject *hikari$api$rest$$$function__42_delete_webhook$$$coroutine__1_delete_webhook_context(struct Nuitka_CoroutineObject *coroutine, PyObject *yield_return_value) {
    CHECK_OBJECT(coroutine);
    assert(Nuitka_Coroutine_Check((PyObject *)coroutine));

    // Heap access if used.
    struct hikari$api$rest$$$function__42_delete_webhook$$$coroutine__1_delete_webhook_locals *coroutine_heap = (struct hikari$api$rest$$$function__42_delete_webhook$$$coroutine__1_delete_webhook_locals *)coroutine->m_heap_storage;

    // Dispatch to yield based on return label index:


    // Local variable initialization
    coroutine_heap->tmp_return_value = NULL;

    // Actual coroutine body.
    coroutine_heap->tmp_return_value = Py_None;
    Py_INCREF(coroutine_heap->tmp_return_value);
    goto function_return_exit;

    NUITKA_CANNOT_GET_HERE("Return statement must be present");


    return NULL;
    function_return_exit:;

    coroutine->m_returned = coroutine_heap->tmp_return_value;

    return NULL;

}

static PyObject *MAKE_COROUTINE_hikari$api$rest$$$function__42_delete_webhook$$$coroutine__1_delete_webhook() {
    return Nuitka_Coroutine_New(
        hikari$api$rest$$$function__42_delete_webhook$$$coroutine__1_delete_webhook_context,
        module_hikari$api$rest,
        mod_consts[96],
        mod_consts[97],
        codeobj_f175bac38463ebaf7f6b7020a9f501eb,
        NULL,
        0,
        sizeof(struct hikari$api$rest$$$function__42_delete_webhook$$$coroutine__1_delete_webhook_locals)
    );
}


static PyObject *impl_hikari$api$rest$$$function__43_execute_webhook(struct Nuitka_FunctionObject const *self, PyObject **python_pars) {
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_self = python_pars[0];
    PyObject *par_webhook = python_pars[1];
    PyObject *par_token = python_pars[2];
    PyObject *par_content = python_pars[3];
    PyObject *par_username = python_pars[4];
    PyObject *par_avatar_url = python_pars[5];
    PyObject *par_attachment = python_pars[6];
    PyObject *par_attachments = python_pars[7];
    PyObject *par_component = python_pars[8];
    PyObject *par_components = python_pars[9];
    PyObject *par_embed = python_pars[10];
    PyObject *par_embeds = python_pars[11];
    PyObject *par_tts = python_pars[12];
    PyObject *par_mentions_everyone = python_pars[13];
    PyObject *par_user_mentions = python_pars[14];
    PyObject *par_role_mentions = python_pars[15];
    PyObject *par_flags = python_pars[16];
    PyObject *tmp_return_value = NULL;

    // Actual function body.


    tmp_return_value = MAKE_COROUTINE_hikari$api$rest$$$function__43_execute_webhook$$$coroutine__1_execute_webhook();

    goto function_return_exit;

    NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
    return NULL;


function_return_exit:
   // Function cleanup code if any.
    CHECK_OBJECT(par_self);
    Py_DECREF(par_self);
    CHECK_OBJECT(par_webhook);
    Py_DECREF(par_webhook);
    CHECK_OBJECT(par_token);
    Py_DECREF(par_token);
    CHECK_OBJECT(par_content);
    Py_DECREF(par_content);
    CHECK_OBJECT(par_username);
    Py_DECREF(par_username);
    CHECK_OBJECT(par_avatar_url);
    Py_DECREF(par_avatar_url);
    CHECK_OBJECT(par_attachment);
    Py_DECREF(par_attachment);
    CHECK_OBJECT(par_attachments);
    Py_DECREF(par_attachments);
    CHECK_OBJECT(par_component);
    Py_DECREF(par_component);
    CHECK_OBJECT(par_components);
    Py_DECREF(par_components);
    CHECK_OBJECT(par_embed);
    Py_DECREF(par_embed);
    CHECK_OBJECT(par_embeds);
    Py_DECREF(par_embeds);
    CHECK_OBJECT(par_tts);
    Py_DECREF(par_tts);
    CHECK_OBJECT(par_mentions_everyone);
    Py_DECREF(par_mentions_everyone);
    CHECK_OBJECT(par_user_mentions);
    Py_DECREF(par_user_mentions);
    CHECK_OBJECT(par_role_mentions);
    Py_DECREF(par_role_mentions);
    CHECK_OBJECT(par_flags);
    Py_DECREF(par_flags);

   // Actual function exit with return value, making sure we did not make
   // the error status worse despite non-NULL return.
   CHECK_OBJECT(tmp_return_value);
   assert(had_error || !ERROR_OCCURRED());
   return tmp_return_value;
}



struct hikari$api$rest$$$function__43_execute_webhook$$$coroutine__1_execute_webhook_locals {
    PyObject *tmp_return_value;
};

static PyObject *hikari$api$rest$$$function__43_execute_webhook$$$coroutine__1_execute_webhook_context(struct Nuitka_CoroutineObject *coroutine, PyObject *yield_return_value) {
    CHECK_OBJECT(coroutine);
    assert(Nuitka_Coroutine_Check((PyObject *)coroutine));

    // Heap access if used.
    struct hikari$api$rest$$$function__43_execute_webhook$$$coroutine__1_execute_webhook_locals *coroutine_heap = (struct hikari$api$rest$$$function__43_execute_webhook$$$coroutine__1_execute_webhook_locals *)coroutine->m_heap_storage;

    // Dispatch to yield based on return label index:


    // Local variable initialization
    coroutine_heap->tmp_return_value = NULL;

    // Actual coroutine body.
    coroutine_heap->tmp_return_value = Py_None;
    Py_INCREF(coroutine_heap->tmp_return_value);
    goto function_return_exit;

    NUITKA_CANNOT_GET_HERE("Return statement must be present");


    return NULL;
    function_return_exit:;

    coroutine->m_returned = coroutine_heap->tmp_return_value;

    return NULL;

}

static PyObject *MAKE_COROUTINE_hikari$api$rest$$$function__43_execute_webhook$$$coroutine__1_execute_webhook() {
    return Nuitka_Coroutine_New(
        hikari$api$rest$$$function__43_execute_webhook$$$coroutine__1_execute_webhook_context,
        module_hikari$api$rest,
        mod_consts[99],
        mod_consts[100],
        codeobj_740e80e9d704456a9c1a4a09c2019ff4,
        NULL,
        0,
        sizeof(struct hikari$api$rest$$$function__43_execute_webhook$$$coroutine__1_execute_webhook_locals)
    );
}


static PyObject *impl_hikari$api$rest$$$function__44_fetch_webhook_message(struct Nuitka_FunctionObject const *self, PyObject **python_pars) {
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_self = python_pars[0];
    PyObject *par_webhook = python_pars[1];
    PyObject *par_token = python_pars[2];
    PyObject *par_message = python_pars[3];
    PyObject *tmp_return_value = NULL;

    // Actual function body.


    tmp_return_value = MAKE_COROUTINE_hikari$api$rest$$$function__44_fetch_webhook_message$$$coroutine__1_fetch_webhook_message();

    goto function_return_exit;

    NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
    return NULL;


function_return_exit:
   // Function cleanup code if any.
    CHECK_OBJECT(par_self);
    Py_DECREF(par_self);
    CHECK_OBJECT(par_webhook);
    Py_DECREF(par_webhook);
    CHECK_OBJECT(par_token);
    Py_DECREF(par_token);
    CHECK_OBJECT(par_message);
    Py_DECREF(par_message);

   // Actual function exit with return value, making sure we did not make
   // the error status worse despite non-NULL return.
   CHECK_OBJECT(tmp_return_value);
   assert(had_error || !ERROR_OCCURRED());
   return tmp_return_value;
}



struct hikari$api$rest$$$function__44_fetch_webhook_message$$$coroutine__1_fetch_webhook_message_locals {
    PyObject *tmp_return_value;
};

static PyObject *hikari$api$rest$$$function__44_fetch_webhook_message$$$coroutine__1_fetch_webhook_message_context(struct Nuitka_CoroutineObject *coroutine, PyObject *yield_return_value) {
    CHECK_OBJECT(coroutine);
    assert(Nuitka_Coroutine_Check((PyObject *)coroutine));

    // Heap access if used.
    struct hikari$api$rest$$$function__44_fetch_webhook_message$$$coroutine__1_fetch_webhook_message_locals *coroutine_heap = (struct hikari$api$rest$$$function__44_fetch_webhook_message$$$coroutine__1_fetch_webhook_message_locals *)coroutine->m_heap_storage;

    // Dispatch to yield based on return label index:


    // Local variable initialization
    coroutine_heap->tmp_return_value = NULL;

    // Actual coroutine body.
    coroutine_heap->tmp_return_value = Py_None;
    Py_INCREF(coroutine_heap->tmp_return_value);
    goto function_return_exit;

    NUITKA_CANNOT_GET_HERE("Return statement must be present");


    return NULL;
    function_return_exit:;

    coroutine->m_returned = coroutine_heap->tmp_return_value;

    return NULL;

}

static PyObject *MAKE_COROUTINE_hikari$api$rest$$$function__44_fetch_webhook_message$$$coroutine__1_fetch_webhook_message() {
    return Nuitka_Coroutine_New(
        hikari$api$rest$$$function__44_fetch_webhook_message$$$coroutine__1_fetch_webhook_message_context,
        module_hikari$api$rest,
        mod_consts[102],
        mod_consts[103],
        codeobj_3f78627ed1169b7991275a5b616d81a3,
        NULL,
        0,
        sizeof(struct hikari$api$rest$$$function__44_fetch_webhook_message$$$coroutine__1_fetch_webhook_message_locals)
    );
}


static PyObject *impl_hikari$api$rest$$$function__45_edit_webhook_message(struct Nuitka_FunctionObject const *self, PyObject **python_pars) {
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_self = python_pars[0];
    PyObject *par_webhook = python_pars[1];
    PyObject *par_token = python_pars[2];
    PyObject *par_message = python_pars[3];
    PyObject *par_content = python_pars[4];
    PyObject *par_attachment = python_pars[5];
    PyObject *par_attachments = python_pars[6];
    PyObject *par_component = python_pars[7];
    PyObject *par_components = python_pars[8];
    PyObject *par_embed = python_pars[9];
    PyObject *par_embeds = python_pars[10];
    PyObject *par_replace_attachments = python_pars[11];
    PyObject *par_mentions_everyone = python_pars[12];
    PyObject *par_user_mentions = python_pars[13];
    PyObject *par_role_mentions = python_pars[14];
    PyObject *tmp_return_value = NULL;

    // Actual function body.


    tmp_return_value = MAKE_COROUTINE_hikari$api$rest$$$function__45_edit_webhook_message$$$coroutine__1_edit_webhook_message();

    goto function_return_exit;

    NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
    return NULL;


function_return_exit:
   // Function cleanup code if any.
    CHECK_OBJECT(par_self);
    Py_DECREF(par_self);
    CHECK_OBJECT(par_webhook);
    Py_DECREF(par_webhook);
    CHECK_OBJECT(par_token);
    Py_DECREF(par_token);
    CHECK_OBJECT(par_message);
    Py_DECREF(par_message);
    CHECK_OBJECT(par_content);
    Py_DECREF(par_content);
    CHECK_OBJECT(par_attachment);
    Py_DECREF(par_attachment);
    CHECK_OBJECT(par_attachments);
    Py_DECREF(par_attachments);
    CHECK_OBJECT(par_component);
    Py_DECREF(par_component);
    CHECK_OBJECT(par_components);
    Py_DECREF(par_components);
    CHECK_OBJECT(par_embed);
    Py_DECREF(par_embed);
    CHECK_OBJECT(par_embeds);
    Py_DECREF(par_embeds);
    CHECK_OBJECT(par_replace_attachments);
    Py_DECREF(par_replace_attachments);
    CHECK_OBJECT(par_mentions_everyone);
    Py_DECREF(par_mentions_everyone);
    CHECK_OBJECT(par_user_mentions);
    Py_DECREF(par_user_mentions);
    CHECK_OBJECT(par_role_mentions);
    Py_DECREF(par_role_mentions);

   // Actual function exit with return value, making sure we did not make
   // the error status worse despite non-NULL return.
   CHECK_OBJECT(tmp_return_value);
   assert(had_error || !ERROR_OCCURRED());
   return tmp_return_value;
}



struct hikari$api$rest$$$function__45_edit_webhook_message$$$coroutine__1_edit_webhook_message_locals {
    PyObject *tmp_return_value;
};

static PyObject *hikari$api$rest$$$function__45_edit_webhook_message$$$coroutine__1_edit_webhook_message_context(struct Nuitka_CoroutineObject *coroutine, PyObject *yield_return_value) {
    CHECK_OBJECT(coroutine);
    assert(Nuitka_Coroutine_Check((PyObject *)coroutine));

    // Heap access if used.
    struct hikari$api$rest$$$function__45_edit_webhook_message$$$coroutine__1_edit_webhook_message_locals *coroutine_heap = (struct hikari$api$rest$$$function__45_edit_webhook_message$$$coroutine__1_edit_webhook_message_locals *)coroutine->m_heap_storage;

    // Dispatch to yield based on return label index:


    // Local variable initialization
    coroutine_heap->tmp_return_value = NULL;

    // Actual coroutine body.
    coroutine_heap->tmp_return_value = Py_None;
    Py_INCREF(coroutine_heap->tmp_return_value);
    goto function_return_exit;

    NUITKA_CANNOT_GET_HERE("Return statement must be present");


    return NULL;
    function_return_exit:;

    coroutine->m_returned = coroutine_heap->tmp_return_value;

    return NULL;

}

static PyObject *MAKE_COROUTINE_hikari$api$rest$$$function__45_edit_webhook_message$$$coroutine__1_edit_webhook_message() {
    return Nuitka_Coroutine_New(
        hikari$api$rest$$$function__45_edit_webhook_message$$$coroutine__1_edit_webhook_message_context,
        module_hikari$api$rest,
        mod_consts[105],
        mod_consts[106],
        codeobj_6ecc85b2a92137e7d96b51706f98b305,
        NULL,
        0,
        sizeof(struct hikari$api$rest$$$function__45_edit_webhook_message$$$coroutine__1_edit_webhook_message_locals)
    );
}


static PyObject *impl_hikari$api$rest$$$function__46_delete_webhook_message(struct Nuitka_FunctionObject const *self, PyObject **python_pars) {
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_self = python_pars[0];
    PyObject *par_webhook = python_pars[1];
    PyObject *par_token = python_pars[2];
    PyObject *par_message = python_pars[3];
    PyObject *tmp_return_value = NULL;

    // Actual function body.


    tmp_return_value = MAKE_COROUTINE_hikari$api$rest$$$function__46_delete_webhook_message$$$coroutine__1_delete_webhook_message();

    goto function_return_exit;

    NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
    return NULL;


function_return_exit:
   // Function cleanup code if any.
    CHECK_OBJECT(par_self);
    Py_DECREF(par_self);
    CHECK_OBJECT(par_webhook);
    Py_DECREF(par_webhook);
    CHECK_OBJECT(par_token);
    Py_DECREF(par_token);
    CHECK_OBJECT(par_message);
    Py_DECREF(par_message);

   // Actual function exit with return value, making sure we did not make
   // the error status worse despite non-NULL return.
   CHECK_OBJECT(tmp_return_value);
   assert(had_error || !ERROR_OCCURRED());
   return tmp_return_value;
}



struct hikari$api$rest$$$function__46_delete_webhook_message$$$coroutine__1_delete_webhook_message_locals {
    PyObject *tmp_return_value;
};

static PyObject *hikari$api$rest$$$function__46_delete_webhook_message$$$coroutine__1_delete_webhook_message_context(struct Nuitka_CoroutineObject *coroutine, PyObject *yield_return_value) {
    CHECK_OBJECT(coroutine);
    assert(Nuitka_Coroutine_Check((PyObject *)coroutine));

    // Heap access if used.
    struct hikari$api$rest$$$function__46_delete_webhook_message$$$coroutine__1_delete_webhook_message_locals *coroutine_heap = (struct hikari$api$rest$$$function__46_delete_webhook_message$$$coroutine__1_delete_webhook_message_locals *)coroutine->m_heap_storage;

    // Dispatch to yield based on return label index:


    // Local variable initialization
    coroutine_heap->tmp_return_value = NULL;

    // Actual coroutine body.
    coroutine_heap->tmp_return_value = Py_None;
    Py_INCREF(coroutine_heap->tmp_return_value);
    goto function_return_exit;

    NUITKA_CANNOT_GET_HERE("Return statement must be present");


    return NULL;
    function_return_exit:;

    coroutine->m_returned = coroutine_heap->tmp_return_value;

    return NULL;

}

static PyObject *MAKE_COROUTINE_hikari$api$rest$$$function__46_delete_webhook_message$$$coroutine__1_delete_webhook_message() {
    return Nuitka_Coroutine_New(
        hikari$api$rest$$$function__46_delete_webhook_message$$$coroutine__1_delete_webhook_message_context,
        module_hikari$api$rest,
        mod_consts[108],
        mod_consts[109],
        codeobj_3794b902c3f3b912d5c9431679faf993,
        NULL,
        0,
        sizeof(struct hikari$api$rest$$$function__46_delete_webhook_message$$$coroutine__1_delete_webhook_message_locals)
    );
}


static PyObject *impl_hikari$api$rest$$$function__47_fetch_gateway_url(struct Nuitka_FunctionObject const *self, PyObject **python_pars) {
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_self = python_pars[0];
    PyObject *tmp_return_value = NULL;

    // Actual function body.


    tmp_return_value = MAKE_COROUTINE_hikari$api$rest$$$function__47_fetch_gateway_url$$$coroutine__1_fetch_gateway_url();

    goto function_return_exit;

    NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
    return NULL;


function_return_exit:
   // Function cleanup code if any.
    CHECK_OBJECT(par_self);
    Py_DECREF(par_self);

   // Actual function exit with return value, making sure we did not make
   // the error status worse despite non-NULL return.
   CHECK_OBJECT(tmp_return_value);
   assert(had_error || !ERROR_OCCURRED());
   return tmp_return_value;
}



struct hikari$api$rest$$$function__47_fetch_gateway_url$$$coroutine__1_fetch_gateway_url_locals {
    PyObject *tmp_return_value;
};

static PyObject *hikari$api$rest$$$function__47_fetch_gateway_url$$$coroutine__1_fetch_gateway_url_context(struct Nuitka_CoroutineObject *coroutine, PyObject *yield_return_value) {
    CHECK_OBJECT(coroutine);
    assert(Nuitka_Coroutine_Check((PyObject *)coroutine));

    // Heap access if used.
    struct hikari$api$rest$$$function__47_fetch_gateway_url$$$coroutine__1_fetch_gateway_url_locals *coroutine_heap = (struct hikari$api$rest$$$function__47_fetch_gateway_url$$$coroutine__1_fetch_gateway_url_locals *)coroutine->m_heap_storage;

    // Dispatch to yield based on return label index:


    // Local variable initialization
    coroutine_heap->tmp_return_value = NULL;

    // Actual coroutine body.
    coroutine_heap->tmp_return_value = Py_None;
    Py_INCREF(coroutine_heap->tmp_return_value);
    goto function_return_exit;

    NUITKA_CANNOT_GET_HERE("Return statement must be present");


    return NULL;
    function_return_exit:;

    coroutine->m_returned = coroutine_heap->tmp_return_value;

    return NULL;

}

static PyObject *MAKE_COROUTINE_hikari$api$rest$$$function__47_fetch_gateway_url$$$coroutine__1_fetch_gateway_url() {
    return Nuitka_Coroutine_New(
        hikari$api$rest$$$function__47_fetch_gateway_url$$$coroutine__1_fetch_gateway_url_context,
        module_hikari$api$rest,
        mod_consts[111],
        mod_consts[112],
        codeobj_9a178547a7eb03437641e09b597ccba0,
        NULL,
        0,
        sizeof(struct hikari$api$rest$$$function__47_fetch_gateway_url$$$coroutine__1_fetch_gateway_url_locals)
    );
}


static PyObject *impl_hikari$api$rest$$$function__48_fetch_gateway_bot_info(struct Nuitka_FunctionObject const *self, PyObject **python_pars) {
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_self = python_pars[0];
    PyObject *tmp_return_value = NULL;

    // Actual function body.


    tmp_return_value = MAKE_COROUTINE_hikari$api$rest$$$function__48_fetch_gateway_bot_info$$$coroutine__1_fetch_gateway_bot_info();

    goto function_return_exit;

    NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
    return NULL;


function_return_exit:
   // Function cleanup code if any.
    CHECK_OBJECT(par_self);
    Py_DECREF(par_self);

   // Actual function exit with return value, making sure we did not make
   // the error status worse despite non-NULL return.
   CHECK_OBJECT(tmp_return_value);
   assert(had_error || !ERROR_OCCURRED());
   return tmp_return_value;
}



struct hikari$api$rest$$$function__48_fetch_gateway_bot_info$$$coroutine__1_fetch_gateway_bot_info_locals {
    PyObject *tmp_return_value;
};

static PyObject *hikari$api$rest$$$function__48_fetch_gateway_bot_info$$$coroutine__1_fetch_gateway_bot_info_context(struct Nuitka_CoroutineObject *coroutine, PyObject *yield_return_value) {
    CHECK_OBJECT(coroutine);
    assert(Nuitka_Coroutine_Check((PyObject *)coroutine));

    // Heap access if used.
    struct hikari$api$rest$$$function__48_fetch_gateway_bot_info$$$coroutine__1_fetch_gateway_bot_info_locals *coroutine_heap = (struct hikari$api$rest$$$function__48_fetch_gateway_bot_info$$$coroutine__1_fetch_gateway_bot_info_locals *)coroutine->m_heap_storage;

    // Dispatch to yield based on return label index:


    // Local variable initialization
    coroutine_heap->tmp_return_value = NULL;

    // Actual coroutine body.
    coroutine_heap->tmp_return_value = Py_None;
    Py_INCREF(coroutine_heap->tmp_return_value);
    goto function_return_exit;

    NUITKA_CANNOT_GET_HERE("Return statement must be present");


    return NULL;
    function_return_exit:;

    coroutine->m_returned = coroutine_heap->tmp_return_value;

    return NULL;

}

static PyObject *MAKE_COROUTINE_hikari$api$rest$$$function__48_fetch_gateway_bot_info$$$coroutine__1_fetch_gateway_bot_info() {
    return Nuitka_Coroutine_New(
        hikari$api$rest$$$function__48_fetch_gateway_bot_info$$$coroutine__1_fetch_gateway_bot_info_context,
        module_hikari$api$rest,
        mod_consts[114],
        mod_consts[115],
        codeobj_1b8b30e8f0275ccaf868189a8ed3f51d,
        NULL,
        0,
        sizeof(struct hikari$api$rest$$$function__48_fetch_gateway_bot_info$$$coroutine__1_fetch_gateway_bot_info_locals)
    );
}


static PyObject *impl_hikari$api$rest$$$function__49_fetch_invite(struct Nuitka_FunctionObject const *self, PyObject **python_pars) {
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_self = python_pars[0];
    PyObject *par_invite = python_pars[1];
    PyObject *tmp_return_value = NULL;

    // Actual function body.


    tmp_return_value = MAKE_COROUTINE_hikari$api$rest$$$function__49_fetch_invite$$$coroutine__1_fetch_invite();

    goto function_return_exit;

    NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
    return NULL;


function_return_exit:
   // Function cleanup code if any.
    CHECK_OBJECT(par_self);
    Py_DECREF(par_self);
    CHECK_OBJECT(par_invite);
    Py_DECREF(par_invite);

   // Actual function exit with return value, making sure we did not make
   // the error status worse despite non-NULL return.
   CHECK_OBJECT(tmp_return_value);
   assert(had_error || !ERROR_OCCURRED());
   return tmp_return_value;
}



struct hikari$api$rest$$$function__49_fetch_invite$$$coroutine__1_fetch_invite_locals {
    PyObject *tmp_return_value;
};

static PyObject *hikari$api$rest$$$function__49_fetch_invite$$$coroutine__1_fetch_invite_context(struct Nuitka_CoroutineObject *coroutine, PyObject *yield_return_value) {
    CHECK_OBJECT(coroutine);
    assert(Nuitka_Coroutine_Check((PyObject *)coroutine));

    // Heap access if used.
    struct hikari$api$rest$$$function__49_fetch_invite$$$coroutine__1_fetch_invite_locals *coroutine_heap = (struct hikari$api$rest$$$function__49_fetch_invite$$$coroutine__1_fetch_invite_locals *)coroutine->m_heap_storage;

    // Dispatch to yield based on return label index:


    // Local variable initialization
    coroutine_heap->tmp_return_value = NULL;

    // Actual coroutine body.
    coroutine_heap->tmp_return_value = Py_None;
    Py_INCREF(coroutine_heap->tmp_return_value);
    goto function_return_exit;

    NUITKA_CANNOT_GET_HERE("Return statement must be present");


    return NULL;
    function_return_exit:;

    coroutine->m_returned = coroutine_heap->tmp_return_value;

    return NULL;

}

static PyObject *MAKE_COROUTINE_hikari$api$rest$$$function__49_fetch_invite$$$coroutine__1_fetch_invite() {
    return Nuitka_Coroutine_New(
        hikari$api$rest$$$function__49_fetch_invite$$$coroutine__1_fetch_invite_context,
        module_hikari$api$rest,
        mod_consts[117],
        mod_consts[118],
        codeobj_1cfe50d4370a8a818a27570fe3dd1f60,
        NULL,
        0,
        sizeof(struct hikari$api$rest$$$function__49_fetch_invite$$$coroutine__1_fetch_invite_locals)
    );
}


static PyObject *impl_hikari$api$rest$$$function__50_delete_invite(struct Nuitka_FunctionObject const *self, PyObject **python_pars) {
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_self = python_pars[0];
    PyObject *par_invite = python_pars[1];
    PyObject *tmp_return_value = NULL;

    // Actual function body.


    tmp_return_value = MAKE_COROUTINE_hikari$api$rest$$$function__50_delete_invite$$$coroutine__1_delete_invite();

    goto function_return_exit;

    NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
    return NULL;


function_return_exit:
   // Function cleanup code if any.
    CHECK_OBJECT(par_self);
    Py_DECREF(par_self);
    CHECK_OBJECT(par_invite);
    Py_DECREF(par_invite);

   // Actual function exit with return value, making sure we did not make
   // the error status worse despite non-NULL return.
   CHECK_OBJECT(tmp_return_value);
   assert(had_error || !ERROR_OCCURRED());
   return tmp_return_value;
}



struct hikari$api$rest$$$function__50_delete_invite$$$coroutine__1_delete_invite_locals {
    PyObject *tmp_return_value;
};

static PyObject *hikari$api$rest$$$function__50_delete_invite$$$coroutine__1_delete_invite_context(struct Nuitka_CoroutineObject *coroutine, PyObject *yield_return_value) {
    CHECK_OBJECT(coroutine);
    assert(Nuitka_Coroutine_Check((PyObject *)coroutine));

    // Heap access if used.
    struct hikari$api$rest$$$function__50_delete_invite$$$coroutine__1_delete_invite_locals *coroutine_heap = (struct hikari$api$rest$$$function__50_delete_invite$$$coroutine__1_delete_invite_locals *)coroutine->m_heap_storage;

    // Dispatch to yield based on return label index:


    // Local variable initialization
    coroutine_heap->tmp_return_value = NULL;

    // Actual coroutine body.
    coroutine_heap->tmp_return_value = Py_None;
    Py_INCREF(coroutine_heap->tmp_return_value);
    goto function_return_exit;

    NUITKA_CANNOT_GET_HERE("Return statement must be present");


    return NULL;
    function_return_exit:;

    coroutine->m_returned = coroutine_heap->tmp_return_value;

    return NULL;

}

static PyObject *MAKE_COROUTINE_hikari$api$rest$$$function__50_delete_invite$$$coroutine__1_delete_invite() {
    return Nuitka_Coroutine_New(
        hikari$api$rest$$$function__50_delete_invite$$$coroutine__1_delete_invite_context,
        module_hikari$api$rest,
        mod_consts[120],
        mod_consts[121],
        codeobj_a7cff8c269d3d4bb6d35ad3514fa1ef1,
        NULL,
        0,
        sizeof(struct hikari$api$rest$$$function__50_delete_invite$$$coroutine__1_delete_invite_locals)
    );
}


static PyObject *impl_hikari$api$rest$$$function__51_fetch_my_user(struct Nuitka_FunctionObject const *self, PyObject **python_pars) {
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_self = python_pars[0];
    PyObject *tmp_return_value = NULL;

    // Actual function body.


    tmp_return_value = MAKE_COROUTINE_hikari$api$rest$$$function__51_fetch_my_user$$$coroutine__1_fetch_my_user();

    goto function_return_exit;

    NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
    return NULL;


function_return_exit:
   // Function cleanup code if any.
    CHECK_OBJECT(par_self);
    Py_DECREF(par_self);

   // Actual function exit with return value, making sure we did not make
   // the error status worse despite non-NULL return.
   CHECK_OBJECT(tmp_return_value);
   assert(had_error || !ERROR_OCCURRED());
   return tmp_return_value;
}



struct hikari$api$rest$$$function__51_fetch_my_user$$$coroutine__1_fetch_my_user_locals {
    PyObject *tmp_return_value;
};

static PyObject *hikari$api$rest$$$function__51_fetch_my_user$$$coroutine__1_fetch_my_user_context(struct Nuitka_CoroutineObject *coroutine, PyObject *yield_return_value) {
    CHECK_OBJECT(coroutine);
    assert(Nuitka_Coroutine_Check((PyObject *)coroutine));

    // Heap access if used.
    struct hikari$api$rest$$$function__51_fetch_my_user$$$coroutine__1_fetch_my_user_locals *coroutine_heap = (struct hikari$api$rest$$$function__51_fetch_my_user$$$coroutine__1_fetch_my_user_locals *)coroutine->m_heap_storage;

    // Dispatch to yield based on return label index:


    // Local variable initialization
    coroutine_heap->tmp_return_value = NULL;

    // Actual coroutine body.
    coroutine_heap->tmp_return_value = Py_None;
    Py_INCREF(coroutine_heap->tmp_return_value);
    goto function_return_exit;

    NUITKA_CANNOT_GET_HERE("Return statement must be present");


    return NULL;
    function_return_exit:;

    coroutine->m_returned = coroutine_heap->tmp_return_value;

    return NULL;

}

static PyObject *MAKE_COROUTINE_hikari$api$rest$$$function__51_fetch_my_user$$$coroutine__1_fetch_my_user() {
    return Nuitka_Coroutine_New(
        hikari$api$rest$$$function__51_fetch_my_user$$$coroutine__1_fetch_my_user_context,
        module_hikari$api$rest,
        mod_consts[123],
        mod_consts[124],
        codeobj_f7f835fee11a2ba50d39fdcf49417e24,
        NULL,
        0,
        sizeof(struct hikari$api$rest$$$function__51_fetch_my_user$$$coroutine__1_fetch_my_user_locals)
    );
}


static PyObject *impl_hikari$api$rest$$$function__52_edit_my_user(struct Nuitka_FunctionObject const *self, PyObject **python_pars) {
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_self = python_pars[0];
    PyObject *par_username = python_pars[1];
    PyObject *par_avatar = python_pars[2];
    PyObject *tmp_return_value = NULL;

    // Actual function body.


    tmp_return_value = MAKE_COROUTINE_hikari$api$rest$$$function__52_edit_my_user$$$coroutine__1_edit_my_user();

    goto function_return_exit;

    NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
    return NULL;


function_return_exit:
   // Function cleanup code if any.
    CHECK_OBJECT(par_self);
    Py_DECREF(par_self);
    CHECK_OBJECT(par_username);
    Py_DECREF(par_username);
    CHECK_OBJECT(par_avatar);
    Py_DECREF(par_avatar);

   // Actual function exit with return value, making sure we did not make
   // the error status worse despite non-NULL return.
   CHECK_OBJECT(tmp_return_value);
   assert(had_error || !ERROR_OCCURRED());
   return tmp_return_value;
}



struct hikari$api$rest$$$function__52_edit_my_user$$$coroutine__1_edit_my_user_locals {
    PyObject *tmp_return_value;
};

static PyObject *hikari$api$rest$$$function__52_edit_my_user$$$coroutine__1_edit_my_user_context(struct Nuitka_CoroutineObject *coroutine, PyObject *yield_return_value) {
    CHECK_OBJECT(coroutine);
    assert(Nuitka_Coroutine_Check((PyObject *)coroutine));

    // Heap access if used.
    struct hikari$api$rest$$$function__52_edit_my_user$$$coroutine__1_edit_my_user_locals *coroutine_heap = (struct hikari$api$rest$$$function__52_edit_my_user$$$coroutine__1_edit_my_user_locals *)coroutine->m_heap_storage;

    // Dispatch to yield based on return label index:


    // Local variable initialization
    coroutine_heap->tmp_return_value = NULL;

    // Actual coroutine body.
    coroutine_heap->tmp_return_value = Py_None;
    Py_INCREF(coroutine_heap->tmp_return_value);
    goto function_return_exit;

    NUITKA_CANNOT_GET_HERE("Return statement must be present");


    return NULL;
    function_return_exit:;

    coroutine->m_returned = coroutine_heap->tmp_return_value;

    return NULL;

}

static PyObject *MAKE_COROUTINE_hikari$api$rest$$$function__52_edit_my_user$$$coroutine__1_edit_my_user() {
    return Nuitka_Coroutine_New(
        hikari$api$rest$$$function__52_edit_my_user$$$coroutine__1_edit_my_user_context,
        module_hikari$api$rest,
        mod_consts[126],
        mod_consts[127],
        codeobj_d1a9c3d728bb5f40e935c92a1bda0a4b,
        NULL,
        0,
        sizeof(struct hikari$api$rest$$$function__52_edit_my_user$$$coroutine__1_edit_my_user_locals)
    );
}


static PyObject *impl_hikari$api$rest$$$function__53_fetch_my_connections(struct Nuitka_FunctionObject const *self, PyObject **python_pars) {
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_self = python_pars[0];
    PyObject *tmp_return_value = NULL;

    // Actual function body.


    tmp_return_value = MAKE_COROUTINE_hikari$api$rest$$$function__53_fetch_my_connections$$$coroutine__1_fetch_my_connections();

    goto function_return_exit;

    NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
    return NULL;


function_return_exit:
   // Function cleanup code if any.
    CHECK_OBJECT(par_self);
    Py_DECREF(par_self);

   // Actual function exit with return value, making sure we did not make
   // the error status worse despite non-NULL return.
   CHECK_OBJECT(tmp_return_value);
   assert(had_error || !ERROR_OCCURRED());
   return tmp_return_value;
}



struct hikari$api$rest$$$function__53_fetch_my_connections$$$coroutine__1_fetch_my_connections_locals {
    PyObject *tmp_return_value;
};

static PyObject *hikari$api$rest$$$function__53_fetch_my_connections$$$coroutine__1_fetch_my_connections_context(struct Nuitka_CoroutineObject *coroutine, PyObject *yield_return_value) {
    CHECK_OBJECT(coroutine);
    assert(Nuitka_Coroutine_Check((PyObject *)coroutine));

    // Heap access if used.
    struct hikari$api$rest$$$function__53_fetch_my_connections$$$coroutine__1_fetch_my_connections_locals *coroutine_heap = (struct hikari$api$rest$$$function__53_fetch_my_connections$$$coroutine__1_fetch_my_connections_locals *)coroutine->m_heap_storage;

    // Dispatch to yield based on return label index:


    // Local variable initialization
    coroutine_heap->tmp_return_value = NULL;

    // Actual coroutine body.
    coroutine_heap->tmp_return_value = Py_None;
    Py_INCREF(coroutine_heap->tmp_return_value);
    goto function_return_exit;

    NUITKA_CANNOT_GET_HERE("Return statement must be present");


    return NULL;
    function_return_exit:;

    coroutine->m_returned = coroutine_heap->tmp_return_value;

    return NULL;

}

static PyObject *MAKE_COROUTINE_hikari$api$rest$$$function__53_fetch_my_connections$$$coroutine__1_fetch_my_connections() {
    return Nuitka_Coroutine_New(
        hikari$api$rest$$$function__53_fetch_my_connections$$$coroutine__1_fetch_my_connections_context,
        module_hikari$api$rest,
        mod_consts[129],
        mod_consts[130],
        codeobj_ba1ec6f1e1d723bafa837c4ba4beb49b,
        NULL,
        0,
        sizeof(struct hikari$api$rest$$$function__53_fetch_my_connections$$$coroutine__1_fetch_my_connections_locals)
    );
}


static PyObject *impl_hikari$api$rest$$$function__55_leave_guild(struct Nuitka_FunctionObject const *self, PyObject **python_pars) {
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_self = python_pars[0];
    PyObject *par_guild = python_pars[1];
    PyObject *tmp_return_value = NULL;

    // Actual function body.


    tmp_return_value = MAKE_COROUTINE_hikari$api$rest$$$function__55_leave_guild$$$coroutine__1_leave_guild();

    goto function_return_exit;

    NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
    return NULL;


function_return_exit:
   // Function cleanup code if any.
    CHECK_OBJECT(par_self);
    Py_DECREF(par_self);
    CHECK_OBJECT(par_guild);
    Py_DECREF(par_guild);

   // Actual function exit with return value, making sure we did not make
   // the error status worse despite non-NULL return.
   CHECK_OBJECT(tmp_return_value);
   assert(had_error || !ERROR_OCCURRED());
   return tmp_return_value;
}



struct hikari$api$rest$$$function__55_leave_guild$$$coroutine__1_leave_guild_locals {
    PyObject *tmp_return_value;
};

static PyObject *hikari$api$rest$$$function__55_leave_guild$$$coroutine__1_leave_guild_context(struct Nuitka_CoroutineObject *coroutine, PyObject *yield_return_value) {
    CHECK_OBJECT(coroutine);
    assert(Nuitka_Coroutine_Check((PyObject *)coroutine));

    // Heap access if used.
    struct hikari$api$rest$$$function__55_leave_guild$$$coroutine__1_leave_guild_locals *coroutine_heap = (struct hikari$api$rest$$$function__55_leave_guild$$$coroutine__1_leave_guild_locals *)coroutine->m_heap_storage;

    // Dispatch to yield based on return label index:


    // Local variable initialization
    coroutine_heap->tmp_return_value = NULL;

    // Actual coroutine body.
    coroutine_heap->tmp_return_value = Py_None;
    Py_INCREF(coroutine_heap->tmp_return_value);
    goto function_return_exit;

    NUITKA_CANNOT_GET_HERE("Return statement must be present");


    return NULL;
    function_return_exit:;

    coroutine->m_returned = coroutine_heap->tmp_return_value;

    return NULL;

}

static PyObject *MAKE_COROUTINE_hikari$api$rest$$$function__55_leave_guild$$$coroutine__1_leave_guild() {
    return Nuitka_Coroutine_New(
        hikari$api$rest$$$function__55_leave_guild$$$coroutine__1_leave_guild_context,
        module_hikari$api$rest,
        mod_consts[132],
        mod_consts[133],
        codeobj_54c4d39f47ffa80ae28f5f1176582446,
        NULL,
        0,
        sizeof(struct hikari$api$rest$$$function__55_leave_guild$$$coroutine__1_leave_guild_locals)
    );
}


static PyObject *impl_hikari$api$rest$$$function__56_create_dm_channel(struct Nuitka_FunctionObject const *self, PyObject **python_pars) {
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_self = python_pars[0];
    PyObject *par_user = python_pars[1];
    PyObject *tmp_return_value = NULL;

    // Actual function body.


    tmp_return_value = MAKE_COROUTINE_hikari$api$rest$$$function__56_create_dm_channel$$$coroutine__1_create_dm_channel();

    goto function_return_exit;

    NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
    return NULL;


function_return_exit:
   // Function cleanup code if any.
    CHECK_OBJECT(par_self);
    Py_DECREF(par_self);
    CHECK_OBJECT(par_user);
    Py_DECREF(par_user);

   // Actual function exit with return value, making sure we did not make
   // the error status worse despite non-NULL return.
   CHECK_OBJECT(tmp_return_value);
   assert(had_error || !ERROR_OCCURRED());
   return tmp_return_value;
}



struct hikari$api$rest$$$function__56_create_dm_channel$$$coroutine__1_create_dm_channel_locals {
    PyObject *tmp_return_value;
};

static PyObject *hikari$api$rest$$$function__56_create_dm_channel$$$coroutine__1_create_dm_channel_context(struct Nuitka_CoroutineObject *coroutine, PyObject *yield_return_value) {
    CHECK_OBJECT(coroutine);
    assert(Nuitka_Coroutine_Check((PyObject *)coroutine));

    // Heap access if used.
    struct hikari$api$rest$$$function__56_create_dm_channel$$$coroutine__1_create_dm_channel_locals *coroutine_heap = (struct hikari$api$rest$$$function__56_create_dm_channel$$$coroutine__1_create_dm_channel_locals *)coroutine->m_heap_storage;

    // Dispatch to yield based on return label index:


    // Local variable initialization
    coroutine_heap->tmp_return_value = NULL;

    // Actual coroutine body.
    coroutine_heap->tmp_return_value = Py_None;
    Py_INCREF(coroutine_heap->tmp_return_value);
    goto function_return_exit;

    NUITKA_CANNOT_GET_HERE("Return statement must be present");


    return NULL;
    function_return_exit:;

    coroutine->m_returned = coroutine_heap->tmp_return_value;

    return NULL;

}

static PyObject *MAKE_COROUTINE_hikari$api$rest$$$function__56_create_dm_channel$$$coroutine__1_create_dm_channel() {
    return Nuitka_Coroutine_New(
        hikari$api$rest$$$function__56_create_dm_channel$$$coroutine__1_create_dm_channel_context,
        module_hikari$api$rest,
        mod_consts[135],
        mod_consts[136],
        codeobj_7a4b026e3f6658c2da5a749149872aa6,
        NULL,
        0,
        sizeof(struct hikari$api$rest$$$function__56_create_dm_channel$$$coroutine__1_create_dm_channel_locals)
    );
}


static PyObject *impl_hikari$api$rest$$$function__57_fetch_application(struct Nuitka_FunctionObject const *self, PyObject **python_pars) {
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_self = python_pars[0];
    PyObject *tmp_return_value = NULL;

    // Actual function body.


    tmp_return_value = MAKE_COROUTINE_hikari$api$rest$$$function__57_fetch_application$$$coroutine__1_fetch_application();

    goto function_return_exit;

    NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
    return NULL;


function_return_exit:
   // Function cleanup code if any.
    CHECK_OBJECT(par_self);
    Py_DECREF(par_self);

   // Actual function exit with return value, making sure we did not make
   // the error status worse despite non-NULL return.
   CHECK_OBJECT(tmp_return_value);
   assert(had_error || !ERROR_OCCURRED());
   return tmp_return_value;
}



struct hikari$api$rest$$$function__57_fetch_application$$$coroutine__1_fetch_application_locals {
    PyObject *tmp_return_value;
};

static PyObject *hikari$api$rest$$$function__57_fetch_application$$$coroutine__1_fetch_application_context(struct Nuitka_CoroutineObject *coroutine, PyObject *yield_return_value) {
    CHECK_OBJECT(coroutine);
    assert(Nuitka_Coroutine_Check((PyObject *)coroutine));

    // Heap access if used.
    struct hikari$api$rest$$$function__57_fetch_application$$$coroutine__1_fetch_application_locals *coroutine_heap = (struct hikari$api$rest$$$function__57_fetch_application$$$coroutine__1_fetch_application_locals *)coroutine->m_heap_storage;

    // Dispatch to yield based on return label index:


    // Local variable initialization
    coroutine_heap->tmp_return_value = NULL;

    // Actual coroutine body.
    coroutine_heap->tmp_return_value = Py_None;
    Py_INCREF(coroutine_heap->tmp_return_value);
    goto function_return_exit;

    NUITKA_CANNOT_GET_HERE("Return statement must be present");


    return NULL;
    function_return_exit:;

    coroutine->m_returned = coroutine_heap->tmp_return_value;

    return NULL;

}

static PyObject *MAKE_COROUTINE_hikari$api$rest$$$function__57_fetch_application$$$coroutine__1_fetch_application() {
    return Nuitka_Coroutine_New(
        hikari$api$rest$$$function__57_fetch_application$$$coroutine__1_fetch_application_context,
        module_hikari$api$rest,
        mod_consts[138],
        mod_consts[139],
        codeobj_1e700c87f1dae51368614adf81318717,
        NULL,
        0,
        sizeof(struct hikari$api$rest$$$function__57_fetch_application$$$coroutine__1_fetch_application_locals)
    );
}


static PyObject *impl_hikari$api$rest$$$function__58_fetch_authorization(struct Nuitka_FunctionObject const *self, PyObject **python_pars) {
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_self = python_pars[0];
    PyObject *tmp_return_value = NULL;

    // Actual function body.


    tmp_return_value = MAKE_COROUTINE_hikari$api$rest$$$function__58_fetch_authorization$$$coroutine__1_fetch_authorization();

    goto function_return_exit;

    NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
    return NULL;


function_return_exit:
   // Function cleanup code if any.
    CHECK_OBJECT(par_self);
    Py_DECREF(par_self);

   // Actual function exit with return value, making sure we did not make
   // the error status worse despite non-NULL return.
   CHECK_OBJECT(tmp_return_value);
   assert(had_error || !ERROR_OCCURRED());
   return tmp_return_value;
}



struct hikari$api$rest$$$function__58_fetch_authorization$$$coroutine__1_fetch_authorization_locals {
    PyObject *tmp_return_value;
};

static PyObject *hikari$api$rest$$$function__58_fetch_authorization$$$coroutine__1_fetch_authorization_context(struct Nuitka_CoroutineObject *coroutine, PyObject *yield_return_value) {
    CHECK_OBJECT(coroutine);
    assert(Nuitka_Coroutine_Check((PyObject *)coroutine));

    // Heap access if used.
    struct hikari$api$rest$$$function__58_fetch_authorization$$$coroutine__1_fetch_authorization_locals *coroutine_heap = (struct hikari$api$rest$$$function__58_fetch_authorization$$$coroutine__1_fetch_authorization_locals *)coroutine->m_heap_storage;

    // Dispatch to yield based on return label index:


    // Local variable initialization
    coroutine_heap->tmp_return_value = NULL;

    // Actual coroutine body.
    coroutine_heap->tmp_return_value = Py_None;
    Py_INCREF(coroutine_heap->tmp_return_value);
    goto function_return_exit;

    NUITKA_CANNOT_GET_HERE("Return statement must be present");


    return NULL;
    function_return_exit:;

    coroutine->m_returned = coroutine_heap->tmp_return_value;

    return NULL;

}

static PyObject *MAKE_COROUTINE_hikari$api$rest$$$function__58_fetch_authorization$$$coroutine__1_fetch_authorization() {
    return Nuitka_Coroutine_New(
        hikari$api$rest$$$function__58_fetch_authorization$$$coroutine__1_fetch_authorization_context,
        module_hikari$api$rest,
        mod_consts[141],
        mod_consts[142],
        codeobj_b3a4e0500c34d0c9bc55478f050e5d98,
        NULL,
        0,
        sizeof(struct hikari$api$rest$$$function__58_fetch_authorization$$$coroutine__1_fetch_authorization_locals)
    );
}


static PyObject *impl_hikari$api$rest$$$function__59_authorize_client_credentials_token(struct Nuitka_FunctionObject const *self, PyObject **python_pars) {
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_self = python_pars[0];
    PyObject *par_client = python_pars[1];
    PyObject *par_client_secret = python_pars[2];
    PyObject *par_scopes = python_pars[3];
    PyObject *tmp_return_value = NULL;

    // Actual function body.


    tmp_return_value = MAKE_COROUTINE_hikari$api$rest$$$function__59_authorize_client_credentials_token$$$coroutine__1_authorize_client_credentials_token();

    goto function_return_exit;

    NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
    return NULL;


function_return_exit:
   // Function cleanup code if any.
    CHECK_OBJECT(par_self);
    Py_DECREF(par_self);
    CHECK_OBJECT(par_client);
    Py_DECREF(par_client);
    CHECK_OBJECT(par_client_secret);
    Py_DECREF(par_client_secret);
    CHECK_OBJECT(par_scopes);
    Py_DECREF(par_scopes);

   // Actual function exit with return value, making sure we did not make
   // the error status worse despite non-NULL return.
   CHECK_OBJECT(tmp_return_value);
   assert(had_error || !ERROR_OCCURRED());
   return tmp_return_value;
}



struct hikari$api$rest$$$function__59_authorize_client_credentials_token$$$coroutine__1_authorize_client_credentials_token_locals {
    PyObject *tmp_return_value;
};

static PyObject *hikari$api$rest$$$function__59_authorize_client_credentials_token$$$coroutine__1_authorize_client_credentials_token_context(struct Nuitka_CoroutineObject *coroutine, PyObject *yield_return_value) {
    CHECK_OBJECT(coroutine);
    assert(Nuitka_Coroutine_Check((PyObject *)coroutine));

    // Heap access if used.
    struct hikari$api$rest$$$function__59_authorize_client_credentials_token$$$coroutine__1_authorize_client_credentials_token_locals *coroutine_heap = (struct hikari$api$rest$$$function__59_authorize_client_credentials_token$$$coroutine__1_authorize_client_credentials_token_locals *)coroutine->m_heap_storage;

    // Dispatch to yield based on return label index:


    // Local variable initialization
    coroutine_heap->tmp_return_value = NULL;

    // Actual coroutine body.
    coroutine_heap->tmp_return_value = Py_None;
    Py_INCREF(coroutine_heap->tmp_return_value);
    goto function_return_exit;

    NUITKA_CANNOT_GET_HERE("Return statement must be present");


    return NULL;
    function_return_exit:;

    coroutine->m_returned = coroutine_heap->tmp_return_value;

    return NULL;

}

static PyObject *MAKE_COROUTINE_hikari$api$rest$$$function__59_authorize_client_credentials_token$$$coroutine__1_authorize_client_credentials_token() {
    return Nuitka_Coroutine_New(
        hikari$api$rest$$$function__59_authorize_client_credentials_token$$$coroutine__1_authorize_client_credentials_token_context,
        module_hikari$api$rest,
        mod_consts[144],
        mod_consts[145],
        codeobj_a3b80c10bdf5d2012014f19665cea711,
        NULL,
        0,
        sizeof(struct hikari$api$rest$$$function__59_authorize_client_credentials_token$$$coroutine__1_authorize_client_credentials_token_locals)
    );
}


static PyObject *impl_hikari$api$rest$$$function__60_authorize_access_token(struct Nuitka_FunctionObject const *self, PyObject **python_pars) {
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_self = python_pars[0];
    PyObject *par_client = python_pars[1];
    PyObject *par_client_secret = python_pars[2];
    PyObject *par_code = python_pars[3];
    PyObject *par_redirect_uri = python_pars[4];
    PyObject *tmp_return_value = NULL;

    // Actual function body.


    tmp_return_value = MAKE_COROUTINE_hikari$api$rest$$$function__60_authorize_access_token$$$coroutine__1_authorize_access_token();

    goto function_return_exit;

    NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
    return NULL;


function_return_exit:
   // Function cleanup code if any.
    CHECK_OBJECT(par_self);
    Py_DECREF(par_self);
    CHECK_OBJECT(par_client);
    Py_DECREF(par_client);
    CHECK_OBJECT(par_client_secret);
    Py_DECREF(par_client_secret);
    CHECK_OBJECT(par_code);
    Py_DECREF(par_code);
    CHECK_OBJECT(par_redirect_uri);
    Py_DECREF(par_redirect_uri);

   // Actual function exit with return value, making sure we did not make
   // the error status worse despite non-NULL return.
   CHECK_OBJECT(tmp_return_value);
   assert(had_error || !ERROR_OCCURRED());
   return tmp_return_value;
}



struct hikari$api$rest$$$function__60_authorize_access_token$$$coroutine__1_authorize_access_token_locals {
    PyObject *tmp_return_value;
};

static PyObject *hikari$api$rest$$$function__60_authorize_access_token$$$coroutine__1_authorize_access_token_context(struct Nuitka_CoroutineObject *coroutine, PyObject *yield_return_value) {
    CHECK_OBJECT(coroutine);
    assert(Nuitka_Coroutine_Check((PyObject *)coroutine));

    // Heap access if used.
    struct hikari$api$rest$$$function__60_authorize_access_token$$$coroutine__1_authorize_access_token_locals *coroutine_heap = (struct hikari$api$rest$$$function__60_authorize_access_token$$$coroutine__1_authorize_access_token_locals *)coroutine->m_heap_storage;

    // Dispatch to yield based on return label index:


    // Local variable initialization
    coroutine_heap->tmp_return_value = NULL;

    // Actual coroutine body.
    coroutine_heap->tmp_return_value = Py_None;
    Py_INCREF(coroutine_heap->tmp_return_value);
    goto function_return_exit;

    NUITKA_CANNOT_GET_HERE("Return statement must be present");


    return NULL;
    function_return_exit:;

    coroutine->m_returned = coroutine_heap->tmp_return_value;

    return NULL;

}

static PyObject *MAKE_COROUTINE_hikari$api$rest$$$function__60_authorize_access_token$$$coroutine__1_authorize_access_token() {
    return Nuitka_Coroutine_New(
        hikari$api$rest$$$function__60_authorize_access_token$$$coroutine__1_authorize_access_token_context,
        module_hikari$api$rest,
        mod_consts[147],
        mod_consts[148],
        codeobj_32467e33cd28d3358caa3d9f6420fea5,
        NULL,
        0,
        sizeof(struct hikari$api$rest$$$function__60_authorize_access_token$$$coroutine__1_authorize_access_token_locals)
    );
}


static PyObject *impl_hikari$api$rest$$$function__61_refresh_access_token(struct Nuitka_FunctionObject const *self, PyObject **python_pars) {
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_self = python_pars[0];
    PyObject *par_client = python_pars[1];
    PyObject *par_client_secret = python_pars[2];
    PyObject *par_refresh_token = python_pars[3];
    PyObject *par_scopes = python_pars[4];
    PyObject *tmp_return_value = NULL;

    // Actual function body.


    tmp_return_value = MAKE_COROUTINE_hikari$api$rest$$$function__61_refresh_access_token$$$coroutine__1_refresh_access_token();

    goto function_return_exit;

    NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
    return NULL;


function_return_exit:
   // Function cleanup code if any.
    CHECK_OBJECT(par_self);
    Py_DECREF(par_self);
    CHECK_OBJECT(par_client);
    Py_DECREF(par_client);
    CHECK_OBJECT(par_client_secret);
    Py_DECREF(par_client_secret);
    CHECK_OBJECT(par_refresh_token);
    Py_DECREF(par_refresh_token);
    CHECK_OBJECT(par_scopes);
    Py_DECREF(par_scopes);

   // Actual function exit with return value, making sure we did not make
   // the error status worse despite non-NULL return.
   CHECK_OBJECT(tmp_return_value);
   assert(had_error || !ERROR_OCCURRED());
   return tmp_return_value;
}



struct hikari$api$rest$$$function__61_refresh_access_token$$$coroutine__1_refresh_access_token_locals {
    PyObject *tmp_return_value;
};

static PyObject *hikari$api$rest$$$function__61_refresh_access_token$$$coroutine__1_refresh_access_token_context(struct Nuitka_CoroutineObject *coroutine, PyObject *yield_return_value) {
    CHECK_OBJECT(coroutine);
    assert(Nuitka_Coroutine_Check((PyObject *)coroutine));

    // Heap access if used.
    struct hikari$api$rest$$$function__61_refresh_access_token$$$coroutine__1_refresh_access_token_locals *coroutine_heap = (struct hikari$api$rest$$$function__61_refresh_access_token$$$coroutine__1_refresh_access_token_locals *)coroutine->m_heap_storage;

    // Dispatch to yield based on return label index:


    // Local variable initialization
    coroutine_heap->tmp_return_value = NULL;

    // Actual coroutine body.
    coroutine_heap->tmp_return_value = Py_None;
    Py_INCREF(coroutine_heap->tmp_return_value);
    goto function_return_exit;

    NUITKA_CANNOT_GET_HERE("Return statement must be present");


    return NULL;
    function_return_exit:;

    coroutine->m_returned = coroutine_heap->tmp_return_value;

    return NULL;

}

static PyObject *MAKE_COROUTINE_hikari$api$rest$$$function__61_refresh_access_token$$$coroutine__1_refresh_access_token() {
    return Nuitka_Coroutine_New(
        hikari$api$rest$$$function__61_refresh_access_token$$$coroutine__1_refresh_access_token_context,
        module_hikari$api$rest,
        mod_consts[150],
        mod_consts[151],
        codeobj_e349be883605ec25793c958e80d35ba0,
        NULL,
        0,
        sizeof(struct hikari$api$rest$$$function__61_refresh_access_token$$$coroutine__1_refresh_access_token_locals)
    );
}


static PyObject *impl_hikari$api$rest$$$function__62_revoke_access_token(struct Nuitka_FunctionObject const *self, PyObject **python_pars) {
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_self = python_pars[0];
    PyObject *par_client = python_pars[1];
    PyObject *par_client_secret = python_pars[2];
    PyObject *par_token = python_pars[3];
    PyObject *tmp_return_value = NULL;

    // Actual function body.


    tmp_return_value = MAKE_COROUTINE_hikari$api$rest$$$function__62_revoke_access_token$$$coroutine__1_revoke_access_token();

    goto function_return_exit;

    NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
    return NULL;


function_return_exit:
   // Function cleanup code if any.
    CHECK_OBJECT(par_self);
    Py_DECREF(par_self);
    CHECK_OBJECT(par_client);
    Py_DECREF(par_client);
    CHECK_OBJECT(par_client_secret);
    Py_DECREF(par_client_secret);
    CHECK_OBJECT(par_token);
    Py_DECREF(par_token);

   // Actual function exit with return value, making sure we did not make
   // the error status worse despite non-NULL return.
   CHECK_OBJECT(tmp_return_value);
   assert(had_error || !ERROR_OCCURRED());
   return tmp_return_value;
}



struct hikari$api$rest$$$function__62_revoke_access_token$$$coroutine__1_revoke_access_token_locals {
    PyObject *tmp_return_value;
};

static PyObject *hikari$api$rest$$$function__62_revoke_access_token$$$coroutine__1_revoke_access_token_context(struct Nuitka_CoroutineObject *coroutine, PyObject *yield_return_value) {
    CHECK_OBJECT(coroutine);
    assert(Nuitka_Coroutine_Check((PyObject *)coroutine));

    // Heap access if used.
    struct hikari$api$rest$$$function__62_revoke_access_token$$$coroutine__1_revoke_access_token_locals *coroutine_heap = (struct hikari$api$rest$$$function__62_revoke_access_token$$$coroutine__1_revoke_access_token_locals *)coroutine->m_heap_storage;

    // Dispatch to yield based on return label index:


    // Local variable initialization
    coroutine_heap->tmp_return_value = NULL;

    // Actual coroutine body.
    coroutine_heap->tmp_return_value = Py_None;
    Py_INCREF(coroutine_heap->tmp_return_value);
    goto function_return_exit;

    NUITKA_CANNOT_GET_HERE("Return statement must be present");


    return NULL;
    function_return_exit:;

    coroutine->m_returned = coroutine_heap->tmp_return_value;

    return NULL;

}

static PyObject *MAKE_COROUTINE_hikari$api$rest$$$function__62_revoke_access_token$$$coroutine__1_revoke_access_token() {
    return Nuitka_Coroutine_New(
        hikari$api$rest$$$function__62_revoke_access_token$$$coroutine__1_revoke_access_token_context,
        module_hikari$api$rest,
        mod_consts[153],
        mod_consts[154],
        codeobj_d71591a07208a7d80804c9be3581fa8f,
        NULL,
        0,
        sizeof(struct hikari$api$rest$$$function__62_revoke_access_token$$$coroutine__1_revoke_access_token_locals)
    );
}


static PyObject *impl_hikari$api$rest$$$function__63_add_user_to_guild(struct Nuitka_FunctionObject const *self, PyObject **python_pars) {
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_self = python_pars[0];
    PyObject *par_access_token = python_pars[1];
    PyObject *par_guild = python_pars[2];
    PyObject *par_user = python_pars[3];
    PyObject *par_nickname = python_pars[4];
    PyObject *par_nick = python_pars[5];
    PyObject *par_roles = python_pars[6];
    PyObject *par_mute = python_pars[7];
    PyObject *par_deaf = python_pars[8];
    PyObject *tmp_return_value = NULL;

    // Actual function body.


    tmp_return_value = MAKE_COROUTINE_hikari$api$rest$$$function__63_add_user_to_guild$$$coroutine__1_add_user_to_guild();

    goto function_return_exit;

    NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
    return NULL;


function_return_exit:
   // Function cleanup code if any.
    CHECK_OBJECT(par_self);
    Py_DECREF(par_self);
    CHECK_OBJECT(par_access_token);
    Py_DECREF(par_access_token);
    CHECK_OBJECT(par_guild);
    Py_DECREF(par_guild);
    CHECK_OBJECT(par_user);
    Py_DECREF(par_user);
    CHECK_OBJECT(par_nickname);
    Py_DECREF(par_nickname);
    CHECK_OBJECT(par_nick);
    Py_DECREF(par_nick);
    CHECK_OBJECT(par_roles);
    Py_DECREF(par_roles);
    CHECK_OBJECT(par_mute);
    Py_DECREF(par_mute);
    CHECK_OBJECT(par_deaf);
    Py_DECREF(par_deaf);

   // Actual function exit with return value, making sure we did not make
   // the error status worse despite non-NULL return.
   CHECK_OBJECT(tmp_return_value);
   assert(had_error || !ERROR_OCCURRED());
   return tmp_return_value;
}



struct hikari$api$rest$$$function__63_add_user_to_guild$$$coroutine__1_add_user_to_guild_locals {
    PyObject *tmp_return_value;
};

static PyObject *hikari$api$rest$$$function__63_add_user_to_guild$$$coroutine__1_add_user_to_guild_context(struct Nuitka_CoroutineObject *coroutine, PyObject *yield_return_value) {
    CHECK_OBJECT(coroutine);
    assert(Nuitka_Coroutine_Check((PyObject *)coroutine));

    // Heap access if used.
    struct hikari$api$rest$$$function__63_add_user_to_guild$$$coroutine__1_add_user_to_guild_locals *coroutine_heap = (struct hikari$api$rest$$$function__63_add_user_to_guild$$$coroutine__1_add_user_to_guild_locals *)coroutine->m_heap_storage;

    // Dispatch to yield based on return label index:


    // Local variable initialization
    coroutine_heap->tmp_return_value = NULL;

    // Actual coroutine body.
    coroutine_heap->tmp_return_value = Py_None;
    Py_INCREF(coroutine_heap->tmp_return_value);
    goto function_return_exit;

    NUITKA_CANNOT_GET_HERE("Return statement must be present");


    return NULL;
    function_return_exit:;

    coroutine->m_returned = coroutine_heap->tmp_return_value;

    return NULL;

}

static PyObject *MAKE_COROUTINE_hikari$api$rest$$$function__63_add_user_to_guild$$$coroutine__1_add_user_to_guild() {
    return Nuitka_Coroutine_New(
        hikari$api$rest$$$function__63_add_user_to_guild$$$coroutine__1_add_user_to_guild_context,
        module_hikari$api$rest,
        mod_consts[156],
        mod_consts[157],
        codeobj_f7ad739545259fd887ee27d5abe8dfc5,
        NULL,
        0,
        sizeof(struct hikari$api$rest$$$function__63_add_user_to_guild$$$coroutine__1_add_user_to_guild_locals)
    );
}


static PyObject *impl_hikari$api$rest$$$function__64_fetch_voice_regions(struct Nuitka_FunctionObject const *self, PyObject **python_pars) {
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_self = python_pars[0];
    PyObject *tmp_return_value = NULL;

    // Actual function body.


    tmp_return_value = MAKE_COROUTINE_hikari$api$rest$$$function__64_fetch_voice_regions$$$coroutine__1_fetch_voice_regions();

    goto function_return_exit;

    NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
    return NULL;


function_return_exit:
   // Function cleanup code if any.
    CHECK_OBJECT(par_self);
    Py_DECREF(par_self);

   // Actual function exit with return value, making sure we did not make
   // the error status worse despite non-NULL return.
   CHECK_OBJECT(tmp_return_value);
   assert(had_error || !ERROR_OCCURRED());
   return tmp_return_value;
}



struct hikari$api$rest$$$function__64_fetch_voice_regions$$$coroutine__1_fetch_voice_regions_locals {
    PyObject *tmp_return_value;
};

static PyObject *hikari$api$rest$$$function__64_fetch_voice_regions$$$coroutine__1_fetch_voice_regions_context(struct Nuitka_CoroutineObject *coroutine, PyObject *yield_return_value) {
    CHECK_OBJECT(coroutine);
    assert(Nuitka_Coroutine_Check((PyObject *)coroutine));

    // Heap access if used.
    struct hikari$api$rest$$$function__64_fetch_voice_regions$$$coroutine__1_fetch_voice_regions_locals *coroutine_heap = (struct hikari$api$rest$$$function__64_fetch_voice_regions$$$coroutine__1_fetch_voice_regions_locals *)coroutine->m_heap_storage;

    // Dispatch to yield based on return label index:


    // Local variable initialization
    coroutine_heap->tmp_return_value = NULL;

    // Actual coroutine body.
    coroutine_heap->tmp_return_value = Py_None;
    Py_INCREF(coroutine_heap->tmp_return_value);
    goto function_return_exit;

    NUITKA_CANNOT_GET_HERE("Return statement must be present");


    return NULL;
    function_return_exit:;

    coroutine->m_returned = coroutine_heap->tmp_return_value;

    return NULL;

}

static PyObject *MAKE_COROUTINE_hikari$api$rest$$$function__64_fetch_voice_regions$$$coroutine__1_fetch_voice_regions() {
    return Nuitka_Coroutine_New(
        hikari$api$rest$$$function__64_fetch_voice_regions$$$coroutine__1_fetch_voice_regions_context,
        module_hikari$api$rest,
        mod_consts[159],
        mod_consts[160],
        codeobj_38a4907eea8f3097aa485e442ef45566,
        NULL,
        0,
        sizeof(struct hikari$api$rest$$$function__64_fetch_voice_regions$$$coroutine__1_fetch_voice_regions_locals)
    );
}


static PyObject *impl_hikari$api$rest$$$function__65_fetch_user(struct Nuitka_FunctionObject const *self, PyObject **python_pars) {
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_self = python_pars[0];
    PyObject *par_user = python_pars[1];
    PyObject *tmp_return_value = NULL;

    // Actual function body.


    tmp_return_value = MAKE_COROUTINE_hikari$api$rest$$$function__65_fetch_user$$$coroutine__1_fetch_user();

    goto function_return_exit;

    NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
    return NULL;


function_return_exit:
   // Function cleanup code if any.
    CHECK_OBJECT(par_self);
    Py_DECREF(par_self);
    CHECK_OBJECT(par_user);
    Py_DECREF(par_user);

   // Actual function exit with return value, making sure we did not make
   // the error status worse despite non-NULL return.
   CHECK_OBJECT(tmp_return_value);
   assert(had_error || !ERROR_OCCURRED());
   return tmp_return_value;
}



struct hikari$api$rest$$$function__65_fetch_user$$$coroutine__1_fetch_user_locals {
    PyObject *tmp_return_value;
};

static PyObject *hikari$api$rest$$$function__65_fetch_user$$$coroutine__1_fetch_user_context(struct Nuitka_CoroutineObject *coroutine, PyObject *yield_return_value) {
    CHECK_OBJECT(coroutine);
    assert(Nuitka_Coroutine_Check((PyObject *)coroutine));

    // Heap access if used.
    struct hikari$api$rest$$$function__65_fetch_user$$$coroutine__1_fetch_user_locals *coroutine_heap = (struct hikari$api$rest$$$function__65_fetch_user$$$coroutine__1_fetch_user_locals *)coroutine->m_heap_storage;

    // Dispatch to yield based on return label index:


    // Local variable initialization
    coroutine_heap->tmp_return_value = NULL;

    // Actual coroutine body.
    coroutine_heap->tmp_return_value = Py_None;
    Py_INCREF(coroutine_heap->tmp_return_value);
    goto function_return_exit;

    NUITKA_CANNOT_GET_HERE("Return statement must be present");


    return NULL;
    function_return_exit:;

    coroutine->m_returned = coroutine_heap->tmp_return_value;

    return NULL;

}

static PyObject *MAKE_COROUTINE_hikari$api$rest$$$function__65_fetch_user$$$coroutine__1_fetch_user() {
    return Nuitka_Coroutine_New(
        hikari$api$rest$$$function__65_fetch_user$$$coroutine__1_fetch_user_context,
        module_hikari$api$rest,
        mod_consts[162],
        mod_consts[163],
        codeobj_21257f50bcc408d47f2b7c8ad85ae262,
        NULL,
        0,
        sizeof(struct hikari$api$rest$$$function__65_fetch_user$$$coroutine__1_fetch_user_locals)
    );
}


static PyObject *impl_hikari$api$rest$$$function__67_fetch_emoji(struct Nuitka_FunctionObject const *self, PyObject **python_pars) {
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_self = python_pars[0];
    PyObject *par_guild = python_pars[1];
    PyObject *par_emoji = python_pars[2];
    PyObject *tmp_return_value = NULL;

    // Actual function body.


    tmp_return_value = MAKE_COROUTINE_hikari$api$rest$$$function__67_fetch_emoji$$$coroutine__1_fetch_emoji();

    goto function_return_exit;

    NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
    return NULL;


function_return_exit:
   // Function cleanup code if any.
    CHECK_OBJECT(par_self);
    Py_DECREF(par_self);
    CHECK_OBJECT(par_guild);
    Py_DECREF(par_guild);
    CHECK_OBJECT(par_emoji);
    Py_DECREF(par_emoji);

   // Actual function exit with return value, making sure we did not make
   // the error status worse despite non-NULL return.
   CHECK_OBJECT(tmp_return_value);
   assert(had_error || !ERROR_OCCURRED());
   return tmp_return_value;
}



struct hikari$api$rest$$$function__67_fetch_emoji$$$coroutine__1_fetch_emoji_locals {
    PyObject *tmp_return_value;
};

static PyObject *hikari$api$rest$$$function__67_fetch_emoji$$$coroutine__1_fetch_emoji_context(struct Nuitka_CoroutineObject *coroutine, PyObject *yield_return_value) {
    CHECK_OBJECT(coroutine);
    assert(Nuitka_Coroutine_Check((PyObject *)coroutine));

    // Heap access if used.
    struct hikari$api$rest$$$function__67_fetch_emoji$$$coroutine__1_fetch_emoji_locals *coroutine_heap = (struct hikari$api$rest$$$function__67_fetch_emoji$$$coroutine__1_fetch_emoji_locals *)coroutine->m_heap_storage;

    // Dispatch to yield based on return label index:


    // Local variable initialization
    coroutine_heap->tmp_return_value = NULL;

    // Actual coroutine body.
    coroutine_heap->tmp_return_value = Py_None;
    Py_INCREF(coroutine_heap->tmp_return_value);
    goto function_return_exit;

    NUITKA_CANNOT_GET_HERE("Return statement must be present");


    return NULL;
    function_return_exit:;

    coroutine->m_returned = coroutine_heap->tmp_return_value;

    return NULL;

}

static PyObject *MAKE_COROUTINE_hikari$api$rest$$$function__67_fetch_emoji$$$coroutine__1_fetch_emoji() {
    return Nuitka_Coroutine_New(
        hikari$api$rest$$$function__67_fetch_emoji$$$coroutine__1_fetch_emoji_context,
        module_hikari$api$rest,
        mod_consts[165],
        mod_consts[166],
        codeobj_48f65a01e4048f6d2bfef10fdc0bc7ef,
        NULL,
        0,
        sizeof(struct hikari$api$rest$$$function__67_fetch_emoji$$$coroutine__1_fetch_emoji_locals)
    );
}


static PyObject *impl_hikari$api$rest$$$function__68_fetch_guild_emojis(struct Nuitka_FunctionObject const *self, PyObject **python_pars) {
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_self = python_pars[0];
    PyObject *par_guild = python_pars[1];
    PyObject *tmp_return_value = NULL;

    // Actual function body.


    tmp_return_value = MAKE_COROUTINE_hikari$api$rest$$$function__68_fetch_guild_emojis$$$coroutine__1_fetch_guild_emojis();

    goto function_return_exit;

    NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
    return NULL;


function_return_exit:
   // Function cleanup code if any.
    CHECK_OBJECT(par_self);
    Py_DECREF(par_self);
    CHECK_OBJECT(par_guild);
    Py_DECREF(par_guild);

   // Actual function exit with return value, making sure we did not make
   // the error status worse despite non-NULL return.
   CHECK_OBJECT(tmp_return_value);
   assert(had_error || !ERROR_OCCURRED());
   return tmp_return_value;
}



struct hikari$api$rest$$$function__68_fetch_guild_emojis$$$coroutine__1_fetch_guild_emojis_locals {
    PyObject *tmp_return_value;
};

static PyObject *hikari$api$rest$$$function__68_fetch_guild_emojis$$$coroutine__1_fetch_guild_emojis_context(struct Nuitka_CoroutineObject *coroutine, PyObject *yield_return_value) {
    CHECK_OBJECT(coroutine);
    assert(Nuitka_Coroutine_Check((PyObject *)coroutine));

    // Heap access if used.
    struct hikari$api$rest$$$function__68_fetch_guild_emojis$$$coroutine__1_fetch_guild_emojis_locals *coroutine_heap = (struct hikari$api$rest$$$function__68_fetch_guild_emojis$$$coroutine__1_fetch_guild_emojis_locals *)coroutine->m_heap_storage;

    // Dispatch to yield based on return label index:


    // Local variable initialization
    coroutine_heap->tmp_return_value = NULL;

    // Actual coroutine body.
    coroutine_heap->tmp_return_value = Py_None;
    Py_INCREF(coroutine_heap->tmp_return_value);
    goto function_return_exit;

    NUITKA_CANNOT_GET_HERE("Return statement must be present");


    return NULL;
    function_return_exit:;

    coroutine->m_returned = coroutine_heap->tmp_return_value;

    return NULL;

}

static PyObject *MAKE_COROUTINE_hikari$api$rest$$$function__68_fetch_guild_emojis$$$coroutine__1_fetch_guild_emojis() {
    return Nuitka_Coroutine_New(
        hikari$api$rest$$$function__68_fetch_guild_emojis$$$coroutine__1_fetch_guild_emojis_context,
        module_hikari$api$rest,
        mod_consts[168],
        mod_consts[169],
        codeobj_0c318e3d7579272de92091dec1b02e7b,
        NULL,
        0,
        sizeof(struct hikari$api$rest$$$function__68_fetch_guild_emojis$$$coroutine__1_fetch_guild_emojis_locals)
    );
}


static PyObject *impl_hikari$api$rest$$$function__69_create_emoji(struct Nuitka_FunctionObject const *self, PyObject **python_pars) {
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_self = python_pars[0];
    PyObject *par_guild = python_pars[1];
    PyObject *par_name = python_pars[2];
    PyObject *par_image = python_pars[3];
    PyObject *par_roles = python_pars[4];
    PyObject *par_reason = python_pars[5];
    PyObject *tmp_return_value = NULL;

    // Actual function body.


    tmp_return_value = MAKE_COROUTINE_hikari$api$rest$$$function__69_create_emoji$$$coroutine__1_create_emoji();

    goto function_return_exit;

    NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
    return NULL;


function_return_exit:
   // Function cleanup code if any.
    CHECK_OBJECT(par_self);
    Py_DECREF(par_self);
    CHECK_OBJECT(par_guild);
    Py_DECREF(par_guild);
    CHECK_OBJECT(par_name);
    Py_DECREF(par_name);
    CHECK_OBJECT(par_image);
    Py_DECREF(par_image);
    CHECK_OBJECT(par_roles);
    Py_DECREF(par_roles);
    CHECK_OBJECT(par_reason);
    Py_DECREF(par_reason);

   // Actual function exit with return value, making sure we did not make
   // the error status worse despite non-NULL return.
   CHECK_OBJECT(tmp_return_value);
   assert(had_error || !ERROR_OCCURRED());
   return tmp_return_value;
}



struct hikari$api$rest$$$function__69_create_emoji$$$coroutine__1_create_emoji_locals {
    PyObject *tmp_return_value;
};

static PyObject *hikari$api$rest$$$function__69_create_emoji$$$coroutine__1_create_emoji_context(struct Nuitka_CoroutineObject *coroutine, PyObject *yield_return_value) {
    CHECK_OBJECT(coroutine);
    assert(Nuitka_Coroutine_Check((PyObject *)coroutine));

    // Heap access if used.
    struct hikari$api$rest$$$function__69_create_emoji$$$coroutine__1_create_emoji_locals *coroutine_heap = (struct hikari$api$rest$$$function__69_create_emoji$$$coroutine__1_create_emoji_locals *)coroutine->m_heap_storage;

    // Dispatch to yield based on return label index:


    // Local variable initialization
    coroutine_heap->tmp_return_value = NULL;

    // Actual coroutine body.
    coroutine_heap->tmp_return_value = Py_None;
    Py_INCREF(coroutine_heap->tmp_return_value);
    goto function_return_exit;

    NUITKA_CANNOT_GET_HERE("Return statement must be present");


    return NULL;
    function_return_exit:;

    coroutine->m_returned = coroutine_heap->tmp_return_value;

    return NULL;

}

static PyObject *MAKE_COROUTINE_hikari$api$rest$$$function__69_create_emoji$$$coroutine__1_create_emoji() {
    return Nuitka_Coroutine_New(
        hikari$api$rest$$$function__69_create_emoji$$$coroutine__1_create_emoji_context,
        module_hikari$api$rest,
        mod_consts[171],
        mod_consts[172],
        codeobj_20827cf562e1f90f7639c4c86616d85d,
        NULL,
        0,
        sizeof(struct hikari$api$rest$$$function__69_create_emoji$$$coroutine__1_create_emoji_locals)
    );
}


static PyObject *impl_hikari$api$rest$$$function__70_edit_emoji(struct Nuitka_FunctionObject const *self, PyObject **python_pars) {
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_self = python_pars[0];
    PyObject *par_guild = python_pars[1];
    PyObject *par_emoji = python_pars[2];
    PyObject *par_name = python_pars[3];
    PyObject *par_roles = python_pars[4];
    PyObject *par_reason = python_pars[5];
    PyObject *tmp_return_value = NULL;

    // Actual function body.


    tmp_return_value = MAKE_COROUTINE_hikari$api$rest$$$function__70_edit_emoji$$$coroutine__1_edit_emoji();

    goto function_return_exit;

    NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
    return NULL;


function_return_exit:
   // Function cleanup code if any.
    CHECK_OBJECT(par_self);
    Py_DECREF(par_self);
    CHECK_OBJECT(par_guild);
    Py_DECREF(par_guild);
    CHECK_OBJECT(par_emoji);
    Py_DECREF(par_emoji);
    CHECK_OBJECT(par_name);
    Py_DECREF(par_name);
    CHECK_OBJECT(par_roles);
    Py_DECREF(par_roles);
    CHECK_OBJECT(par_reason);
    Py_DECREF(par_reason);

   // Actual function exit with return value, making sure we did not make
   // the error status worse despite non-NULL return.
   CHECK_OBJECT(tmp_return_value);
   assert(had_error || !ERROR_OCCURRED());
   return tmp_return_value;
}



struct hikari$api$rest$$$function__70_edit_emoji$$$coroutine__1_edit_emoji_locals {
    PyObject *tmp_return_value;
};

static PyObject *hikari$api$rest$$$function__70_edit_emoji$$$coroutine__1_edit_emoji_context(struct Nuitka_CoroutineObject *coroutine, PyObject *yield_return_value) {
    CHECK_OBJECT(coroutine);
    assert(Nuitka_Coroutine_Check((PyObject *)coroutine));

    // Heap access if used.
    struct hikari$api$rest$$$function__70_edit_emoji$$$coroutine__1_edit_emoji_locals *coroutine_heap = (struct hikari$api$rest$$$function__70_edit_emoji$$$coroutine__1_edit_emoji_locals *)coroutine->m_heap_storage;

    // Dispatch to yield based on return label index:


    // Local variable initialization
    coroutine_heap->tmp_return_value = NULL;

    // Actual coroutine body.
    coroutine_heap->tmp_return_value = Py_None;
    Py_INCREF(coroutine_heap->tmp_return_value);
    goto function_return_exit;

    NUITKA_CANNOT_GET_HERE("Return statement must be present");


    return NULL;
    function_return_exit:;

    coroutine->m_returned = coroutine_heap->tmp_return_value;

    return NULL;

}

static PyObject *MAKE_COROUTINE_hikari$api$rest$$$function__70_edit_emoji$$$coroutine__1_edit_emoji() {
    return Nuitka_Coroutine_New(
        hikari$api$rest$$$function__70_edit_emoji$$$coroutine__1_edit_emoji_context,
        module_hikari$api$rest,
        mod_consts[174],
        mod_consts[175],
        codeobj_a5b60d65171b73bfba9097d900ee5da7,
        NULL,
        0,
        sizeof(struct hikari$api$rest$$$function__70_edit_emoji$$$coroutine__1_edit_emoji_locals)
    );
}


static PyObject *impl_hikari$api$rest$$$function__71_delete_emoji(struct Nuitka_FunctionObject const *self, PyObject **python_pars) {
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_self = python_pars[0];
    PyObject *par_guild = python_pars[1];
    PyObject *par_emoji = python_pars[2];
    PyObject *par_reason = python_pars[3];
    PyObject *tmp_return_value = NULL;

    // Actual function body.


    tmp_return_value = MAKE_COROUTINE_hikari$api$rest$$$function__71_delete_emoji$$$coroutine__1_delete_emoji();

    goto function_return_exit;

    NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
    return NULL;


function_return_exit:
   // Function cleanup code if any.
    CHECK_OBJECT(par_self);
    Py_DECREF(par_self);
    CHECK_OBJECT(par_guild);
    Py_DECREF(par_guild);
    CHECK_OBJECT(par_emoji);
    Py_DECREF(par_emoji);
    CHECK_OBJECT(par_reason);
    Py_DECREF(par_reason);

   // Actual function exit with return value, making sure we did not make
   // the error status worse despite non-NULL return.
   CHECK_OBJECT(tmp_return_value);
   assert(had_error || !ERROR_OCCURRED());
   return tmp_return_value;
}



struct hikari$api$rest$$$function__71_delete_emoji$$$coroutine__1_delete_emoji_locals {
    PyObject *tmp_return_value;
};

static PyObject *hikari$api$rest$$$function__71_delete_emoji$$$coroutine__1_delete_emoji_context(struct Nuitka_CoroutineObject *coroutine, PyObject *yield_return_value) {
    CHECK_OBJECT(coroutine);
    assert(Nuitka_Coroutine_Check((PyObject *)coroutine));

    // Heap access if used.
    struct hikari$api$rest$$$function__71_delete_emoji$$$coroutine__1_delete_emoji_locals *coroutine_heap = (struct hikari$api$rest$$$function__71_delete_emoji$$$coroutine__1_delete_emoji_locals *)coroutine->m_heap_storage;

    // Dispatch to yield based on return label index:


    // Local variable initialization
    coroutine_heap->tmp_return_value = NULL;

    // Actual coroutine body.
    coroutine_heap->tmp_return_value = Py_None;
    Py_INCREF(coroutine_heap->tmp_return_value);
    goto function_return_exit;

    NUITKA_CANNOT_GET_HERE("Return statement must be present");


    return NULL;
    function_return_exit:;

    coroutine->m_returned = coroutine_heap->tmp_return_value;

    return NULL;

}

static PyObject *MAKE_COROUTINE_hikari$api$rest$$$function__71_delete_emoji$$$coroutine__1_delete_emoji() {
    return Nuitka_Coroutine_New(
        hikari$api$rest$$$function__71_delete_emoji$$$coroutine__1_delete_emoji_context,
        module_hikari$api$rest,
        mod_consts[177],
        mod_consts[178],
        codeobj_de12df71da1209e15e5aeca52e934193,
        NULL,
        0,
        sizeof(struct hikari$api$rest$$$function__71_delete_emoji$$$coroutine__1_delete_emoji_locals)
    );
}


static PyObject *impl_hikari$api$rest$$$function__72_fetch_available_sticker_packs(struct Nuitka_FunctionObject const *self, PyObject **python_pars) {
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_self = python_pars[0];
    PyObject *tmp_return_value = NULL;

    // Actual function body.


    tmp_return_value = MAKE_COROUTINE_hikari$api$rest$$$function__72_fetch_available_sticker_packs$$$coroutine__1_fetch_available_sticker_packs();

    goto function_return_exit;

    NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
    return NULL;


function_return_exit:
   // Function cleanup code if any.
    CHECK_OBJECT(par_self);
    Py_DECREF(par_self);

   // Actual function exit with return value, making sure we did not make
   // the error status worse despite non-NULL return.
   CHECK_OBJECT(tmp_return_value);
   assert(had_error || !ERROR_OCCURRED());
   return tmp_return_value;
}



struct hikari$api$rest$$$function__72_fetch_available_sticker_packs$$$coroutine__1_fetch_available_sticker_packs_locals {
    PyObject *tmp_return_value;
};

static PyObject *hikari$api$rest$$$function__72_fetch_available_sticker_packs$$$coroutine__1_fetch_available_sticker_packs_context(struct Nuitka_CoroutineObject *coroutine, PyObject *yield_return_value) {
    CHECK_OBJECT(coroutine);
    assert(Nuitka_Coroutine_Check((PyObject *)coroutine));

    // Heap access if used.
    struct hikari$api$rest$$$function__72_fetch_available_sticker_packs$$$coroutine__1_fetch_available_sticker_packs_locals *coroutine_heap = (struct hikari$api$rest$$$function__72_fetch_available_sticker_packs$$$coroutine__1_fetch_available_sticker_packs_locals *)coroutine->m_heap_storage;

    // Dispatch to yield based on return label index:


    // Local variable initialization
    coroutine_heap->tmp_return_value = NULL;

    // Actual coroutine body.
    coroutine_heap->tmp_return_value = Py_None;
    Py_INCREF(coroutine_heap->tmp_return_value);
    goto function_return_exit;

    NUITKA_CANNOT_GET_HERE("Return statement must be present");


    return NULL;
    function_return_exit:;

    coroutine->m_returned = coroutine_heap->tmp_return_value;

    return NULL;

}

static PyObject *MAKE_COROUTINE_hikari$api$rest$$$function__72_fetch_available_sticker_packs$$$coroutine__1_fetch_available_sticker_packs() {
    return Nuitka_Coroutine_New(
        hikari$api$rest$$$function__72_fetch_available_sticker_packs$$$coroutine__1_fetch_available_sticker_packs_context,
        module_hikari$api$rest,
        mod_consts[180],
        mod_consts[181],
        codeobj_0b6d0220a08979869f0a012939b4b77a,
        NULL,
        0,
        sizeof(struct hikari$api$rest$$$function__72_fetch_available_sticker_packs$$$coroutine__1_fetch_available_sticker_packs_locals)
    );
}


static PyObject *impl_hikari$api$rest$$$function__73_fetch_sticker(struct Nuitka_FunctionObject const *self, PyObject **python_pars) {
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_self = python_pars[0];
    PyObject *par_sticker = python_pars[1];
    PyObject *tmp_return_value = NULL;

    // Actual function body.


    tmp_return_value = MAKE_COROUTINE_hikari$api$rest$$$function__73_fetch_sticker$$$coroutine__1_fetch_sticker();

    goto function_return_exit;

    NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
    return NULL;


function_return_exit:
   // Function cleanup code if any.
    CHECK_OBJECT(par_self);
    Py_DECREF(par_self);
    CHECK_OBJECT(par_sticker);
    Py_DECREF(par_sticker);

   // Actual function exit with return value, making sure we did not make
   // the error status worse despite non-NULL return.
   CHECK_OBJECT(tmp_return_value);
   assert(had_error || !ERROR_OCCURRED());
   return tmp_return_value;
}



struct hikari$api$rest$$$function__73_fetch_sticker$$$coroutine__1_fetch_sticker_locals {
    PyObject *tmp_return_value;
};

static PyObject *hikari$api$rest$$$function__73_fetch_sticker$$$coroutine__1_fetch_sticker_context(struct Nuitka_CoroutineObject *coroutine, PyObject *yield_return_value) {
    CHECK_OBJECT(coroutine);
    assert(Nuitka_Coroutine_Check((PyObject *)coroutine));

    // Heap access if used.
    struct hikari$api$rest$$$function__73_fetch_sticker$$$coroutine__1_fetch_sticker_locals *coroutine_heap = (struct hikari$api$rest$$$function__73_fetch_sticker$$$coroutine__1_fetch_sticker_locals *)coroutine->m_heap_storage;

    // Dispatch to yield based on return label index:


    // Local variable initialization
    coroutine_heap->tmp_return_value = NULL;

    // Actual coroutine body.
    coroutine_heap->tmp_return_value = Py_None;
    Py_INCREF(coroutine_heap->tmp_return_value);
    goto function_return_exit;

    NUITKA_CANNOT_GET_HERE("Return statement must be present");


    return NULL;
    function_return_exit:;

    coroutine->m_returned = coroutine_heap->tmp_return_value;

    return NULL;

}

static PyObject *MAKE_COROUTINE_hikari$api$rest$$$function__73_fetch_sticker$$$coroutine__1_fetch_sticker() {
    return Nuitka_Coroutine_New(
        hikari$api$rest$$$function__73_fetch_sticker$$$coroutine__1_fetch_sticker_context,
        module_hikari$api$rest,
        mod_consts[183],
        mod_consts[184],
        codeobj_db5e2fbdef3512cdeead2e78f1d550e7,
        NULL,
        0,
        sizeof(struct hikari$api$rest$$$function__73_fetch_sticker$$$coroutine__1_fetch_sticker_locals)
    );
}


static PyObject *impl_hikari$api$rest$$$function__74_fetch_guild_stickers(struct Nuitka_FunctionObject const *self, PyObject **python_pars) {
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_self = python_pars[0];
    PyObject *par_guild = python_pars[1];
    PyObject *tmp_return_value = NULL;

    // Actual function body.


    tmp_return_value = MAKE_COROUTINE_hikari$api$rest$$$function__74_fetch_guild_stickers$$$coroutine__1_fetch_guild_stickers();

    goto function_return_exit;

    NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
    return NULL;


function_return_exit:
   // Function cleanup code if any.
    CHECK_OBJECT(par_self);
    Py_DECREF(par_self);
    CHECK_OBJECT(par_guild);
    Py_DECREF(par_guild);

   // Actual function exit with return value, making sure we did not make
   // the error status worse despite non-NULL return.
   CHECK_OBJECT(tmp_return_value);
   assert(had_error || !ERROR_OCCURRED());
   return tmp_return_value;
}



struct hikari$api$rest$$$function__74_fetch_guild_stickers$$$coroutine__1_fetch_guild_stickers_locals {
    PyObject *tmp_return_value;
};

static PyObject *hikari$api$rest$$$function__74_fetch_guild_stickers$$$coroutine__1_fetch_guild_stickers_context(struct Nuitka_CoroutineObject *coroutine, PyObject *yield_return_value) {
    CHECK_OBJECT(coroutine);
    assert(Nuitka_Coroutine_Check((PyObject *)coroutine));

    // Heap access if used.
    struct hikari$api$rest$$$function__74_fetch_guild_stickers$$$coroutine__1_fetch_guild_stickers_locals *coroutine_heap = (struct hikari$api$rest$$$function__74_fetch_guild_stickers$$$coroutine__1_fetch_guild_stickers_locals *)coroutine->m_heap_storage;

    // Dispatch to yield based on return label index:


    // Local variable initialization
    coroutine_heap->tmp_return_value = NULL;

    // Actual coroutine body.
    coroutine_heap->tmp_return_value = Py_None;
    Py_INCREF(coroutine_heap->tmp_return_value);
    goto function_return_exit;

    NUITKA_CANNOT_GET_HERE("Return statement must be present");


    return NULL;
    function_return_exit:;

    coroutine->m_returned = coroutine_heap->tmp_return_value;

    return NULL;

}

static PyObject *MAKE_COROUTINE_hikari$api$rest$$$function__74_fetch_guild_stickers$$$coroutine__1_fetch_guild_stickers() {
    return Nuitka_Coroutine_New(
        hikari$api$rest$$$function__74_fetch_guild_stickers$$$coroutine__1_fetch_guild_stickers_context,
        module_hikari$api$rest,
        mod_consts[186],
        mod_consts[187],
        codeobj_da885abe69f64210f2ff5c028e5ccd26,
        NULL,
        0,
        sizeof(struct hikari$api$rest$$$function__74_fetch_guild_stickers$$$coroutine__1_fetch_guild_stickers_locals)
    );
}


static PyObject *impl_hikari$api$rest$$$function__75_fetch_guild_sticker(struct Nuitka_FunctionObject const *self, PyObject **python_pars) {
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_self = python_pars[0];
    PyObject *par_guild = python_pars[1];
    PyObject *par_sticker = python_pars[2];
    PyObject *tmp_return_value = NULL;

    // Actual function body.


    tmp_return_value = MAKE_COROUTINE_hikari$api$rest$$$function__75_fetch_guild_sticker$$$coroutine__1_fetch_guild_sticker();

    goto function_return_exit;

    NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
    return NULL;


function_return_exit:
   // Function cleanup code if any.
    CHECK_OBJECT(par_self);
    Py_DECREF(par_self);
    CHECK_OBJECT(par_guild);
    Py_DECREF(par_guild);
    CHECK_OBJECT(par_sticker);
    Py_DECREF(par_sticker);

   // Actual function exit with return value, making sure we did not make
   // the error status worse despite non-NULL return.
   CHECK_OBJECT(tmp_return_value);
   assert(had_error || !ERROR_OCCURRED());
   return tmp_return_value;
}



struct hikari$api$rest$$$function__75_fetch_guild_sticker$$$coroutine__1_fetch_guild_sticker_locals {
    PyObject *tmp_return_value;
};

static PyObject *hikari$api$rest$$$function__75_fetch_guild_sticker$$$coroutine__1_fetch_guild_sticker_context(struct Nuitka_CoroutineObject *coroutine, PyObject *yield_return_value) {
    CHECK_OBJECT(coroutine);
    assert(Nuitka_Coroutine_Check((PyObject *)coroutine));

    // Heap access if used.
    struct hikari$api$rest$$$function__75_fetch_guild_sticker$$$coroutine__1_fetch_guild_sticker_locals *coroutine_heap = (struct hikari$api$rest$$$function__75_fetch_guild_sticker$$$coroutine__1_fetch_guild_sticker_locals *)coroutine->m_heap_storage;

    // Dispatch to yield based on return label index:


    // Local variable initialization
    coroutine_heap->tmp_return_value = NULL;

    // Actual coroutine body.
    coroutine_heap->tmp_return_value = Py_None;
    Py_INCREF(coroutine_heap->tmp_return_value);
    goto function_return_exit;

    NUITKA_CANNOT_GET_HERE("Return statement must be present");


    return NULL;
    function_return_exit:;

    coroutine->m_returned = coroutine_heap->tmp_return_value;

    return NULL;

}

static PyObject *MAKE_COROUTINE_hikari$api$rest$$$function__75_fetch_guild_sticker$$$coroutine__1_fetch_guild_sticker() {
    return Nuitka_Coroutine_New(
        hikari$api$rest$$$function__75_fetch_guild_sticker$$$coroutine__1_fetch_guild_sticker_context,
        module_hikari$api$rest,
        mod_consts[189],
        mod_consts[190],
        codeobj_95dc29580b8b5a29e1de025f1a9194a2,
        NULL,
        0,
        sizeof(struct hikari$api$rest$$$function__75_fetch_guild_sticker$$$coroutine__1_fetch_guild_sticker_locals)
    );
}


static PyObject *impl_hikari$api$rest$$$function__76_create_sticker(struct Nuitka_FunctionObject const *self, PyObject **python_pars) {
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_self = python_pars[0];
    PyObject *par_guild = python_pars[1];
    PyObject *par_name = python_pars[2];
    PyObject *par_tag = python_pars[3];
    PyObject *par_image = python_pars[4];
    PyObject *par_description = python_pars[5];
    PyObject *par_reason = python_pars[6];
    PyObject *tmp_return_value = NULL;

    // Actual function body.


    tmp_return_value = MAKE_COROUTINE_hikari$api$rest$$$function__76_create_sticker$$$coroutine__1_create_sticker();

    goto function_return_exit;

    NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
    return NULL;


function_return_exit:
   // Function cleanup code if any.
    CHECK_OBJECT(par_self);
    Py_DECREF(par_self);
    CHECK_OBJECT(par_guild);
    Py_DECREF(par_guild);
    CHECK_OBJECT(par_name);
    Py_DECREF(par_name);
    CHECK_OBJECT(par_tag);
    Py_DECREF(par_tag);
    CHECK_OBJECT(par_image);
    Py_DECREF(par_image);
    CHECK_OBJECT(par_description);
    Py_DECREF(par_description);
    CHECK_OBJECT(par_reason);
    Py_DECREF(par_reason);

   // Actual function exit with return value, making sure we did not make
   // the error status worse despite non-NULL return.
   CHECK_OBJECT(tmp_return_value);
   assert(had_error || !ERROR_OCCURRED());
   return tmp_return_value;
}



struct hikari$api$rest$$$function__76_create_sticker$$$coroutine__1_create_sticker_locals {
    PyObject *tmp_return_value;
};

static PyObject *hikari$api$rest$$$function__76_create_sticker$$$coroutine__1_create_sticker_context(struct Nuitka_CoroutineObject *coroutine, PyObject *yield_return_value) {
    CHECK_OBJECT(coroutine);
    assert(Nuitka_Coroutine_Check((PyObject *)coroutine));

    // Heap access if used.
    struct hikari$api$rest$$$function__76_create_sticker$$$coroutine__1_create_sticker_locals *coroutine_heap = (struct hikari$api$rest$$$function__76_create_sticker$$$coroutine__1_create_sticker_locals *)coroutine->m_heap_storage;

    // Dispatch to yield based on return label index:


    // Local variable initialization
    coroutine_heap->tmp_return_value = NULL;

    // Actual coroutine body.
    coroutine_heap->tmp_return_value = Py_None;
    Py_INCREF(coroutine_heap->tmp_return_value);
    goto function_return_exit;

    NUITKA_CANNOT_GET_HERE("Return statement must be present");


    return NULL;
    function_return_exit:;

    coroutine->m_returned = coroutine_heap->tmp_return_value;

    return NULL;

}

static PyObject *MAKE_COROUTINE_hikari$api$rest$$$function__76_create_sticker$$$coroutine__1_create_sticker() {
    return Nuitka_Coroutine_New(
        hikari$api$rest$$$function__76_create_sticker$$$coroutine__1_create_sticker_context,
        module_hikari$api$rest,
        mod_consts[192],
        mod_consts[193],
        codeobj_6bc646cda82f339b5a37035a5de12a5a,
        NULL,
        0,
        sizeof(struct hikari$api$rest$$$function__76_create_sticker$$$coroutine__1_create_sticker_locals)
    );
}


static PyObject *impl_hikari$api$rest$$$function__77_edit_sticker(struct Nuitka_FunctionObject const *self, PyObject **python_pars) {
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_self = python_pars[0];
    PyObject *par_guild = python_pars[1];
    PyObject *par_sticker = python_pars[2];
    PyObject *par_name = python_pars[3];
    PyObject *par_description = python_pars[4];
    PyObject *par_tag = python_pars[5];
    PyObject *par_reason = python_pars[6];
    PyObject *tmp_return_value = NULL;

    // Actual function body.


    tmp_return_value = MAKE_COROUTINE_hikari$api$rest$$$function__77_edit_sticker$$$coroutine__1_edit_sticker();

    goto function_return_exit;

    NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
    return NULL;


function_return_exit:
   // Function cleanup code if any.
    CHECK_OBJECT(par_self);
    Py_DECREF(par_self);
    CHECK_OBJECT(par_guild);
    Py_DECREF(par_guild);
    CHECK_OBJECT(par_sticker);
    Py_DECREF(par_sticker);
    CHECK_OBJECT(par_name);
    Py_DECREF(par_name);
    CHECK_OBJECT(par_description);
    Py_DECREF(par_description);
    CHECK_OBJECT(par_tag);
    Py_DECREF(par_tag);
    CHECK_OBJECT(par_reason);
    Py_DECREF(par_reason);

   // Actual function exit with return value, making sure we did not make
   // the error status worse despite non-NULL return.
   CHECK_OBJECT(tmp_return_value);
   assert(had_error || !ERROR_OCCURRED());
   return tmp_return_value;
}



struct hikari$api$rest$$$function__77_edit_sticker$$$coroutine__1_edit_sticker_locals {
    PyObject *tmp_return_value;
};

static PyObject *hikari$api$rest$$$function__77_edit_sticker$$$coroutine__1_edit_sticker_context(struct Nuitka_CoroutineObject *coroutine, PyObject *yield_return_value) {
    CHECK_OBJECT(coroutine);
    assert(Nuitka_Coroutine_Check((PyObject *)coroutine));

    // Heap access if used.
    struct hikari$api$rest$$$function__77_edit_sticker$$$coroutine__1_edit_sticker_locals *coroutine_heap = (struct hikari$api$rest$$$function__77_edit_sticker$$$coroutine__1_edit_sticker_locals *)coroutine->m_heap_storage;

    // Dispatch to yield based on return label index:


    // Local variable initialization
    coroutine_heap->tmp_return_value = NULL;

    // Actual coroutine body.
    coroutine_heap->tmp_return_value = Py_None;
    Py_INCREF(coroutine_heap->tmp_return_value);
    goto function_return_exit;

    NUITKA_CANNOT_GET_HERE("Return statement must be present");


    return NULL;
    function_return_exit:;

    coroutine->m_returned = coroutine_heap->tmp_return_value;

    return NULL;

}

static PyObject *MAKE_COROUTINE_hikari$api$rest$$$function__77_edit_sticker$$$coroutine__1_edit_sticker() {
    return Nuitka_Coroutine_New(
        hikari$api$rest$$$function__77_edit_sticker$$$coroutine__1_edit_sticker_context,
        module_hikari$api$rest,
        mod_consts[195],
        mod_consts[196],
        codeobj_43593321256b83bcc2a2e1cfcd1c76ba,
        NULL,
        0,
        sizeof(struct hikari$api$rest$$$function__77_edit_sticker$$$coroutine__1_edit_sticker_locals)
    );
}


static PyObject *impl_hikari$api$rest$$$function__78_delete_sticker(struct Nuitka_FunctionObject const *self, PyObject **python_pars) {
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_self = python_pars[0];
    PyObject *par_guild = python_pars[1];
    PyObject *par_sticker = python_pars[2];
    PyObject *par_reason = python_pars[3];
    PyObject *tmp_return_value = NULL;

    // Actual function body.


    tmp_return_value = MAKE_COROUTINE_hikari$api$rest$$$function__78_delete_sticker$$$coroutine__1_delete_sticker();

    goto function_return_exit;

    NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
    return NULL;


function_return_exit:
   // Function cleanup code if any.
    CHECK_OBJECT(par_self);
    Py_DECREF(par_self);
    CHECK_OBJECT(par_guild);
    Py_DECREF(par_guild);
    CHECK_OBJECT(par_sticker);
    Py_DECREF(par_sticker);
    CHECK_OBJECT(par_reason);
    Py_DECREF(par_reason);

   // Actual function exit with return value, making sure we did not make
   // the error status worse despite non-NULL return.
   CHECK_OBJECT(tmp_return_value);
   assert(had_error || !ERROR_OCCURRED());
   return tmp_return_value;
}



struct hikari$api$rest$$$function__78_delete_sticker$$$coroutine__1_delete_sticker_locals {
    PyObject *tmp_return_value;
};

static PyObject *hikari$api$rest$$$function__78_delete_sticker$$$coroutine__1_delete_sticker_context(struct Nuitka_CoroutineObject *coroutine, PyObject *yield_return_value) {
    CHECK_OBJECT(coroutine);
    assert(Nuitka_Coroutine_Check((PyObject *)coroutine));

    // Heap access if used.
    struct hikari$api$rest$$$function__78_delete_sticker$$$coroutine__1_delete_sticker_locals *coroutine_heap = (struct hikari$api$rest$$$function__78_delete_sticker$$$coroutine__1_delete_sticker_locals *)coroutine->m_heap_storage;

    // Dispatch to yield based on return label index:


    // Local variable initialization
    coroutine_heap->tmp_return_value = NULL;

    // Actual coroutine body.
    coroutine_heap->tmp_return_value = Py_None;
    Py_INCREF(coroutine_heap->tmp_return_value);
    goto function_return_exit;

    NUITKA_CANNOT_GET_HERE("Return statement must be present");


    return NULL;
    function_return_exit:;

    coroutine->m_returned = coroutine_heap->tmp_return_value;

    return NULL;

}

static PyObject *MAKE_COROUTINE_hikari$api$rest$$$function__78_delete_sticker$$$coroutine__1_delete_sticker() {
    return Nuitka_Coroutine_New(
        hikari$api$rest$$$function__78_delete_sticker$$$coroutine__1_delete_sticker_context,
        module_hikari$api$rest,
        mod_consts[198],
        mod_consts[199],
        codeobj_409e13cb5f1475225f2cbc531c685ea2,
        NULL,
        0,
        sizeof(struct hikari$api$rest$$$function__78_delete_sticker$$$coroutine__1_delete_sticker_locals)
    );
}


static PyObject *impl_hikari$api$rest$$$function__80_fetch_guild(struct Nuitka_FunctionObject const *self, PyObject **python_pars) {
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_self = python_pars[0];
    PyObject *par_guild = python_pars[1];
    PyObject *tmp_return_value = NULL;

    // Actual function body.


    tmp_return_value = MAKE_COROUTINE_hikari$api$rest$$$function__80_fetch_guild$$$coroutine__1_fetch_guild();

    goto function_return_exit;

    NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
    return NULL;


function_return_exit:
   // Function cleanup code if any.
    CHECK_OBJECT(par_self);
    Py_DECREF(par_self);
    CHECK_OBJECT(par_guild);
    Py_DECREF(par_guild);

   // Actual function exit with return value, making sure we did not make
   // the error status worse despite non-NULL return.
   CHECK_OBJECT(tmp_return_value);
   assert(had_error || !ERROR_OCCURRED());
   return tmp_return_value;
}



struct hikari$api$rest$$$function__80_fetch_guild$$$coroutine__1_fetch_guild_locals {
    PyObject *tmp_return_value;
};

static PyObject *hikari$api$rest$$$function__80_fetch_guild$$$coroutine__1_fetch_guild_context(struct Nuitka_CoroutineObject *coroutine, PyObject *yield_return_value) {
    CHECK_OBJECT(coroutine);
    assert(Nuitka_Coroutine_Check((PyObject *)coroutine));

    // Heap access if used.
    struct hikari$api$rest$$$function__80_fetch_guild$$$coroutine__1_fetch_guild_locals *coroutine_heap = (struct hikari$api$rest$$$function__80_fetch_guild$$$coroutine__1_fetch_guild_locals *)coroutine->m_heap_storage;

    // Dispatch to yield based on return label index:


    // Local variable initialization
    coroutine_heap->tmp_return_value = NULL;

    // Actual coroutine body.
    coroutine_heap->tmp_return_value = Py_None;
    Py_INCREF(coroutine_heap->tmp_return_value);
    goto function_return_exit;

    NUITKA_CANNOT_GET_HERE("Return statement must be present");


    return NULL;
    function_return_exit:;

    coroutine->m_returned = coroutine_heap->tmp_return_value;

    return NULL;

}

static PyObject *MAKE_COROUTINE_hikari$api$rest$$$function__80_fetch_guild$$$coroutine__1_fetch_guild() {
    return Nuitka_Coroutine_New(
        hikari$api$rest$$$function__80_fetch_guild$$$coroutine__1_fetch_guild_context,
        module_hikari$api$rest,
        mod_consts[201],
        mod_consts[202],
        codeobj_9fa1bb76afe2555b4f588c1284a2fcd4,
        NULL,
        0,
        sizeof(struct hikari$api$rest$$$function__80_fetch_guild$$$coroutine__1_fetch_guild_locals)
    );
}


static PyObject *impl_hikari$api$rest$$$function__81_fetch_guild_preview(struct Nuitka_FunctionObject const *self, PyObject **python_pars) {
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_self = python_pars[0];
    PyObject *par_guild = python_pars[1];
    PyObject *tmp_return_value = NULL;

    // Actual function body.


    tmp_return_value = MAKE_COROUTINE_hikari$api$rest$$$function__81_fetch_guild_preview$$$coroutine__1_fetch_guild_preview();

    goto function_return_exit;

    NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
    return NULL;


function_return_exit:
   // Function cleanup code if any.
    CHECK_OBJECT(par_self);
    Py_DECREF(par_self);
    CHECK_OBJECT(par_guild);
    Py_DECREF(par_guild);

   // Actual function exit with return value, making sure we did not make
   // the error status worse despite non-NULL return.
   CHECK_OBJECT(tmp_return_value);
   assert(had_error || !ERROR_OCCURRED());
   return tmp_return_value;
}



struct hikari$api$rest$$$function__81_fetch_guild_preview$$$coroutine__1_fetch_guild_preview_locals {
    PyObject *tmp_return_value;
};

static PyObject *hikari$api$rest$$$function__81_fetch_guild_preview$$$coroutine__1_fetch_guild_preview_context(struct Nuitka_CoroutineObject *coroutine, PyObject *yield_return_value) {
    CHECK_OBJECT(coroutine);
    assert(Nuitka_Coroutine_Check((PyObject *)coroutine));

    // Heap access if used.
    struct hikari$api$rest$$$function__81_fetch_guild_preview$$$coroutine__1_fetch_guild_preview_locals *coroutine_heap = (struct hikari$api$rest$$$function__81_fetch_guild_preview$$$coroutine__1_fetch_guild_preview_locals *)coroutine->m_heap_storage;

    // Dispatch to yield based on return label index:


    // Local variable initialization
    coroutine_heap->tmp_return_value = NULL;

    // Actual coroutine body.
    coroutine_heap->tmp_return_value = Py_None;
    Py_INCREF(coroutine_heap->tmp_return_value);
    goto function_return_exit;

    NUITKA_CANNOT_GET_HERE("Return statement must be present");


    return NULL;
    function_return_exit:;

    coroutine->m_returned = coroutine_heap->tmp_return_value;

    return NULL;

}

static PyObject *MAKE_COROUTINE_hikari$api$rest$$$function__81_fetch_guild_preview$$$coroutine__1_fetch_guild_preview() {
    return Nuitka_Coroutine_New(
        hikari$api$rest$$$function__81_fetch_guild_preview$$$coroutine__1_fetch_guild_preview_context,
        module_hikari$api$rest,
        mod_consts[204],
        mod_consts[205],
        codeobj_b12e50ac6a955e7d9814a32bcafb352f,
        NULL,
        0,
        sizeof(struct hikari$api$rest$$$function__81_fetch_guild_preview$$$coroutine__1_fetch_guild_preview_locals)
    );
}


static PyObject *impl_hikari$api$rest$$$function__82_edit_guild(struct Nuitka_FunctionObject const *self, PyObject **python_pars) {
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_self = python_pars[0];
    PyObject *par_guild = python_pars[1];
    PyObject *par_name = python_pars[2];
    PyObject *par_verification_level = python_pars[3];
    PyObject *par_default_message_notifications = python_pars[4];
    PyObject *par_explicit_content_filter_level = python_pars[5];
    PyObject *par_afk_channel = python_pars[6];
    PyObject *par_afk_timeout = python_pars[7];
    PyObject *par_icon = python_pars[8];
    PyObject *par_owner = python_pars[9];
    PyObject *par_splash = python_pars[10];
    PyObject *par_banner = python_pars[11];
    PyObject *par_system_channel = python_pars[12];
    PyObject *par_rules_channel = python_pars[13];
    PyObject *par_public_updates_channel = python_pars[14];
    PyObject *par_preferred_locale = python_pars[15];
    PyObject *par_reason = python_pars[16];
    PyObject *tmp_return_value = NULL;

    // Actual function body.


    tmp_return_value = MAKE_COROUTINE_hikari$api$rest$$$function__82_edit_guild$$$coroutine__1_edit_guild();

    goto function_return_exit;

    NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
    return NULL;


function_return_exit:
   // Function cleanup code if any.
    CHECK_OBJECT(par_self);
    Py_DECREF(par_self);
    CHECK_OBJECT(par_guild);
    Py_DECREF(par_guild);
    CHECK_OBJECT(par_name);
    Py_DECREF(par_name);
    CHECK_OBJECT(par_verification_level);
    Py_DECREF(par_verification_level);
    CHECK_OBJECT(par_default_message_notifications);
    Py_DECREF(par_default_message_notifications);
    CHECK_OBJECT(par_explicit_content_filter_level);
    Py_DECREF(par_explicit_content_filter_level);
    CHECK_OBJECT(par_afk_channel);
    Py_DECREF(par_afk_channel);
    CHECK_OBJECT(par_afk_timeout);
    Py_DECREF(par_afk_timeout);
    CHECK_OBJECT(par_icon);
    Py_DECREF(par_icon);
    CHECK_OBJECT(par_owner);
    Py_DECREF(par_owner);
    CHECK_OBJECT(par_splash);
    Py_DECREF(par_splash);
    CHECK_OBJECT(par_banner);
    Py_DECREF(par_banner);
    CHECK_OBJECT(par_system_channel);
    Py_DECREF(par_system_channel);
    CHECK_OBJECT(par_rules_channel);
    Py_DECREF(par_rules_channel);
    CHECK_OBJECT(par_public_updates_channel);
    Py_DECREF(par_public_updates_channel);
    CHECK_OBJECT(par_preferred_locale);
    Py_DECREF(par_preferred_locale);
    CHECK_OBJECT(par_reason);
    Py_DECREF(par_reason);

   // Actual function exit with return value, making sure we did not make
   // the error status worse despite non-NULL return.
   CHECK_OBJECT(tmp_return_value);
   assert(had_error || !ERROR_OCCURRED());
   return tmp_return_value;
}



struct hikari$api$rest$$$function__82_edit_guild$$$coroutine__1_edit_guild_locals {
    PyObject *tmp_return_value;
};

static PyObject *hikari$api$rest$$$function__82_edit_guild$$$coroutine__1_edit_guild_context(struct Nuitka_CoroutineObject *coroutine, PyObject *yield_return_value) {
    CHECK_OBJECT(coroutine);
    assert(Nuitka_Coroutine_Check((PyObject *)coroutine));

    // Heap access if used.
    struct hikari$api$rest$$$function__82_edit_guild$$$coroutine__1_edit_guild_locals *coroutine_heap = (struct hikari$api$rest$$$function__82_edit_guild$$$coroutine__1_edit_guild_locals *)coroutine->m_heap_storage;

    // Dispatch to yield based on return label index:


    // Local variable initialization
    coroutine_heap->tmp_return_value = NULL;

    // Actual coroutine body.
    coroutine_heap->tmp_return_value = Py_None;
    Py_INCREF(coroutine_heap->tmp_return_value);
    goto function_return_exit;

    NUITKA_CANNOT_GET_HERE("Return statement must be present");


    return NULL;
    function_return_exit:;

    coroutine->m_returned = coroutine_heap->tmp_return_value;

    return NULL;

}

static PyObject *MAKE_COROUTINE_hikari$api$rest$$$function__82_edit_guild$$$coroutine__1_edit_guild() {
    return Nuitka_Coroutine_New(
        hikari$api$rest$$$function__82_edit_guild$$$coroutine__1_edit_guild_context,
        module_hikari$api$rest,
        mod_consts[207],
        mod_consts[208],
        codeobj_b8572edead035d292c542034f790156d,
        NULL,
        0,
        sizeof(struct hikari$api$rest$$$function__82_edit_guild$$$coroutine__1_edit_guild_locals)
    );
}


static PyObject *impl_hikari$api$rest$$$function__83_delete_guild(struct Nuitka_FunctionObject const *self, PyObject **python_pars) {
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_self = python_pars[0];
    PyObject *par_guild = python_pars[1];
    PyObject *tmp_return_value = NULL;

    // Actual function body.


    tmp_return_value = MAKE_COROUTINE_hikari$api$rest$$$function__83_delete_guild$$$coroutine__1_delete_guild();

    goto function_return_exit;

    NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
    return NULL;


function_return_exit:
   // Function cleanup code if any.
    CHECK_OBJECT(par_self);
    Py_DECREF(par_self);
    CHECK_OBJECT(par_guild);
    Py_DECREF(par_guild);

   // Actual function exit with return value, making sure we did not make
   // the error status worse despite non-NULL return.
   CHECK_OBJECT(tmp_return_value);
   assert(had_error || !ERROR_OCCURRED());
   return tmp_return_value;
}



struct hikari$api$rest$$$function__83_delete_guild$$$coroutine__1_delete_guild_locals {
    PyObject *tmp_return_value;
};

static PyObject *hikari$api$rest$$$function__83_delete_guild$$$coroutine__1_delete_guild_context(struct Nuitka_CoroutineObject *coroutine, PyObject *yield_return_value) {
    CHECK_OBJECT(coroutine);
    assert(Nuitka_Coroutine_Check((PyObject *)coroutine));

    // Heap access if used.
    struct hikari$api$rest$$$function__83_delete_guild$$$coroutine__1_delete_guild_locals *coroutine_heap = (struct hikari$api$rest$$$function__83_delete_guild$$$coroutine__1_delete_guild_locals *)coroutine->m_heap_storage;

    // Dispatch to yield based on return label index:


    // Local variable initialization
    coroutine_heap->tmp_return_value = NULL;

    // Actual coroutine body.
    coroutine_heap->tmp_return_value = Py_None;
    Py_INCREF(coroutine_heap->tmp_return_value);
    goto function_return_exit;

    NUITKA_CANNOT_GET_HERE("Return statement must be present");


    return NULL;
    function_return_exit:;

    coroutine->m_returned = coroutine_heap->tmp_return_value;

    return NULL;

}

static PyObject *MAKE_COROUTINE_hikari$api$rest$$$function__83_delete_guild$$$coroutine__1_delete_guild() {
    return Nuitka_Coroutine_New(
        hikari$api$rest$$$function__83_delete_guild$$$coroutine__1_delete_guild_context,
        module_hikari$api$rest,
        mod_consts[210],
        mod_consts[211],
        codeobj_c04fe507f41b0ac3283d08bde3e7eb5e,
        NULL,
        0,
        sizeof(struct hikari$api$rest$$$function__83_delete_guild$$$coroutine__1_delete_guild_locals)
    );
}


static PyObject *impl_hikari$api$rest$$$function__84_fetch_guild_channels(struct Nuitka_FunctionObject const *self, PyObject **python_pars) {
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_self = python_pars[0];
    PyObject *par_guild = python_pars[1];
    PyObject *tmp_return_value = NULL;

    // Actual function body.


    tmp_return_value = MAKE_COROUTINE_hikari$api$rest$$$function__84_fetch_guild_channels$$$coroutine__1_fetch_guild_channels();

    goto function_return_exit;

    NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
    return NULL;


function_return_exit:
   // Function cleanup code if any.
    CHECK_OBJECT(par_self);
    Py_DECREF(par_self);
    CHECK_OBJECT(par_guild);
    Py_DECREF(par_guild);

   // Actual function exit with return value, making sure we did not make
   // the error status worse despite non-NULL return.
   CHECK_OBJECT(tmp_return_value);
   assert(had_error || !ERROR_OCCURRED());
   return tmp_return_value;
}



struct hikari$api$rest$$$function__84_fetch_guild_channels$$$coroutine__1_fetch_guild_channels_locals {
    PyObject *tmp_return_value;
};

static PyObject *hikari$api$rest$$$function__84_fetch_guild_channels$$$coroutine__1_fetch_guild_channels_context(struct Nuitka_CoroutineObject *coroutine, PyObject *yield_return_value) {
    CHECK_OBJECT(coroutine);
    assert(Nuitka_Coroutine_Check((PyObject *)coroutine));

    // Heap access if used.
    struct hikari$api$rest$$$function__84_fetch_guild_channels$$$coroutine__1_fetch_guild_channels_locals *coroutine_heap = (struct hikari$api$rest$$$function__84_fetch_guild_channels$$$coroutine__1_fetch_guild_channels_locals *)coroutine->m_heap_storage;

    // Dispatch to yield based on return label index:


    // Local variable initialization
    coroutine_heap->tmp_return_value = NULL;

    // Actual coroutine body.
    coroutine_heap->tmp_return_value = Py_None;
    Py_INCREF(coroutine_heap->tmp_return_value);
    goto function_return_exit;

    NUITKA_CANNOT_GET_HERE("Return statement must be present");


    return NULL;
    function_return_exit:;

    coroutine->m_returned = coroutine_heap->tmp_return_value;

    return NULL;

}

static PyObject *MAKE_COROUTINE_hikari$api$rest$$$function__84_fetch_guild_channels$$$coroutine__1_fetch_guild_channels() {
    return Nuitka_Coroutine_New(
        hikari$api$rest$$$function__84_fetch_guild_channels$$$coroutine__1_fetch_guild_channels_context,
        module_hikari$api$rest,
        mod_consts[213],
        mod_consts[214],
        codeobj_f02c9c1a79dfd00d4112cd96a363cef4,
        NULL,
        0,
        sizeof(struct hikari$api$rest$$$function__84_fetch_guild_channels$$$coroutine__1_fetch_guild_channels_locals)
    );
}


static PyObject *impl_hikari$api$rest$$$function__85_create_guild_text_channel(struct Nuitka_FunctionObject const *self, PyObject **python_pars) {
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_self = python_pars[0];
    PyObject *par_guild = python_pars[1];
    PyObject *par_name = python_pars[2];
    PyObject *par_position = python_pars[3];
    PyObject *par_topic = python_pars[4];
    PyObject *par_nsfw = python_pars[5];
    PyObject *par_rate_limit_per_user = python_pars[6];
    PyObject *par_permission_overwrites = python_pars[7];
    PyObject *par_category = python_pars[8];
    PyObject *par_reason = python_pars[9];
    PyObject *tmp_return_value = NULL;

    // Actual function body.


    tmp_return_value = MAKE_COROUTINE_hikari$api$rest$$$function__85_create_guild_text_channel$$$coroutine__1_create_guild_text_channel();

    goto function_return_exit;

    NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
    return NULL;


function_return_exit:
   // Function cleanup code if any.
    CHECK_OBJECT(par_self);
    Py_DECREF(par_self);
    CHECK_OBJECT(par_guild);
    Py_DECREF(par_guild);
    CHECK_OBJECT(par_name);
    Py_DECREF(par_name);
    CHECK_OBJECT(par_position);
    Py_DECREF(par_position);
    CHECK_OBJECT(par_topic);
    Py_DECREF(par_topic);
    CHECK_OBJECT(par_nsfw);
    Py_DECREF(par_nsfw);
    CHECK_OBJECT(par_rate_limit_per_user);
    Py_DECREF(par_rate_limit_per_user);
    CHECK_OBJECT(par_permission_overwrites);
    Py_DECREF(par_permission_overwrites);
    CHECK_OBJECT(par_category);
    Py_DECREF(par_category);
    CHECK_OBJECT(par_reason);
    Py_DECREF(par_reason);

   // Actual function exit with return value, making sure we did not make
   // the error status worse despite non-NULL return.
   CHECK_OBJECT(tmp_return_value);
   assert(had_error || !ERROR_OCCURRED());
   return tmp_return_value;
}



struct hikari$api$rest$$$function__85_create_guild_text_channel$$$coroutine__1_create_guild_text_channel_locals {
    PyObject *tmp_return_value;
};

static PyObject *hikari$api$rest$$$function__85_create_guild_text_channel$$$coroutine__1_create_guild_text_channel_context(struct Nuitka_CoroutineObject *coroutine, PyObject *yield_return_value) {
    CHECK_OBJECT(coroutine);
    assert(Nuitka_Coroutine_Check((PyObject *)coroutine));

    // Heap access if used.
    struct hikari$api$rest$$$function__85_create_guild_text_channel$$$coroutine__1_create_guild_text_channel_locals *coroutine_heap = (struct hikari$api$rest$$$function__85_create_guild_text_channel$$$coroutine__1_create_guild_text_channel_locals *)coroutine->m_heap_storage;

    // Dispatch to yield based on return label index:


    // Local variable initialization
    coroutine_heap->tmp_return_value = NULL;

    // Actual coroutine body.
    coroutine_heap->tmp_return_value = Py_None;
    Py_INCREF(coroutine_heap->tmp_return_value);
    goto function_return_exit;

    NUITKA_CANNOT_GET_HERE("Return statement must be present");


    return NULL;
    function_return_exit:;

    coroutine->m_returned = coroutine_heap->tmp_return_value;

    return NULL;

}

static PyObject *MAKE_COROUTINE_hikari$api$rest$$$function__85_create_guild_text_channel$$$coroutine__1_create_guild_text_channel() {
    return Nuitka_Coroutine_New(
        hikari$api$rest$$$function__85_create_guild_text_channel$$$coroutine__1_create_guild_text_channel_context,
        module_hikari$api$rest,
        mod_consts[216],
        mod_consts[217],
        codeobj_3b902179d941a30fc767e6b081474834,
        NULL,
        0,
        sizeof(struct hikari$api$rest$$$function__85_create_guild_text_channel$$$coroutine__1_create_guild_text_channel_locals)
    );
}


static PyObject *impl_hikari$api$rest$$$function__86_create_guild_news_channel(struct Nuitka_FunctionObject const *self, PyObject **python_pars) {
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_self = python_pars[0];
    PyObject *par_guild = python_pars[1];
    PyObject *par_name = python_pars[2];
    PyObject *par_position = python_pars[3];
    PyObject *par_topic = python_pars[4];
    PyObject *par_nsfw = python_pars[5];
    PyObject *par_rate_limit_per_user = python_pars[6];
    PyObject *par_permission_overwrites = python_pars[7];
    PyObject *par_category = python_pars[8];
    PyObject *par_reason = python_pars[9];
    PyObject *tmp_return_value = NULL;

    // Actual function body.


    tmp_return_value = MAKE_COROUTINE_hikari$api$rest$$$function__86_create_guild_news_channel$$$coroutine__1_create_guild_news_channel();

    goto function_return_exit;

    NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
    return NULL;


function_return_exit:
   // Function cleanup code if any.
    CHECK_OBJECT(par_self);
    Py_DECREF(par_self);
    CHECK_OBJECT(par_guild);
    Py_DECREF(par_guild);
    CHECK_OBJECT(par_name);
    Py_DECREF(par_name);
    CHECK_OBJECT(par_position);
    Py_DECREF(par_position);
    CHECK_OBJECT(par_topic);
    Py_DECREF(par_topic);
    CHECK_OBJECT(par_nsfw);
    Py_DECREF(par_nsfw);
    CHECK_OBJECT(par_rate_limit_per_user);
    Py_DECREF(par_rate_limit_per_user);
    CHECK_OBJECT(par_permission_overwrites);
    Py_DECREF(par_permission_overwrites);
    CHECK_OBJECT(par_category);
    Py_DECREF(par_category);
    CHECK_OBJECT(par_reason);
    Py_DECREF(par_reason);

   // Actual function exit with return value, making sure we did not make
   // the error status worse despite non-NULL return.
   CHECK_OBJECT(tmp_return_value);
   assert(had_error || !ERROR_OCCURRED());
   return tmp_return_value;
}



struct hikari$api$rest$$$function__86_create_guild_news_channel$$$coroutine__1_create_guild_news_channel_locals {
    PyObject *tmp_return_value;
};

static PyObject *hikari$api$rest$$$function__86_create_guild_news_channel$$$coroutine__1_create_guild_news_channel_context(struct Nuitka_CoroutineObject *coroutine, PyObject *yield_return_value) {
    CHECK_OBJECT(coroutine);
    assert(Nuitka_Coroutine_Check((PyObject *)coroutine));

    // Heap access if used.
    struct hikari$api$rest$$$function__86_create_guild_news_channel$$$coroutine__1_create_guild_news_channel_locals *coroutine_heap = (struct hikari$api$rest$$$function__86_create_guild_news_channel$$$coroutine__1_create_guild_news_channel_locals *)coroutine->m_heap_storage;

    // Dispatch to yield based on return label index:


    // Local variable initialization
    coroutine_heap->tmp_return_value = NULL;

    // Actual coroutine body.
    coroutine_heap->tmp_return_value = Py_None;
    Py_INCREF(coroutine_heap->tmp_return_value);
    goto function_return_exit;

    NUITKA_CANNOT_GET_HERE("Return statement must be present");


    return NULL;
    function_return_exit:;

    coroutine->m_returned = coroutine_heap->tmp_return_value;

    return NULL;

}

static PyObject *MAKE_COROUTINE_hikari$api$rest$$$function__86_create_guild_news_channel$$$coroutine__1_create_guild_news_channel() {
    return Nuitka_Coroutine_New(
        hikari$api$rest$$$function__86_create_guild_news_channel$$$coroutine__1_create_guild_news_channel_context,
        module_hikari$api$rest,
        mod_consts[219],
        mod_consts[220],
        codeobj_fcb3282dfce94e0118b54ed974ea5dca,
        NULL,
        0,
        sizeof(struct hikari$api$rest$$$function__86_create_guild_news_channel$$$coroutine__1_create_guild_news_channel_locals)
    );
}


static PyObject *impl_hikari$api$rest$$$function__87_create_guild_voice_channel(struct Nuitka_FunctionObject const *self, PyObject **python_pars) {
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_self = python_pars[0];
    PyObject *par_guild = python_pars[1];
    PyObject *par_name = python_pars[2];
    PyObject *par_position = python_pars[3];
    PyObject *par_user_limit = python_pars[4];
    PyObject *par_bitrate = python_pars[5];
    PyObject *par_video_quality_mode = python_pars[6];
    PyObject *par_permission_overwrites = python_pars[7];
    PyObject *par_region = python_pars[8];
    PyObject *par_category = python_pars[9];
    PyObject *par_reason = python_pars[10];
    PyObject *tmp_return_value = NULL;

    // Actual function body.


    tmp_return_value = MAKE_COROUTINE_hikari$api$rest$$$function__87_create_guild_voice_channel$$$coroutine__1_create_guild_voice_channel();

    goto function_return_exit;

    NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
    return NULL;


function_return_exit:
   // Function cleanup code if any.
    CHECK_OBJECT(par_self);
    Py_DECREF(par_self);
    CHECK_OBJECT(par_guild);
    Py_DECREF(par_guild);
    CHECK_OBJECT(par_name);
    Py_DECREF(par_name);
    CHECK_OBJECT(par_position);
    Py_DECREF(par_position);
    CHECK_OBJECT(par_user_limit);
    Py_DECREF(par_user_limit);
    CHECK_OBJECT(par_bitrate);
    Py_DECREF(par_bitrate);
    CHECK_OBJECT(par_video_quality_mode);
    Py_DECREF(par_video_quality_mode);
    CHECK_OBJECT(par_permission_overwrites);
    Py_DECREF(par_permission_overwrites);
    CHECK_OBJECT(par_region);
    Py_DECREF(par_region);
    CHECK_OBJECT(par_category);
    Py_DECREF(par_category);
    CHECK_OBJECT(par_reason);
    Py_DECREF(par_reason);

   // Actual function exit with return value, making sure we did not make
   // the error status worse despite non-NULL return.
   CHECK_OBJECT(tmp_return_value);
   assert(had_error || !ERROR_OCCURRED());
   return tmp_return_value;
}



struct hikari$api$rest$$$function__87_create_guild_voice_channel$$$coroutine__1_create_guild_voice_channel_locals {
    PyObject *tmp_return_value;
};

static PyObject *hikari$api$rest$$$function__87_create_guild_voice_channel$$$coroutine__1_create_guild_voice_channel_context(struct Nuitka_CoroutineObject *coroutine, PyObject *yield_return_value) {
    CHECK_OBJECT(coroutine);
    assert(Nuitka_Coroutine_Check((PyObject *)coroutine));

    // Heap access if used.
    struct hikari$api$rest$$$function__87_create_guild_voice_channel$$$coroutine__1_create_guild_voice_channel_locals *coroutine_heap = (struct hikari$api$rest$$$function__87_create_guild_voice_channel$$$coroutine__1_create_guild_voice_channel_locals *)coroutine->m_heap_storage;

    // Dispatch to yield based on return label index:


    // Local variable initialization
    coroutine_heap->tmp_return_value = NULL;

    // Actual coroutine body.
    coroutine_heap->tmp_return_value = Py_None;
    Py_INCREF(coroutine_heap->tmp_return_value);
    goto function_return_exit;

    NUITKA_CANNOT_GET_HERE("Return statement must be present");


    return NULL;
    function_return_exit:;

    coroutine->m_returned = coroutine_heap->tmp_return_value;

    return NULL;

}

static PyObject *MAKE_COROUTINE_hikari$api$rest$$$function__87_create_guild_voice_channel$$$coroutine__1_create_guild_voice_channel() {
    return Nuitka_Coroutine_New(
        hikari$api$rest$$$function__87_create_guild_voice_channel$$$coroutine__1_create_guild_voice_channel_context,
        module_hikari$api$rest,
        mod_consts[222],
        mod_consts[223],
        codeobj_404b46a06bf1bbaeece956d0adc5120e,
        NULL,
        0,
        sizeof(struct hikari$api$rest$$$function__87_create_guild_voice_channel$$$coroutine__1_create_guild_voice_channel_locals)
    );
}


static PyObject *impl_hikari$api$rest$$$function__88_create_guild_stage_channel(struct Nuitka_FunctionObject const *self, PyObject **python_pars) {
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_self = python_pars[0];
    PyObject *par_guild = python_pars[1];
    PyObject *par_name = python_pars[2];
    PyObject *par_position = python_pars[3];
    PyObject *par_user_limit = python_pars[4];
    PyObject *par_bitrate = python_pars[5];
    PyObject *par_permission_overwrites = python_pars[6];
    PyObject *par_region = python_pars[7];
    PyObject *par_category = python_pars[8];
    PyObject *par_reason = python_pars[9];
    PyObject *tmp_return_value = NULL;

    // Actual function body.


    tmp_return_value = MAKE_COROUTINE_hikari$api$rest$$$function__88_create_guild_stage_channel$$$coroutine__1_create_guild_stage_channel();

    goto function_return_exit;

    NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
    return NULL;


function_return_exit:
   // Function cleanup code if any.
    CHECK_OBJECT(par_self);
    Py_DECREF(par_self);
    CHECK_OBJECT(par_guild);
    Py_DECREF(par_guild);
    CHECK_OBJECT(par_name);
    Py_DECREF(par_name);
    CHECK_OBJECT(par_position);
    Py_DECREF(par_position);
    CHECK_OBJECT(par_user_limit);
    Py_DECREF(par_user_limit);
    CHECK_OBJECT(par_bitrate);
    Py_DECREF(par_bitrate);
    CHECK_OBJECT(par_permission_overwrites);
    Py_DECREF(par_permission_overwrites);
    CHECK_OBJECT(par_region);
    Py_DECREF(par_region);
    CHECK_OBJECT(par_category);
    Py_DECREF(par_category);
    CHECK_OBJECT(par_reason);
    Py_DECREF(par_reason);

   // Actual function exit with return value, making sure we did not make
   // the error status worse despite non-NULL return.
   CHECK_OBJECT(tmp_return_value);
   assert(had_error || !ERROR_OCCURRED());
   return tmp_return_value;
}



struct hikari$api$rest$$$function__88_create_guild_stage_channel$$$coroutine__1_create_guild_stage_channel_locals {
    PyObject *tmp_return_value;
};

static PyObject *hikari$api$rest$$$function__88_create_guild_stage_channel$$$coroutine__1_create_guild_stage_channel_context(struct Nuitka_CoroutineObject *coroutine, PyObject *yield_return_value) {
    CHECK_OBJECT(coroutine);
    assert(Nuitka_Coroutine_Check((PyObject *)coroutine));

    // Heap access if used.
    struct hikari$api$rest$$$function__88_create_guild_stage_channel$$$coroutine__1_create_guild_stage_channel_locals *coroutine_heap = (struct hikari$api$rest$$$function__88_create_guild_stage_channel$$$coroutine__1_create_guild_stage_channel_locals *)coroutine->m_heap_storage;

    // Dispatch to yield based on return label index:


    // Local variable initialization
    coroutine_heap->tmp_return_value = NULL;

    // Actual coroutine body.
    coroutine_heap->tmp_return_value = Py_None;
    Py_INCREF(coroutine_heap->tmp_return_value);
    goto function_return_exit;

    NUITKA_CANNOT_GET_HERE("Return statement must be present");


    return NULL;
    function_return_exit:;

    coroutine->m_returned = coroutine_heap->tmp_return_value;

    return NULL;

}

static PyObject *MAKE_COROUTINE_hikari$api$rest$$$function__88_create_guild_stage_channel$$$coroutine__1_create_guild_stage_channel() {
    return Nuitka_Coroutine_New(
        hikari$api$rest$$$function__88_create_guild_stage_channel$$$coroutine__1_create_guild_stage_channel_context,
        module_hikari$api$rest,
        mod_consts[225],
        mod_consts[226],
        codeobj_bacc75bdb9795bb19510517993550d92,
        NULL,
        0,
        sizeof(struct hikari$api$rest$$$function__88_create_guild_stage_channel$$$coroutine__1_create_guild_stage_channel_locals)
    );
}


static PyObject *impl_hikari$api$rest$$$function__89_create_guild_category(struct Nuitka_FunctionObject const *self, PyObject **python_pars) {
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_self = python_pars[0];
    PyObject *par_guild = python_pars[1];
    PyObject *par_name = python_pars[2];
    PyObject *par_position = python_pars[3];
    PyObject *par_permission_overwrites = python_pars[4];
    PyObject *par_reason = python_pars[5];
    PyObject *tmp_return_value = NULL;

    // Actual function body.


    tmp_return_value = MAKE_COROUTINE_hikari$api$rest$$$function__89_create_guild_category$$$coroutine__1_create_guild_category();

    goto function_return_exit;

    NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
    return NULL;


function_return_exit:
   // Function cleanup code if any.
    CHECK_OBJECT(par_self);
    Py_DECREF(par_self);
    CHECK_OBJECT(par_guild);
    Py_DECREF(par_guild);
    CHECK_OBJECT(par_name);
    Py_DECREF(par_name);
    CHECK_OBJECT(par_position);
    Py_DECREF(par_position);
    CHECK_OBJECT(par_permission_overwrites);
    Py_DECREF(par_permission_overwrites);
    CHECK_OBJECT(par_reason);
    Py_DECREF(par_reason);

   // Actual function exit with return value, making sure we did not make
   // the error status worse despite non-NULL return.
   CHECK_OBJECT(tmp_return_value);
   assert(had_error || !ERROR_OCCURRED());
   return tmp_return_value;
}



struct hikari$api$rest$$$function__89_create_guild_category$$$coroutine__1_create_guild_category_locals {
    PyObject *tmp_return_value;
};

static PyObject *hikari$api$rest$$$function__89_create_guild_category$$$coroutine__1_create_guild_category_context(struct Nuitka_CoroutineObject *coroutine, PyObject *yield_return_value) {
    CHECK_OBJECT(coroutine);
    assert(Nuitka_Coroutine_Check((PyObject *)coroutine));

    // Heap access if used.
    struct hikari$api$rest$$$function__89_create_guild_category$$$coroutine__1_create_guild_category_locals *coroutine_heap = (struct hikari$api$rest$$$function__89_create_guild_category$$$coroutine__1_create_guild_category_locals *)coroutine->m_heap_storage;

    // Dispatch to yield based on return label index:


    // Local variable initialization
    coroutine_heap->tmp_return_value = NULL;

    // Actual coroutine body.
    coroutine_heap->tmp_return_value = Py_None;
    Py_INCREF(coroutine_heap->tmp_return_value);
    goto function_return_exit;

    NUITKA_CANNOT_GET_HERE("Return statement must be present");


    return NULL;
    function_return_exit:;

    coroutine->m_returned = coroutine_heap->tmp_return_value;

    return NULL;

}

static PyObject *MAKE_COROUTINE_hikari$api$rest$$$function__89_create_guild_category$$$coroutine__1_create_guild_category() {
    return Nuitka_Coroutine_New(
        hikari$api$rest$$$function__89_create_guild_category$$$coroutine__1_create_guild_category_context,
        module_hikari$api$rest,
        mod_consts[228],
        mod_consts[229],
        codeobj_4371d9d20ead35c704a0e86e924d663a,
        NULL,
        0,
        sizeof(struct hikari$api$rest$$$function__89_create_guild_category$$$coroutine__1_create_guild_category_locals)
    );
}


static PyObject *impl_hikari$api$rest$$$function__90_reposition_channels(struct Nuitka_FunctionObject const *self, PyObject **python_pars) {
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_self = python_pars[0];
    PyObject *par_guild = python_pars[1];
    PyObject *par_positions = python_pars[2];
    PyObject *tmp_return_value = NULL;

    // Actual function body.


    tmp_return_value = MAKE_COROUTINE_hikari$api$rest$$$function__90_reposition_channels$$$coroutine__1_reposition_channels();

    goto function_return_exit;

    NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
    return NULL;


function_return_exit:
   // Function cleanup code if any.
    CHECK_OBJECT(par_self);
    Py_DECREF(par_self);
    CHECK_OBJECT(par_guild);
    Py_DECREF(par_guild);
    CHECK_OBJECT(par_positions);
    Py_DECREF(par_positions);

   // Actual function exit with return value, making sure we did not make
   // the error status worse despite non-NULL return.
   CHECK_OBJECT(tmp_return_value);
   assert(had_error || !ERROR_OCCURRED());
   return tmp_return_value;
}



struct hikari$api$rest$$$function__90_reposition_channels$$$coroutine__1_reposition_channels_locals {
    PyObject *tmp_return_value;
};

static PyObject *hikari$api$rest$$$function__90_reposition_channels$$$coroutine__1_reposition_channels_context(struct Nuitka_CoroutineObject *coroutine, PyObject *yield_return_value) {
    CHECK_OBJECT(coroutine);
    assert(Nuitka_Coroutine_Check((PyObject *)coroutine));

    // Heap access if used.
    struct hikari$api$rest$$$function__90_reposition_channels$$$coroutine__1_reposition_channels_locals *coroutine_heap = (struct hikari$api$rest$$$function__90_reposition_channels$$$coroutine__1_reposition_channels_locals *)coroutine->m_heap_storage;

    // Dispatch to yield based on return label index:


    // Local variable initialization
    coroutine_heap->tmp_return_value = NULL;

    // Actual coroutine body.
    coroutine_heap->tmp_return_value = Py_None;
    Py_INCREF(coroutine_heap->tmp_return_value);
    goto function_return_exit;

    NUITKA_CANNOT_GET_HERE("Return statement must be present");


    return NULL;
    function_return_exit:;

    coroutine->m_returned = coroutine_heap->tmp_return_value;

    return NULL;

}

static PyObject *MAKE_COROUTINE_hikari$api$rest$$$function__90_reposition_channels$$$coroutine__1_reposition_channels() {
    return Nuitka_Coroutine_New(
        hikari$api$rest$$$function__90_reposition_channels$$$coroutine__1_reposition_channels_context,
        module_hikari$api$rest,
        mod_consts[231],
        mod_consts[232],
        codeobj_6034723cc1f266b6ddd3d11b6b282685,
        NULL,
        0,
        sizeof(struct hikari$api$rest$$$function__90_reposition_channels$$$coroutine__1_reposition_channels_locals)
    );
}


static PyObject *impl_hikari$api$rest$$$function__91_fetch_member(struct Nuitka_FunctionObject const *self, PyObject **python_pars) {
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_self = python_pars[0];
    PyObject *par_guild = python_pars[1];
    PyObject *par_user = python_pars[2];
    PyObject *tmp_return_value = NULL;

    // Actual function body.


    tmp_return_value = MAKE_COROUTINE_hikari$api$rest$$$function__91_fetch_member$$$coroutine__1_fetch_member();

    goto function_return_exit;

    NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
    return NULL;


function_return_exit:
   // Function cleanup code if any.
    CHECK_OBJECT(par_self);
    Py_DECREF(par_self);
    CHECK_OBJECT(par_guild);
    Py_DECREF(par_guild);
    CHECK_OBJECT(par_user);
    Py_DECREF(par_user);

   // Actual function exit with return value, making sure we did not make
   // the error status worse despite non-NULL return.
   CHECK_OBJECT(tmp_return_value);
   assert(had_error || !ERROR_OCCURRED());
   return tmp_return_value;
}



struct hikari$api$rest$$$function__91_fetch_member$$$coroutine__1_fetch_member_locals {
    PyObject *tmp_return_value;
};

static PyObject *hikari$api$rest$$$function__91_fetch_member$$$coroutine__1_fetch_member_context(struct Nuitka_CoroutineObject *coroutine, PyObject *yield_return_value) {
    CHECK_OBJECT(coroutine);
    assert(Nuitka_Coroutine_Check((PyObject *)coroutine));

    // Heap access if used.
    struct hikari$api$rest$$$function__91_fetch_member$$$coroutine__1_fetch_member_locals *coroutine_heap = (struct hikari$api$rest$$$function__91_fetch_member$$$coroutine__1_fetch_member_locals *)coroutine->m_heap_storage;

    // Dispatch to yield based on return label index:


    // Local variable initialization
    coroutine_heap->tmp_return_value = NULL;

    // Actual coroutine body.
    coroutine_heap->tmp_return_value = Py_None;
    Py_INCREF(coroutine_heap->tmp_return_value);
    goto function_return_exit;

    NUITKA_CANNOT_GET_HERE("Return statement must be present");


    return NULL;
    function_return_exit:;

    coroutine->m_returned = coroutine_heap->tmp_return_value;

    return NULL;

}

static PyObject *MAKE_COROUTINE_hikari$api$rest$$$function__91_fetch_member$$$coroutine__1_fetch_member() {
    return Nuitka_Coroutine_New(
        hikari$api$rest$$$function__91_fetch_member$$$coroutine__1_fetch_member_context,
        module_hikari$api$rest,
        mod_consts[234],
        mod_consts[235],
        codeobj_31b7bb0b4f6644f676934d3da23556f7,
        NULL,
        0,
        sizeof(struct hikari$api$rest$$$function__91_fetch_member$$$coroutine__1_fetch_member_locals)
    );
}


static PyObject *impl_hikari$api$rest$$$function__93_fetch_my_member(struct Nuitka_FunctionObject const *self, PyObject **python_pars) {
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_self = python_pars[0];
    PyObject *par_guild = python_pars[1];
    PyObject *tmp_return_value = NULL;

    // Actual function body.


    tmp_return_value = MAKE_COROUTINE_hikari$api$rest$$$function__93_fetch_my_member$$$coroutine__1_fetch_my_member();

    goto function_return_exit;

    NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
    return NULL;


function_return_exit:
   // Function cleanup code if any.
    CHECK_OBJECT(par_self);
    Py_DECREF(par_self);
    CHECK_OBJECT(par_guild);
    Py_DECREF(par_guild);

   // Actual function exit with return value, making sure we did not make
   // the error status worse despite non-NULL return.
   CHECK_OBJECT(tmp_return_value);
   assert(had_error || !ERROR_OCCURRED());
   return tmp_return_value;
}



struct hikari$api$rest$$$function__93_fetch_my_member$$$coroutine__1_fetch_my_member_locals {
    PyObject *tmp_return_value;
};

static PyObject *hikari$api$rest$$$function__93_fetch_my_member$$$coroutine__1_fetch_my_member_context(struct Nuitka_CoroutineObject *coroutine, PyObject *yield_return_value) {
    CHECK_OBJECT(coroutine);
    assert(Nuitka_Coroutine_Check((PyObject *)coroutine));

    // Heap access if used.
    struct hikari$api$rest$$$function__93_fetch_my_member$$$coroutine__1_fetch_my_member_locals *coroutine_heap = (struct hikari$api$rest$$$function__93_fetch_my_member$$$coroutine__1_fetch_my_member_locals *)coroutine->m_heap_storage;

    // Dispatch to yield based on return label index:


    // Local variable initialization
    coroutine_heap->tmp_return_value = NULL;

    // Actual coroutine body.
    coroutine_heap->tmp_return_value = Py_None;
    Py_INCREF(coroutine_heap->tmp_return_value);
    goto function_return_exit;

    NUITKA_CANNOT_GET_HERE("Return statement must be present");


    return NULL;
    function_return_exit:;

    coroutine->m_returned = coroutine_heap->tmp_return_value;

    return NULL;

}

static PyObject *MAKE_COROUTINE_hikari$api$rest$$$function__93_fetch_my_member$$$coroutine__1_fetch_my_member() {
    return Nuitka_Coroutine_New(
        hikari$api$rest$$$function__93_fetch_my_member$$$coroutine__1_fetch_my_member_context,
        module_hikari$api$rest,
        mod_consts[237],
        mod_consts[238],
        codeobj_91bc149cc3afebf8779254973ad93480,
        NULL,
        0,
        sizeof(struct hikari$api$rest$$$function__93_fetch_my_member$$$coroutine__1_fetch_my_member_locals)
    );
}


static PyObject *impl_hikari$api$rest$$$function__94_search_members(struct Nuitka_FunctionObject const *self, PyObject **python_pars) {
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_self = python_pars[0];
    PyObject *par_guild = python_pars[1];
    PyObject *par_name = python_pars[2];
    PyObject *tmp_return_value = NULL;

    // Actual function body.


    tmp_return_value = MAKE_COROUTINE_hikari$api$rest$$$function__94_search_members$$$coroutine__1_search_members();

    goto function_return_exit;

    NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
    return NULL;


function_return_exit:
   // Function cleanup code if any.
    CHECK_OBJECT(par_self);
    Py_DECREF(par_self);
    CHECK_OBJECT(par_guild);
    Py_DECREF(par_guild);
    CHECK_OBJECT(par_name);
    Py_DECREF(par_name);

   // Actual function exit with return value, making sure we did not make
   // the error status worse despite non-NULL return.
   CHECK_OBJECT(tmp_return_value);
   assert(had_error || !ERROR_OCCURRED());
   return tmp_return_value;
}



struct hikari$api$rest$$$function__94_search_members$$$coroutine__1_search_members_locals {
    PyObject *tmp_return_value;
};

static PyObject *hikari$api$rest$$$function__94_search_members$$$coroutine__1_search_members_context(struct Nuitka_CoroutineObject *coroutine, PyObject *yield_return_value) {
    CHECK_OBJECT(coroutine);
    assert(Nuitka_Coroutine_Check((PyObject *)coroutine));

    // Heap access if used.
    struct hikari$api$rest$$$function__94_search_members$$$coroutine__1_search_members_locals *coroutine_heap = (struct hikari$api$rest$$$function__94_search_members$$$coroutine__1_search_members_locals *)coroutine->m_heap_storage;

    // Dispatch to yield based on return label index:


    // Local variable initialization
    coroutine_heap->tmp_return_value = NULL;

    // Actual coroutine body.
    coroutine_heap->tmp_return_value = Py_None;
    Py_INCREF(coroutine_heap->tmp_return_value);
    goto function_return_exit;

    NUITKA_CANNOT_GET_HERE("Return statement must be present");


    return NULL;
    function_return_exit:;

    coroutine->m_returned = coroutine_heap->tmp_return_value;

    return NULL;

}

static PyObject *MAKE_COROUTINE_hikari$api$rest$$$function__94_search_members$$$coroutine__1_search_members() {
    return Nuitka_Coroutine_New(
        hikari$api$rest$$$function__94_search_members$$$coroutine__1_search_members_context,
        module_hikari$api$rest,
        mod_consts[240],
        mod_consts[241],
        codeobj_78d93943367f049d329e24c4fa8caba5,
        NULL,
        0,
        sizeof(struct hikari$api$rest$$$function__94_search_members$$$coroutine__1_search_members_locals)
    );
}


static PyObject *impl_hikari$api$rest$$$function__95_edit_member(struct Nuitka_FunctionObject const *self, PyObject **python_pars) {
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_self = python_pars[0];
    PyObject *par_guild = python_pars[1];
    PyObject *par_user = python_pars[2];
    PyObject *par_nickname = python_pars[3];
    PyObject *par_nick = python_pars[4];
    PyObject *par_roles = python_pars[5];
    PyObject *par_mute = python_pars[6];
    PyObject *par_deaf = python_pars[7];
    PyObject *par_voice_channel = python_pars[8];
    PyObject *par_communication_disabled_until = python_pars[9];
    PyObject *par_reason = python_pars[10];
    PyObject *tmp_return_value = NULL;

    // Actual function body.


    tmp_return_value = MAKE_COROUTINE_hikari$api$rest$$$function__95_edit_member$$$coroutine__1_edit_member();

    goto function_return_exit;

    NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
    return NULL;


function_return_exit:
   // Function cleanup code if any.
    CHECK_OBJECT(par_self);
    Py_DECREF(par_self);
    CHECK_OBJECT(par_guild);
    Py_DECREF(par_guild);
    CHECK_OBJECT(par_user);
    Py_DECREF(par_user);
    CHECK_OBJECT(par_nickname);
    Py_DECREF(par_nickname);
    CHECK_OBJECT(par_nick);
    Py_DECREF(par_nick);
    CHECK_OBJECT(par_roles);
    Py_DECREF(par_roles);
    CHECK_OBJECT(par_mute);
    Py_DECREF(par_mute);
    CHECK_OBJECT(par_deaf);
    Py_DECREF(par_deaf);
    CHECK_OBJECT(par_voice_channel);
    Py_DECREF(par_voice_channel);
    CHECK_OBJECT(par_communication_disabled_until);
    Py_DECREF(par_communication_disabled_until);
    CHECK_OBJECT(par_reason);
    Py_DECREF(par_reason);

   // Actual function exit with return value, making sure we did not make
   // the error status worse despite non-NULL return.
   CHECK_OBJECT(tmp_return_value);
   assert(had_error || !ERROR_OCCURRED());
   return tmp_return_value;
}



struct hikari$api$rest$$$function__95_edit_member$$$coroutine__1_edit_member_locals {
    PyObject *tmp_return_value;
};

static PyObject *hikari$api$rest$$$function__95_edit_member$$$coroutine__1_edit_member_context(struct Nuitka_CoroutineObject *coroutine, PyObject *yield_return_value) {
    CHECK_OBJECT(coroutine);
    assert(Nuitka_Coroutine_Check((PyObject *)coroutine));

    // Heap access if used.
    struct hikari$api$rest$$$function__95_edit_member$$$coroutine__1_edit_member_locals *coroutine_heap = (struct hikari$api$rest$$$function__95_edit_member$$$coroutine__1_edit_member_locals *)coroutine->m_heap_storage;

    // Dispatch to yield based on return label index:


    // Local variable initialization
    coroutine_heap->tmp_return_value = NULL;

    // Actual coroutine body.
    coroutine_heap->tmp_return_value = Py_None;
    Py_INCREF(coroutine_heap->tmp_return_value);
    goto function_return_exit;

    NUITKA_CANNOT_GET_HERE("Return statement must be present");


    return NULL;
    function_return_exit:;

    coroutine->m_returned = coroutine_heap->tmp_return_value;

    return NULL;

}

static PyObject *MAKE_COROUTINE_hikari$api$rest$$$function__95_edit_member$$$coroutine__1_edit_member() {
    return Nuitka_Coroutine_New(
        hikari$api$rest$$$function__95_edit_member$$$coroutine__1_edit_member_context,
        module_hikari$api$rest,
        mod_consts[243],
        mod_consts[244],
        codeobj_ce648f5c121accd4aa67977eb5913b0a,
        NULL,
        0,
        sizeof(struct hikari$api$rest$$$function__95_edit_member$$$coroutine__1_edit_member_locals)
    );
}


static PyObject *impl_hikari$api$rest$$$function__96_edit_my_member(struct Nuitka_FunctionObject const *self, PyObject **python_pars) {
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_self = python_pars[0];
    PyObject *par_guild = python_pars[1];
    PyObject *par_nickname = python_pars[2];
    PyObject *par_reason = python_pars[3];
    PyObject *tmp_return_value = NULL;

    // Actual function body.


    tmp_return_value = MAKE_COROUTINE_hikari$api$rest$$$function__96_edit_my_member$$$coroutine__1_edit_my_member();

    goto function_return_exit;

    NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
    return NULL;


function_return_exit:
   // Function cleanup code if any.
    CHECK_OBJECT(par_self);
    Py_DECREF(par_self);
    CHECK_OBJECT(par_guild);
    Py_DECREF(par_guild);
    CHECK_OBJECT(par_nickname);
    Py_DECREF(par_nickname);
    CHECK_OBJECT(par_reason);
    Py_DECREF(par_reason);

   // Actual function exit with return value, making sure we did not make
   // the error status worse despite non-NULL return.
   CHECK_OBJECT(tmp_return_value);
   assert(had_error || !ERROR_OCCURRED());
   return tmp_return_value;
}



struct hikari$api$rest$$$function__96_edit_my_member$$$coroutine__1_edit_my_member_locals {
    PyObject *tmp_return_value;
};

static PyObject *hikari$api$rest$$$function__96_edit_my_member$$$coroutine__1_edit_my_member_context(struct Nuitka_CoroutineObject *coroutine, PyObject *yield_return_value) {
    CHECK_OBJECT(coroutine);
    assert(Nuitka_Coroutine_Check((PyObject *)coroutine));

    // Heap access if used.
    struct hikari$api$rest$$$function__96_edit_my_member$$$coroutine__1_edit_my_member_locals *coroutine_heap = (struct hikari$api$rest$$$function__96_edit_my_member$$$coroutine__1_edit_my_member_locals *)coroutine->m_heap_storage;

    // Dispatch to yield based on return label index:


    // Local variable initialization
    coroutine_heap->tmp_return_value = NULL;

    // Actual coroutine body.
    coroutine_heap->tmp_return_value = Py_None;
    Py_INCREF(coroutine_heap->tmp_return_value);
    goto function_return_exit;

    NUITKA_CANNOT_GET_HERE("Return statement must be present");


    return NULL;
    function_return_exit:;

    coroutine->m_returned = coroutine_heap->tmp_return_value;

    return NULL;

}

static PyObject *MAKE_COROUTINE_hikari$api$rest$$$function__96_edit_my_member$$$coroutine__1_edit_my_member() {
    return Nuitka_Coroutine_New(
        hikari$api$rest$$$function__96_edit_my_member$$$coroutine__1_edit_my_member_context,
        module_hikari$api$rest,
        mod_consts[246],
        mod_consts[247],
        codeobj_3b5a99cecd12f7345243374797db49a1,
        NULL,
        0,
        sizeof(struct hikari$api$rest$$$function__96_edit_my_member$$$coroutine__1_edit_my_member_locals)
    );
}


static PyObject *impl_hikari$api$rest$$$function__97_edit_my_nick(struct Nuitka_FunctionObject const *self, PyObject **python_pars) {
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_self = python_pars[0];
    PyObject *par_guild = python_pars[1];
    PyObject *par_nick = python_pars[2];
    PyObject *par_reason = python_pars[3];
    PyObject *tmp_return_value = NULL;

    // Actual function body.


    tmp_return_value = MAKE_COROUTINE_hikari$api$rest$$$function__97_edit_my_nick$$$coroutine__1_edit_my_nick();

    goto function_return_exit;

    NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
    return NULL;


function_return_exit:
   // Function cleanup code if any.
    CHECK_OBJECT(par_self);
    Py_DECREF(par_self);
    CHECK_OBJECT(par_guild);
    Py_DECREF(par_guild);
    CHECK_OBJECT(par_nick);
    Py_DECREF(par_nick);
    CHECK_OBJECT(par_reason);
    Py_DECREF(par_reason);

   // Actual function exit with return value, making sure we did not make
   // the error status worse despite non-NULL return.
   CHECK_OBJECT(tmp_return_value);
   assert(had_error || !ERROR_OCCURRED());
   return tmp_return_value;
}



struct hikari$api$rest$$$function__97_edit_my_nick$$$coroutine__1_edit_my_nick_locals {
    PyObject *tmp_return_value;
};

static PyObject *hikari$api$rest$$$function__97_edit_my_nick$$$coroutine__1_edit_my_nick_context(struct Nuitka_CoroutineObject *coroutine, PyObject *yield_return_value) {
    CHECK_OBJECT(coroutine);
    assert(Nuitka_Coroutine_Check((PyObject *)coroutine));

    // Heap access if used.
    struct hikari$api$rest$$$function__97_edit_my_nick$$$coroutine__1_edit_my_nick_locals *coroutine_heap = (struct hikari$api$rest$$$function__97_edit_my_nick$$$coroutine__1_edit_my_nick_locals *)coroutine->m_heap_storage;

    // Dispatch to yield based on return label index:


    // Local variable initialization
    coroutine_heap->tmp_return_value = NULL;

    // Actual coroutine body.
    coroutine_heap->tmp_return_value = Py_None;
    Py_INCREF(coroutine_heap->tmp_return_value);
    goto function_return_exit;

    NUITKA_CANNOT_GET_HERE("Return statement must be present");


    return NULL;
    function_return_exit:;

    coroutine->m_returned = coroutine_heap->tmp_return_value;

    return NULL;

}

static PyObject *MAKE_COROUTINE_hikari$api$rest$$$function__97_edit_my_nick$$$coroutine__1_edit_my_nick() {
    return Nuitka_Coroutine_New(
        hikari$api$rest$$$function__97_edit_my_nick$$$coroutine__1_edit_my_nick_context,
        module_hikari$api$rest,
        mod_consts[249],
        mod_consts[250],
        codeobj_e151f143653c171d06140f26248a3786,
        NULL,
        0,
        sizeof(struct hikari$api$rest$$$function__97_edit_my_nick$$$coroutine__1_edit_my_nick_locals)
    );
}


static PyObject *impl_hikari$api$rest$$$function__98_add_role_to_member(struct Nuitka_FunctionObject const *self, PyObject **python_pars) {
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_self = python_pars[0];
    PyObject *par_guild = python_pars[1];
    PyObject *par_user = python_pars[2];
    PyObject *par_role = python_pars[3];
    PyObject *par_reason = python_pars[4];
    PyObject *tmp_return_value = NULL;

    // Actual function body.


    tmp_return_value = MAKE_COROUTINE_hikari$api$rest$$$function__98_add_role_to_member$$$coroutine__1_add_role_to_member();

    goto function_return_exit;

    NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
    return NULL;


function_return_exit:
   // Function cleanup code if any.
    CHECK_OBJECT(par_self);
    Py_DECREF(par_self);
    CHECK_OBJECT(par_guild);
    Py_DECREF(par_guild);
    CHECK_OBJECT(par_user);
    Py_DECREF(par_user);
    CHECK_OBJECT(par_role);
    Py_DECREF(par_role);
    CHECK_OBJECT(par_reason);
    Py_DECREF(par_reason);

   // Actual function exit with return value, making sure we did not make
   // the error status worse despite non-NULL return.
   CHECK_OBJECT(tmp_return_value);
   assert(had_error || !ERROR_OCCURRED());
   return tmp_return_value;
}



struct hikari$api$rest$$$function__98_add_role_to_member$$$coroutine__1_add_role_to_member_locals {
    PyObject *tmp_return_value;
};

static PyObject *hikari$api$rest$$$function__98_add_role_to_member$$$coroutine__1_add_role_to_member_context(struct Nuitka_CoroutineObject *coroutine, PyObject *yield_return_value) {
    CHECK_OBJECT(coroutine);
    assert(Nuitka_Coroutine_Check((PyObject *)coroutine));

    // Heap access if used.
    struct hikari$api$rest$$$function__98_add_role_to_member$$$coroutine__1_add_role_to_member_locals *coroutine_heap = (struct hikari$api$rest$$$function__98_add_role_to_member$$$coroutine__1_add_role_to_member_locals *)coroutine->m_heap_storage;

    // Dispatch to yield based on return label index:


    // Local variable initialization
    coroutine_heap->tmp_return_value = NULL;

    // Actual coroutine body.
    coroutine_heap->tmp_return_value = Py_None;
    Py_INCREF(coroutine_heap->tmp_return_value);
    goto function_return_exit;

    NUITKA_CANNOT_GET_HERE("Return statement must be present");


    return NULL;
    function_return_exit:;

    coroutine->m_returned = coroutine_heap->tmp_return_value;

    return NULL;

}

static PyObject *MAKE_COROUTINE_hikari$api$rest$$$function__98_add_role_to_member$$$coroutine__1_add_role_to_member() {
    return Nuitka_Coroutine_New(
        hikari$api$rest$$$function__98_add_role_to_member$$$coroutine__1_add_role_to_member_context,
        module_hikari$api$rest,
        mod_consts[252],
        mod_consts[253],
        codeobj_c9b70cf909535cbe61a3202904fcaa58,
        NULL,
        0,
        sizeof(struct hikari$api$rest$$$function__98_add_role_to_member$$$coroutine__1_add_role_to_member_locals)
    );
}


static PyObject *impl_hikari$api$rest$$$function__99_remove_role_from_member(struct Nuitka_FunctionObject const *self, PyObject **python_pars) {
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_self = python_pars[0];
    PyObject *par_guild = python_pars[1];
    PyObject *par_user = python_pars[2];
    PyObject *par_role = python_pars[3];
    PyObject *par_reason = python_pars[4];
    PyObject *tmp_return_value = NULL;

    // Actual function body.


    tmp_return_value = MAKE_COROUTINE_hikari$api$rest$$$function__99_remove_role_from_member$$$coroutine__1_remove_role_from_member();

    goto function_return_exit;

    NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
    return NULL;


function_return_exit:
   // Function cleanup code if any.
    CHECK_OBJECT(par_self);
    Py_DECREF(par_self);
    CHECK_OBJECT(par_guild);
    Py_DECREF(par_guild);
    CHECK_OBJECT(par_user);
    Py_DECREF(par_user);
    CHECK_OBJECT(par_role);
    Py_DECREF(par_role);
    CHECK_OBJECT(par_reason);
    Py_DECREF(par_reason);

   // Actual function exit with return value, making sure we did not make
   // the error status worse despite non-NULL return.
   CHECK_OBJECT(tmp_return_value);
   assert(had_error || !ERROR_OCCURRED());
   return tmp_return_value;
}



struct hikari$api$rest$$$function__99_remove_role_from_member$$$coroutine__1_remove_role_from_member_locals {
    PyObject *tmp_return_value;
};

static PyObject *hikari$api$rest$$$function__99_remove_role_from_member$$$coroutine__1_remove_role_from_member_context(struct Nuitka_CoroutineObject *coroutine, PyObject *yield_return_value) {
    CHECK_OBJECT(coroutine);
    assert(Nuitka_Coroutine_Check((PyObject *)coroutine));

    // Heap access if used.
    struct hikari$api$rest$$$function__99_remove_role_from_member$$$coroutine__1_remove_role_from_member_locals *coroutine_heap = (struct hikari$api$rest$$$function__99_remove_role_from_member$$$coroutine__1_remove_role_from_member_locals *)coroutine->m_heap_storage;

    // Dispatch to yield based on return label index:


    // Local variable initialization
    coroutine_heap->tmp_return_value = NULL;

    // Actual coroutine body.
    coroutine_heap->tmp_return_value = Py_None;
    Py_INCREF(coroutine_heap->tmp_return_value);
    goto function_return_exit;

    NUITKA_CANNOT_GET_HERE("Return statement must be present");


    return NULL;
    function_return_exit:;

    coroutine->m_returned = coroutine_heap->tmp_return_value;

    return NULL;

}

static PyObject *MAKE_COROUTINE_hikari$api$rest$$$function__99_remove_role_from_member$$$coroutine__1_remove_role_from_member() {
    return Nuitka_Coroutine_New(
        hikari$api$rest$$$function__99_remove_role_from_member$$$coroutine__1_remove_role_from_member_context,
        module_hikari$api$rest,
        mod_consts[255],
        mod_consts[256],
        codeobj_4e6209d5f6349c83f3cf0fdc61051eef,
        NULL,
        0,
        sizeof(struct hikari$api$rest$$$function__99_remove_role_from_member$$$coroutine__1_remove_role_from_member_locals)
    );
}


static PyObject *impl_hikari$api$rest$$$function__100_kick_user(struct Nuitka_FunctionObject const *self, PyObject **python_pars) {
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_self = python_pars[0];
    PyObject *par_guild = python_pars[1];
    PyObject *par_user = python_pars[2];
    PyObject *par_reason = python_pars[3];
    PyObject *tmp_return_value = NULL;

    // Actual function body.


    tmp_return_value = MAKE_COROUTINE_hikari$api$rest$$$function__100_kick_user$$$coroutine__1_kick_user();

    goto function_return_exit;

    NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
    return NULL;


function_return_exit:
   // Function cleanup code if any.
    CHECK_OBJECT(par_self);
    Py_DECREF(par_self);
    CHECK_OBJECT(par_guild);
    Py_DECREF(par_guild);
    CHECK_OBJECT(par_user);
    Py_DECREF(par_user);
    CHECK_OBJECT(par_reason);
    Py_DECREF(par_reason);

   // Actual function exit with return value, making sure we did not make
   // the error status worse despite non-NULL return.
   CHECK_OBJECT(tmp_return_value);
   assert(had_error || !ERROR_OCCURRED());
   return tmp_return_value;
}



struct hikari$api$rest$$$function__100_kick_user$$$coroutine__1_kick_user_locals {
    PyObject *tmp_return_value;
};

static PyObject *hikari$api$rest$$$function__100_kick_user$$$coroutine__1_kick_user_context(struct Nuitka_CoroutineObject *coroutine, PyObject *yield_return_value) {
    CHECK_OBJECT(coroutine);
    assert(Nuitka_Coroutine_Check((PyObject *)coroutine));

    // Heap access if used.
    struct hikari$api$rest$$$function__100_kick_user$$$coroutine__1_kick_user_locals *coroutine_heap = (struct hikari$api$rest$$$function__100_kick_user$$$coroutine__1_kick_user_locals *)coroutine->m_heap_storage;

    // Dispatch to yield based on return label index:


    // Local variable initialization
    coroutine_heap->tmp_return_value = NULL;

    // Actual coroutine body.
    coroutine_heap->tmp_return_value = Py_None;
    Py_INCREF(coroutine_heap->tmp_return_value);
    goto function_return_exit;

    NUITKA_CANNOT_GET_HERE("Return statement must be present");


    return NULL;
    function_return_exit:;

    coroutine->m_returned = coroutine_heap->tmp_return_value;

    return NULL;

}

static PyObject *MAKE_COROUTINE_hikari$api$rest$$$function__100_kick_user$$$coroutine__1_kick_user() {
    return Nuitka_Coroutine_New(
        hikari$api$rest$$$function__100_kick_user$$$coroutine__1_kick_user_context,
        module_hikari$api$rest,
        mod_consts[258],
        mod_consts[259],
        codeobj_b8d5560f0a83750dfcbd1dc10dfd5505,
        NULL,
        0,
        sizeof(struct hikari$api$rest$$$function__100_kick_user$$$coroutine__1_kick_user_locals)
    );
}


static PyObject *impl_hikari$api$rest$$$function__101_kick_member(struct Nuitka_FunctionObject const *self, PyObject **python_pars) {
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_self = python_pars[0];
    PyObject *par_guild = python_pars[1];
    PyObject *par_user = python_pars[2];
    PyObject *par_reason = python_pars[3];
    PyObject *tmp_return_value = NULL;

    // Actual function body.


    tmp_return_value = MAKE_COROUTINE_hikari$api$rest$$$function__101_kick_member$$$coroutine__1_kick_member();

    goto function_return_exit;

    NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
    return NULL;


function_return_exit:
   // Function cleanup code if any.
    CHECK_OBJECT(par_self);
    Py_DECREF(par_self);
    CHECK_OBJECT(par_guild);
    Py_DECREF(par_guild);
    CHECK_OBJECT(par_user);
    Py_DECREF(par_user);
    CHECK_OBJECT(par_reason);
    Py_DECREF(par_reason);

   // Actual function exit with return value, making sure we did not make
   // the error status worse despite non-NULL return.
   CHECK_OBJECT(tmp_return_value);
   assert(had_error || !ERROR_OCCURRED());
   return tmp_return_value;
}



struct hikari$api$rest$$$function__101_kick_member$$$coroutine__1_kick_member_locals {
    PyObject *tmp_return_value;
};

static PyObject *hikari$api$rest$$$function__101_kick_member$$$coroutine__1_kick_member_context(struct Nuitka_CoroutineObject *coroutine, PyObject *yield_return_value) {
    CHECK_OBJECT(coroutine);
    assert(Nuitka_Coroutine_Check((PyObject *)coroutine));

    // Heap access if used.
    struct hikari$api$rest$$$function__101_kick_member$$$coroutine__1_kick_member_locals *coroutine_heap = (struct hikari$api$rest$$$function__101_kick_member$$$coroutine__1_kick_member_locals *)coroutine->m_heap_storage;

    // Dispatch to yield based on return label index:


    // Local variable initialization
    coroutine_heap->tmp_return_value = NULL;

    // Actual coroutine body.
    coroutine_heap->tmp_return_value = Py_None;
    Py_INCREF(coroutine_heap->tmp_return_value);
    goto function_return_exit;

    NUITKA_CANNOT_GET_HERE("Return statement must be present");


    return NULL;
    function_return_exit:;

    coroutine->m_returned = coroutine_heap->tmp_return_value;

    return NULL;

}

static PyObject *MAKE_COROUTINE_hikari$api$rest$$$function__101_kick_member$$$coroutine__1_kick_member() {
    return Nuitka_Coroutine_New(
        hikari$api$rest$$$function__101_kick_member$$$coroutine__1_kick_member_context,
        module_hikari$api$rest,
        mod_consts[261],
        mod_consts[262],
        codeobj_b87093cffa77cb82afbaad84c7ddabf6,
        NULL,
        0,
        sizeof(struct hikari$api$rest$$$function__101_kick_member$$$coroutine__1_kick_member_locals)
    );
}


static PyObject *impl_hikari$api$rest$$$function__102_ban_user(struct Nuitka_FunctionObject const *self, PyObject **python_pars) {
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_self = python_pars[0];
    PyObject *par_guild = python_pars[1];
    PyObject *par_user = python_pars[2];
    PyObject *par_delete_message_days = python_pars[3];
    PyObject *par_reason = python_pars[4];
    PyObject *tmp_return_value = NULL;

    // Actual function body.


    tmp_return_value = MAKE_COROUTINE_hikari$api$rest$$$function__102_ban_user$$$coroutine__1_ban_user();

    goto function_return_exit;

    NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
    return NULL;


function_return_exit:
   // Function cleanup code if any.
    CHECK_OBJECT(par_self);
    Py_DECREF(par_self);
    CHECK_OBJECT(par_guild);
    Py_DECREF(par_guild);
    CHECK_OBJECT(par_user);
    Py_DECREF(par_user);
    CHECK_OBJECT(par_delete_message_days);
    Py_DECREF(par_delete_message_days);
    CHECK_OBJECT(par_reason);
    Py_DECREF(par_reason);

   // Actual function exit with return value, making sure we did not make
   // the error status worse despite non-NULL return.
   CHECK_OBJECT(tmp_return_value);
   assert(had_error || !ERROR_OCCURRED());
   return tmp_return_value;
}



struct hikari$api$rest$$$function__102_ban_user$$$coroutine__1_ban_user_locals {
    PyObject *tmp_return_value;
};

static PyObject *hikari$api$rest$$$function__102_ban_user$$$coroutine__1_ban_user_context(struct Nuitka_CoroutineObject *coroutine, PyObject *yield_return_value) {
    CHECK_OBJECT(coroutine);
    assert(Nuitka_Coroutine_Check((PyObject *)coroutine));

    // Heap access if used.
    struct hikari$api$rest$$$function__102_ban_user$$$coroutine__1_ban_user_locals *coroutine_heap = (struct hikari$api$rest$$$function__102_ban_user$$$coroutine__1_ban_user_locals *)coroutine->m_heap_storage;

    // Dispatch to yield based on return label index:


    // Local variable initialization
    coroutine_heap->tmp_return_value = NULL;

    // Actual coroutine body.
    coroutine_heap->tmp_return_value = Py_None;
    Py_INCREF(coroutine_heap->tmp_return_value);
    goto function_return_exit;

    NUITKA_CANNOT_GET_HERE("Return statement must be present");


    return NULL;
    function_return_exit:;

    coroutine->m_returned = coroutine_heap->tmp_return_value;

    return NULL;

}

static PyObject *MAKE_COROUTINE_hikari$api$rest$$$function__102_ban_user$$$coroutine__1_ban_user() {
    return Nuitka_Coroutine_New(
        hikari$api$rest$$$function__102_ban_user$$$coroutine__1_ban_user_context,
        module_hikari$api$rest,
        mod_consts[264],
        mod_consts[265],
        codeobj_d06e651baef5db298c98b1ed57a7f633,
        NULL,
        0,
        sizeof(struct hikari$api$rest$$$function__102_ban_user$$$coroutine__1_ban_user_locals)
    );
}


static PyObject *impl_hikari$api$rest$$$function__103_ban_member(struct Nuitka_FunctionObject const *self, PyObject **python_pars) {
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_self = python_pars[0];
    PyObject *par_guild = python_pars[1];
    PyObject *par_user = python_pars[2];
    PyObject *par_delete_message_days = python_pars[3];
    PyObject *par_reason = python_pars[4];
    PyObject *tmp_return_value = NULL;

    // Actual function body.


    tmp_return_value = MAKE_COROUTINE_hikari$api$rest$$$function__103_ban_member$$$coroutine__1_ban_member();

    goto function_return_exit;

    NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
    return NULL;


function_return_exit:
   // Function cleanup code if any.
    CHECK_OBJECT(par_self);
    Py_DECREF(par_self);
    CHECK_OBJECT(par_guild);
    Py_DECREF(par_guild);
    CHECK_OBJECT(par_user);
    Py_DECREF(par_user);
    CHECK_OBJECT(par_delete_message_days);
    Py_DECREF(par_delete_message_days);
    CHECK_OBJECT(par_reason);
    Py_DECREF(par_reason);

   // Actual function exit with return value, making sure we did not make
   // the error status worse despite non-NULL return.
   CHECK_OBJECT(tmp_return_value);
   assert(had_error || !ERROR_OCCURRED());
   return tmp_return_value;
}



struct hikari$api$rest$$$function__103_ban_member$$$coroutine__1_ban_member_locals {
    PyObject *tmp_return_value;
};

static PyObject *hikari$api$rest$$$function__103_ban_member$$$coroutine__1_ban_member_context(struct Nuitka_CoroutineObject *coroutine, PyObject *yield_return_value) {
    CHECK_OBJECT(coroutine);
    assert(Nuitka_Coroutine_Check((PyObject *)coroutine));

    // Heap access if used.
    struct hikari$api$rest$$$function__103_ban_member$$$coroutine__1_ban_member_locals *coroutine_heap = (struct hikari$api$rest$$$function__103_ban_member$$$coroutine__1_ban_member_locals *)coroutine->m_heap_storage;

    // Dispatch to yield based on return label index:


    // Local variable initialization
    coroutine_heap->tmp_return_value = NULL;

    // Actual coroutine body.
    coroutine_heap->tmp_return_value = Py_None;
    Py_INCREF(coroutine_heap->tmp_return_value);
    goto function_return_exit;

    NUITKA_CANNOT_GET_HERE("Return statement must be present");


    return NULL;
    function_return_exit:;

    coroutine->m_returned = coroutine_heap->tmp_return_value;

    return NULL;

}

static PyObject *MAKE_COROUTINE_hikari$api$rest$$$function__103_ban_member$$$coroutine__1_ban_member() {
    return Nuitka_Coroutine_New(
        hikari$api$rest$$$function__103_ban_member$$$coroutine__1_ban_member_context,
        module_hikari$api$rest,
        mod_consts[267],
        mod_consts[268],
        codeobj_35ebd76f91d08bc354810abbda010b3c,
        NULL,
        0,
        sizeof(struct hikari$api$rest$$$function__103_ban_member$$$coroutine__1_ban_member_locals)
    );
}


static PyObject *impl_hikari$api$rest$$$function__104_unban_user(struct Nuitka_FunctionObject const *self, PyObject **python_pars) {
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_self = python_pars[0];
    PyObject *par_guild = python_pars[1];
    PyObject *par_user = python_pars[2];
    PyObject *par_reason = python_pars[3];
    PyObject *tmp_return_value = NULL;

    // Actual function body.


    tmp_return_value = MAKE_COROUTINE_hikari$api$rest$$$function__104_unban_user$$$coroutine__1_unban_user();

    goto function_return_exit;

    NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
    return NULL;


function_return_exit:
   // Function cleanup code if any.
    CHECK_OBJECT(par_self);
    Py_DECREF(par_self);
    CHECK_OBJECT(par_guild);
    Py_DECREF(par_guild);
    CHECK_OBJECT(par_user);
    Py_DECREF(par_user);
    CHECK_OBJECT(par_reason);
    Py_DECREF(par_reason);

   // Actual function exit with return value, making sure we did not make
   // the error status worse despite non-NULL return.
   CHECK_OBJECT(tmp_return_value);
   assert(had_error || !ERROR_OCCURRED());
   return tmp_return_value;
}



struct hikari$api$rest$$$function__104_unban_user$$$coroutine__1_unban_user_locals {
    PyObject *tmp_return_value;
};

static PyObject *hikari$api$rest$$$function__104_unban_user$$$coroutine__1_unban_user_context(struct Nuitka_CoroutineObject *coroutine, PyObject *yield_return_value) {
    CHECK_OBJECT(coroutine);
    assert(Nuitka_Coroutine_Check((PyObject *)coroutine));

    // Heap access if used.
    struct hikari$api$rest$$$function__104_unban_user$$$coroutine__1_unban_user_locals *coroutine_heap = (struct hikari$api$rest$$$function__104_unban_user$$$coroutine__1_unban_user_locals *)coroutine->m_heap_storage;

    // Dispatch to yield based on return label index:


    // Local variable initialization
    coroutine_heap->tmp_return_value = NULL;

    // Actual coroutine body.
    coroutine_heap->tmp_return_value = Py_None;
    Py_INCREF(coroutine_heap->tmp_return_value);
    goto function_return_exit;

    NUITKA_CANNOT_GET_HERE("Return statement must be present");


    return NULL;
    function_return_exit:;

    coroutine->m_returned = coroutine_heap->tmp_return_value;

    return NULL;

}

static PyObject *MAKE_COROUTINE_hikari$api$rest$$$function__104_unban_user$$$coroutine__1_unban_user() {
    return Nuitka_Coroutine_New(
        hikari$api$rest$$$function__104_unban_user$$$coroutine__1_unban_user_context,
        module_hikari$api$rest,
        mod_consts[270],
        mod_consts[271],
        codeobj_5bd68a48b272ab644aaad0f48e8af30a,
        NULL,
        0,
        sizeof(struct hikari$api$rest$$$function__104_unban_user$$$coroutine__1_unban_user_locals)
    );
}


static PyObject *impl_hikari$api$rest$$$function__105_unban_member(struct Nuitka_FunctionObject const *self, PyObject **python_pars) {
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_self = python_pars[0];
    PyObject *par_guild = python_pars[1];
    PyObject *par_user = python_pars[2];
    PyObject *par_reason = python_pars[3];
    PyObject *tmp_return_value = NULL;

    // Actual function body.


    tmp_return_value = MAKE_COROUTINE_hikari$api$rest$$$function__105_unban_member$$$coroutine__1_unban_member();

    goto function_return_exit;

    NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
    return NULL;


function_return_exit:
   // Function cleanup code if any.
    CHECK_OBJECT(par_self);
    Py_DECREF(par_self);
    CHECK_OBJECT(par_guild);
    Py_DECREF(par_guild);
    CHECK_OBJECT(par_user);
    Py_DECREF(par_user);
    CHECK_OBJECT(par_reason);
    Py_DECREF(par_reason);

   // Actual function exit with return value, making sure we did not make
   // the error status worse despite non-NULL return.
   CHECK_OBJECT(tmp_return_value);
   assert(had_error || !ERROR_OCCURRED());
   return tmp_return_value;
}



struct hikari$api$rest$$$function__105_unban_member$$$coroutine__1_unban_member_locals {
    PyObject *tmp_return_value;
};

static PyObject *hikari$api$rest$$$function__105_unban_member$$$coroutine__1_unban_member_context(struct Nuitka_CoroutineObject *coroutine, PyObject *yield_return_value) {
    CHECK_OBJECT(coroutine);
    assert(Nuitka_Coroutine_Check((PyObject *)coroutine));

    // Heap access if used.
    struct hikari$api$rest$$$function__105_unban_member$$$coroutine__1_unban_member_locals *coroutine_heap = (struct hikari$api$rest$$$function__105_unban_member$$$coroutine__1_unban_member_locals *)coroutine->m_heap_storage;

    // Dispatch to yield based on return label index:


    // Local variable initialization
    coroutine_heap->tmp_return_value = NULL;

    // Actual coroutine body.
    coroutine_heap->tmp_return_value = Py_None;
    Py_INCREF(coroutine_heap->tmp_return_value);
    goto function_return_exit;

    NUITKA_CANNOT_GET_HERE("Return statement must be present");


    return NULL;
    function_return_exit:;

    coroutine->m_returned = coroutine_heap->tmp_return_value;

    return NULL;

}

static PyObject *MAKE_COROUTINE_hikari$api$rest$$$function__105_unban_member$$$coroutine__1_unban_member() {
    return Nuitka_Coroutine_New(
        hikari$api$rest$$$function__105_unban_member$$$coroutine__1_unban_member_context,
        module_hikari$api$rest,
        mod_consts[273],
        mod_consts[274],
        codeobj_5f9292db0891d6d836dea94d0407da9b,
        NULL,
        0,
        sizeof(struct hikari$api$rest$$$function__105_unban_member$$$coroutine__1_unban_member_locals)
    );
}


static PyObject *impl_hikari$api$rest$$$function__106_fetch_ban(struct Nuitka_FunctionObject const *self, PyObject **python_pars) {
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_self = python_pars[0];
    PyObject *par_guild = python_pars[1];
    PyObject *par_user = python_pars[2];
    PyObject *tmp_return_value = NULL;

    // Actual function body.


    tmp_return_value = MAKE_COROUTINE_hikari$api$rest$$$function__106_fetch_ban$$$coroutine__1_fetch_ban();

    goto function_return_exit;

    NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
    return NULL;


function_return_exit:
   // Function cleanup code if any.
    CHECK_OBJECT(par_self);
    Py_DECREF(par_self);
    CHECK_OBJECT(par_guild);
    Py_DECREF(par_guild);
    CHECK_OBJECT(par_user);
    Py_DECREF(par_user);

   // Actual function exit with return value, making sure we did not make
   // the error status worse despite non-NULL return.
   CHECK_OBJECT(tmp_return_value);
   assert(had_error || !ERROR_OCCURRED());
   return tmp_return_value;
}



struct hikari$api$rest$$$function__106_fetch_ban$$$coroutine__1_fetch_ban_locals {
    PyObject *tmp_return_value;
};

static PyObject *hikari$api$rest$$$function__106_fetch_ban$$$coroutine__1_fetch_ban_context(struct Nuitka_CoroutineObject *coroutine, PyObject *yield_return_value) {
    CHECK_OBJECT(coroutine);
    assert(Nuitka_Coroutine_Check((PyObject *)coroutine));

    // Heap access if used.
    struct hikari$api$rest$$$function__106_fetch_ban$$$coroutine__1_fetch_ban_locals *coroutine_heap = (struct hikari$api$rest$$$function__106_fetch_ban$$$coroutine__1_fetch_ban_locals *)coroutine->m_heap_storage;

    // Dispatch to yield based on return label index:


    // Local variable initialization
    coroutine_heap->tmp_return_value = NULL;

    // Actual coroutine body.
    coroutine_heap->tmp_return_value = Py_None;
    Py_INCREF(coroutine_heap->tmp_return_value);
    goto function_return_exit;

    NUITKA_CANNOT_GET_HERE("Return statement must be present");


    return NULL;
    function_return_exit:;

    coroutine->m_returned = coroutine_heap->tmp_return_value;

    return NULL;

}

static PyObject *MAKE_COROUTINE_hikari$api$rest$$$function__106_fetch_ban$$$coroutine__1_fetch_ban() {
    return Nuitka_Coroutine_New(
        hikari$api$rest$$$function__106_fetch_ban$$$coroutine__1_fetch_ban_context,
        module_hikari$api$rest,
        mod_consts[276],
        mod_consts[277],
        codeobj_e64bde9ce978560a4a00d42dee53992a,
        NULL,
        0,
        sizeof(struct hikari$api$rest$$$function__106_fetch_ban$$$coroutine__1_fetch_ban_locals)
    );
}


static PyObject *impl_hikari$api$rest$$$function__107_fetch_bans(struct Nuitka_FunctionObject const *self, PyObject **python_pars) {
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_self = python_pars[0];
    PyObject *par_guild = python_pars[1];
    PyObject *tmp_return_value = NULL;

    // Actual function body.


    tmp_return_value = MAKE_COROUTINE_hikari$api$rest$$$function__107_fetch_bans$$$coroutine__1_fetch_bans();

    goto function_return_exit;

    NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
    return NULL;


function_return_exit:
   // Function cleanup code if any.
    CHECK_OBJECT(par_self);
    Py_DECREF(par_self);
    CHECK_OBJECT(par_guild);
    Py_DECREF(par_guild);

   // Actual function exit with return value, making sure we did not make
   // the error status worse despite non-NULL return.
   CHECK_OBJECT(tmp_return_value);
   assert(had_error || !ERROR_OCCURRED());
   return tmp_return_value;
}



struct hikari$api$rest$$$function__107_fetch_bans$$$coroutine__1_fetch_bans_locals {
    PyObject *tmp_return_value;
};

static PyObject *hikari$api$rest$$$function__107_fetch_bans$$$coroutine__1_fetch_bans_context(struct Nuitka_CoroutineObject *coroutine, PyObject *yield_return_value) {
    CHECK_OBJECT(coroutine);
    assert(Nuitka_Coroutine_Check((PyObject *)coroutine));

    // Heap access if used.
    struct hikari$api$rest$$$function__107_fetch_bans$$$coroutine__1_fetch_bans_locals *coroutine_heap = (struct hikari$api$rest$$$function__107_fetch_bans$$$coroutine__1_fetch_bans_locals *)coroutine->m_heap_storage;

    // Dispatch to yield based on return label index:


    // Local variable initialization
    coroutine_heap->tmp_return_value = NULL;

    // Actual coroutine body.
    coroutine_heap->tmp_return_value = Py_None;
    Py_INCREF(coroutine_heap->tmp_return_value);
    goto function_return_exit;

    NUITKA_CANNOT_GET_HERE("Return statement must be present");


    return NULL;
    function_return_exit:;

    coroutine->m_returned = coroutine_heap->tmp_return_value;

    return NULL;

}

static PyObject *MAKE_COROUTINE_hikari$api$rest$$$function__107_fetch_bans$$$coroutine__1_fetch_bans() {
    return Nuitka_Coroutine_New(
        hikari$api$rest$$$function__107_fetch_bans$$$coroutine__1_fetch_bans_context,
        module_hikari$api$rest,
        mod_consts[279],
        mod_consts[280],
        codeobj_58ffb98f50e237e5f9fa7695302ebf98,
        NULL,
        0,
        sizeof(struct hikari$api$rest$$$function__107_fetch_bans$$$coroutine__1_fetch_bans_locals)
    );
}


static PyObject *impl_hikari$api$rest$$$function__108_fetch_roles(struct Nuitka_FunctionObject const *self, PyObject **python_pars) {
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_self = python_pars[0];
    PyObject *par_guild = python_pars[1];
    PyObject *tmp_return_value = NULL;

    // Actual function body.


    tmp_return_value = MAKE_COROUTINE_hikari$api$rest$$$function__108_fetch_roles$$$coroutine__1_fetch_roles();

    goto function_return_exit;

    NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
    return NULL;


function_return_exit:
   // Function cleanup code if any.
    CHECK_OBJECT(par_self);
    Py_DECREF(par_self);
    CHECK_OBJECT(par_guild);
    Py_DECREF(par_guild);

   // Actual function exit with return value, making sure we did not make
   // the error status worse despite non-NULL return.
   CHECK_OBJECT(tmp_return_value);
   assert(had_error || !ERROR_OCCURRED());
   return tmp_return_value;
}



struct hikari$api$rest$$$function__108_fetch_roles$$$coroutine__1_fetch_roles_locals {
    PyObject *tmp_return_value;
};

static PyObject *hikari$api$rest$$$function__108_fetch_roles$$$coroutine__1_fetch_roles_context(struct Nuitka_CoroutineObject *coroutine, PyObject *yield_return_value) {
    CHECK_OBJECT(coroutine);
    assert(Nuitka_Coroutine_Check((PyObject *)coroutine));

    // Heap access if used.
    struct hikari$api$rest$$$function__108_fetch_roles$$$coroutine__1_fetch_roles_locals *coroutine_heap = (struct hikari$api$rest$$$function__108_fetch_roles$$$coroutine__1_fetch_roles_locals *)coroutine->m_heap_storage;

    // Dispatch to yield based on return label index:


    // Local variable initialization
    coroutine_heap->tmp_return_value = NULL;

    // Actual coroutine body.
    coroutine_heap->tmp_return_value = Py_None;
    Py_INCREF(coroutine_heap->tmp_return_value);
    goto function_return_exit;

    NUITKA_CANNOT_GET_HERE("Return statement must be present");


    return NULL;
    function_return_exit:;

    coroutine->m_returned = coroutine_heap->tmp_return_value;

    return NULL;

}

static PyObject *MAKE_COROUTINE_hikari$api$rest$$$function__108_fetch_roles$$$coroutine__1_fetch_roles() {
    return Nuitka_Coroutine_New(
        hikari$api$rest$$$function__108_fetch_roles$$$coroutine__1_fetch_roles_context,
        module_hikari$api$rest,
        mod_consts[282],
        mod_consts[283],
        codeobj_22bd2cf7b9ec29dce5c000522e288d52,
        NULL,
        0,
        sizeof(struct hikari$api$rest$$$function__108_fetch_roles$$$coroutine__1_fetch_roles_locals)
    );
}


static PyObject *impl_hikari$api$rest$$$function__109_create_role(struct Nuitka_FunctionObject const *self, PyObject **python_pars) {
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_self = python_pars[0];
    PyObject *par_guild = python_pars[1];
    PyObject *par_name = python_pars[2];
    PyObject *par_permissions = python_pars[3];
    PyObject *par_color = python_pars[4];
    PyObject *par_colour = python_pars[5];
    PyObject *par_hoist = python_pars[6];
    PyObject *par_icon = python_pars[7];
    PyObject *par_unicode_emoji = python_pars[8];
    PyObject *par_mentionable = python_pars[9];
    PyObject *par_reason = python_pars[10];
    PyObject *tmp_return_value = NULL;

    // Actual function body.


    tmp_return_value = MAKE_COROUTINE_hikari$api$rest$$$function__109_create_role$$$coroutine__1_create_role();

    goto function_return_exit;

    NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
    return NULL;


function_return_exit:
   // Function cleanup code if any.
    CHECK_OBJECT(par_self);
    Py_DECREF(par_self);
    CHECK_OBJECT(par_guild);
    Py_DECREF(par_guild);
    CHECK_OBJECT(par_name);
    Py_DECREF(par_name);
    CHECK_OBJECT(par_permissions);
    Py_DECREF(par_permissions);
    CHECK_OBJECT(par_color);
    Py_DECREF(par_color);
    CHECK_OBJECT(par_colour);
    Py_DECREF(par_colour);
    CHECK_OBJECT(par_hoist);
    Py_DECREF(par_hoist);
    CHECK_OBJECT(par_icon);
    Py_DECREF(par_icon);
    CHECK_OBJECT(par_unicode_emoji);
    Py_DECREF(par_unicode_emoji);
    CHECK_OBJECT(par_mentionable);
    Py_DECREF(par_mentionable);
    CHECK_OBJECT(par_reason);
    Py_DECREF(par_reason);

   // Actual function exit with return value, making sure we did not make
   // the error status worse despite non-NULL return.
   CHECK_OBJECT(tmp_return_value);
   assert(had_error || !ERROR_OCCURRED());
   return tmp_return_value;
}



struct hikari$api$rest$$$function__109_create_role$$$coroutine__1_create_role_locals {
    PyObject *tmp_return_value;
};

static PyObject *hikari$api$rest$$$function__109_create_role$$$coroutine__1_create_role_context(struct Nuitka_CoroutineObject *coroutine, PyObject *yield_return_value) {
    CHECK_OBJECT(coroutine);
    assert(Nuitka_Coroutine_Check((PyObject *)coroutine));

    // Heap access if used.
    struct hikari$api$rest$$$function__109_create_role$$$coroutine__1_create_role_locals *coroutine_heap = (struct hikari$api$rest$$$function__109_create_role$$$coroutine__1_create_role_locals *)coroutine->m_heap_storage;

    // Dispatch to yield based on return label index:


    // Local variable initialization
    coroutine_heap->tmp_return_value = NULL;

    // Actual coroutine body.
    coroutine_heap->tmp_return_value = Py_None;
    Py_INCREF(coroutine_heap->tmp_return_value);
    goto function_return_exit;

    NUITKA_CANNOT_GET_HERE("Return statement must be present");


    return NULL;
    function_return_exit:;

    coroutine->m_returned = coroutine_heap->tmp_return_value;

    return NULL;

}

static PyObject *MAKE_COROUTINE_hikari$api$rest$$$function__109_create_role$$$coroutine__1_create_role() {
    return Nuitka_Coroutine_New(
        hikari$api$rest$$$function__109_create_role$$$coroutine__1_create_role_context,
        module_hikari$api$rest,
        mod_consts[285],
        mod_consts[286],
        codeobj_b837f4182e1d25b057a9d369fed91d85,
        NULL,
        0,
        sizeof(struct hikari$api$rest$$$function__109_create_role$$$coroutine__1_create_role_locals)
    );
}


static PyObject *impl_hikari$api$rest$$$function__110_reposition_roles(struct Nuitka_FunctionObject const *self, PyObject **python_pars) {
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_self = python_pars[0];
    PyObject *par_guild = python_pars[1];
    PyObject *par_positions = python_pars[2];
    PyObject *tmp_return_value = NULL;

    // Actual function body.


    tmp_return_value = MAKE_COROUTINE_hikari$api$rest$$$function__110_reposition_roles$$$coroutine__1_reposition_roles();

    goto function_return_exit;

    NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
    return NULL;


function_return_exit:
   // Function cleanup code if any.
    CHECK_OBJECT(par_self);
    Py_DECREF(par_self);
    CHECK_OBJECT(par_guild);
    Py_DECREF(par_guild);
    CHECK_OBJECT(par_positions);
    Py_DECREF(par_positions);

   // Actual function exit with return value, making sure we did not make
   // the error status worse despite non-NULL return.
   CHECK_OBJECT(tmp_return_value);
   assert(had_error || !ERROR_OCCURRED());
   return tmp_return_value;
}



struct hikari$api$rest$$$function__110_reposition_roles$$$coroutine__1_reposition_roles_locals {
    PyObject *tmp_return_value;
};

static PyObject *hikari$api$rest$$$function__110_reposition_roles$$$coroutine__1_reposition_roles_context(struct Nuitka_CoroutineObject *coroutine, PyObject *yield_return_value) {
    CHECK_OBJECT(coroutine);
    assert(Nuitka_Coroutine_Check((PyObject *)coroutine));

    // Heap access if used.
    struct hikari$api$rest$$$function__110_reposition_roles$$$coroutine__1_reposition_roles_locals *coroutine_heap = (struct hikari$api$rest$$$function__110_reposition_roles$$$coroutine__1_reposition_roles_locals *)coroutine->m_heap_storage;

    // Dispatch to yield based on return label index:


    // Local variable initialization
    coroutine_heap->tmp_return_value = NULL;

    // Actual coroutine body.
    coroutine_heap->tmp_return_value = Py_None;
    Py_INCREF(coroutine_heap->tmp_return_value);
    goto function_return_exit;

    NUITKA_CANNOT_GET_HERE("Return statement must be present");


    return NULL;
    function_return_exit:;

    coroutine->m_returned = coroutine_heap->tmp_return_value;

    return NULL;

}

static PyObject *MAKE_COROUTINE_hikari$api$rest$$$function__110_reposition_roles$$$coroutine__1_reposition_roles() {
    return Nuitka_Coroutine_New(
        hikari$api$rest$$$function__110_reposition_roles$$$coroutine__1_reposition_roles_context,
        module_hikari$api$rest,
        mod_consts[288],
        mod_consts[289],
        codeobj_121158bdab91854dd12714c6230cff5d,
        NULL,
        0,
        sizeof(struct hikari$api$rest$$$function__110_reposition_roles$$$coroutine__1_reposition_roles_locals)
    );
}


static PyObject *impl_hikari$api$rest$$$function__111_edit_role(struct Nuitka_FunctionObject const *self, PyObject **python_pars) {
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_self = python_pars[0];
    PyObject *par_guild = python_pars[1];
    PyObject *par_role = python_pars[2];
    PyObject *par_name = python_pars[3];
    PyObject *par_permissions = python_pars[4];
    PyObject *par_color = python_pars[5];
    PyObject *par_colour = python_pars[6];
    PyObject *par_hoist = python_pars[7];
    PyObject *par_icon = python_pars[8];
    PyObject *par_unicode_emoji = python_pars[9];
    PyObject *par_mentionable = python_pars[10];
    PyObject *par_reason = python_pars[11];
    PyObject *tmp_return_value = NULL;

    // Actual function body.


    tmp_return_value = MAKE_COROUTINE_hikari$api$rest$$$function__111_edit_role$$$coroutine__1_edit_role();

    goto function_return_exit;

    NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
    return NULL;


function_return_exit:
   // Function cleanup code if any.
    CHECK_OBJECT(par_self);
    Py_DECREF(par_self);
    CHECK_OBJECT(par_guild);
    Py_DECREF(par_guild);
    CHECK_OBJECT(par_role);
    Py_DECREF(par_role);
    CHECK_OBJECT(par_name);
    Py_DECREF(par_name);
    CHECK_OBJECT(par_permissions);
    Py_DECREF(par_permissions);
    CHECK_OBJECT(par_color);
    Py_DECREF(par_color);
    CHECK_OBJECT(par_colour);
    Py_DECREF(par_colour);
    CHECK_OBJECT(par_hoist);
    Py_DECREF(par_hoist);
    CHECK_OBJECT(par_icon);
    Py_DECREF(par_icon);
    CHECK_OBJECT(par_unicode_emoji);
    Py_DECREF(par_unicode_emoji);
    CHECK_OBJECT(par_mentionable);
    Py_DECREF(par_mentionable);
    CHECK_OBJECT(par_reason);
    Py_DECREF(par_reason);

   // Actual function exit with return value, making sure we did not make
   // the error status worse despite non-NULL return.
   CHECK_OBJECT(tmp_return_value);
   assert(had_error || !ERROR_OCCURRED());
   return tmp_return_value;
}



struct hikari$api$rest$$$function__111_edit_role$$$coroutine__1_edit_role_locals {
    PyObject *tmp_return_value;
};

static PyObject *hikari$api$rest$$$function__111_edit_role$$$coroutine__1_edit_role_context(struct Nuitka_CoroutineObject *coroutine, PyObject *yield_return_value) {
    CHECK_OBJECT(coroutine);
    assert(Nuitka_Coroutine_Check((PyObject *)coroutine));

    // Heap access if used.
    struct hikari$api$rest$$$function__111_edit_role$$$coroutine__1_edit_role_locals *coroutine_heap = (struct hikari$api$rest$$$function__111_edit_role$$$coroutine__1_edit_role_locals *)coroutine->m_heap_storage;

    // Dispatch to yield based on return label index:


    // Local variable initialization
    coroutine_heap->tmp_return_value = NULL;

    // Actual coroutine body.
    coroutine_heap->tmp_return_value = Py_None;
    Py_INCREF(coroutine_heap->tmp_return_value);
    goto function_return_exit;

    NUITKA_CANNOT_GET_HERE("Return statement must be present");


    return NULL;
    function_return_exit:;

    coroutine->m_returned = coroutine_heap->tmp_return_value;

    return NULL;

}

static PyObject *MAKE_COROUTINE_hikari$api$rest$$$function__111_edit_role$$$coroutine__1_edit_role() {
    return Nuitka_Coroutine_New(
        hikari$api$rest$$$function__111_edit_role$$$coroutine__1_edit_role_context,
        module_hikari$api$rest,
        mod_consts[291],
        mod_consts[292],
        codeobj_2230d268d52a85d1da02a1f8aa186e87,
        NULL,
        0,
        sizeof(struct hikari$api$rest$$$function__111_edit_role$$$coroutine__1_edit_role_locals)
    );
}


static PyObject *impl_hikari$api$rest$$$function__112_delete_role(struct Nuitka_FunctionObject const *self, PyObject **python_pars) {
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_self = python_pars[0];
    PyObject *par_guild = python_pars[1];
    PyObject *par_role = python_pars[2];
    PyObject *tmp_return_value = NULL;

    // Actual function body.


    tmp_return_value = MAKE_COROUTINE_hikari$api$rest$$$function__112_delete_role$$$coroutine__1_delete_role();

    goto function_return_exit;

    NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
    return NULL;


function_return_exit:
   // Function cleanup code if any.
    CHECK_OBJECT(par_self);
    Py_DECREF(par_self);
    CHECK_OBJECT(par_guild);
    Py_DECREF(par_guild);
    CHECK_OBJECT(par_role);
    Py_DECREF(par_role);

   // Actual function exit with return value, making sure we did not make
   // the error status worse despite non-NULL return.
   CHECK_OBJECT(tmp_return_value);
   assert(had_error || !ERROR_OCCURRED());
   return tmp_return_value;
}



struct hikari$api$rest$$$function__112_delete_role$$$coroutine__1_delete_role_locals {
    PyObject *tmp_return_value;
};

static PyObject *hikari$api$rest$$$function__112_delete_role$$$coroutine__1_delete_role_context(struct Nuitka_CoroutineObject *coroutine, PyObject *yield_return_value) {
    CHECK_OBJECT(coroutine);
    assert(Nuitka_Coroutine_Check((PyObject *)coroutine));

    // Heap access if used.
    struct hikari$api$rest$$$function__112_delete_role$$$coroutine__1_delete_role_locals *coroutine_heap = (struct hikari$api$rest$$$function__112_delete_role$$$coroutine__1_delete_role_locals *)coroutine->m_heap_storage;

    // Dispatch to yield based on return label index:


    // Local variable initialization
    coroutine_heap->tmp_return_value = NULL;

    // Actual coroutine body.
    coroutine_heap->tmp_return_value = Py_None;
    Py_INCREF(coroutine_heap->tmp_return_value);
    goto function_return_exit;

    NUITKA_CANNOT_GET_HERE("Return statement must be present");


    return NULL;
    function_return_exit:;

    coroutine->m_returned = coroutine_heap->tmp_return_value;

    return NULL;

}

static PyObject *MAKE_COROUTINE_hikari$api$rest$$$function__112_delete_role$$$coroutine__1_delete_role() {
    return Nuitka_Coroutine_New(
        hikari$api$rest$$$function__112_delete_role$$$coroutine__1_delete_role_context,
        module_hikari$api$rest,
        mod_consts[294],
        mod_consts[295],
        codeobj_c49241596d5f07638dab6d6627305dc5,
        NULL,
        0,
        sizeof(struct hikari$api$rest$$$function__112_delete_role$$$coroutine__1_delete_role_locals)
    );
}


static PyObject *impl_hikari$api$rest$$$function__113_estimate_guild_prune_count(struct Nuitka_FunctionObject const *self, PyObject **python_pars) {
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_self = python_pars[0];
    PyObject *par_guild = python_pars[1];
    PyObject *par_days = python_pars[2];
    PyObject *par_include_roles = python_pars[3];
    PyObject *tmp_return_value = NULL;

    // Actual function body.


    tmp_return_value = MAKE_COROUTINE_hikari$api$rest$$$function__113_estimate_guild_prune_count$$$coroutine__1_estimate_guild_prune_count();

    goto function_return_exit;

    NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
    return NULL;


function_return_exit:
   // Function cleanup code if any.
    CHECK_OBJECT(par_self);
    Py_DECREF(par_self);
    CHECK_OBJECT(par_guild);
    Py_DECREF(par_guild);
    CHECK_OBJECT(par_days);
    Py_DECREF(par_days);
    CHECK_OBJECT(par_include_roles);
    Py_DECREF(par_include_roles);

   // Actual function exit with return value, making sure we did not make
   // the error status worse despite non-NULL return.
   CHECK_OBJECT(tmp_return_value);
   assert(had_error || !ERROR_OCCURRED());
   return tmp_return_value;
}



struct hikari$api$rest$$$function__113_estimate_guild_prune_count$$$coroutine__1_estimate_guild_prune_count_locals {
    PyObject *tmp_return_value;
};

static PyObject *hikari$api$rest$$$function__113_estimate_guild_prune_count$$$coroutine__1_estimate_guild_prune_count_context(struct Nuitka_CoroutineObject *coroutine, PyObject *yield_return_value) {
    CHECK_OBJECT(coroutine);
    assert(Nuitka_Coroutine_Check((PyObject *)coroutine));

    // Heap access if used.
    struct hikari$api$rest$$$function__113_estimate_guild_prune_count$$$coroutine__1_estimate_guild_prune_count_locals *coroutine_heap = (struct hikari$api$rest$$$function__113_estimate_guild_prune_count$$$coroutine__1_estimate_guild_prune_count_locals *)coroutine->m_heap_storage;

    // Dispatch to yield based on return label index:


    // Local variable initialization
    coroutine_heap->tmp_return_value = NULL;

    // Actual coroutine body.
    coroutine_heap->tmp_return_value = Py_None;
    Py_INCREF(coroutine_heap->tmp_return_value);
    goto function_return_exit;

    NUITKA_CANNOT_GET_HERE("Return statement must be present");


    return NULL;
    function_return_exit:;

    coroutine->m_returned = coroutine_heap->tmp_return_value;

    return NULL;

}

static PyObject *MAKE_COROUTINE_hikari$api$rest$$$function__113_estimate_guild_prune_count$$$coroutine__1_estimate_guild_prune_count() {
    return Nuitka_Coroutine_New(
        hikari$api$rest$$$function__113_estimate_guild_prune_count$$$coroutine__1_estimate_guild_prune_count_context,
        module_hikari$api$rest,
        mod_consts[297],
        mod_consts[298],
        codeobj_02259e45cb66359f9532b2a1fad93e11,
        NULL,
        0,
        sizeof(struct hikari$api$rest$$$function__113_estimate_guild_prune_count$$$coroutine__1_estimate_guild_prune_count_locals)
    );
}


static PyObject *impl_hikari$api$rest$$$function__114_begin_guild_prune(struct Nuitka_FunctionObject const *self, PyObject **python_pars) {
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_self = python_pars[0];
    PyObject *par_guild = python_pars[1];
    PyObject *par_days = python_pars[2];
    PyObject *par_compute_prune_count = python_pars[3];
    PyObject *par_include_roles = python_pars[4];
    PyObject *par_reason = python_pars[5];
    PyObject *tmp_return_value = NULL;

    // Actual function body.


    tmp_return_value = MAKE_COROUTINE_hikari$api$rest$$$function__114_begin_guild_prune$$$coroutine__1_begin_guild_prune();

    goto function_return_exit;

    NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
    return NULL;


function_return_exit:
   // Function cleanup code if any.
    CHECK_OBJECT(par_self);
    Py_DECREF(par_self);
    CHECK_OBJECT(par_guild);
    Py_DECREF(par_guild);
    CHECK_OBJECT(par_days);
    Py_DECREF(par_days);
    CHECK_OBJECT(par_compute_prune_count);
    Py_DECREF(par_compute_prune_count);
    CHECK_OBJECT(par_include_roles);
    Py_DECREF(par_include_roles);
    CHECK_OBJECT(par_reason);
    Py_DECREF(par_reason);

   // Actual function exit with return value, making sure we did not make
   // the error status worse despite non-NULL return.
   CHECK_OBJECT(tmp_return_value);
   assert(had_error || !ERROR_OCCURRED());
   return tmp_return_value;
}



struct hikari$api$rest$$$function__114_begin_guild_prune$$$coroutine__1_begin_guild_prune_locals {
    PyObject *tmp_return_value;
};

static PyObject *hikari$api$rest$$$function__114_begin_guild_prune$$$coroutine__1_begin_guild_prune_context(struct Nuitka_CoroutineObject *coroutine, PyObject *yield_return_value) {
    CHECK_OBJECT(coroutine);
    assert(Nuitka_Coroutine_Check((PyObject *)coroutine));

    // Heap access if used.
    struct hikari$api$rest$$$function__114_begin_guild_prune$$$coroutine__1_begin_guild_prune_locals *coroutine_heap = (struct hikari$api$rest$$$function__114_begin_guild_prune$$$coroutine__1_begin_guild_prune_locals *)coroutine->m_heap_storage;

    // Dispatch to yield based on return label index:


    // Local variable initialization
    coroutine_heap->tmp_return_value = NULL;

    // Actual coroutine body.
    coroutine_heap->tmp_return_value = Py_None;
    Py_INCREF(coroutine_heap->tmp_return_value);
    goto function_return_exit;

    NUITKA_CANNOT_GET_HERE("Return statement must be present");


    return NULL;
    function_return_exit:;

    coroutine->m_returned = coroutine_heap->tmp_return_value;

    return NULL;

}

static PyObject *MAKE_COROUTINE_hikari$api$rest$$$function__114_begin_guild_prune$$$coroutine__1_begin_guild_prune() {
    return Nuitka_Coroutine_New(
        hikari$api$rest$$$function__114_begin_guild_prune$$$coroutine__1_begin_guild_prune_context,
        module_hikari$api$rest,
        mod_consts[300],
        mod_consts[301],
        codeobj_ec36952ea8a1addd56b6c08cbedf834c,
        NULL,
        0,
        sizeof(struct hikari$api$rest$$$function__114_begin_guild_prune$$$coroutine__1_begin_guild_prune_locals)
    );
}


static PyObject *impl_hikari$api$rest$$$function__115_fetch_guild_voice_regions(struct Nuitka_FunctionObject const *self, PyObject **python_pars) {
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_self = python_pars[0];
    PyObject *par_guild = python_pars[1];
    PyObject *tmp_return_value = NULL;

    // Actual function body.


    tmp_return_value = MAKE_COROUTINE_hikari$api$rest$$$function__115_fetch_guild_voice_regions$$$coroutine__1_fetch_guild_voice_regions();

    goto function_return_exit;

    NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
    return NULL;


function_return_exit:
   // Function cleanup code if any.
    CHECK_OBJECT(par_self);
    Py_DECREF(par_self);
    CHECK_OBJECT(par_guild);
    Py_DECREF(par_guild);

   // Actual function exit with return value, making sure we did not make
   // the error status worse despite non-NULL return.
   CHECK_OBJECT(tmp_return_value);
   assert(had_error || !ERROR_OCCURRED());
   return tmp_return_value;
}



struct hikari$api$rest$$$function__115_fetch_guild_voice_regions$$$coroutine__1_fetch_guild_voice_regions_locals {
    PyObject *tmp_return_value;
};

static PyObject *hikari$api$rest$$$function__115_fetch_guild_voice_regions$$$coroutine__1_fetch_guild_voice_regions_context(struct Nuitka_CoroutineObject *coroutine, PyObject *yield_return_value) {
    CHECK_OBJECT(coroutine);
    assert(Nuitka_Coroutine_Check((PyObject *)coroutine));

    // Heap access if used.
    struct hikari$api$rest$$$function__115_fetch_guild_voice_regions$$$coroutine__1_fetch_guild_voice_regions_locals *coroutine_heap = (struct hikari$api$rest$$$function__115_fetch_guild_voice_regions$$$coroutine__1_fetch_guild_voice_regions_locals *)coroutine->m_heap_storage;

    // Dispatch to yield based on return label index:


    // Local variable initialization
    coroutine_heap->tmp_return_value = NULL;

    // Actual coroutine body.
    coroutine_heap->tmp_return_value = Py_None;
    Py_INCREF(coroutine_heap->tmp_return_value);
    goto function_return_exit;

    NUITKA_CANNOT_GET_HERE("Return statement must be present");


    return NULL;
    function_return_exit:;

    coroutine->m_returned = coroutine_heap->tmp_return_value;

    return NULL;

}

static PyObject *MAKE_COROUTINE_hikari$api$rest$$$function__115_fetch_guild_voice_regions$$$coroutine__1_fetch_guild_voice_regions() {
    return Nuitka_Coroutine_New(
        hikari$api$rest$$$function__115_fetch_guild_voice_regions$$$coroutine__1_fetch_guild_voice_regions_context,
        module_hikari$api$rest,
        mod_consts[303],
        mod_consts[304],
        codeobj_bcfed686f72d490bf234f356c3cca423,
        NULL,
        0,
        sizeof(struct hikari$api$rest$$$function__115_fetch_guild_voice_regions$$$coroutine__1_fetch_guild_voice_regions_locals)
    );
}


static PyObject *impl_hikari$api$rest$$$function__116_fetch_guild_invites(struct Nuitka_FunctionObject const *self, PyObject **python_pars) {
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_self = python_pars[0];
    PyObject *par_guild = python_pars[1];
    PyObject *tmp_return_value = NULL;

    // Actual function body.


    tmp_return_value = MAKE_COROUTINE_hikari$api$rest$$$function__116_fetch_guild_invites$$$coroutine__1_fetch_guild_invites();

    goto function_return_exit;

    NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
    return NULL;


function_return_exit:
   // Function cleanup code if any.
    CHECK_OBJECT(par_self);
    Py_DECREF(par_self);
    CHECK_OBJECT(par_guild);
    Py_DECREF(par_guild);

   // Actual function exit with return value, making sure we did not make
   // the error status worse despite non-NULL return.
   CHECK_OBJECT(tmp_return_value);
   assert(had_error || !ERROR_OCCURRED());
   return tmp_return_value;
}



struct hikari$api$rest$$$function__116_fetch_guild_invites$$$coroutine__1_fetch_guild_invites_locals {
    PyObject *tmp_return_value;
};

static PyObject *hikari$api$rest$$$function__116_fetch_guild_invites$$$coroutine__1_fetch_guild_invites_context(struct Nuitka_CoroutineObject *coroutine, PyObject *yield_return_value) {
    CHECK_OBJECT(coroutine);
    assert(Nuitka_Coroutine_Check((PyObject *)coroutine));

    // Heap access if used.
    struct hikari$api$rest$$$function__116_fetch_guild_invites$$$coroutine__1_fetch_guild_invites_locals *coroutine_heap = (struct hikari$api$rest$$$function__116_fetch_guild_invites$$$coroutine__1_fetch_guild_invites_locals *)coroutine->m_heap_storage;

    // Dispatch to yield based on return label index:


    // Local variable initialization
    coroutine_heap->tmp_return_value = NULL;

    // Actual coroutine body.
    coroutine_heap->tmp_return_value = Py_None;
    Py_INCREF(coroutine_heap->tmp_return_value);
    goto function_return_exit;

    NUITKA_CANNOT_GET_HERE("Return statement must be present");


    return NULL;
    function_return_exit:;

    coroutine->m_returned = coroutine_heap->tmp_return_value;

    return NULL;

}

static PyObject *MAKE_COROUTINE_hikari$api$rest$$$function__116_fetch_guild_invites$$$coroutine__1_fetch_guild_invites() {
    return Nuitka_Coroutine_New(
        hikari$api$rest$$$function__116_fetch_guild_invites$$$coroutine__1_fetch_guild_invites_context,
        module_hikari$api$rest,
        mod_consts[306],
        mod_consts[307],
        codeobj_eebffecbdd74e836b4e468c7c6968b8b,
        NULL,
        0,
        sizeof(struct hikari$api$rest$$$function__116_fetch_guild_invites$$$coroutine__1_fetch_guild_invites_locals)
    );
}


static PyObject *impl_hikari$api$rest$$$function__117_fetch_integrations(struct Nuitka_FunctionObject const *self, PyObject **python_pars) {
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_self = python_pars[0];
    PyObject *par_guild = python_pars[1];
    PyObject *tmp_return_value = NULL;

    // Actual function body.


    tmp_return_value = MAKE_COROUTINE_hikari$api$rest$$$function__117_fetch_integrations$$$coroutine__1_fetch_integrations();

    goto function_return_exit;

    NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
    return NULL;


function_return_exit:
   // Function cleanup code if any.
    CHECK_OBJECT(par_self);
    Py_DECREF(par_self);
    CHECK_OBJECT(par_guild);
    Py_DECREF(par_guild);

   // Actual function exit with return value, making sure we did not make
   // the error status worse despite non-NULL return.
   CHECK_OBJECT(tmp_return_value);
   assert(had_error || !ERROR_OCCURRED());
   return tmp_return_value;
}



struct hikari$api$rest$$$function__117_fetch_integrations$$$coroutine__1_fetch_integrations_locals {
    PyObject *tmp_return_value;
};

static PyObject *hikari$api$rest$$$function__117_fetch_integrations$$$coroutine__1_fetch_integrations_context(struct Nuitka_CoroutineObject *coroutine, PyObject *yield_return_value) {
    CHECK_OBJECT(coroutine);
    assert(Nuitka_Coroutine_Check((PyObject *)coroutine));

    // Heap access if used.
    struct hikari$api$rest$$$function__117_fetch_integrations$$$coroutine__1_fetch_integrations_locals *coroutine_heap = (struct hikari$api$rest$$$function__117_fetch_integrations$$$coroutine__1_fetch_integrations_locals *)coroutine->m_heap_storage;

    // Dispatch to yield based on return label index:


    // Local variable initialization
    coroutine_heap->tmp_return_value = NULL;

    // Actual coroutine body.
    coroutine_heap->tmp_return_value = Py_None;
    Py_INCREF(coroutine_heap->tmp_return_value);
    goto function_return_exit;

    NUITKA_CANNOT_GET_HERE("Return statement must be present");


    return NULL;
    function_return_exit:;

    coroutine->m_returned = coroutine_heap->tmp_return_value;

    return NULL;

}

static PyObject *MAKE_COROUTINE_hikari$api$rest$$$function__117_fetch_integrations$$$coroutine__1_fetch_integrations() {
    return Nuitka_Coroutine_New(
        hikari$api$rest$$$function__117_fetch_integrations$$$coroutine__1_fetch_integrations_context,
        module_hikari$api$rest,
        mod_consts[309],
        mod_consts[310],
        codeobj_48438a3b55123a6b9c581ff0b64203a4,
        NULL,
        0,
        sizeof(struct hikari$api$rest$$$function__117_fetch_integrations$$$coroutine__1_fetch_integrations_locals)
    );
}


static PyObject *impl_hikari$api$rest$$$function__118_fetch_widget(struct Nuitka_FunctionObject const *self, PyObject **python_pars) {
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_self = python_pars[0];
    PyObject *par_guild = python_pars[1];
    PyObject *tmp_return_value = NULL;

    // Actual function body.


    tmp_return_value = MAKE_COROUTINE_hikari$api$rest$$$function__118_fetch_widget$$$coroutine__1_fetch_widget();

    goto function_return_exit;

    NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
    return NULL;


function_return_exit:
   // Function cleanup code if any.
    CHECK_OBJECT(par_self);
    Py_DECREF(par_self);
    CHECK_OBJECT(par_guild);
    Py_DECREF(par_guild);

   // Actual function exit with return value, making sure we did not make
   // the error status worse despite non-NULL return.
   CHECK_OBJECT(tmp_return_value);
   assert(had_error || !ERROR_OCCURRED());
   return tmp_return_value;
}



struct hikari$api$rest$$$function__118_fetch_widget$$$coroutine__1_fetch_widget_locals {
    PyObject *tmp_return_value;
};

static PyObject *hikari$api$rest$$$function__118_fetch_widget$$$coroutine__1_fetch_widget_context(struct Nuitka_CoroutineObject *coroutine, PyObject *yield_return_value) {
    CHECK_OBJECT(coroutine);
    assert(Nuitka_Coroutine_Check((PyObject *)coroutine));

    // Heap access if used.
    struct hikari$api$rest$$$function__118_fetch_widget$$$coroutine__1_fetch_widget_locals *coroutine_heap = (struct hikari$api$rest$$$function__118_fetch_widget$$$coroutine__1_fetch_widget_locals *)coroutine->m_heap_storage;

    // Dispatch to yield based on return label index:


    // Local variable initialization
    coroutine_heap->tmp_return_value = NULL;

    // Actual coroutine body.
    coroutine_heap->tmp_return_value = Py_None;
    Py_INCREF(coroutine_heap->tmp_return_value);
    goto function_return_exit;

    NUITKA_CANNOT_GET_HERE("Return statement must be present");


    return NULL;
    function_return_exit:;

    coroutine->m_returned = coroutine_heap->tmp_return_value;

    return NULL;

}

static PyObject *MAKE_COROUTINE_hikari$api$rest$$$function__118_fetch_widget$$$coroutine__1_fetch_widget() {
    return Nuitka_Coroutine_New(
        hikari$api$rest$$$function__118_fetch_widget$$$coroutine__1_fetch_widget_context,
        module_hikari$api$rest,
        mod_consts[312],
        mod_consts[313],
        codeobj_2d2c32ef18588b2fd5dfdcadf00cf350,
        NULL,
        0,
        sizeof(struct hikari$api$rest$$$function__118_fetch_widget$$$coroutine__1_fetch_widget_locals)
    );
}


static PyObject *impl_hikari$api$rest$$$function__119_edit_widget(struct Nuitka_FunctionObject const *self, PyObject **python_pars) {
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_self = python_pars[0];
    PyObject *par_guild = python_pars[1];
    PyObject *par_channel = python_pars[2];
    PyObject *par_enabled = python_pars[3];
    PyObject *par_reason = python_pars[4];
    PyObject *tmp_return_value = NULL;

    // Actual function body.


    tmp_return_value = MAKE_COROUTINE_hikari$api$rest$$$function__119_edit_widget$$$coroutine__1_edit_widget();

    goto function_return_exit;

    NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
    return NULL;


function_return_exit:
   // Function cleanup code if any.
    CHECK_OBJECT(par_self);
    Py_DECREF(par_self);
    CHECK_OBJECT(par_guild);
    Py_DECREF(par_guild);
    CHECK_OBJECT(par_channel);
    Py_DECREF(par_channel);
    CHECK_OBJECT(par_enabled);
    Py_DECREF(par_enabled);
    CHECK_OBJECT(par_reason);
    Py_DECREF(par_reason);

   // Actual function exit with return value, making sure we did not make
   // the error status worse despite non-NULL return.
   CHECK_OBJECT(tmp_return_value);
   assert(had_error || !ERROR_OCCURRED());
   return tmp_return_value;
}



struct hikari$api$rest$$$function__119_edit_widget$$$coroutine__1_edit_widget_locals {
    PyObject *tmp_return_value;
};

static PyObject *hikari$api$rest$$$function__119_edit_widget$$$coroutine__1_edit_widget_context(struct Nuitka_CoroutineObject *coroutine, PyObject *yield_return_value) {
    CHECK_OBJECT(coroutine);
    assert(Nuitka_Coroutine_Check((PyObject *)coroutine));

    // Heap access if used.
    struct hikari$api$rest$$$function__119_edit_widget$$$coroutine__1_edit_widget_locals *coroutine_heap = (struct hikari$api$rest$$$function__119_edit_widget$$$coroutine__1_edit_widget_locals *)coroutine->m_heap_storage;

    // Dispatch to yield based on return label index:


    // Local variable initialization
    coroutine_heap->tmp_return_value = NULL;

    // Actual coroutine body.
    coroutine_heap->tmp_return_value = Py_None;
    Py_INCREF(coroutine_heap->tmp_return_value);
    goto function_return_exit;

    NUITKA_CANNOT_GET_HERE("Return statement must be present");


    return NULL;
    function_return_exit:;

    coroutine->m_returned = coroutine_heap->tmp_return_value;

    return NULL;

}

static PyObject *MAKE_COROUTINE_hikari$api$rest$$$function__119_edit_widget$$$coroutine__1_edit_widget() {
    return Nuitka_Coroutine_New(
        hikari$api$rest$$$function__119_edit_widget$$$coroutine__1_edit_widget_context,
        module_hikari$api$rest,
        mod_consts[315],
        mod_consts[316],
        codeobj_354598dc7fcb79428a2609775650f364,
        NULL,
        0,
        sizeof(struct hikari$api$rest$$$function__119_edit_widget$$$coroutine__1_edit_widget_locals)
    );
}


static PyObject *impl_hikari$api$rest$$$function__120_fetch_welcome_screen(struct Nuitka_FunctionObject const *self, PyObject **python_pars) {
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_self = python_pars[0];
    PyObject *par_guild = python_pars[1];
    PyObject *tmp_return_value = NULL;

    // Actual function body.


    tmp_return_value = MAKE_COROUTINE_hikari$api$rest$$$function__120_fetch_welcome_screen$$$coroutine__1_fetch_welcome_screen();

    goto function_return_exit;

    NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
    return NULL;


function_return_exit:
   // Function cleanup code if any.
    CHECK_OBJECT(par_self);
    Py_DECREF(par_self);
    CHECK_OBJECT(par_guild);
    Py_DECREF(par_guild);

   // Actual function exit with return value, making sure we did not make
   // the error status worse despite non-NULL return.
   CHECK_OBJECT(tmp_return_value);
   assert(had_error || !ERROR_OCCURRED());
   return tmp_return_value;
}



struct hikari$api$rest$$$function__120_fetch_welcome_screen$$$coroutine__1_fetch_welcome_screen_locals {
    PyObject *tmp_return_value;
};

static PyObject *hikari$api$rest$$$function__120_fetch_welcome_screen$$$coroutine__1_fetch_welcome_screen_context(struct Nuitka_CoroutineObject *coroutine, PyObject *yield_return_value) {
    CHECK_OBJECT(coroutine);
    assert(Nuitka_Coroutine_Check((PyObject *)coroutine));

    // Heap access if used.
    struct hikari$api$rest$$$function__120_fetch_welcome_screen$$$coroutine__1_fetch_welcome_screen_locals *coroutine_heap = (struct hikari$api$rest$$$function__120_fetch_welcome_screen$$$coroutine__1_fetch_welcome_screen_locals *)coroutine->m_heap_storage;

    // Dispatch to yield based on return label index:


    // Local variable initialization
    coroutine_heap->tmp_return_value = NULL;

    // Actual coroutine body.
    coroutine_heap->tmp_return_value = Py_None;
    Py_INCREF(coroutine_heap->tmp_return_value);
    goto function_return_exit;

    NUITKA_CANNOT_GET_HERE("Return statement must be present");


    return NULL;
    function_return_exit:;

    coroutine->m_returned = coroutine_heap->tmp_return_value;

    return NULL;

}

static PyObject *MAKE_COROUTINE_hikari$api$rest$$$function__120_fetch_welcome_screen$$$coroutine__1_fetch_welcome_screen() {
    return Nuitka_Coroutine_New(
        hikari$api$rest$$$function__120_fetch_welcome_screen$$$coroutine__1_fetch_welcome_screen_context,
        module_hikari$api$rest,
        mod_consts[318],
        mod_consts[319],
        codeobj_ca7bfd654ee8af862dbe34bfefe49f74,
        NULL,
        0,
        sizeof(struct hikari$api$rest$$$function__120_fetch_welcome_screen$$$coroutine__1_fetch_welcome_screen_locals)
    );
}


static PyObject *impl_hikari$api$rest$$$function__121_edit_welcome_screen(struct Nuitka_FunctionObject const *self, PyObject **python_pars) {
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_self = python_pars[0];
    PyObject *par_guild = python_pars[1];
    PyObject *par_description = python_pars[2];
    PyObject *par_enabled = python_pars[3];
    PyObject *par_channels = python_pars[4];
    PyObject *tmp_return_value = NULL;

    // Actual function body.


    tmp_return_value = MAKE_COROUTINE_hikari$api$rest$$$function__121_edit_welcome_screen$$$coroutine__1_edit_welcome_screen();

    goto function_return_exit;

    NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
    return NULL;


function_return_exit:
   // Function cleanup code if any.
    CHECK_OBJECT(par_self);
    Py_DECREF(par_self);
    CHECK_OBJECT(par_guild);
    Py_DECREF(par_guild);
    CHECK_OBJECT(par_description);
    Py_DECREF(par_description);
    CHECK_OBJECT(par_enabled);
    Py_DECREF(par_enabled);
    CHECK_OBJECT(par_channels);
    Py_DECREF(par_channels);

   // Actual function exit with return value, making sure we did not make
   // the error status worse despite non-NULL return.
   CHECK_OBJECT(tmp_return_value);
   assert(had_error || !ERROR_OCCURRED());
   return tmp_return_value;
}



struct hikari$api$rest$$$function__121_edit_welcome_screen$$$coroutine__1_edit_welcome_screen_locals {
    PyObject *tmp_return_value;
};

static PyObject *hikari$api$rest$$$function__121_edit_welcome_screen$$$coroutine__1_edit_welcome_screen_context(struct Nuitka_CoroutineObject *coroutine, PyObject *yield_return_value) {
    CHECK_OBJECT(coroutine);
    assert(Nuitka_Coroutine_Check((PyObject *)coroutine));

    // Heap access if used.
    struct hikari$api$rest$$$function__121_edit_welcome_screen$$$coroutine__1_edit_welcome_screen_locals *coroutine_heap = (struct hikari$api$rest$$$function__121_edit_welcome_screen$$$coroutine__1_edit_welcome_screen_locals *)coroutine->m_heap_storage;

    // Dispatch to yield based on return label index:


    // Local variable initialization
    coroutine_heap->tmp_return_value = NULL;

    // Actual coroutine body.
    coroutine_heap->tmp_return_value = Py_None;
    Py_INCREF(coroutine_heap->tmp_return_value);
    goto function_return_exit;

    NUITKA_CANNOT_GET_HERE("Return statement must be present");


    return NULL;
    function_return_exit:;

    coroutine->m_returned = coroutine_heap->tmp_return_value;

    return NULL;

}

static PyObject *MAKE_COROUTINE_hikari$api$rest$$$function__121_edit_welcome_screen$$$coroutine__1_edit_welcome_screen() {
    return Nuitka_Coroutine_New(
        hikari$api$rest$$$function__121_edit_welcome_screen$$$coroutine__1_edit_welcome_screen_context,
        module_hikari$api$rest,
        mod_consts[321],
        mod_consts[322],
        codeobj_7d7f01753630829fa482ebf47fbd2024,
        NULL,
        0,
        sizeof(struct hikari$api$rest$$$function__121_edit_welcome_screen$$$coroutine__1_edit_welcome_screen_locals)
    );
}


static PyObject *impl_hikari$api$rest$$$function__122_fetch_vanity_url(struct Nuitka_FunctionObject const *self, PyObject **python_pars) {
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_self = python_pars[0];
    PyObject *par_guild = python_pars[1];
    PyObject *tmp_return_value = NULL;

    // Actual function body.


    tmp_return_value = MAKE_COROUTINE_hikari$api$rest$$$function__122_fetch_vanity_url$$$coroutine__1_fetch_vanity_url();

    goto function_return_exit;

    NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
    return NULL;


function_return_exit:
   // Function cleanup code if any.
    CHECK_OBJECT(par_self);
    Py_DECREF(par_self);
    CHECK_OBJECT(par_guild);
    Py_DECREF(par_guild);

   // Actual function exit with return value, making sure we did not make
   // the error status worse despite non-NULL return.
   CHECK_OBJECT(tmp_return_value);
   assert(had_error || !ERROR_OCCURRED());
   return tmp_return_value;
}



struct hikari$api$rest$$$function__122_fetch_vanity_url$$$coroutine__1_fetch_vanity_url_locals {
    PyObject *tmp_return_value;
};

static PyObject *hikari$api$rest$$$function__122_fetch_vanity_url$$$coroutine__1_fetch_vanity_url_context(struct Nuitka_CoroutineObject *coroutine, PyObject *yield_return_value) {
    CHECK_OBJECT(coroutine);
    assert(Nuitka_Coroutine_Check((PyObject *)coroutine));

    // Heap access if used.
    struct hikari$api$rest$$$function__122_fetch_vanity_url$$$coroutine__1_fetch_vanity_url_locals *coroutine_heap = (struct hikari$api$rest$$$function__122_fetch_vanity_url$$$coroutine__1_fetch_vanity_url_locals *)coroutine->m_heap_storage;

    // Dispatch to yield based on return label index:


    // Local variable initialization
    coroutine_heap->tmp_return_value = NULL;

    // Actual coroutine body.
    coroutine_heap->tmp_return_value = Py_None;
    Py_INCREF(coroutine_heap->tmp_return_value);
    goto function_return_exit;

    NUITKA_CANNOT_GET_HERE("Return statement must be present");


    return NULL;
    function_return_exit:;

    coroutine->m_returned = coroutine_heap->tmp_return_value;

    return NULL;

}

static PyObject *MAKE_COROUTINE_hikari$api$rest$$$function__122_fetch_vanity_url$$$coroutine__1_fetch_vanity_url() {
    return Nuitka_Coroutine_New(
        hikari$api$rest$$$function__122_fetch_vanity_url$$$coroutine__1_fetch_vanity_url_context,
        module_hikari$api$rest,
        mod_consts[324],
        mod_consts[325],
        codeobj_5052bc86c7530427f9e7f965949c58db,
        NULL,
        0,
        sizeof(struct hikari$api$rest$$$function__122_fetch_vanity_url$$$coroutine__1_fetch_vanity_url_locals)
    );
}


static PyObject *impl_hikari$api$rest$$$function__123_create_template(struct Nuitka_FunctionObject const *self, PyObject **python_pars) {
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_self = python_pars[0];
    PyObject *par_guild = python_pars[1];
    PyObject *par_name = python_pars[2];
    PyObject *par_description = python_pars[3];
    PyObject *tmp_return_value = NULL;

    // Actual function body.


    tmp_return_value = MAKE_COROUTINE_hikari$api$rest$$$function__123_create_template$$$coroutine__1_create_template();

    goto function_return_exit;

    NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
    return NULL;


function_return_exit:
   // Function cleanup code if any.
    CHECK_OBJECT(par_self);
    Py_DECREF(par_self);
    CHECK_OBJECT(par_guild);
    Py_DECREF(par_guild);
    CHECK_OBJECT(par_name);
    Py_DECREF(par_name);
    CHECK_OBJECT(par_description);
    Py_DECREF(par_description);

   // Actual function exit with return value, making sure we did not make
   // the error status worse despite non-NULL return.
   CHECK_OBJECT(tmp_return_value);
   assert(had_error || !ERROR_OCCURRED());
   return tmp_return_value;
}



struct hikari$api$rest$$$function__123_create_template$$$coroutine__1_create_template_locals {
    PyObject *tmp_return_value;
};

static PyObject *hikari$api$rest$$$function__123_create_template$$$coroutine__1_create_template_context(struct Nuitka_CoroutineObject *coroutine, PyObject *yield_return_value) {
    CHECK_OBJECT(coroutine);
    assert(Nuitka_Coroutine_Check((PyObject *)coroutine));

    // Heap access if used.
    struct hikari$api$rest$$$function__123_create_template$$$coroutine__1_create_template_locals *coroutine_heap = (struct hikari$api$rest$$$function__123_create_template$$$coroutine__1_create_template_locals *)coroutine->m_heap_storage;

    // Dispatch to yield based on return label index:


    // Local variable initialization
    coroutine_heap->tmp_return_value = NULL;

    // Actual coroutine body.
    coroutine_heap->tmp_return_value = Py_None;
    Py_INCREF(coroutine_heap->tmp_return_value);
    goto function_return_exit;

    NUITKA_CANNOT_GET_HERE("Return statement must be present");


    return NULL;
    function_return_exit:;

    coroutine->m_returned = coroutine_heap->tmp_return_value;

    return NULL;

}

static PyObject *MAKE_COROUTINE_hikari$api$rest$$$function__123_create_template$$$coroutine__1_create_template() {
    return Nuitka_Coroutine_New(
        hikari$api$rest$$$function__123_create_template$$$coroutine__1_create_template_context,
        module_hikari$api$rest,
        mod_consts[327],
        mod_consts[328],
        codeobj_49a2ca747b1f693086c26a3c7b50502f,
        NULL,
        0,
        sizeof(struct hikari$api$rest$$$function__123_create_template$$$coroutine__1_create_template_locals)
    );
}


static PyObject *impl_hikari$api$rest$$$function__124_create_guild_from_template(struct Nuitka_FunctionObject const *self, PyObject **python_pars) {
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_self = python_pars[0];
    PyObject *par_template = python_pars[1];
    PyObject *par_name = python_pars[2];
    PyObject *par_icon = python_pars[3];
    PyObject *tmp_return_value = NULL;

    // Actual function body.


    tmp_return_value = MAKE_COROUTINE_hikari$api$rest$$$function__124_create_guild_from_template$$$coroutine__1_create_guild_from_template();

    goto function_return_exit;

    NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
    return NULL;


function_return_exit:
   // Function cleanup code if any.
    CHECK_OBJECT(par_self);
    Py_DECREF(par_self);
    CHECK_OBJECT(par_template);
    Py_DECREF(par_template);
    CHECK_OBJECT(par_name);
    Py_DECREF(par_name);
    CHECK_OBJECT(par_icon);
    Py_DECREF(par_icon);

   // Actual function exit with return value, making sure we did not make
   // the error status worse despite non-NULL return.
   CHECK_OBJECT(tmp_return_value);
   assert(had_error || !ERROR_OCCURRED());
   return tmp_return_value;
}



struct hikari$api$rest$$$function__124_create_guild_from_template$$$coroutine__1_create_guild_from_template_locals {
    PyObject *tmp_return_value;
};

static PyObject *hikari$api$rest$$$function__124_create_guild_from_template$$$coroutine__1_create_guild_from_template_context(struct Nuitka_CoroutineObject *coroutine, PyObject *yield_return_value) {
    CHECK_OBJECT(coroutine);
    assert(Nuitka_Coroutine_Check((PyObject *)coroutine));

    // Heap access if used.
    struct hikari$api$rest$$$function__124_create_guild_from_template$$$coroutine__1_create_guild_from_template_locals *coroutine_heap = (struct hikari$api$rest$$$function__124_create_guild_from_template$$$coroutine__1_create_guild_from_template_locals *)coroutine->m_heap_storage;

    // Dispatch to yield based on return label index:


    // Local variable initialization
    coroutine_heap->tmp_return_value = NULL;

    // Actual coroutine body.
    coroutine_heap->tmp_return_value = Py_None;
    Py_INCREF(coroutine_heap->tmp_return_value);
    goto function_return_exit;

    NUITKA_CANNOT_GET_HERE("Return statement must be present");


    return NULL;
    function_return_exit:;

    coroutine->m_returned = coroutine_heap->tmp_return_value;

    return NULL;

}

static PyObject *MAKE_COROUTINE_hikari$api$rest$$$function__124_create_guild_from_template$$$coroutine__1_create_guild_from_template() {
    return Nuitka_Coroutine_New(
        hikari$api$rest$$$function__124_create_guild_from_template$$$coroutine__1_create_guild_from_template_context,
        module_hikari$api$rest,
        mod_consts[330],
        mod_consts[331],
        codeobj_96dfc981e71339bc0521217827aaa0e7,
        NULL,
        0,
        sizeof(struct hikari$api$rest$$$function__124_create_guild_from_template$$$coroutine__1_create_guild_from_template_locals)
    );
}


static PyObject *impl_hikari$api$rest$$$function__125_delete_template(struct Nuitka_FunctionObject const *self, PyObject **python_pars) {
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_self = python_pars[0];
    PyObject *par_guild = python_pars[1];
    PyObject *par_template = python_pars[2];
    PyObject *tmp_return_value = NULL;

    // Actual function body.


    tmp_return_value = MAKE_COROUTINE_hikari$api$rest$$$function__125_delete_template$$$coroutine__1_delete_template();

    goto function_return_exit;

    NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
    return NULL;


function_return_exit:
   // Function cleanup code if any.
    CHECK_OBJECT(par_self);
    Py_DECREF(par_self);
    CHECK_OBJECT(par_guild);
    Py_DECREF(par_guild);
    CHECK_OBJECT(par_template);
    Py_DECREF(par_template);

   // Actual function exit with return value, making sure we did not make
   // the error status worse despite non-NULL return.
   CHECK_OBJECT(tmp_return_value);
   assert(had_error || !ERROR_OCCURRED());
   return tmp_return_value;
}



struct hikari$api$rest$$$function__125_delete_template$$$coroutine__1_delete_template_locals {
    PyObject *tmp_return_value;
};

static PyObject *hikari$api$rest$$$function__125_delete_template$$$coroutine__1_delete_template_context(struct Nuitka_CoroutineObject *coroutine, PyObject *yield_return_value) {
    CHECK_OBJECT(coroutine);
    assert(Nuitka_Coroutine_Check((PyObject *)coroutine));

    // Heap access if used.
    struct hikari$api$rest$$$function__125_delete_template$$$coroutine__1_delete_template_locals *coroutine_heap = (struct hikari$api$rest$$$function__125_delete_template$$$coroutine__1_delete_template_locals *)coroutine->m_heap_storage;

    // Dispatch to yield based on return label index:


    // Local variable initialization
    coroutine_heap->tmp_return_value = NULL;

    // Actual coroutine body.
    coroutine_heap->tmp_return_value = Py_None;
    Py_INCREF(coroutine_heap->tmp_return_value);
    goto function_return_exit;

    NUITKA_CANNOT_GET_HERE("Return statement must be present");


    return NULL;
    function_return_exit:;

    coroutine->m_returned = coroutine_heap->tmp_return_value;

    return NULL;

}

static PyObject *MAKE_COROUTINE_hikari$api$rest$$$function__125_delete_template$$$coroutine__1_delete_template() {
    return Nuitka_Coroutine_New(
        hikari$api$rest$$$function__125_delete_template$$$coroutine__1_delete_template_context,
        module_hikari$api$rest,
        mod_consts[333],
        mod_consts[334],
        codeobj_edf59de9273ddf1ce806b7723d4dafc9,
        NULL,
        0,
        sizeof(struct hikari$api$rest$$$function__125_delete_template$$$coroutine__1_delete_template_locals)
    );
}


static PyObject *impl_hikari$api$rest$$$function__126_edit_template(struct Nuitka_FunctionObject const *self, PyObject **python_pars) {
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_self = python_pars[0];
    PyObject *par_guild = python_pars[1];
    PyObject *par_template = python_pars[2];
    PyObject *par_name = python_pars[3];
    PyObject *par_description = python_pars[4];
    PyObject *tmp_return_value = NULL;

    // Actual function body.


    tmp_return_value = MAKE_COROUTINE_hikari$api$rest$$$function__126_edit_template$$$coroutine__1_edit_template();

    goto function_return_exit;

    NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
    return NULL;


function_return_exit:
   // Function cleanup code if any.
    CHECK_OBJECT(par_self);
    Py_DECREF(par_self);
    CHECK_OBJECT(par_guild);
    Py_DECREF(par_guild);
    CHECK_OBJECT(par_template);
    Py_DECREF(par_template);
    CHECK_OBJECT(par_name);
    Py_DECREF(par_name);
    CHECK_OBJECT(par_description);
    Py_DECREF(par_description);

   // Actual function exit with return value, making sure we did not make
   // the error status worse despite non-NULL return.
   CHECK_OBJECT(tmp_return_value);
   assert(had_error || !ERROR_OCCURRED());
   return tmp_return_value;
}



struct hikari$api$rest$$$function__126_edit_template$$$coroutine__1_edit_template_locals {
    PyObject *tmp_return_value;
};

static PyObject *hikari$api$rest$$$function__126_edit_template$$$coroutine__1_edit_template_context(struct Nuitka_CoroutineObject *coroutine, PyObject *yield_return_value) {
    CHECK_OBJECT(coroutine);
    assert(Nuitka_Coroutine_Check((PyObject *)coroutine));

    // Heap access if used.
    struct hikari$api$rest$$$function__126_edit_template$$$coroutine__1_edit_template_locals *coroutine_heap = (struct hikari$api$rest$$$function__126_edit_template$$$coroutine__1_edit_template_locals *)coroutine->m_heap_storage;

    // Dispatch to yield based on return label index:


    // Local variable initialization
    coroutine_heap->tmp_return_value = NULL;

    // Actual coroutine body.
    coroutine_heap->tmp_return_value = Py_None;
    Py_INCREF(coroutine_heap->tmp_return_value);
    goto function_return_exit;

    NUITKA_CANNOT_GET_HERE("Return statement must be present");


    return NULL;
    function_return_exit:;

    coroutine->m_returned = coroutine_heap->tmp_return_value;

    return NULL;

}

static PyObject *MAKE_COROUTINE_hikari$api$rest$$$function__126_edit_template$$$coroutine__1_edit_template() {
    return Nuitka_Coroutine_New(
        hikari$api$rest$$$function__126_edit_template$$$coroutine__1_edit_template_context,
        module_hikari$api$rest,
        mod_consts[336],
        mod_consts[337],
        codeobj_687e8c3e10ec2434c0e1610c5ca60b01,
        NULL,
        0,
        sizeof(struct hikari$api$rest$$$function__126_edit_template$$$coroutine__1_edit_template_locals)
    );
}


static PyObject *impl_hikari$api$rest$$$function__127_fetch_template(struct Nuitka_FunctionObject const *self, PyObject **python_pars) {
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_self = python_pars[0];
    PyObject *par_template = python_pars[1];
    PyObject *tmp_return_value = NULL;

    // Actual function body.


    tmp_return_value = MAKE_COROUTINE_hikari$api$rest$$$function__127_fetch_template$$$coroutine__1_fetch_template();

    goto function_return_exit;

    NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
    return NULL;


function_return_exit:
   // Function cleanup code if any.
    CHECK_OBJECT(par_self);
    Py_DECREF(par_self);
    CHECK_OBJECT(par_template);
    Py_DECREF(par_template);

   // Actual function exit with return value, making sure we did not make
   // the error status worse despite non-NULL return.
   CHECK_OBJECT(tmp_return_value);
   assert(had_error || !ERROR_OCCURRED());
   return tmp_return_value;
}



struct hikari$api$rest$$$function__127_fetch_template$$$coroutine__1_fetch_template_locals {
    PyObject *tmp_return_value;
};

static PyObject *hikari$api$rest$$$function__127_fetch_template$$$coroutine__1_fetch_template_context(struct Nuitka_CoroutineObject *coroutine, PyObject *yield_return_value) {
    CHECK_OBJECT(coroutine);
    assert(Nuitka_Coroutine_Check((PyObject *)coroutine));

    // Heap access if used.
    struct hikari$api$rest$$$function__127_fetch_template$$$coroutine__1_fetch_template_locals *coroutine_heap = (struct hikari$api$rest$$$function__127_fetch_template$$$coroutine__1_fetch_template_locals *)coroutine->m_heap_storage;

    // Dispatch to yield based on return label index:


    // Local variable initialization
    coroutine_heap->tmp_return_value = NULL;

    // Actual coroutine body.
    coroutine_heap->tmp_return_value = Py_None;
    Py_INCREF(coroutine_heap->tmp_return_value);
    goto function_return_exit;

    NUITKA_CANNOT_GET_HERE("Return statement must be present");


    return NULL;
    function_return_exit:;

    coroutine->m_returned = coroutine_heap->tmp_return_value;

    return NULL;

}

static PyObject *MAKE_COROUTINE_hikari$api$rest$$$function__127_fetch_template$$$coroutine__1_fetch_template() {
    return Nuitka_Coroutine_New(
        hikari$api$rest$$$function__127_fetch_template$$$coroutine__1_fetch_template_context,
        module_hikari$api$rest,
        mod_consts[339],
        mod_consts[340],
        codeobj_0b81a2ebe62b3844e214112a73fefc6e,
        NULL,
        0,
        sizeof(struct hikari$api$rest$$$function__127_fetch_template$$$coroutine__1_fetch_template_locals)
    );
}


static PyObject *impl_hikari$api$rest$$$function__128_fetch_guild_templates(struct Nuitka_FunctionObject const *self, PyObject **python_pars) {
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_self = python_pars[0];
    PyObject *par_guild = python_pars[1];
    PyObject *tmp_return_value = NULL;

    // Actual function body.


    tmp_return_value = MAKE_COROUTINE_hikari$api$rest$$$function__128_fetch_guild_templates$$$coroutine__1_fetch_guild_templates();

    goto function_return_exit;

    NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
    return NULL;


function_return_exit:
   // Function cleanup code if any.
    CHECK_OBJECT(par_self);
    Py_DECREF(par_self);
    CHECK_OBJECT(par_guild);
    Py_DECREF(par_guild);

   // Actual function exit with return value, making sure we did not make
   // the error status worse despite non-NULL return.
   CHECK_OBJECT(tmp_return_value);
   assert(had_error || !ERROR_OCCURRED());
   return tmp_return_value;
}



struct hikari$api$rest$$$function__128_fetch_guild_templates$$$coroutine__1_fetch_guild_templates_locals {
    PyObject *tmp_return_value;
};

static PyObject *hikari$api$rest$$$function__128_fetch_guild_templates$$$coroutine__1_fetch_guild_templates_context(struct Nuitka_CoroutineObject *coroutine, PyObject *yield_return_value) {
    CHECK_OBJECT(coroutine);
    assert(Nuitka_Coroutine_Check((PyObject *)coroutine));

    // Heap access if used.
    struct hikari$api$rest$$$function__128_fetch_guild_templates$$$coroutine__1_fetch_guild_templates_locals *coroutine_heap = (struct hikari$api$rest$$$function__128_fetch_guild_templates$$$coroutine__1_fetch_guild_templates_locals *)coroutine->m_heap_storage;

    // Dispatch to yield based on return label index:


    // Local variable initialization
    coroutine_heap->tmp_return_value = NULL;

    // Actual coroutine body.
    coroutine_heap->tmp_return_value = Py_None;
    Py_INCREF(coroutine_heap->tmp_return_value);
    goto function_return_exit;

    NUITKA_CANNOT_GET_HERE("Return statement must be present");


    return NULL;
    function_return_exit:;

    coroutine->m_returned = coroutine_heap->tmp_return_value;

    return NULL;

}

static PyObject *MAKE_COROUTINE_hikari$api$rest$$$function__128_fetch_guild_templates$$$coroutine__1_fetch_guild_templates() {
    return Nuitka_Coroutine_New(
        hikari$api$rest$$$function__128_fetch_guild_templates$$$coroutine__1_fetch_guild_templates_context,
        module_hikari$api$rest,
        mod_consts[342],
        mod_consts[343],
        codeobj_44182ab55be0bec741c65d777f4cfe71,
        NULL,
        0,
        sizeof(struct hikari$api$rest$$$function__128_fetch_guild_templates$$$coroutine__1_fetch_guild_templates_locals)
    );
}


static PyObject *impl_hikari$api$rest$$$function__129_sync_guild_template(struct Nuitka_FunctionObject const *self, PyObject **python_pars) {
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_self = python_pars[0];
    PyObject *par_guild = python_pars[1];
    PyObject *par_template = python_pars[2];
    PyObject *tmp_return_value = NULL;

    // Actual function body.


    tmp_return_value = MAKE_COROUTINE_hikari$api$rest$$$function__129_sync_guild_template$$$coroutine__1_sync_guild_template();

    goto function_return_exit;

    NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
    return NULL;


function_return_exit:
   // Function cleanup code if any.
    CHECK_OBJECT(par_self);
    Py_DECREF(par_self);
    CHECK_OBJECT(par_guild);
    Py_DECREF(par_guild);
    CHECK_OBJECT(par_template);
    Py_DECREF(par_template);

   // Actual function exit with return value, making sure we did not make
   // the error status worse despite non-NULL return.
   CHECK_OBJECT(tmp_return_value);
   assert(had_error || !ERROR_OCCURRED());
   return tmp_return_value;
}



struct hikari$api$rest$$$function__129_sync_guild_template$$$coroutine__1_sync_guild_template_locals {
    PyObject *tmp_return_value;
};

static PyObject *hikari$api$rest$$$function__129_sync_guild_template$$$coroutine__1_sync_guild_template_context(struct Nuitka_CoroutineObject *coroutine, PyObject *yield_return_value) {
    CHECK_OBJECT(coroutine);
    assert(Nuitka_Coroutine_Check((PyObject *)coroutine));

    // Heap access if used.
    struct hikari$api$rest$$$function__129_sync_guild_template$$$coroutine__1_sync_guild_template_locals *coroutine_heap = (struct hikari$api$rest$$$function__129_sync_guild_template$$$coroutine__1_sync_guild_template_locals *)coroutine->m_heap_storage;

    // Dispatch to yield based on return label index:


    // Local variable initialization
    coroutine_heap->tmp_return_value = NULL;

    // Actual coroutine body.
    coroutine_heap->tmp_return_value = Py_None;
    Py_INCREF(coroutine_heap->tmp_return_value);
    goto function_return_exit;

    NUITKA_CANNOT_GET_HERE("Return statement must be present");


    return NULL;
    function_return_exit:;

    coroutine->m_returned = coroutine_heap->tmp_return_value;

    return NULL;

}

static PyObject *MAKE_COROUTINE_hikari$api$rest$$$function__129_sync_guild_template$$$coroutine__1_sync_guild_template() {
    return Nuitka_Coroutine_New(
        hikari$api$rest$$$function__129_sync_guild_template$$$coroutine__1_sync_guild_template_context,
        module_hikari$api$rest,
        mod_consts[345],
        mod_consts[346],
        codeobj_81bdb131e32de9c52c4392e95cb181a2,
        NULL,
        0,
        sizeof(struct hikari$api$rest$$$function__129_sync_guild_template$$$coroutine__1_sync_guild_template_locals)
    );
}


static PyObject *impl_hikari$api$rest$$$function__133_fetch_application_command(struct Nuitka_FunctionObject const *self, PyObject **python_pars) {
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_self = python_pars[0];
    PyObject *par_application = python_pars[1];
    PyObject *par_command = python_pars[2];
    PyObject *par_guild = python_pars[3];
    PyObject *tmp_return_value = NULL;

    // Actual function body.


    tmp_return_value = MAKE_COROUTINE_hikari$api$rest$$$function__133_fetch_application_command$$$coroutine__1_fetch_application_command();

    goto function_return_exit;

    NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
    return NULL;


function_return_exit:
   // Function cleanup code if any.
    CHECK_OBJECT(par_self);
    Py_DECREF(par_self);
    CHECK_OBJECT(par_application);
    Py_DECREF(par_application);
    CHECK_OBJECT(par_command);
    Py_DECREF(par_command);
    CHECK_OBJECT(par_guild);
    Py_DECREF(par_guild);

   // Actual function exit with return value, making sure we did not make
   // the error status worse despite non-NULL return.
   CHECK_OBJECT(tmp_return_value);
   assert(had_error || !ERROR_OCCURRED());
   return tmp_return_value;
}



struct hikari$api$rest$$$function__133_fetch_application_command$$$coroutine__1_fetch_application_command_locals {
    PyObject *tmp_return_value;
};

static PyObject *hikari$api$rest$$$function__133_fetch_application_command$$$coroutine__1_fetch_application_command_context(struct Nuitka_CoroutineObject *coroutine, PyObject *yield_return_value) {
    CHECK_OBJECT(coroutine);
    assert(Nuitka_Coroutine_Check((PyObject *)coroutine));

    // Heap access if used.
    struct hikari$api$rest$$$function__133_fetch_application_command$$$coroutine__1_fetch_application_command_locals *coroutine_heap = (struct hikari$api$rest$$$function__133_fetch_application_command$$$coroutine__1_fetch_application_command_locals *)coroutine->m_heap_storage;

    // Dispatch to yield based on return label index:


    // Local variable initialization
    coroutine_heap->tmp_return_value = NULL;

    // Actual coroutine body.
    coroutine_heap->tmp_return_value = Py_None;
    Py_INCREF(coroutine_heap->tmp_return_value);
    goto function_return_exit;

    NUITKA_CANNOT_GET_HERE("Return statement must be present");


    return NULL;
    function_return_exit:;

    coroutine->m_returned = coroutine_heap->tmp_return_value;

    return NULL;

}

static PyObject *MAKE_COROUTINE_hikari$api$rest$$$function__133_fetch_application_command$$$coroutine__1_fetch_application_command() {
    return Nuitka_Coroutine_New(
        hikari$api$rest$$$function__133_fetch_application_command$$$coroutine__1_fetch_application_command_context,
        module_hikari$api$rest,
        mod_consts[348],
        mod_consts[349],
        codeobj_ba311f99d46acd00b1206631c059fe96,
        NULL,
        0,
        sizeof(struct hikari$api$rest$$$function__133_fetch_application_command$$$coroutine__1_fetch_application_command_locals)
    );
}


static PyObject *impl_hikari$api$rest$$$function__134_fetch_application_commands(struct Nuitka_FunctionObject const *self, PyObject **python_pars) {
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_self = python_pars[0];
    PyObject *par_application = python_pars[1];
    PyObject *par_guild = python_pars[2];
    PyObject *tmp_return_value = NULL;

    // Actual function body.


    tmp_return_value = MAKE_COROUTINE_hikari$api$rest$$$function__134_fetch_application_commands$$$coroutine__1_fetch_application_commands();

    goto function_return_exit;

    NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
    return NULL;


function_return_exit:
   // Function cleanup code if any.
    CHECK_OBJECT(par_self);
    Py_DECREF(par_self);
    CHECK_OBJECT(par_application);
    Py_DECREF(par_application);
    CHECK_OBJECT(par_guild);
    Py_DECREF(par_guild);

   // Actual function exit with return value, making sure we did not make
   // the error status worse despite non-NULL return.
   CHECK_OBJECT(tmp_return_value);
   assert(had_error || !ERROR_OCCURRED());
   return tmp_return_value;
}



struct hikari$api$rest$$$function__134_fetch_application_commands$$$coroutine__1_fetch_application_commands_locals {
    PyObject *tmp_return_value;
};

static PyObject *hikari$api$rest$$$function__134_fetch_application_commands$$$coroutine__1_fetch_application_commands_context(struct Nuitka_CoroutineObject *coroutine, PyObject *yield_return_value) {
    CHECK_OBJECT(coroutine);
    assert(Nuitka_Coroutine_Check((PyObject *)coroutine));

    // Heap access if used.
    struct hikari$api$rest$$$function__134_fetch_application_commands$$$coroutine__1_fetch_application_commands_locals *coroutine_heap = (struct hikari$api$rest$$$function__134_fetch_application_commands$$$coroutine__1_fetch_application_commands_locals *)coroutine->m_heap_storage;

    // Dispatch to yield based on return label index:


    // Local variable initialization
    coroutine_heap->tmp_return_value = NULL;

    // Actual coroutine body.
    coroutine_heap->tmp_return_value = Py_None;
    Py_INCREF(coroutine_heap->tmp_return_value);
    goto function_return_exit;

    NUITKA_CANNOT_GET_HERE("Return statement must be present");


    return NULL;
    function_return_exit:;

    coroutine->m_returned = coroutine_heap->tmp_return_value;

    return NULL;

}

static PyObject *MAKE_COROUTINE_hikari$api$rest$$$function__134_fetch_application_commands$$$coroutine__1_fetch_application_commands() {
    return Nuitka_Coroutine_New(
        hikari$api$rest$$$function__134_fetch_application_commands$$$coroutine__1_fetch_application_commands_context,
        module_hikari$api$rest,
        mod_consts[351],
        mod_consts[352],
        codeobj_9c51094b7172a5c5db393be7f201e43e,
        NULL,
        0,
        sizeof(struct hikari$api$rest$$$function__134_fetch_application_commands$$$coroutine__1_fetch_application_commands_locals)
    );
}


static PyObject *impl_hikari$api$rest$$$function__135_create_application_command(struct Nuitka_FunctionObject const *self, PyObject **python_pars) {
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_self = python_pars[0];
    PyObject *par_application = python_pars[1];
    PyObject *par_name = python_pars[2];
    PyObject *par_description = python_pars[3];
    PyObject *par_guild = python_pars[4];
    PyObject *par_options = python_pars[5];
    PyObject *par_default_permission = python_pars[6];
    PyObject *tmp_return_value = NULL;

    // Actual function body.


    tmp_return_value = MAKE_COROUTINE_hikari$api$rest$$$function__135_create_application_command$$$coroutine__1_create_application_command();

    goto function_return_exit;

    NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
    return NULL;


function_return_exit:
   // Function cleanup code if any.
    CHECK_OBJECT(par_self);
    Py_DECREF(par_self);
    CHECK_OBJECT(par_application);
    Py_DECREF(par_application);
    CHECK_OBJECT(par_name);
    Py_DECREF(par_name);
    CHECK_OBJECT(par_description);
    Py_DECREF(par_description);
    CHECK_OBJECT(par_guild);
    Py_DECREF(par_guild);
    CHECK_OBJECT(par_options);
    Py_DECREF(par_options);
    CHECK_OBJECT(par_default_permission);
    Py_DECREF(par_default_permission);

   // Actual function exit with return value, making sure we did not make
   // the error status worse despite non-NULL return.
   CHECK_OBJECT(tmp_return_value);
   assert(had_error || !ERROR_OCCURRED());
   return tmp_return_value;
}



struct hikari$api$rest$$$function__135_create_application_command$$$coroutine__1_create_application_command_locals {
    PyObject *tmp_return_value;
};

static PyObject *hikari$api$rest$$$function__135_create_application_command$$$coroutine__1_create_application_command_context(struct Nuitka_CoroutineObject *coroutine, PyObject *yield_return_value) {
    CHECK_OBJECT(coroutine);
    assert(Nuitka_Coroutine_Check((PyObject *)coroutine));

    // Heap access if used.
    struct hikari$api$rest$$$function__135_create_application_command$$$coroutine__1_create_application_command_locals *coroutine_heap = (struct hikari$api$rest$$$function__135_create_application_command$$$coroutine__1_create_application_command_locals *)coroutine->m_heap_storage;

    // Dispatch to yield based on return label index:


    // Local variable initialization
    coroutine_heap->tmp_return_value = NULL;

    // Actual coroutine body.
    coroutine_heap->tmp_return_value = Py_None;
    Py_INCREF(coroutine_heap->tmp_return_value);
    goto function_return_exit;

    NUITKA_CANNOT_GET_HERE("Return statement must be present");


    return NULL;
    function_return_exit:;

    coroutine->m_returned = coroutine_heap->tmp_return_value;

    return NULL;

}

static PyObject *MAKE_COROUTINE_hikari$api$rest$$$function__135_create_application_command$$$coroutine__1_create_application_command() {
    return Nuitka_Coroutine_New(
        hikari$api$rest$$$function__135_create_application_command$$$coroutine__1_create_application_command_context,
        module_hikari$api$rest,
        mod_consts[354],
        mod_consts[355],
        codeobj_5bda4d556e57a53f6b364e6d8209fa90,
        NULL,
        0,
        sizeof(struct hikari$api$rest$$$function__135_create_application_command$$$coroutine__1_create_application_command_locals)
    );
}


static PyObject *impl_hikari$api$rest$$$function__136_create_slash_command(struct Nuitka_FunctionObject const *self, PyObject **python_pars) {
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_self = python_pars[0];
    PyObject *par_application = python_pars[1];
    PyObject *par_name = python_pars[2];
    PyObject *par_description = python_pars[3];
    PyObject *par_guild = python_pars[4];
    PyObject *par_options = python_pars[5];
    PyObject *par_default_permission = python_pars[6];
    PyObject *tmp_return_value = NULL;

    // Actual function body.


    tmp_return_value = MAKE_COROUTINE_hikari$api$rest$$$function__136_create_slash_command$$$coroutine__1_create_slash_command();

    goto function_return_exit;

    NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
    return NULL;


function_return_exit:
   // Function cleanup code if any.
    CHECK_OBJECT(par_self);
    Py_DECREF(par_self);
    CHECK_OBJECT(par_application);
    Py_DECREF(par_application);
    CHECK_OBJECT(par_name);
    Py_DECREF(par_name);
    CHECK_OBJECT(par_description);
    Py_DECREF(par_description);
    CHECK_OBJECT(par_guild);
    Py_DECREF(par_guild);
    CHECK_OBJECT(par_options);
    Py_DECREF(par_options);
    CHECK_OBJECT(par_default_permission);
    Py_DECREF(par_default_permission);

   // Actual function exit with return value, making sure we did not make
   // the error status worse despite non-NULL return.
   CHECK_OBJECT(tmp_return_value);
   assert(had_error || !ERROR_OCCURRED());
   return tmp_return_value;
}



struct hikari$api$rest$$$function__136_create_slash_command$$$coroutine__1_create_slash_command_locals {
    PyObject *tmp_return_value;
};

static PyObject *hikari$api$rest$$$function__136_create_slash_command$$$coroutine__1_create_slash_command_context(struct Nuitka_CoroutineObject *coroutine, PyObject *yield_return_value) {
    CHECK_OBJECT(coroutine);
    assert(Nuitka_Coroutine_Check((PyObject *)coroutine));

    // Heap access if used.
    struct hikari$api$rest$$$function__136_create_slash_command$$$coroutine__1_create_slash_command_locals *coroutine_heap = (struct hikari$api$rest$$$function__136_create_slash_command$$$coroutine__1_create_slash_command_locals *)coroutine->m_heap_storage;

    // Dispatch to yield based on return label index:


    // Local variable initialization
    coroutine_heap->tmp_return_value = NULL;

    // Actual coroutine body.
    coroutine_heap->tmp_return_value = Py_None;
    Py_INCREF(coroutine_heap->tmp_return_value);
    goto function_return_exit;

    NUITKA_CANNOT_GET_HERE("Return statement must be present");


    return NULL;
    function_return_exit:;

    coroutine->m_returned = coroutine_heap->tmp_return_value;

    return NULL;

}

static PyObject *MAKE_COROUTINE_hikari$api$rest$$$function__136_create_slash_command$$$coroutine__1_create_slash_command() {
    return Nuitka_Coroutine_New(
        hikari$api$rest$$$function__136_create_slash_command$$$coroutine__1_create_slash_command_context,
        module_hikari$api$rest,
        mod_consts[357],
        mod_consts[358],
        codeobj_67885ec34cfe5c794df9b1bb57a1735f,
        NULL,
        0,
        sizeof(struct hikari$api$rest$$$function__136_create_slash_command$$$coroutine__1_create_slash_command_locals)
    );
}


static PyObject *impl_hikari$api$rest$$$function__137_create_context_menu_command(struct Nuitka_FunctionObject const *self, PyObject **python_pars) {
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_self = python_pars[0];
    PyObject *par_application = python_pars[1];
    PyObject *par_type = python_pars[2];
    PyObject *par_name = python_pars[3];
    PyObject *par_guild = python_pars[4];
    PyObject *par_default_permission = python_pars[5];
    PyObject *tmp_return_value = NULL;

    // Actual function body.


    tmp_return_value = MAKE_COROUTINE_hikari$api$rest$$$function__137_create_context_menu_command$$$coroutine__1_create_context_menu_command();

    goto function_return_exit;

    NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
    return NULL;


function_return_exit:
   // Function cleanup code if any.
    CHECK_OBJECT(par_self);
    Py_DECREF(par_self);
    CHECK_OBJECT(par_application);
    Py_DECREF(par_application);
    CHECK_OBJECT(par_type);
    Py_DECREF(par_type);
    CHECK_OBJECT(par_name);
    Py_DECREF(par_name);
    CHECK_OBJECT(par_guild);
    Py_DECREF(par_guild);
    CHECK_OBJECT(par_default_permission);
    Py_DECREF(par_default_permission);

   // Actual function exit with return value, making sure we did not make
   // the error status worse despite non-NULL return.
   CHECK_OBJECT(tmp_return_value);
   assert(had_error || !ERROR_OCCURRED());
   return tmp_return_value;
}



struct hikari$api$rest$$$function__137_create_context_menu_command$$$coroutine__1_create_context_menu_command_locals {
    PyObject *tmp_return_value;
};

static PyObject *hikari$api$rest$$$function__137_create_context_menu_command$$$coroutine__1_create_context_menu_command_context(struct Nuitka_CoroutineObject *coroutine, PyObject *yield_return_value) {
    CHECK_OBJECT(coroutine);
    assert(Nuitka_Coroutine_Check((PyObject *)coroutine));

    // Heap access if used.
    struct hikari$api$rest$$$function__137_create_context_menu_command$$$coroutine__1_create_context_menu_command_locals *coroutine_heap = (struct hikari$api$rest$$$function__137_create_context_menu_command$$$coroutine__1_create_context_menu_command_locals *)coroutine->m_heap_storage;

    // Dispatch to yield based on return label index:


    // Local variable initialization
    coroutine_heap->tmp_return_value = NULL;

    // Actual coroutine body.
    coroutine_heap->tmp_return_value = Py_None;
    Py_INCREF(coroutine_heap->tmp_return_value);
    goto function_return_exit;

    NUITKA_CANNOT_GET_HERE("Return statement must be present");


    return NULL;
    function_return_exit:;

    coroutine->m_returned = coroutine_heap->tmp_return_value;

    return NULL;

}

static PyObject *MAKE_COROUTINE_hikari$api$rest$$$function__137_create_context_menu_command$$$coroutine__1_create_context_menu_command() {
    return Nuitka_Coroutine_New(
        hikari$api$rest$$$function__137_create_context_menu_command$$$coroutine__1_create_context_menu_command_context,
        module_hikari$api$rest,
        mod_consts[360],
        mod_consts[361],
        codeobj_e6e428f02370f7d65a3c77e9cc8932ac,
        NULL,
        0,
        sizeof(struct hikari$api$rest$$$function__137_create_context_menu_command$$$coroutine__1_create_context_menu_command_locals)
    );
}


static PyObject *impl_hikari$api$rest$$$function__138_set_application_commands(struct Nuitka_FunctionObject const *self, PyObject **python_pars) {
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_self = python_pars[0];
    PyObject *par_application = python_pars[1];
    PyObject *par_commands = python_pars[2];
    PyObject *par_guild = python_pars[3];
    PyObject *tmp_return_value = NULL;

    // Actual function body.


    tmp_return_value = MAKE_COROUTINE_hikari$api$rest$$$function__138_set_application_commands$$$coroutine__1_set_application_commands();

    goto function_return_exit;

    NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
    return NULL;


function_return_exit:
   // Function cleanup code if any.
    CHECK_OBJECT(par_self);
    Py_DECREF(par_self);
    CHECK_OBJECT(par_application);
    Py_DECREF(par_application);
    CHECK_OBJECT(par_commands);
    Py_DECREF(par_commands);
    CHECK_OBJECT(par_guild);
    Py_DECREF(par_guild);

   // Actual function exit with return value, making sure we did not make
   // the error status worse despite non-NULL return.
   CHECK_OBJECT(tmp_return_value);
   assert(had_error || !ERROR_OCCURRED());
   return tmp_return_value;
}



struct hikari$api$rest$$$function__138_set_application_commands$$$coroutine__1_set_application_commands_locals {
    PyObject *tmp_return_value;
};

static PyObject *hikari$api$rest$$$function__138_set_application_commands$$$coroutine__1_set_application_commands_context(struct Nuitka_CoroutineObject *coroutine, PyObject *yield_return_value) {
    CHECK_OBJECT(coroutine);
    assert(Nuitka_Coroutine_Check((PyObject *)coroutine));

    // Heap access if used.
    struct hikari$api$rest$$$function__138_set_application_commands$$$coroutine__1_set_application_commands_locals *coroutine_heap = (struct hikari$api$rest$$$function__138_set_application_commands$$$coroutine__1_set_application_commands_locals *)coroutine->m_heap_storage;

    // Dispatch to yield based on return label index:


    // Local variable initialization
    coroutine_heap->tmp_return_value = NULL;

    // Actual coroutine body.
    coroutine_heap->tmp_return_value = Py_None;
    Py_INCREF(coroutine_heap->tmp_return_value);
    goto function_return_exit;

    NUITKA_CANNOT_GET_HERE("Return statement must be present");


    return NULL;
    function_return_exit:;

    coroutine->m_returned = coroutine_heap->tmp_return_value;

    return NULL;

}

static PyObject *MAKE_COROUTINE_hikari$api$rest$$$function__138_set_application_commands$$$coroutine__1_set_application_commands() {
    return Nuitka_Coroutine_New(
        hikari$api$rest$$$function__138_set_application_commands$$$coroutine__1_set_application_commands_context,
        module_hikari$api$rest,
        mod_consts[363],
        mod_consts[364],
        codeobj_61e52a923ef10e5edbc1371948361d2f,
        NULL,
        0,
        sizeof(struct hikari$api$rest$$$function__138_set_application_commands$$$coroutine__1_set_application_commands_locals)
    );
}


static PyObject *impl_hikari$api$rest$$$function__139_edit_application_command(struct Nuitka_FunctionObject const *self, PyObject **python_pars) {
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_self = python_pars[0];
    PyObject *par_application = python_pars[1];
    PyObject *par_command = python_pars[2];
    PyObject *par_guild = python_pars[3];
    PyObject *par_name = python_pars[4];
    PyObject *par_description = python_pars[5];
    PyObject *par_options = python_pars[6];
    PyObject *tmp_return_value = NULL;

    // Actual function body.


    tmp_return_value = MAKE_COROUTINE_hikari$api$rest$$$function__139_edit_application_command$$$coroutine__1_edit_application_command();

    goto function_return_exit;

    NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
    return NULL;


function_return_exit:
   // Function cleanup code if any.
    CHECK_OBJECT(par_self);
    Py_DECREF(par_self);
    CHECK_OBJECT(par_application);
    Py_DECREF(par_application);
    CHECK_OBJECT(par_command);
    Py_DECREF(par_command);
    CHECK_OBJECT(par_guild);
    Py_DECREF(par_guild);
    CHECK_OBJECT(par_name);
    Py_DECREF(par_name);
    CHECK_OBJECT(par_description);
    Py_DECREF(par_description);
    CHECK_OBJECT(par_options);
    Py_DECREF(par_options);

   // Actual function exit with return value, making sure we did not make
   // the error status worse despite non-NULL return.
   CHECK_OBJECT(tmp_return_value);
   assert(had_error || !ERROR_OCCURRED());
   return tmp_return_value;
}



struct hikari$api$rest$$$function__139_edit_application_command$$$coroutine__1_edit_application_command_locals {
    PyObject *tmp_return_value;
};

static PyObject *hikari$api$rest$$$function__139_edit_application_command$$$coroutine__1_edit_application_command_context(struct Nuitka_CoroutineObject *coroutine, PyObject *yield_return_value) {
    CHECK_OBJECT(coroutine);
    assert(Nuitka_Coroutine_Check((PyObject *)coroutine));

    // Heap access if used.
    struct hikari$api$rest$$$function__139_edit_application_command$$$coroutine__1_edit_application_command_locals *coroutine_heap = (struct hikari$api$rest$$$function__139_edit_application_command$$$coroutine__1_edit_application_command_locals *)coroutine->m_heap_storage;

    // Dispatch to yield based on return label index:


    // Local variable initialization
    coroutine_heap->tmp_return_value = NULL;

    // Actual coroutine body.
    coroutine_heap->tmp_return_value = Py_None;
    Py_INCREF(coroutine_heap->tmp_return_value);
    goto function_return_exit;

    NUITKA_CANNOT_GET_HERE("Return statement must be present");


    return NULL;
    function_return_exit:;

    coroutine->m_returned = coroutine_heap->tmp_return_value;

    return NULL;

}

static PyObject *MAKE_COROUTINE_hikari$api$rest$$$function__139_edit_application_command$$$coroutine__1_edit_application_command() {
    return Nuitka_Coroutine_New(
        hikari$api$rest$$$function__139_edit_application_command$$$coroutine__1_edit_application_command_context,
        module_hikari$api$rest,
        mod_consts[366],
        mod_consts[367],
        codeobj_bc8ea0df74490d43da889b08e74a02b8,
        NULL,
        0,
        sizeof(struct hikari$api$rest$$$function__139_edit_application_command$$$coroutine__1_edit_application_command_locals)
    );
}


static PyObject *impl_hikari$api$rest$$$function__140_delete_application_command(struct Nuitka_FunctionObject const *self, PyObject **python_pars) {
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_self = python_pars[0];
    PyObject *par_application = python_pars[1];
    PyObject *par_command = python_pars[2];
    PyObject *par_guild = python_pars[3];
    PyObject *tmp_return_value = NULL;

    // Actual function body.


    tmp_return_value = MAKE_COROUTINE_hikari$api$rest$$$function__140_delete_application_command$$$coroutine__1_delete_application_command();

    goto function_return_exit;

    NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
    return NULL;


function_return_exit:
   // Function cleanup code if any.
    CHECK_OBJECT(par_self);
    Py_DECREF(par_self);
    CHECK_OBJECT(par_application);
    Py_DECREF(par_application);
    CHECK_OBJECT(par_command);
    Py_DECREF(par_command);
    CHECK_OBJECT(par_guild);
    Py_DECREF(par_guild);

   // Actual function exit with return value, making sure we did not make
   // the error status worse despite non-NULL return.
   CHECK_OBJECT(tmp_return_value);
   assert(had_error || !ERROR_OCCURRED());
   return tmp_return_value;
}



struct hikari$api$rest$$$function__140_delete_application_command$$$coroutine__1_delete_application_command_locals {
    PyObject *tmp_return_value;
};

static PyObject *hikari$api$rest$$$function__140_delete_application_command$$$coroutine__1_delete_application_command_context(struct Nuitka_CoroutineObject *coroutine, PyObject *yield_return_value) {
    CHECK_OBJECT(coroutine);
    assert(Nuitka_Coroutine_Check((PyObject *)coroutine));

    // Heap access if used.
    struct hikari$api$rest$$$function__140_delete_application_command$$$coroutine__1_delete_application_command_locals *coroutine_heap = (struct hikari$api$rest$$$function__140_delete_application_command$$$coroutine__1_delete_application_command_locals *)coroutine->m_heap_storage;

    // Dispatch to yield based on return label index:


    // Local variable initialization
    coroutine_heap->tmp_return_value = NULL;

    // Actual coroutine body.
    coroutine_heap->tmp_return_value = Py_None;
    Py_INCREF(coroutine_heap->tmp_return_value);
    goto function_return_exit;

    NUITKA_CANNOT_GET_HERE("Return statement must be present");


    return NULL;
    function_return_exit:;

    coroutine->m_returned = coroutine_heap->tmp_return_value;

    return NULL;

}

static PyObject *MAKE_COROUTINE_hikari$api$rest$$$function__140_delete_application_command$$$coroutine__1_delete_application_command() {
    return Nuitka_Coroutine_New(
        hikari$api$rest$$$function__140_delete_application_command$$$coroutine__1_delete_application_command_context,
        module_hikari$api$rest,
        mod_consts[369],
        mod_consts[370],
        codeobj_d702236d8f737f29ae70a12e5a516434,
        NULL,
        0,
        sizeof(struct hikari$api$rest$$$function__140_delete_application_command$$$coroutine__1_delete_application_command_locals)
    );
}


static PyObject *impl_hikari$api$rest$$$function__141_fetch_application_guild_commands_permissions(struct Nuitka_FunctionObject const *self, PyObject **python_pars) {
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_self = python_pars[0];
    PyObject *par_application = python_pars[1];
    PyObject *par_guild = python_pars[2];
    PyObject *tmp_return_value = NULL;

    // Actual function body.


    tmp_return_value = MAKE_COROUTINE_hikari$api$rest$$$function__141_fetch_application_guild_commands_permissions$$$coroutine__1_fetch_application_guild_commands_permissions();

    goto function_return_exit;

    NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
    return NULL;


function_return_exit:
   // Function cleanup code if any.
    CHECK_OBJECT(par_self);
    Py_DECREF(par_self);
    CHECK_OBJECT(par_application);
    Py_DECREF(par_application);
    CHECK_OBJECT(par_guild);
    Py_DECREF(par_guild);

   // Actual function exit with return value, making sure we did not make
   // the error status worse despite non-NULL return.
   CHECK_OBJECT(tmp_return_value);
   assert(had_error || !ERROR_OCCURRED());
   return tmp_return_value;
}



struct hikari$api$rest$$$function__141_fetch_application_guild_commands_permissions$$$coroutine__1_fetch_application_guild_commands_permissions_locals {
    PyObject *tmp_return_value;
};

static PyObject *hikari$api$rest$$$function__141_fetch_application_guild_commands_permissions$$$coroutine__1_fetch_application_guild_commands_permissions_context(struct Nuitka_CoroutineObject *coroutine, PyObject *yield_return_value) {
    CHECK_OBJECT(coroutine);
    assert(Nuitka_Coroutine_Check((PyObject *)coroutine));

    // Heap access if used.
    struct hikari$api$rest$$$function__141_fetch_application_guild_commands_permissions$$$coroutine__1_fetch_application_guild_commands_permissions_locals *coroutine_heap = (struct hikari$api$rest$$$function__141_fetch_application_guild_commands_permissions$$$coroutine__1_fetch_application_guild_commands_permissions_locals *)coroutine->m_heap_storage;

    // Dispatch to yield based on return label index:


    // Local variable initialization
    coroutine_heap->tmp_return_value = NULL;

    // Actual coroutine body.
    coroutine_heap->tmp_return_value = Py_None;
    Py_INCREF(coroutine_heap->tmp_return_value);
    goto function_return_exit;

    NUITKA_CANNOT_GET_HERE("Return statement must be present");


    return NULL;
    function_return_exit:;

    coroutine->m_returned = coroutine_heap->tmp_return_value;

    return NULL;

}

static PyObject *MAKE_COROUTINE_hikari$api$rest$$$function__141_fetch_application_guild_commands_permissions$$$coroutine__1_fetch_application_guild_commands_permissions() {
    return Nuitka_Coroutine_New(
        hikari$api$rest$$$function__141_fetch_application_guild_commands_permissions$$$coroutine__1_fetch_application_guild_commands_permissions_context,
        module_hikari$api$rest,
        mod_consts[372],
        mod_consts[373],
        codeobj_6e78df246d5c48b01ed235092320fffb,
        NULL,
        0,
        sizeof(struct hikari$api$rest$$$function__141_fetch_application_guild_commands_permissions$$$coroutine__1_fetch_application_guild_commands_permissions_locals)
    );
}


static PyObject *impl_hikari$api$rest$$$function__142_fetch_application_command_permissions(struct Nuitka_FunctionObject const *self, PyObject **python_pars) {
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_self = python_pars[0];
    PyObject *par_application = python_pars[1];
    PyObject *par_guild = python_pars[2];
    PyObject *par_command = python_pars[3];
    PyObject *tmp_return_value = NULL;

    // Actual function body.


    tmp_return_value = MAKE_COROUTINE_hikari$api$rest$$$function__142_fetch_application_command_permissions$$$coroutine__1_fetch_application_command_permissions();

    goto function_return_exit;

    NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
    return NULL;


function_return_exit:
   // Function cleanup code if any.
    CHECK_OBJECT(par_self);
    Py_DECREF(par_self);
    CHECK_OBJECT(par_application);
    Py_DECREF(par_application);
    CHECK_OBJECT(par_guild);
    Py_DECREF(par_guild);
    CHECK_OBJECT(par_command);
    Py_DECREF(par_command);

   // Actual function exit with return value, making sure we did not make
   // the error status worse despite non-NULL return.
   CHECK_OBJECT(tmp_return_value);
   assert(had_error || !ERROR_OCCURRED());
   return tmp_return_value;
}



struct hikari$api$rest$$$function__142_fetch_application_command_permissions$$$coroutine__1_fetch_application_command_permissions_locals {
    PyObject *tmp_return_value;
};

static PyObject *hikari$api$rest$$$function__142_fetch_application_command_permissions$$$coroutine__1_fetch_application_command_permissions_context(struct Nuitka_CoroutineObject *coroutine, PyObject *yield_return_value) {
    CHECK_OBJECT(coroutine);
    assert(Nuitka_Coroutine_Check((PyObject *)coroutine));

    // Heap access if used.
    struct hikari$api$rest$$$function__142_fetch_application_command_permissions$$$coroutine__1_fetch_application_command_permissions_locals *coroutine_heap = (struct hikari$api$rest$$$function__142_fetch_application_command_permissions$$$coroutine__1_fetch_application_command_permissions_locals *)coroutine->m_heap_storage;

    // Dispatch to yield based on return label index:


    // Local variable initialization
    coroutine_heap->tmp_return_value = NULL;

    // Actual coroutine body.
    coroutine_heap->tmp_return_value = Py_None;
    Py_INCREF(coroutine_heap->tmp_return_value);
    goto function_return_exit;

    NUITKA_CANNOT_GET_HERE("Return statement must be present");


    return NULL;
    function_return_exit:;

    coroutine->m_returned = coroutine_heap->tmp_return_value;

    return NULL;

}

static PyObject *MAKE_COROUTINE_hikari$api$rest$$$function__142_fetch_application_command_permissions$$$coroutine__1_fetch_application_command_permissions() {
    return Nuitka_Coroutine_New(
        hikari$api$rest$$$function__142_fetch_application_command_permissions$$$coroutine__1_fetch_application_command_permissions_context,
        module_hikari$api$rest,
        mod_consts[375],
        mod_consts[376],
        codeobj_ed9e9604447b8f482f5ab9203a34afa4,
        NULL,
        0,
        sizeof(struct hikari$api$rest$$$function__142_fetch_application_command_permissions$$$coroutine__1_fetch_application_command_permissions_locals)
    );
}


static PyObject *impl_hikari$api$rest$$$function__143_set_application_guild_commands_permissions(struct Nuitka_FunctionObject const *self, PyObject **python_pars) {
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_self = python_pars[0];
    PyObject *par_application = python_pars[1];
    PyObject *par_guild = python_pars[2];
    PyObject *par_permissions = python_pars[3];
    PyObject *tmp_return_value = NULL;

    // Actual function body.


    tmp_return_value = MAKE_COROUTINE_hikari$api$rest$$$function__143_set_application_guild_commands_permissions$$$coroutine__1_set_application_guild_commands_permissions();

    goto function_return_exit;

    NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
    return NULL;


function_return_exit:
   // Function cleanup code if any.
    CHECK_OBJECT(par_self);
    Py_DECREF(par_self);
    CHECK_OBJECT(par_application);
    Py_DECREF(par_application);
    CHECK_OBJECT(par_guild);
    Py_DECREF(par_guild);
    CHECK_OBJECT(par_permissions);
    Py_DECREF(par_permissions);

   // Actual function exit with return value, making sure we did not make
   // the error status worse despite non-NULL return.
   CHECK_OBJECT(tmp_return_value);
   assert(had_error || !ERROR_OCCURRED());
   return tmp_return_value;
}



struct hikari$api$rest$$$function__143_set_application_guild_commands_permissions$$$coroutine__1_set_application_guild_commands_permissions_locals {
    PyObject *tmp_return_value;
};

static PyObject *hikari$api$rest$$$function__143_set_application_guild_commands_permissions$$$coroutine__1_set_application_guild_commands_permissions_context(struct Nuitka_CoroutineObject *coroutine, PyObject *yield_return_value) {
    CHECK_OBJECT(coroutine);
    assert(Nuitka_Coroutine_Check((PyObject *)coroutine));

    // Heap access if used.
    struct hikari$api$rest$$$function__143_set_application_guild_commands_permissions$$$coroutine__1_set_application_guild_commands_permissions_locals *coroutine_heap = (struct hikari$api$rest$$$function__143_set_application_guild_commands_permissions$$$coroutine__1_set_application_guild_commands_permissions_locals *)coroutine->m_heap_storage;

    // Dispatch to yield based on return label index:


    // Local variable initialization
    coroutine_heap->tmp_return_value = NULL;

    // Actual coroutine body.
    coroutine_heap->tmp_return_value = Py_None;
    Py_INCREF(coroutine_heap->tmp_return_value);
    goto function_return_exit;

    NUITKA_CANNOT_GET_HERE("Return statement must be present");


    return NULL;
    function_return_exit:;

    coroutine->m_returned = coroutine_heap->tmp_return_value;

    return NULL;

}

static PyObject *MAKE_COROUTINE_hikari$api$rest$$$function__143_set_application_guild_commands_permissions$$$coroutine__1_set_application_guild_commands_permissions() {
    return Nuitka_Coroutine_New(
        hikari$api$rest$$$function__143_set_application_guild_commands_permissions$$$coroutine__1_set_application_guild_commands_permissions_context,
        module_hikari$api$rest,
        mod_consts[378],
        mod_consts[379],
        codeobj_84185994553865b34b5efdd7de67ba0a,
        NULL,
        0,
        sizeof(struct hikari$api$rest$$$function__143_set_application_guild_commands_permissions$$$coroutine__1_set_application_guild_commands_permissions_locals)
    );
}


static PyObject *impl_hikari$api$rest$$$function__144_set_application_command_permissions(struct Nuitka_FunctionObject const *self, PyObject **python_pars) {
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_self = python_pars[0];
    PyObject *par_application = python_pars[1];
    PyObject *par_guild = python_pars[2];
    PyObject *par_command = python_pars[3];
    PyObject *par_permissions = python_pars[4];
    PyObject *tmp_return_value = NULL;

    // Actual function body.


    tmp_return_value = MAKE_COROUTINE_hikari$api$rest$$$function__144_set_application_command_permissions$$$coroutine__1_set_application_command_permissions();

    goto function_return_exit;

    NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
    return NULL;


function_return_exit:
   // Function cleanup code if any.
    CHECK_OBJECT(par_self);
    Py_DECREF(par_self);
    CHECK_OBJECT(par_application);
    Py_DECREF(par_application);
    CHECK_OBJECT(par_guild);
    Py_DECREF(par_guild);
    CHECK_OBJECT(par_command);
    Py_DECREF(par_command);
    CHECK_OBJECT(par_permissions);
    Py_DECREF(par_permissions);

   // Actual function exit with return value, making sure we did not make
   // the error status worse despite non-NULL return.
   CHECK_OBJECT(tmp_return_value);
   assert(had_error || !ERROR_OCCURRED());
   return tmp_return_value;
}



struct hikari$api$rest$$$function__144_set_application_command_permissions$$$coroutine__1_set_application_command_permissions_locals {
    PyObject *tmp_return_value;
};

static PyObject *hikari$api$rest$$$function__144_set_application_command_permissions$$$coroutine__1_set_application_command_permissions_context(struct Nuitka_CoroutineObject *coroutine, PyObject *yield_return_value) {
    CHECK_OBJECT(coroutine);
    assert(Nuitka_Coroutine_Check((PyObject *)coroutine));

    // Heap access if used.
    struct hikari$api$rest$$$function__144_set_application_command_permissions$$$coroutine__1_set_application_command_permissions_locals *coroutine_heap = (struct hikari$api$rest$$$function__144_set_application_command_permissions$$$coroutine__1_set_application_command_permissions_locals *)coroutine->m_heap_storage;

    // Dispatch to yield based on return label index:


    // Local variable initialization
    coroutine_heap->tmp_return_value = NULL;

    // Actual coroutine body.
    coroutine_heap->tmp_return_value = Py_None;
    Py_INCREF(coroutine_heap->tmp_return_value);
    goto function_return_exit;

    NUITKA_CANNOT_GET_HERE("Return statement must be present");


    return NULL;
    function_return_exit:;

    coroutine->m_returned = coroutine_heap->tmp_return_value;

    return NULL;

}

static PyObject *MAKE_COROUTINE_hikari$api$rest$$$function__144_set_application_command_permissions$$$coroutine__1_set_application_command_permissions() {
    return Nuitka_Coroutine_New(
        hikari$api$rest$$$function__144_set_application_command_permissions$$$coroutine__1_set_application_command_permissions_context,
        module_hikari$api$rest,
        mod_consts[381],
        mod_consts[382],
        codeobj_a2868142c34175a8858d585b546b7499,
        NULL,
        0,
        sizeof(struct hikari$api$rest$$$function__144_set_application_command_permissions$$$coroutine__1_set_application_command_permissions_locals)
    );
}


static PyObject *impl_hikari$api$rest$$$function__148_fetch_interaction_response(struct Nuitka_FunctionObject const *self, PyObject **python_pars) {
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_self = python_pars[0];
    PyObject *par_application = python_pars[1];
    PyObject *par_token = python_pars[2];
    PyObject *tmp_return_value = NULL;

    // Actual function body.


    tmp_return_value = MAKE_COROUTINE_hikari$api$rest$$$function__148_fetch_interaction_response$$$coroutine__1_fetch_interaction_response();

    goto function_return_exit;

    NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
    return NULL;


function_return_exit:
   // Function cleanup code if any.
    CHECK_OBJECT(par_self);
    Py_DECREF(par_self);
    CHECK_OBJECT(par_application);
    Py_DECREF(par_application);
    CHECK_OBJECT(par_token);
    Py_DECREF(par_token);

   // Actual function exit with return value, making sure we did not make
   // the error status worse despite non-NULL return.
   CHECK_OBJECT(tmp_return_value);
   assert(had_error || !ERROR_OCCURRED());
   return tmp_return_value;
}



struct hikari$api$rest$$$function__148_fetch_interaction_response$$$coroutine__1_fetch_interaction_response_locals {
    PyObject *tmp_return_value;
};

static PyObject *hikari$api$rest$$$function__148_fetch_interaction_response$$$coroutine__1_fetch_interaction_response_context(struct Nuitka_CoroutineObject *coroutine, PyObject *yield_return_value) {
    CHECK_OBJECT(coroutine);
    assert(Nuitka_Coroutine_Check((PyObject *)coroutine));

    // Heap access if used.
    struct hikari$api$rest$$$function__148_fetch_interaction_response$$$coroutine__1_fetch_interaction_response_locals *coroutine_heap = (struct hikari$api$rest$$$function__148_fetch_interaction_response$$$coroutine__1_fetch_interaction_response_locals *)coroutine->m_heap_storage;

    // Dispatch to yield based on return label index:


    // Local variable initialization
    coroutine_heap->tmp_return_value = NULL;

    // Actual coroutine body.
    coroutine_heap->tmp_return_value = Py_None;
    Py_INCREF(coroutine_heap->tmp_return_value);
    goto function_return_exit;

    NUITKA_CANNOT_GET_HERE("Return statement must be present");


    return NULL;
    function_return_exit:;

    coroutine->m_returned = coroutine_heap->tmp_return_value;

    return NULL;

}

static PyObject *MAKE_COROUTINE_hikari$api$rest$$$function__148_fetch_interaction_response$$$coroutine__1_fetch_interaction_response() {
    return Nuitka_Coroutine_New(
        hikari$api$rest$$$function__148_fetch_interaction_response$$$coroutine__1_fetch_interaction_response_context,
        module_hikari$api$rest,
        mod_consts[384],
        mod_consts[385],
        codeobj_7eda04693b599ad7b84817589d86ac9f,
        NULL,
        0,
        sizeof(struct hikari$api$rest$$$function__148_fetch_interaction_response$$$coroutine__1_fetch_interaction_response_locals)
    );
}


static PyObject *impl_hikari$api$rest$$$function__149_create_interaction_response(struct Nuitka_FunctionObject const *self, PyObject **python_pars) {
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_self = python_pars[0];
    PyObject *par_interaction = python_pars[1];
    PyObject *par_token = python_pars[2];
    PyObject *par_response_type = python_pars[3];
    PyObject *par_content = python_pars[4];
    PyObject *par_flags = python_pars[5];
    PyObject *par_tts = python_pars[6];
    PyObject *par_attachment = python_pars[7];
    PyObject *par_attachments = python_pars[8];
    PyObject *par_component = python_pars[9];
    PyObject *par_components = python_pars[10];
    PyObject *par_embed = python_pars[11];
    PyObject *par_embeds = python_pars[12];
    PyObject *par_mentions_everyone = python_pars[13];
    PyObject *par_user_mentions = python_pars[14];
    PyObject *par_role_mentions = python_pars[15];
    PyObject *tmp_return_value = NULL;

    // Actual function body.


    tmp_return_value = MAKE_COROUTINE_hikari$api$rest$$$function__149_create_interaction_response$$$coroutine__1_create_interaction_response();

    goto function_return_exit;

    NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
    return NULL;


function_return_exit:
   // Function cleanup code if any.
    CHECK_OBJECT(par_self);
    Py_DECREF(par_self);
    CHECK_OBJECT(par_interaction);
    Py_DECREF(par_interaction);
    CHECK_OBJECT(par_token);
    Py_DECREF(par_token);
    CHECK_OBJECT(par_response_type);
    Py_DECREF(par_response_type);
    CHECK_OBJECT(par_content);
    Py_DECREF(par_content);
    CHECK_OBJECT(par_flags);
    Py_DECREF(par_flags);
    CHECK_OBJECT(par_tts);
    Py_DECREF(par_tts);
    CHECK_OBJECT(par_attachment);
    Py_DECREF(par_attachment);
    CHECK_OBJECT(par_attachments);
    Py_DECREF(par_attachments);
    CHECK_OBJECT(par_component);
    Py_DECREF(par_component);
    CHECK_OBJECT(par_components);
    Py_DECREF(par_components);
    CHECK_OBJECT(par_embed);
    Py_DECREF(par_embed);
    CHECK_OBJECT(par_embeds);
    Py_DECREF(par_embeds);
    CHECK_OBJECT(par_mentions_everyone);
    Py_DECREF(par_mentions_everyone);
    CHECK_OBJECT(par_user_mentions);
    Py_DECREF(par_user_mentions);
    CHECK_OBJECT(par_role_mentions);
    Py_DECREF(par_role_mentions);

   // Actual function exit with return value, making sure we did not make
   // the error status worse despite non-NULL return.
   CHECK_OBJECT(tmp_return_value);
   assert(had_error || !ERROR_OCCURRED());
   return tmp_return_value;
}



struct hikari$api$rest$$$function__149_create_interaction_response$$$coroutine__1_create_interaction_response_locals {
    PyObject *tmp_return_value;
};

static PyObject *hikari$api$rest$$$function__149_create_interaction_response$$$coroutine__1_create_interaction_response_context(struct Nuitka_CoroutineObject *coroutine, PyObject *yield_return_value) {
    CHECK_OBJECT(coroutine);
    assert(Nuitka_Coroutine_Check((PyObject *)coroutine));

    // Heap access if used.
    struct hikari$api$rest$$$function__149_create_interaction_response$$$coroutine__1_create_interaction_response_locals *coroutine_heap = (struct hikari$api$rest$$$function__149_create_interaction_response$$$coroutine__1_create_interaction_response_locals *)coroutine->m_heap_storage;

    // Dispatch to yield based on return label index:


    // Local variable initialization
    coroutine_heap->tmp_return_value = NULL;

    // Actual coroutine body.
    coroutine_heap->tmp_return_value = Py_None;
    Py_INCREF(coroutine_heap->tmp_return_value);
    goto function_return_exit;

    NUITKA_CANNOT_GET_HERE("Return statement must be present");


    return NULL;
    function_return_exit:;

    coroutine->m_returned = coroutine_heap->tmp_return_value;

    return NULL;

}

static PyObject *MAKE_COROUTINE_hikari$api$rest$$$function__149_create_interaction_response$$$coroutine__1_create_interaction_response() {
    return Nuitka_Coroutine_New(
        hikari$api$rest$$$function__149_create_interaction_response$$$coroutine__1_create_interaction_response_context,
        module_hikari$api$rest,
        mod_consts[387],
        mod_consts[388],
        codeobj_809e84358e6d962649ea9268ed569283,
        NULL,
        0,
        sizeof(struct hikari$api$rest$$$function__149_create_interaction_response$$$coroutine__1_create_interaction_response_locals)
    );
}


static PyObject *impl_hikari$api$rest$$$function__150_edit_interaction_response(struct Nuitka_FunctionObject const *self, PyObject **python_pars) {
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_self = python_pars[0];
    PyObject *par_application = python_pars[1];
    PyObject *par_token = python_pars[2];
    PyObject *par_content = python_pars[3];
    PyObject *par_attachment = python_pars[4];
    PyObject *par_attachments = python_pars[5];
    PyObject *par_component = python_pars[6];
    PyObject *par_components = python_pars[7];
    PyObject *par_embed = python_pars[8];
    PyObject *par_embeds = python_pars[9];
    PyObject *par_replace_attachments = python_pars[10];
    PyObject *par_mentions_everyone = python_pars[11];
    PyObject *par_user_mentions = python_pars[12];
    PyObject *par_role_mentions = python_pars[13];
    PyObject *tmp_return_value = NULL;

    // Actual function body.


    tmp_return_value = MAKE_COROUTINE_hikari$api$rest$$$function__150_edit_interaction_response$$$coroutine__1_edit_interaction_response();

    goto function_return_exit;

    NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
    return NULL;


function_return_exit:
   // Function cleanup code if any.
    CHECK_OBJECT(par_self);
    Py_DECREF(par_self);
    CHECK_OBJECT(par_application);
    Py_DECREF(par_application);
    CHECK_OBJECT(par_token);
    Py_DECREF(par_token);
    CHECK_OBJECT(par_content);
    Py_DECREF(par_content);
    CHECK_OBJECT(par_attachment);
    Py_DECREF(par_attachment);
    CHECK_OBJECT(par_attachments);
    Py_DECREF(par_attachments);
    CHECK_OBJECT(par_component);
    Py_DECREF(par_component);
    CHECK_OBJECT(par_components);
    Py_DECREF(par_components);
    CHECK_OBJECT(par_embed);
    Py_DECREF(par_embed);
    CHECK_OBJECT(par_embeds);
    Py_DECREF(par_embeds);
    CHECK_OBJECT(par_replace_attachments);
    Py_DECREF(par_replace_attachments);
    CHECK_OBJECT(par_mentions_everyone);
    Py_DECREF(par_mentions_everyone);
    CHECK_OBJECT(par_user_mentions);
    Py_DECREF(par_user_mentions);
    CHECK_OBJECT(par_role_mentions);
    Py_DECREF(par_role_mentions);

   // Actual function exit with return value, making sure we did not make
   // the error status worse despite non-NULL return.
   CHECK_OBJECT(tmp_return_value);
   assert(had_error || !ERROR_OCCURRED());
   return tmp_return_value;
}



struct hikari$api$rest$$$function__150_edit_interaction_response$$$coroutine__1_edit_interaction_response_locals {
    PyObject *tmp_return_value;
};

static PyObject *hikari$api$rest$$$function__150_edit_interaction_response$$$coroutine__1_edit_interaction_response_context(struct Nuitka_CoroutineObject *coroutine, PyObject *yield_return_value) {
    CHECK_OBJECT(coroutine);
    assert(Nuitka_Coroutine_Check((PyObject *)coroutine));

    // Heap access if used.
    struct hikari$api$rest$$$function__150_edit_interaction_response$$$coroutine__1_edit_interaction_response_locals *coroutine_heap = (struct hikari$api$rest$$$function__150_edit_interaction_response$$$coroutine__1_edit_interaction_response_locals *)coroutine->m_heap_storage;

    // Dispatch to yield based on return label index:


    // Local variable initialization
    coroutine_heap->tmp_return_value = NULL;

    // Actual coroutine body.
    coroutine_heap->tmp_return_value = Py_None;
    Py_INCREF(coroutine_heap->tmp_return_value);
    goto function_return_exit;

    NUITKA_CANNOT_GET_HERE("Return statement must be present");


    return NULL;
    function_return_exit:;

    coroutine->m_returned = coroutine_heap->tmp_return_value;

    return NULL;

}

static PyObject *MAKE_COROUTINE_hikari$api$rest$$$function__150_edit_interaction_response$$$coroutine__1_edit_interaction_response() {
    return Nuitka_Coroutine_New(
        hikari$api$rest$$$function__150_edit_interaction_response$$$coroutine__1_edit_interaction_response_context,
        module_hikari$api$rest,
        mod_consts[390],
        mod_consts[391],
        codeobj_7ec667c02a18fca3f0a3cc3a8ff7c3ec,
        NULL,
        0,
        sizeof(struct hikari$api$rest$$$function__150_edit_interaction_response$$$coroutine__1_edit_interaction_response_locals)
    );
}


static PyObject *impl_hikari$api$rest$$$function__151_delete_interaction_response(struct Nuitka_FunctionObject const *self, PyObject **python_pars) {
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_self = python_pars[0];
    PyObject *par_application = python_pars[1];
    PyObject *par_token = python_pars[2];
    PyObject *tmp_return_value = NULL;

    // Actual function body.


    tmp_return_value = MAKE_COROUTINE_hikari$api$rest$$$function__151_delete_interaction_response$$$coroutine__1_delete_interaction_response();

    goto function_return_exit;

    NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
    return NULL;


function_return_exit:
   // Function cleanup code if any.
    CHECK_OBJECT(par_self);
    Py_DECREF(par_self);
    CHECK_OBJECT(par_application);
    Py_DECREF(par_application);
    CHECK_OBJECT(par_token);
    Py_DECREF(par_token);

   // Actual function exit with return value, making sure we did not make
   // the error status worse despite non-NULL return.
   CHECK_OBJECT(tmp_return_value);
   assert(had_error || !ERROR_OCCURRED());
   return tmp_return_value;
}



struct hikari$api$rest$$$function__151_delete_interaction_response$$$coroutine__1_delete_interaction_response_locals {
    PyObject *tmp_return_value;
};

static PyObject *hikari$api$rest$$$function__151_delete_interaction_response$$$coroutine__1_delete_interaction_response_context(struct Nuitka_CoroutineObject *coroutine, PyObject *yield_return_value) {
    CHECK_OBJECT(coroutine);
    assert(Nuitka_Coroutine_Check((PyObject *)coroutine));

    // Heap access if used.
    struct hikari$api$rest$$$function__151_delete_interaction_response$$$coroutine__1_delete_interaction_response_locals *coroutine_heap = (struct hikari$api$rest$$$function__151_delete_interaction_response$$$coroutine__1_delete_interaction_response_locals *)coroutine->m_heap_storage;

    // Dispatch to yield based on return label index:


    // Local variable initialization
    coroutine_heap->tmp_return_value = NULL;

    // Actual coroutine body.
    coroutine_heap->tmp_return_value = Py_None;
    Py_INCREF(coroutine_heap->tmp_return_value);
    goto function_return_exit;

    NUITKA_CANNOT_GET_HERE("Return statement must be present");


    return NULL;
    function_return_exit:;

    coroutine->m_returned = coroutine_heap->tmp_return_value;

    return NULL;

}

static PyObject *MAKE_COROUTINE_hikari$api$rest$$$function__151_delete_interaction_response$$$coroutine__1_delete_interaction_response() {
    return Nuitka_Coroutine_New(
        hikari$api$rest$$$function__151_delete_interaction_response$$$coroutine__1_delete_interaction_response_context,
        module_hikari$api$rest,
        mod_consts[393],
        mod_consts[394],
        codeobj_2be1316070137c932a8bc1d29c537b01,
        NULL,
        0,
        sizeof(struct hikari$api$rest$$$function__151_delete_interaction_response$$$coroutine__1_delete_interaction_response_locals)
    );
}


static PyObject *impl_hikari$api$rest$$$function__152_create_autocomplete_response(struct Nuitka_FunctionObject const *self, PyObject **python_pars) {
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_self = python_pars[0];
    PyObject *par_interaction = python_pars[1];
    PyObject *par_token = python_pars[2];
    PyObject *par_choices = python_pars[3];
    PyObject *tmp_return_value = NULL;

    // Actual function body.


    tmp_return_value = MAKE_COROUTINE_hikari$api$rest$$$function__152_create_autocomplete_response$$$coroutine__1_create_autocomplete_response();

    goto function_return_exit;

    NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
    return NULL;


function_return_exit:
   // Function cleanup code if any.
    CHECK_OBJECT(par_self);
    Py_DECREF(par_self);
    CHECK_OBJECT(par_interaction);
    Py_DECREF(par_interaction);
    CHECK_OBJECT(par_token);
    Py_DECREF(par_token);
    CHECK_OBJECT(par_choices);
    Py_DECREF(par_choices);

   // Actual function exit with return value, making sure we did not make
   // the error status worse despite non-NULL return.
   CHECK_OBJECT(tmp_return_value);
   assert(had_error || !ERROR_OCCURRED());
   return tmp_return_value;
}



struct hikari$api$rest$$$function__152_create_autocomplete_response$$$coroutine__1_create_autocomplete_response_locals {
    PyObject *tmp_return_value;
};

static PyObject *hikari$api$rest$$$function__152_create_autocomplete_response$$$coroutine__1_create_autocomplete_response_context(struct Nuitka_CoroutineObject *coroutine, PyObject *yield_return_value) {
    CHECK_OBJECT(coroutine);
    assert(Nuitka_Coroutine_Check((PyObject *)coroutine));

    // Heap access if used.
    struct hikari$api$rest$$$function__152_create_autocomplete_response$$$coroutine__1_create_autocomplete_response_locals *coroutine_heap = (struct hikari$api$rest$$$function__152_create_autocomplete_response$$$coroutine__1_create_autocomplete_response_locals *)coroutine->m_heap_storage;

    // Dispatch to yield based on return label index:


    // Local variable initialization
    coroutine_heap->tmp_return_value = NULL;

    // Actual coroutine body.
    coroutine_heap->tmp_return_value = Py_None;
    Py_INCREF(coroutine_heap->tmp_return_value);
    goto function_return_exit;

    NUITKA_CANNOT_GET_HERE("Return statement must be present");


    return NULL;
    function_return_exit:;

    coroutine->m_returned = coroutine_heap->tmp_return_value;

    return NULL;

}

static PyObject *MAKE_COROUTINE_hikari$api$rest$$$function__152_create_autocomplete_response$$$coroutine__1_create_autocomplete_response() {
    return Nuitka_Coroutine_New(
        hikari$api$rest$$$function__152_create_autocomplete_response$$$coroutine__1_create_autocomplete_response_context,
        module_hikari$api$rest,
        mod_consts[396],
        mod_consts[397],
        codeobj_ec131d13f2837723addc4e5d122b3408,
        NULL,
        0,
        sizeof(struct hikari$api$rest$$$function__152_create_autocomplete_response$$$coroutine__1_create_autocomplete_response_locals)
    );
}


static PyObject *impl_hikari$api$rest$$$function__154_fetch_scheduled_event(struct Nuitka_FunctionObject const *self, PyObject **python_pars) {
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_self = python_pars[0];
    PyObject *par_guild = python_pars[1];
    PyObject *par_event = python_pars[2];
    PyObject *tmp_return_value = NULL;

    // Actual function body.


    tmp_return_value = MAKE_COROUTINE_hikari$api$rest$$$function__154_fetch_scheduled_event$$$coroutine__1_fetch_scheduled_event();

    goto function_return_exit;

    NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
    return NULL;


function_return_exit:
   // Function cleanup code if any.
    CHECK_OBJECT(par_self);
    Py_DECREF(par_self);
    CHECK_OBJECT(par_guild);
    Py_DECREF(par_guild);
    CHECK_OBJECT(par_event);
    Py_DECREF(par_event);

   // Actual function exit with return value, making sure we did not make
   // the error status worse despite non-NULL return.
   CHECK_OBJECT(tmp_return_value);
   assert(had_error || !ERROR_OCCURRED());
   return tmp_return_value;
}



struct hikari$api$rest$$$function__154_fetch_scheduled_event$$$coroutine__1_fetch_scheduled_event_locals {
    PyObject *tmp_return_value;
};

static PyObject *hikari$api$rest$$$function__154_fetch_scheduled_event$$$coroutine__1_fetch_scheduled_event_context(struct Nuitka_CoroutineObject *coroutine, PyObject *yield_return_value) {
    CHECK_OBJECT(coroutine);
    assert(Nuitka_Coroutine_Check((PyObject *)coroutine));

    // Heap access if used.
    struct hikari$api$rest$$$function__154_fetch_scheduled_event$$$coroutine__1_fetch_scheduled_event_locals *coroutine_heap = (struct hikari$api$rest$$$function__154_fetch_scheduled_event$$$coroutine__1_fetch_scheduled_event_locals *)coroutine->m_heap_storage;

    // Dispatch to yield based on return label index:


    // Local variable initialization
    coroutine_heap->tmp_return_value = NULL;

    // Actual coroutine body.
    coroutine_heap->tmp_return_value = Py_None;
    Py_INCREF(coroutine_heap->tmp_return_value);
    goto function_return_exit;

    NUITKA_CANNOT_GET_HERE("Return statement must be present");


    return NULL;
    function_return_exit:;

    coroutine->m_returned = coroutine_heap->tmp_return_value;

    return NULL;

}

static PyObject *MAKE_COROUTINE_hikari$api$rest$$$function__154_fetch_scheduled_event$$$coroutine__1_fetch_scheduled_event() {
    return Nuitka_Coroutine_New(
        hikari$api$rest$$$function__154_fetch_scheduled_event$$$coroutine__1_fetch_scheduled_event_context,
        module_hikari$api$rest,
        mod_consts[399],
        mod_consts[400],
        codeobj_6316c02615d76ac4fa4c4f4a94f98c2f,
        NULL,
        0,
        sizeof(struct hikari$api$rest$$$function__154_fetch_scheduled_event$$$coroutine__1_fetch_scheduled_event_locals)
    );
}


static PyObject *impl_hikari$api$rest$$$function__155_fetch_scheduled_events(struct Nuitka_FunctionObject const *self, PyObject **python_pars) {
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_self = python_pars[0];
    PyObject *par_guild = python_pars[1];
    PyObject *tmp_return_value = NULL;

    // Actual function body.


    tmp_return_value = MAKE_COROUTINE_hikari$api$rest$$$function__155_fetch_scheduled_events$$$coroutine__1_fetch_scheduled_events();

    goto function_return_exit;

    NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
    return NULL;


function_return_exit:
   // Function cleanup code if any.
    CHECK_OBJECT(par_self);
    Py_DECREF(par_self);
    CHECK_OBJECT(par_guild);
    Py_DECREF(par_guild);

   // Actual function exit with return value, making sure we did not make
   // the error status worse despite non-NULL return.
   CHECK_OBJECT(tmp_return_value);
   assert(had_error || !ERROR_OCCURRED());
   return tmp_return_value;
}



struct hikari$api$rest$$$function__155_fetch_scheduled_events$$$coroutine__1_fetch_scheduled_events_locals {
    PyObject *tmp_return_value;
};

static PyObject *hikari$api$rest$$$function__155_fetch_scheduled_events$$$coroutine__1_fetch_scheduled_events_context(struct Nuitka_CoroutineObject *coroutine, PyObject *yield_return_value) {
    CHECK_OBJECT(coroutine);
    assert(Nuitka_Coroutine_Check((PyObject *)coroutine));

    // Heap access if used.
    struct hikari$api$rest$$$function__155_fetch_scheduled_events$$$coroutine__1_fetch_scheduled_events_locals *coroutine_heap = (struct hikari$api$rest$$$function__155_fetch_scheduled_events$$$coroutine__1_fetch_scheduled_events_locals *)coroutine->m_heap_storage;

    // Dispatch to yield based on return label index:


    // Local variable initialization
    coroutine_heap->tmp_return_value = NULL;

    // Actual coroutine body.
    coroutine_heap->tmp_return_value = Py_None;
    Py_INCREF(coroutine_heap->tmp_return_value);
    goto function_return_exit;

    NUITKA_CANNOT_GET_HERE("Return statement must be present");


    return NULL;
    function_return_exit:;

    coroutine->m_returned = coroutine_heap->tmp_return_value;

    return NULL;

}

static PyObject *MAKE_COROUTINE_hikari$api$rest$$$function__155_fetch_scheduled_events$$$coroutine__1_fetch_scheduled_events() {
    return Nuitka_Coroutine_New(
        hikari$api$rest$$$function__155_fetch_scheduled_events$$$coroutine__1_fetch_scheduled_events_context,
        module_hikari$api$rest,
        mod_consts[402],
        mod_consts[403],
        codeobj_b4909d4177445a7598bf0e970661e7bc,
        NULL,
        0,
        sizeof(struct hikari$api$rest$$$function__155_fetch_scheduled_events$$$coroutine__1_fetch_scheduled_events_locals)
    );
}


static PyObject *impl_hikari$api$rest$$$function__156_create_stage_event(struct Nuitka_FunctionObject const *self, PyObject **python_pars) {
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_self = python_pars[0];
    PyObject *par_guild = python_pars[1];
    PyObject *par_channel = python_pars[2];
    PyObject *par_name = python_pars[3];
    PyObject *par_start_time = python_pars[4];
    PyObject *par_description = python_pars[5];
    PyObject *par_end_time = python_pars[6];
    PyObject *par_image = python_pars[7];
    PyObject *par_privacy_level = python_pars[8];
    PyObject *par_reason = python_pars[9];
    PyObject *tmp_return_value = NULL;

    // Actual function body.


    tmp_return_value = MAKE_COROUTINE_hikari$api$rest$$$function__156_create_stage_event$$$coroutine__1_create_stage_event();

    goto function_return_exit;

    NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
    return NULL;


function_return_exit:
   // Function cleanup code if any.
    CHECK_OBJECT(par_self);
    Py_DECREF(par_self);
    CHECK_OBJECT(par_guild);
    Py_DECREF(par_guild);
    CHECK_OBJECT(par_channel);
    Py_DECREF(par_channel);
    CHECK_OBJECT(par_name);
    Py_DECREF(par_name);
    CHECK_OBJECT(par_start_time);
    Py_DECREF(par_start_time);
    CHECK_OBJECT(par_description);
    Py_DECREF(par_description);
    CHECK_OBJECT(par_end_time);
    Py_DECREF(par_end_time);
    CHECK_OBJECT(par_image);
    Py_DECREF(par_image);
    CHECK_OBJECT(par_privacy_level);
    Py_DECREF(par_privacy_level);
    CHECK_OBJECT(par_reason);
    Py_DECREF(par_reason);

   // Actual function exit with return value, making sure we did not make
   // the error status worse despite non-NULL return.
   CHECK_OBJECT(tmp_return_value);
   assert(had_error || !ERROR_OCCURRED());
   return tmp_return_value;
}



struct hikari$api$rest$$$function__156_create_stage_event$$$coroutine__1_create_stage_event_locals {
    PyObject *tmp_return_value;
};

static PyObject *hikari$api$rest$$$function__156_create_stage_event$$$coroutine__1_create_stage_event_context(struct Nuitka_CoroutineObject *coroutine, PyObject *yield_return_value) {
    CHECK_OBJECT(coroutine);
    assert(Nuitka_Coroutine_Check((PyObject *)coroutine));

    // Heap access if used.
    struct hikari$api$rest$$$function__156_create_stage_event$$$coroutine__1_create_stage_event_locals *coroutine_heap = (struct hikari$api$rest$$$function__156_create_stage_event$$$coroutine__1_create_stage_event_locals *)coroutine->m_heap_storage;

    // Dispatch to yield based on return label index:


    // Local variable initialization
    coroutine_heap->tmp_return_value = NULL;

    // Actual coroutine body.
    coroutine_heap->tmp_return_value = Py_None;
    Py_INCREF(coroutine_heap->tmp_return_value);
    goto function_return_exit;

    NUITKA_CANNOT_GET_HERE("Return statement must be present");


    return NULL;
    function_return_exit:;

    coroutine->m_returned = coroutine_heap->tmp_return_value;

    return NULL;

}

static PyObject *MAKE_COROUTINE_hikari$api$rest$$$function__156_create_stage_event$$$coroutine__1_create_stage_event() {
    return Nuitka_Coroutine_New(
        hikari$api$rest$$$function__156_create_stage_event$$$coroutine__1_create_stage_event_context,
        module_hikari$api$rest,
        mod_consts[405],
        mod_consts[406],
        codeobj_c14228a11640df809168a49140f38b28,
        NULL,
        0,
        sizeof(struct hikari$api$rest$$$function__156_create_stage_event$$$coroutine__1_create_stage_event_locals)
    );
}


static PyObject *impl_hikari$api$rest$$$function__157_create_voice_event(struct Nuitka_FunctionObject const *self, PyObject **python_pars) {
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_self = python_pars[0];
    PyObject *par_guild = python_pars[1];
    PyObject *par_channel = python_pars[2];
    PyObject *par_name = python_pars[3];
    PyObject *par_start_time = python_pars[4];
    PyObject *par_description = python_pars[5];
    PyObject *par_end_time = python_pars[6];
    PyObject *par_image = python_pars[7];
    PyObject *par_privacy_level = python_pars[8];
    PyObject *par_reason = python_pars[9];
    PyObject *tmp_return_value = NULL;

    // Actual function body.


    tmp_return_value = MAKE_COROUTINE_hikari$api$rest$$$function__157_create_voice_event$$$coroutine__1_create_voice_event();

    goto function_return_exit;

    NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
    return NULL;


function_return_exit:
   // Function cleanup code if any.
    CHECK_OBJECT(par_self);
    Py_DECREF(par_self);
    CHECK_OBJECT(par_guild);
    Py_DECREF(par_guild);
    CHECK_OBJECT(par_channel);
    Py_DECREF(par_channel);
    CHECK_OBJECT(par_name);
    Py_DECREF(par_name);
    CHECK_OBJECT(par_start_time);
    Py_DECREF(par_start_time);
    CHECK_OBJECT(par_description);
    Py_DECREF(par_description);
    CHECK_OBJECT(par_end_time);
    Py_DECREF(par_end_time);
    CHECK_OBJECT(par_image);
    Py_DECREF(par_image);
    CHECK_OBJECT(par_privacy_level);
    Py_DECREF(par_privacy_level);
    CHECK_OBJECT(par_reason);
    Py_DECREF(par_reason);

   // Actual function exit with return value, making sure we did not make
   // the error status worse despite non-NULL return.
   CHECK_OBJECT(tmp_return_value);
   assert(had_error || !ERROR_OCCURRED());
   return tmp_return_value;
}



struct hikari$api$rest$$$function__157_create_voice_event$$$coroutine__1_create_voice_event_locals {
    PyObject *tmp_return_value;
};

static PyObject *hikari$api$rest$$$function__157_create_voice_event$$$coroutine__1_create_voice_event_context(struct Nuitka_CoroutineObject *coroutine, PyObject *yield_return_value) {
    CHECK_OBJECT(coroutine);
    assert(Nuitka_Coroutine_Check((PyObject *)coroutine));

    // Heap access if used.
    struct hikari$api$rest$$$function__157_create_voice_event$$$coroutine__1_create_voice_event_locals *coroutine_heap = (struct hikari$api$rest$$$function__157_create_voice_event$$$coroutine__1_create_voice_event_locals *)coroutine->m_heap_storage;

    // Dispatch to yield based on return label index:


    // Local variable initialization
    coroutine_heap->tmp_return_value = NULL;

    // Actual coroutine body.
    coroutine_heap->tmp_return_value = Py_None;
    Py_INCREF(coroutine_heap->tmp_return_value);
    goto function_return_exit;

    NUITKA_CANNOT_GET_HERE("Return statement must be present");


    return NULL;
    function_return_exit:;

    coroutine->m_returned = coroutine_heap->tmp_return_value;

    return NULL;

}

static PyObject *MAKE_COROUTINE_hikari$api$rest$$$function__157_create_voice_event$$$coroutine__1_create_voice_event() {
    return Nuitka_Coroutine_New(
        hikari$api$rest$$$function__157_create_voice_event$$$coroutine__1_create_voice_event_context,
        module_hikari$api$rest,
        mod_consts[408],
        mod_consts[409],
        codeobj_ab29f44c657c056b9a281e02adb179e8,
        NULL,
        0,
        sizeof(struct hikari$api$rest$$$function__157_create_voice_event$$$coroutine__1_create_voice_event_locals)
    );
}


static PyObject *impl_hikari$api$rest$$$function__158_create_external_event(struct Nuitka_FunctionObject const *self, PyObject **python_pars) {
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_self = python_pars[0];
    PyObject *par_guild = python_pars[1];
    PyObject *par_name = python_pars[2];
    PyObject *par_location = python_pars[3];
    PyObject *par_start_time = python_pars[4];
    PyObject *par_end_time = python_pars[5];
    PyObject *par_description = python_pars[6];
    PyObject *par_image = python_pars[7];
    PyObject *par_privacy_level = python_pars[8];
    PyObject *par_reason = python_pars[9];
    PyObject *tmp_return_value = NULL;

    // Actual function body.


    tmp_return_value = MAKE_COROUTINE_hikari$api$rest$$$function__158_create_external_event$$$coroutine__1_create_external_event();

    goto function_return_exit;

    NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
    return NULL;


function_return_exit:
   // Function cleanup code if any.
    CHECK_OBJECT(par_self);
    Py_DECREF(par_self);
    CHECK_OBJECT(par_guild);
    Py_DECREF(par_guild);
    CHECK_OBJECT(par_name);
    Py_DECREF(par_name);
    CHECK_OBJECT(par_location);
    Py_DECREF(par_location);
    CHECK_OBJECT(par_start_time);
    Py_DECREF(par_start_time);
    CHECK_OBJECT(par_end_time);
    Py_DECREF(par_end_time);
    CHECK_OBJECT(par_description);
    Py_DECREF(par_description);
    CHECK_OBJECT(par_image);
    Py_DECREF(par_image);
    CHECK_OBJECT(par_privacy_level);
    Py_DECREF(par_privacy_level);
    CHECK_OBJECT(par_reason);
    Py_DECREF(par_reason);

   // Actual function exit with return value, making sure we did not make
   // the error status worse despite non-NULL return.
   CHECK_OBJECT(tmp_return_value);
   assert(had_error || !ERROR_OCCURRED());
   return tmp_return_value;
}



struct hikari$api$rest$$$function__158_create_external_event$$$coroutine__1_create_external_event_locals {
    PyObject *tmp_return_value;
};

static PyObject *hikari$api$rest$$$function__158_create_external_event$$$coroutine__1_create_external_event_context(struct Nuitka_CoroutineObject *coroutine, PyObject *yield_return_value) {
    CHECK_OBJECT(coroutine);
    assert(Nuitka_Coroutine_Check((PyObject *)coroutine));

    // Heap access if used.
    struct hikari$api$rest$$$function__158_create_external_event$$$coroutine__1_create_external_event_locals *coroutine_heap = (struct hikari$api$rest$$$function__158_create_external_event$$$coroutine__1_create_external_event_locals *)coroutine->m_heap_storage;

    // Dispatch to yield based on return label index:


    // Local variable initialization
    coroutine_heap->tmp_return_value = NULL;

    // Actual coroutine body.
    coroutine_heap->tmp_return_value = Py_None;
    Py_INCREF(coroutine_heap->tmp_return_value);
    goto function_return_exit;

    NUITKA_CANNOT_GET_HERE("Return statement must be present");


    return NULL;
    function_return_exit:;

    coroutine->m_returned = coroutine_heap->tmp_return_value;

    return NULL;

}

static PyObject *MAKE_COROUTINE_hikari$api$rest$$$function__158_create_external_event$$$coroutine__1_create_external_event() {
    return Nuitka_Coroutine_New(
        hikari$api$rest$$$function__158_create_external_event$$$coroutine__1_create_external_event_context,
        module_hikari$api$rest,
        mod_consts[411],
        mod_consts[412],
        codeobj_03d62ee6529c757418777148f1c01630,
        NULL,
        0,
        sizeof(struct hikari$api$rest$$$function__158_create_external_event$$$coroutine__1_create_external_event_locals)
    );
}


static PyObject *impl_hikari$api$rest$$$function__159_edit_scheduled_event(struct Nuitka_FunctionObject const *self, PyObject **python_pars) {
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_self = python_pars[0];
    PyObject *par_guild = python_pars[1];
    PyObject *par_event = python_pars[2];
    PyObject *par_channel = python_pars[3];
    PyObject *par_description = python_pars[4];
    PyObject *par_entity_type = python_pars[5];
    PyObject *par_image = python_pars[6];
    PyObject *par_location = python_pars[7];
    PyObject *par_name = python_pars[8];
    PyObject *par_privacy_level = python_pars[9];
    PyObject *par_start_time = python_pars[10];
    PyObject *par_end_time = python_pars[11];
    PyObject *par_status = python_pars[12];
    PyObject *par_reason = python_pars[13];
    PyObject *tmp_return_value = NULL;

    // Actual function body.


    tmp_return_value = MAKE_COROUTINE_hikari$api$rest$$$function__159_edit_scheduled_event$$$coroutine__1_edit_scheduled_event();

    goto function_return_exit;

    NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
    return NULL;


function_return_exit:
   // Function cleanup code if any.
    CHECK_OBJECT(par_self);
    Py_DECREF(par_self);
    CHECK_OBJECT(par_guild);
    Py_DECREF(par_guild);
    CHECK_OBJECT(par_event);
    Py_DECREF(par_event);
    CHECK_OBJECT(par_channel);
    Py_DECREF(par_channel);
    CHECK_OBJECT(par_description);
    Py_DECREF(par_description);
    CHECK_OBJECT(par_entity_type);
    Py_DECREF(par_entity_type);
    CHECK_OBJECT(par_image);
    Py_DECREF(par_image);
    CHECK_OBJECT(par_location);
    Py_DECREF(par_location);
    CHECK_OBJECT(par_name);
    Py_DECREF(par_name);
    CHECK_OBJECT(par_privacy_level);
    Py_DECREF(par_privacy_level);
    CHECK_OBJECT(par_start_time);
    Py_DECREF(par_start_time);
    CHECK_OBJECT(par_end_time);
    Py_DECREF(par_end_time);
    CHECK_OBJECT(par_status);
    Py_DECREF(par_status);
    CHECK_OBJECT(par_reason);
    Py_DECREF(par_reason);

   // Actual function exit with return value, making sure we did not make
   // the error status worse despite non-NULL return.
   CHECK_OBJECT(tmp_return_value);
   assert(had_error || !ERROR_OCCURRED());
   return tmp_return_value;
}



struct hikari$api$rest$$$function__159_edit_scheduled_event$$$coroutine__1_edit_scheduled_event_locals {
    PyObject *tmp_return_value;
};

static PyObject *hikari$api$rest$$$function__159_edit_scheduled_event$$$coroutine__1_edit_scheduled_event_context(struct Nuitka_CoroutineObject *coroutine, PyObject *yield_return_value) {
    CHECK_OBJECT(coroutine);
    assert(Nuitka_Coroutine_Check((PyObject *)coroutine));

    // Heap access if used.
    struct hikari$api$rest$$$function__159_edit_scheduled_event$$$coroutine__1_edit_scheduled_event_locals *coroutine_heap = (struct hikari$api$rest$$$function__159_edit_scheduled_event$$$coroutine__1_edit_scheduled_event_locals *)coroutine->m_heap_storage;

    // Dispatch to yield based on return label index:


    // Local variable initialization
    coroutine_heap->tmp_return_value = NULL;

    // Actual coroutine body.
    coroutine_heap->tmp_return_value = Py_None;
    Py_INCREF(coroutine_heap->tmp_return_value);
    goto function_return_exit;

    NUITKA_CANNOT_GET_HERE("Return statement must be present");


    return NULL;
    function_return_exit:;

    coroutine->m_returned = coroutine_heap->tmp_return_value;

    return NULL;

}

static PyObject *MAKE_COROUTINE_hikari$api$rest$$$function__159_edit_scheduled_event$$$coroutine__1_edit_scheduled_event() {
    return Nuitka_Coroutine_New(
        hikari$api$rest$$$function__159_edit_scheduled_event$$$coroutine__1_edit_scheduled_event_context,
        module_hikari$api$rest,
        mod_consts[414],
        mod_consts[415],
        codeobj_56759f70da9f186d1b1d80e49a8c062f,
        NULL,
        0,
        sizeof(struct hikari$api$rest$$$function__159_edit_scheduled_event$$$coroutine__1_edit_scheduled_event_locals)
    );
}


static PyObject *impl_hikari$api$rest$$$function__160_delete_scheduled_event(struct Nuitka_FunctionObject const *self, PyObject **python_pars) {
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_self = python_pars[0];
    PyObject *par_guild = python_pars[1];
    PyObject *par_event = python_pars[2];
    PyObject *tmp_return_value = NULL;

    // Actual function body.


    tmp_return_value = MAKE_COROUTINE_hikari$api$rest$$$function__160_delete_scheduled_event$$$coroutine__1_delete_scheduled_event();

    goto function_return_exit;

    NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
    return NULL;


function_return_exit:
   // Function cleanup code if any.
    CHECK_OBJECT(par_self);
    Py_DECREF(par_self);
    CHECK_OBJECT(par_guild);
    Py_DECREF(par_guild);
    CHECK_OBJECT(par_event);
    Py_DECREF(par_event);

   // Actual function exit with return value, making sure we did not make
   // the error status worse despite non-NULL return.
   CHECK_OBJECT(tmp_return_value);
   assert(had_error || !ERROR_OCCURRED());
   return tmp_return_value;
}



struct hikari$api$rest$$$function__160_delete_scheduled_event$$$coroutine__1_delete_scheduled_event_locals {
    PyObject *tmp_return_value;
};

static PyObject *hikari$api$rest$$$function__160_delete_scheduled_event$$$coroutine__1_delete_scheduled_event_context(struct Nuitka_CoroutineObject *coroutine, PyObject *yield_return_value) {
    CHECK_OBJECT(coroutine);
    assert(Nuitka_Coroutine_Check((PyObject *)coroutine));

    // Heap access if used.
    struct hikari$api$rest$$$function__160_delete_scheduled_event$$$coroutine__1_delete_scheduled_event_locals *coroutine_heap = (struct hikari$api$rest$$$function__160_delete_scheduled_event$$$coroutine__1_delete_scheduled_event_locals *)coroutine->m_heap_storage;

    // Dispatch to yield based on return label index:


    // Local variable initialization
    coroutine_heap->tmp_return_value = NULL;

    // Actual coroutine body.
    coroutine_heap->tmp_return_value = Py_None;
    Py_INCREF(coroutine_heap->tmp_return_value);
    goto function_return_exit;

    NUITKA_CANNOT_GET_HERE("Return statement must be present");


    return NULL;
    function_return_exit:;

    coroutine->m_returned = coroutine_heap->tmp_return_value;

    return NULL;

}

static PyObject *MAKE_COROUTINE_hikari$api$rest$$$function__160_delete_scheduled_event$$$coroutine__1_delete_scheduled_event() {
    return Nuitka_Coroutine_New(
        hikari$api$rest$$$function__160_delete_scheduled_event$$$coroutine__1_delete_scheduled_event_context,
        module_hikari$api$rest,
        mod_consts[417],
        mod_consts[418],
        codeobj_a62973ef75efa5d41f4ca8934be55fef,
        NULL,
        0,
        sizeof(struct hikari$api$rest$$$function__160_delete_scheduled_event$$$coroutine__1_delete_scheduled_event_locals)
    );
}



static PyObject *MAKE_FUNCTION_hikari$api$rest$$$function__100_kick_user(PyObject *kw_defaults, PyObject *annotations) {
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_hikari$api$rest$$$function__100_kick_user,
        mod_consts[258],
#if PYTHON_VERSION >= 0x300
        mod_consts[259],
#endif
        codeobj_b8d5560f0a83750dfcbd1dc10dfd5505,
        NULL,
#if PYTHON_VERSION >= 0x300
        kw_defaults,
        annotations,
#endif
        module_hikari$api$rest,
        mod_consts[257],
        NULL,
        0
    );


    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_hikari$api$rest$$$function__101_kick_member(PyObject *kw_defaults, PyObject *annotations) {
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_hikari$api$rest$$$function__101_kick_member,
        mod_consts[261],
#if PYTHON_VERSION >= 0x300
        mod_consts[262],
#endif
        codeobj_b87093cffa77cb82afbaad84c7ddabf6,
        NULL,
#if PYTHON_VERSION >= 0x300
        kw_defaults,
        annotations,
#endif
        module_hikari$api$rest,
        mod_consts[260],
        NULL,
        0
    );


    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_hikari$api$rest$$$function__102_ban_user(PyObject *kw_defaults, PyObject *annotations) {
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_hikari$api$rest$$$function__102_ban_user,
        mod_consts[264],
#if PYTHON_VERSION >= 0x300
        mod_consts[265],
#endif
        codeobj_d06e651baef5db298c98b1ed57a7f633,
        NULL,
#if PYTHON_VERSION >= 0x300
        kw_defaults,
        annotations,
#endif
        module_hikari$api$rest,
        mod_consts[263],
        NULL,
        0
    );


    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_hikari$api$rest$$$function__103_ban_member(PyObject *kw_defaults, PyObject *annotations) {
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_hikari$api$rest$$$function__103_ban_member,
        mod_consts[267],
#if PYTHON_VERSION >= 0x300
        mod_consts[268],
#endif
        codeobj_35ebd76f91d08bc354810abbda010b3c,
        NULL,
#if PYTHON_VERSION >= 0x300
        kw_defaults,
        annotations,
#endif
        module_hikari$api$rest,
        mod_consts[266],
        NULL,
        0
    );


    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_hikari$api$rest$$$function__104_unban_user(PyObject *kw_defaults, PyObject *annotations) {
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_hikari$api$rest$$$function__104_unban_user,
        mod_consts[270],
#if PYTHON_VERSION >= 0x300
        mod_consts[271],
#endif
        codeobj_5bd68a48b272ab644aaad0f48e8af30a,
        NULL,
#if PYTHON_VERSION >= 0x300
        kw_defaults,
        annotations,
#endif
        module_hikari$api$rest,
        mod_consts[269],
        NULL,
        0
    );


    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_hikari$api$rest$$$function__105_unban_member(PyObject *kw_defaults, PyObject *annotations) {
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_hikari$api$rest$$$function__105_unban_member,
        mod_consts[273],
#if PYTHON_VERSION >= 0x300
        mod_consts[274],
#endif
        codeobj_5f9292db0891d6d836dea94d0407da9b,
        NULL,
#if PYTHON_VERSION >= 0x300
        kw_defaults,
        annotations,
#endif
        module_hikari$api$rest,
        mod_consts[272],
        NULL,
        0
    );


    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_hikari$api$rest$$$function__106_fetch_ban(PyObject *annotations) {
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_hikari$api$rest$$$function__106_fetch_ban,
        mod_consts[276],
#if PYTHON_VERSION >= 0x300
        mod_consts[277],
#endif
        codeobj_e64bde9ce978560a4a00d42dee53992a,
        NULL,
#if PYTHON_VERSION >= 0x300
        NULL,
        annotations,
#endif
        module_hikari$api$rest,
        mod_consts[275],
        NULL,
        0
    );


    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_hikari$api$rest$$$function__107_fetch_bans(PyObject *annotations) {
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_hikari$api$rest$$$function__107_fetch_bans,
        mod_consts[279],
#if PYTHON_VERSION >= 0x300
        mod_consts[280],
#endif
        codeobj_58ffb98f50e237e5f9fa7695302ebf98,
        NULL,
#if PYTHON_VERSION >= 0x300
        NULL,
        annotations,
#endif
        module_hikari$api$rest,
        mod_consts[278],
        NULL,
        0
    );


    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_hikari$api$rest$$$function__108_fetch_roles(PyObject *annotations) {
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_hikari$api$rest$$$function__108_fetch_roles,
        mod_consts[282],
#if PYTHON_VERSION >= 0x300
        mod_consts[283],
#endif
        codeobj_22bd2cf7b9ec29dce5c000522e288d52,
        NULL,
#if PYTHON_VERSION >= 0x300
        NULL,
        annotations,
#endif
        module_hikari$api$rest,
        mod_consts[281],
        NULL,
        0
    );


    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_hikari$api$rest$$$function__109_create_role(PyObject *kw_defaults, PyObject *annotations) {
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_hikari$api$rest$$$function__109_create_role,
        mod_consts[285],
#if PYTHON_VERSION >= 0x300
        mod_consts[286],
#endif
        codeobj_b837f4182e1d25b057a9d369fed91d85,
        NULL,
#if PYTHON_VERSION >= 0x300
        kw_defaults,
        annotations,
#endif
        module_hikari$api$rest,
        mod_consts[284],
        NULL,
        0
    );


    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_hikari$api$rest$$$function__10_follow_channel(PyObject *annotations) {
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_hikari$api$rest$$$function__10_follow_channel,
        mod_consts[13],
#if PYTHON_VERSION >= 0x300
        mod_consts[14],
#endif
        codeobj_e6971230dc348ac59f39bdf0cd231da8,
        NULL,
#if PYTHON_VERSION >= 0x300
        NULL,
        annotations,
#endif
        module_hikari$api$rest,
        mod_consts[12],
        NULL,
        0
    );


    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_hikari$api$rest$$$function__110_reposition_roles(PyObject *annotations) {
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_hikari$api$rest$$$function__110_reposition_roles,
        mod_consts[288],
#if PYTHON_VERSION >= 0x300
        mod_consts[289],
#endif
        codeobj_121158bdab91854dd12714c6230cff5d,
        NULL,
#if PYTHON_VERSION >= 0x300
        NULL,
        annotations,
#endif
        module_hikari$api$rest,
        mod_consts[287],
        NULL,
        0
    );


    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_hikari$api$rest$$$function__111_edit_role(PyObject *kw_defaults, PyObject *annotations) {
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_hikari$api$rest$$$function__111_edit_role,
        mod_consts[291],
#if PYTHON_VERSION >= 0x300
        mod_consts[292],
#endif
        codeobj_2230d268d52a85d1da02a1f8aa186e87,
        NULL,
#if PYTHON_VERSION >= 0x300
        kw_defaults,
        annotations,
#endif
        module_hikari$api$rest,
        mod_consts[290],
        NULL,
        0
    );


    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_hikari$api$rest$$$function__112_delete_role(PyObject *annotations) {
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_hikari$api$rest$$$function__112_delete_role,
        mod_consts[294],
#if PYTHON_VERSION >= 0x300
        mod_consts[295],
#endif
        codeobj_c49241596d5f07638dab6d6627305dc5,
        NULL,
#if PYTHON_VERSION >= 0x300
        NULL,
        annotations,
#endif
        module_hikari$api$rest,
        mod_consts[293],
        NULL,
        0
    );


    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_hikari$api$rest$$$function__113_estimate_guild_prune_count(PyObject *kw_defaults, PyObject *annotations) {
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_hikari$api$rest$$$function__113_estimate_guild_prune_count,
        mod_consts[297],
#if PYTHON_VERSION >= 0x300
        mod_consts[298],
#endif
        codeobj_02259e45cb66359f9532b2a1fad93e11,
        NULL,
#if PYTHON_VERSION >= 0x300
        kw_defaults,
        annotations,
#endif
        module_hikari$api$rest,
        mod_consts[296],
        NULL,
        0
    );


    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_hikari$api$rest$$$function__114_begin_guild_prune(PyObject *kw_defaults, PyObject *annotations) {
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_hikari$api$rest$$$function__114_begin_guild_prune,
        mod_consts[300],
#if PYTHON_VERSION >= 0x300
        mod_consts[301],
#endif
        codeobj_ec36952ea8a1addd56b6c08cbedf834c,
        NULL,
#if PYTHON_VERSION >= 0x300
        kw_defaults,
        annotations,
#endif
        module_hikari$api$rest,
        mod_consts[299],
        NULL,
        0
    );


    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_hikari$api$rest$$$function__115_fetch_guild_voice_regions(PyObject *annotations) {
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_hikari$api$rest$$$function__115_fetch_guild_voice_regions,
        mod_consts[303],
#if PYTHON_VERSION >= 0x300
        mod_consts[304],
#endif
        codeobj_bcfed686f72d490bf234f356c3cca423,
        NULL,
#if PYTHON_VERSION >= 0x300
        NULL,
        annotations,
#endif
        module_hikari$api$rest,
        mod_consts[302],
        NULL,
        0
    );


    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_hikari$api$rest$$$function__116_fetch_guild_invites(PyObject *annotations) {
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_hikari$api$rest$$$function__116_fetch_guild_invites,
        mod_consts[306],
#if PYTHON_VERSION >= 0x300
        mod_consts[307],
#endif
        codeobj_eebffecbdd74e836b4e468c7c6968b8b,
        NULL,
#if PYTHON_VERSION >= 0x300
        NULL,
        annotations,
#endif
        module_hikari$api$rest,
        mod_consts[305],
        NULL,
        0
    );


    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_hikari$api$rest$$$function__117_fetch_integrations(PyObject *annotations) {
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_hikari$api$rest$$$function__117_fetch_integrations,
        mod_consts[309],
#if PYTHON_VERSION >= 0x300
        mod_consts[310],
#endif
        codeobj_48438a3b55123a6b9c581ff0b64203a4,
        NULL,
#if PYTHON_VERSION >= 0x300
        NULL,
        annotations,
#endif
        module_hikari$api$rest,
        mod_consts[308],
        NULL,
        0
    );


    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_hikari$api$rest$$$function__118_fetch_widget(PyObject *annotations) {
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_hikari$api$rest$$$function__118_fetch_widget,
        mod_consts[312],
#if PYTHON_VERSION >= 0x300
        mod_consts[313],
#endif
        codeobj_2d2c32ef18588b2fd5dfdcadf00cf350,
        NULL,
#if PYTHON_VERSION >= 0x300
        NULL,
        annotations,
#endif
        module_hikari$api$rest,
        mod_consts[311],
        NULL,
        0
    );


    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_hikari$api$rest$$$function__119_edit_widget(PyObject *kw_defaults, PyObject *annotations) {
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_hikari$api$rest$$$function__119_edit_widget,
        mod_consts[315],
#if PYTHON_VERSION >= 0x300
        mod_consts[316],
#endif
        codeobj_354598dc7fcb79428a2609775650f364,
        NULL,
#if PYTHON_VERSION >= 0x300
        kw_defaults,
        annotations,
#endif
        module_hikari$api$rest,
        mod_consts[314],
        NULL,
        0
    );


    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_hikari$api$rest$$$function__11_delete_channel(PyObject *annotations) {
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_hikari$api$rest$$$function__11_delete_channel,
        mod_consts[16],
#if PYTHON_VERSION >= 0x300
        mod_consts[17],
#endif
        codeobj_191f810972cc4fc165bd3f760134ec02,
        NULL,
#if PYTHON_VERSION >= 0x300
        NULL,
        annotations,
#endif
        module_hikari$api$rest,
        mod_consts[15],
        NULL,
        0
    );


    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_hikari$api$rest$$$function__120_fetch_welcome_screen(PyObject *annotations) {
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_hikari$api$rest$$$function__120_fetch_welcome_screen,
        mod_consts[318],
#if PYTHON_VERSION >= 0x300
        mod_consts[319],
#endif
        codeobj_ca7bfd654ee8af862dbe34bfefe49f74,
        NULL,
#if PYTHON_VERSION >= 0x300
        NULL,
        annotations,
#endif
        module_hikari$api$rest,
        mod_consts[317],
        NULL,
        0
    );


    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_hikari$api$rest$$$function__121_edit_welcome_screen(PyObject *kw_defaults, PyObject *annotations) {
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_hikari$api$rest$$$function__121_edit_welcome_screen,
        mod_consts[321],
#if PYTHON_VERSION >= 0x300
        mod_consts[322],
#endif
        codeobj_7d7f01753630829fa482ebf47fbd2024,
        NULL,
#if PYTHON_VERSION >= 0x300
        kw_defaults,
        annotations,
#endif
        module_hikari$api$rest,
        mod_consts[320],
        NULL,
        0
    );


    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_hikari$api$rest$$$function__122_fetch_vanity_url(PyObject *annotations) {
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_hikari$api$rest$$$function__122_fetch_vanity_url,
        mod_consts[324],
#if PYTHON_VERSION >= 0x300
        mod_consts[325],
#endif
        codeobj_5052bc86c7530427f9e7f965949c58db,
        NULL,
#if PYTHON_VERSION >= 0x300
        NULL,
        annotations,
#endif
        module_hikari$api$rest,
        mod_consts[323],
        NULL,
        0
    );


    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_hikari$api$rest$$$function__123_create_template(PyObject *kw_defaults, PyObject *annotations) {
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_hikari$api$rest$$$function__123_create_template,
        mod_consts[327],
#if PYTHON_VERSION >= 0x300
        mod_consts[328],
#endif
        codeobj_49a2ca747b1f693086c26a3c7b50502f,
        NULL,
#if PYTHON_VERSION >= 0x300
        kw_defaults,
        annotations,
#endif
        module_hikari$api$rest,
        mod_consts[326],
        NULL,
        0
    );


    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_hikari$api$rest$$$function__124_create_guild_from_template(PyObject *kw_defaults, PyObject *annotations) {
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_hikari$api$rest$$$function__124_create_guild_from_template,
        mod_consts[330],
#if PYTHON_VERSION >= 0x300
        mod_consts[331],
#endif
        codeobj_96dfc981e71339bc0521217827aaa0e7,
        NULL,
#if PYTHON_VERSION >= 0x300
        kw_defaults,
        annotations,
#endif
        module_hikari$api$rest,
        mod_consts[329],
        NULL,
        0
    );


    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_hikari$api$rest$$$function__125_delete_template(PyObject *annotations) {
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_hikari$api$rest$$$function__125_delete_template,
        mod_consts[333],
#if PYTHON_VERSION >= 0x300
        mod_consts[334],
#endif
        codeobj_edf59de9273ddf1ce806b7723d4dafc9,
        NULL,
#if PYTHON_VERSION >= 0x300
        NULL,
        annotations,
#endif
        module_hikari$api$rest,
        mod_consts[332],
        NULL,
        0
    );


    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_hikari$api$rest$$$function__126_edit_template(PyObject *kw_defaults, PyObject *annotations) {
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_hikari$api$rest$$$function__126_edit_template,
        mod_consts[336],
#if PYTHON_VERSION >= 0x300
        mod_consts[337],
#endif
        codeobj_687e8c3e10ec2434c0e1610c5ca60b01,
        NULL,
#if PYTHON_VERSION >= 0x300
        kw_defaults,
        annotations,
#endif
        module_hikari$api$rest,
        mod_consts[335],
        NULL,
        0
    );


    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_hikari$api$rest$$$function__127_fetch_template(PyObject *annotations) {
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_hikari$api$rest$$$function__127_fetch_template,
        mod_consts[339],
#if PYTHON_VERSION >= 0x300
        mod_consts[340],
#endif
        codeobj_0b81a2ebe62b3844e214112a73fefc6e,
        NULL,
#if PYTHON_VERSION >= 0x300
        NULL,
        annotations,
#endif
        module_hikari$api$rest,
        mod_consts[338],
        NULL,
        0
    );


    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_hikari$api$rest$$$function__128_fetch_guild_templates(PyObject *annotations) {
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_hikari$api$rest$$$function__128_fetch_guild_templates,
        mod_consts[342],
#if PYTHON_VERSION >= 0x300
        mod_consts[343],
#endif
        codeobj_44182ab55be0bec741c65d777f4cfe71,
        NULL,
#if PYTHON_VERSION >= 0x300
        NULL,
        annotations,
#endif
        module_hikari$api$rest,
        mod_consts[341],
        NULL,
        0
    );


    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_hikari$api$rest$$$function__129_sync_guild_template(PyObject *annotations) {
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_hikari$api$rest$$$function__129_sync_guild_template,
        mod_consts[345],
#if PYTHON_VERSION >= 0x300
        mod_consts[346],
#endif
        codeobj_81bdb131e32de9c52c4392e95cb181a2,
        NULL,
#if PYTHON_VERSION >= 0x300
        NULL,
        annotations,
#endif
        module_hikari$api$rest,
        mod_consts[344],
        NULL,
        0
    );


    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_hikari$api$rest$$$function__12_edit_my_voice_state(PyObject *kw_defaults, PyObject *annotations) {
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_hikari$api$rest$$$function__12_edit_my_voice_state,
        mod_consts[19],
#if PYTHON_VERSION >= 0x300
        mod_consts[20],
#endif
        codeobj_6d7a8ac8b3cc128aa461e10c7269212c,
        NULL,
#if PYTHON_VERSION >= 0x300
        kw_defaults,
        annotations,
#endif
        module_hikari$api$rest,
        mod_consts[18],
        NULL,
        0
    );


    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_hikari$api$rest$$$function__130_command_builder(PyObject *annotations) {
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        NULL,
        mod_consts[701],
#if PYTHON_VERSION >= 0x300
        mod_consts[702],
#endif
        codeobj_5a03703e17e71a855c8c54c1608fa785,
        NULL,
#if PYTHON_VERSION >= 0x300
        NULL,
        annotations,
#endif
        module_hikari$api$rest,
        mod_consts[700],
        NULL,
        0
    );


    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_hikari$api$rest$$$function__131_slash_command_builder(PyObject *annotations) {
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        NULL,
        mod_consts[704],
#if PYTHON_VERSION >= 0x300
        mod_consts[705],
#endif
        codeobj_d75ee286b3add60a3cc472d0fcff5e04,
        NULL,
#if PYTHON_VERSION >= 0x300
        NULL,
        annotations,
#endif
        module_hikari$api$rest,
        mod_consts[703],
        NULL,
        0
    );


    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_hikari$api$rest$$$function__132_context_menu_command_builder(PyObject *annotations) {
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        NULL,
        mod_consts[708],
#if PYTHON_VERSION >= 0x300
        mod_consts[709],
#endif
        codeobj_cb9fdefa53037775142c55b0c6fd00f4,
        NULL,
#if PYTHON_VERSION >= 0x300
        NULL,
        annotations,
#endif
        module_hikari$api$rest,
        mod_consts[707],
        NULL,
        0
    );


    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_hikari$api$rest$$$function__133_fetch_application_command(PyObject *defaults, PyObject *annotations) {
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_hikari$api$rest$$$function__133_fetch_application_command,
        mod_consts[348],
#if PYTHON_VERSION >= 0x300
        mod_consts[349],
#endif
        codeobj_ba311f99d46acd00b1206631c059fe96,
        defaults,
#if PYTHON_VERSION >= 0x300
        NULL,
        annotations,
#endif
        module_hikari$api$rest,
        mod_consts[347],
        NULL,
        0
    );


    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_hikari$api$rest$$$function__134_fetch_application_commands(PyObject *defaults, PyObject *annotations) {
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_hikari$api$rest$$$function__134_fetch_application_commands,
        mod_consts[351],
#if PYTHON_VERSION >= 0x300
        mod_consts[352],
#endif
        codeobj_9c51094b7172a5c5db393be7f201e43e,
        defaults,
#if PYTHON_VERSION >= 0x300
        NULL,
        annotations,
#endif
        module_hikari$api$rest,
        mod_consts[350],
        NULL,
        0
    );


    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_hikari$api$rest$$$function__135_create_application_command(PyObject *defaults, PyObject *kw_defaults, PyObject *annotations) {
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_hikari$api$rest$$$function__135_create_application_command,
        mod_consts[354],
#if PYTHON_VERSION >= 0x300
        mod_consts[355],
#endif
        codeobj_5bda4d556e57a53f6b364e6d8209fa90,
        defaults,
#if PYTHON_VERSION >= 0x300
        kw_defaults,
        annotations,
#endif
        module_hikari$api$rest,
        mod_consts[353],
        NULL,
        0
    );


    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_hikari$api$rest$$$function__136_create_slash_command(PyObject *kw_defaults, PyObject *annotations) {
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_hikari$api$rest$$$function__136_create_slash_command,
        mod_consts[357],
#if PYTHON_VERSION >= 0x300
        mod_consts[358],
#endif
        codeobj_67885ec34cfe5c794df9b1bb57a1735f,
        NULL,
#if PYTHON_VERSION >= 0x300
        kw_defaults,
        annotations,
#endif
        module_hikari$api$rest,
        mod_consts[356],
        NULL,
        0
    );


    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_hikari$api$rest$$$function__137_create_context_menu_command(PyObject *kw_defaults, PyObject *annotations) {
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_hikari$api$rest$$$function__137_create_context_menu_command,
        mod_consts[360],
#if PYTHON_VERSION >= 0x300
        mod_consts[361],
#endif
        codeobj_e6e428f02370f7d65a3c77e9cc8932ac,
        NULL,
#if PYTHON_VERSION >= 0x300
        kw_defaults,
        annotations,
#endif
        module_hikari$api$rest,
        mod_consts[359],
        NULL,
        0
    );


    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_hikari$api$rest$$$function__138_set_application_commands(PyObject *defaults, PyObject *annotations) {
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_hikari$api$rest$$$function__138_set_application_commands,
        mod_consts[363],
#if PYTHON_VERSION >= 0x300
        mod_consts[364],
#endif
        codeobj_61e52a923ef10e5edbc1371948361d2f,
        defaults,
#if PYTHON_VERSION >= 0x300
        NULL,
        annotations,
#endif
        module_hikari$api$rest,
        mod_consts[362],
        NULL,
        0
    );


    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_hikari$api$rest$$$function__139_edit_application_command(PyObject *defaults, PyObject *kw_defaults, PyObject *annotations) {
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_hikari$api$rest$$$function__139_edit_application_command,
        mod_consts[366],
#if PYTHON_VERSION >= 0x300
        mod_consts[367],
#endif
        codeobj_bc8ea0df74490d43da889b08e74a02b8,
        defaults,
#if PYTHON_VERSION >= 0x300
        kw_defaults,
        annotations,
#endif
        module_hikari$api$rest,
        mod_consts[365],
        NULL,
        0
    );


    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_hikari$api$rest$$$function__13_edit_voice_state(PyObject *kw_defaults, PyObject *annotations) {
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_hikari$api$rest$$$function__13_edit_voice_state,
        mod_consts[22],
#if PYTHON_VERSION >= 0x300
        mod_consts[23],
#endif
        codeobj_66f4c634fd3531c33dfb8e9b2827d550,
        NULL,
#if PYTHON_VERSION >= 0x300
        kw_defaults,
        annotations,
#endif
        module_hikari$api$rest,
        mod_consts[21],
        NULL,
        0
    );


    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_hikari$api$rest$$$function__140_delete_application_command(PyObject *defaults, PyObject *annotations) {
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_hikari$api$rest$$$function__140_delete_application_command,
        mod_consts[369],
#if PYTHON_VERSION >= 0x300
        mod_consts[370],
#endif
        codeobj_d702236d8f737f29ae70a12e5a516434,
        defaults,
#if PYTHON_VERSION >= 0x300
        NULL,
        annotations,
#endif
        module_hikari$api$rest,
        mod_consts[368],
        NULL,
        0
    );


    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_hikari$api$rest$$$function__141_fetch_application_guild_commands_permissions(PyObject *annotations) {
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_hikari$api$rest$$$function__141_fetch_application_guild_commands_permissions,
        mod_consts[372],
#if PYTHON_VERSION >= 0x300
        mod_consts[373],
#endif
        codeobj_6e78df246d5c48b01ed235092320fffb,
        NULL,
#if PYTHON_VERSION >= 0x300
        NULL,
        annotations,
#endif
        module_hikari$api$rest,
        mod_consts[371],
        NULL,
        0
    );


    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_hikari$api$rest$$$function__142_fetch_application_command_permissions(PyObject *annotations) {
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_hikari$api$rest$$$function__142_fetch_application_command_permissions,
        mod_consts[375],
#if PYTHON_VERSION >= 0x300
        mod_consts[376],
#endif
        codeobj_ed9e9604447b8f482f5ab9203a34afa4,
        NULL,
#if PYTHON_VERSION >= 0x300
        NULL,
        annotations,
#endif
        module_hikari$api$rest,
        mod_consts[374],
        NULL,
        0
    );


    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_hikari$api$rest$$$function__143_set_application_guild_commands_permissions(PyObject *annotations) {
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_hikari$api$rest$$$function__143_set_application_guild_commands_permissions,
        mod_consts[378],
#if PYTHON_VERSION >= 0x300
        mod_consts[379],
#endif
        codeobj_84185994553865b34b5efdd7de67ba0a,
        NULL,
#if PYTHON_VERSION >= 0x300
        NULL,
        annotations,
#endif
        module_hikari$api$rest,
        mod_consts[377],
        NULL,
        0
    );


    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_hikari$api$rest$$$function__144_set_application_command_permissions(PyObject *annotations) {
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_hikari$api$rest$$$function__144_set_application_command_permissions,
        mod_consts[381],
#if PYTHON_VERSION >= 0x300
        mod_consts[382],
#endif
        codeobj_a2868142c34175a8858d585b546b7499,
        NULL,
#if PYTHON_VERSION >= 0x300
        NULL,
        annotations,
#endif
        module_hikari$api$rest,
        mod_consts[380],
        NULL,
        0
    );


    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_hikari$api$rest$$$function__145_interaction_deferred_builder(PyObject *annotations) {
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        NULL,
        mod_consts[726],
#if PYTHON_VERSION >= 0x300
        mod_consts[727],
#endif
        codeobj_a8961d64e8b0099b7704c8a06beb4d7a,
        NULL,
#if PYTHON_VERSION >= 0x300
        NULL,
        annotations,
#endif
        module_hikari$api$rest,
        mod_consts[725],
        NULL,
        0
    );


    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_hikari$api$rest$$$function__146_interaction_autocomplete_builder(PyObject *annotations) {
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        NULL,
        mod_consts[730],
#if PYTHON_VERSION >= 0x300
        mod_consts[731],
#endif
        codeobj_503d6540a65c336ba3afce23367ff4ea,
        NULL,
#if PYTHON_VERSION >= 0x300
        NULL,
        annotations,
#endif
        module_hikari$api$rest,
        mod_consts[729],
        NULL,
        0
    );


    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_hikari$api$rest$$$function__147_interaction_message_builder(PyObject *annotations) {
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        NULL,
        mod_consts[734],
#if PYTHON_VERSION >= 0x300
        mod_consts[735],
#endif
        codeobj_9bf28fb394d8904a97188da2986fe348,
        NULL,
#if PYTHON_VERSION >= 0x300
        NULL,
        annotations,
#endif
        module_hikari$api$rest,
        mod_consts[733],
        NULL,
        0
    );


    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_hikari$api$rest$$$function__148_fetch_interaction_response(PyObject *annotations) {
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_hikari$api$rest$$$function__148_fetch_interaction_response,
        mod_consts[384],
#if PYTHON_VERSION >= 0x300
        mod_consts[385],
#endif
        codeobj_7eda04693b599ad7b84817589d86ac9f,
        NULL,
#if PYTHON_VERSION >= 0x300
        NULL,
        annotations,
#endif
        module_hikari$api$rest,
        mod_consts[383],
        NULL,
        0
    );


    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_hikari$api$rest$$$function__149_create_interaction_response(PyObject *defaults, PyObject *kw_defaults, PyObject *annotations) {
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_hikari$api$rest$$$function__149_create_interaction_response,
        mod_consts[387],
#if PYTHON_VERSION >= 0x300
        mod_consts[388],
#endif
        codeobj_809e84358e6d962649ea9268ed569283,
        defaults,
#if PYTHON_VERSION >= 0x300
        kw_defaults,
        annotations,
#endif
        module_hikari$api$rest,
        mod_consts[386],
        NULL,
        0
    );


    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_hikari$api$rest$$$function__14_edit_permission_overwrites(PyObject *kw_defaults, PyObject *annotations) {
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_hikari$api$rest$$$function__14_edit_permission_overwrites,
        mod_consts[25],
#if PYTHON_VERSION >= 0x300
        mod_consts[26],
#endif
        codeobj_15ce8a3d530670d458af7373cf6fbb19,
        NULL,
#if PYTHON_VERSION >= 0x300
        kw_defaults,
        annotations,
#endif
        module_hikari$api$rest,
        mod_consts[24],
        NULL,
        0
    );


    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_hikari$api$rest$$$function__150_edit_interaction_response(PyObject *defaults, PyObject *kw_defaults, PyObject *annotations) {
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_hikari$api$rest$$$function__150_edit_interaction_response,
        mod_consts[390],
#if PYTHON_VERSION >= 0x300
        mod_consts[391],
#endif
        codeobj_7ec667c02a18fca3f0a3cc3a8ff7c3ec,
        defaults,
#if PYTHON_VERSION >= 0x300
        kw_defaults,
        annotations,
#endif
        module_hikari$api$rest,
        mod_consts[389],
        NULL,
        0
    );


    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_hikari$api$rest$$$function__151_delete_interaction_response(PyObject *annotations) {
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_hikari$api$rest$$$function__151_delete_interaction_response,
        mod_consts[393],
#if PYTHON_VERSION >= 0x300
        mod_consts[394],
#endif
        codeobj_2be1316070137c932a8bc1d29c537b01,
        NULL,
#if PYTHON_VERSION >= 0x300
        NULL,
        annotations,
#endif
        module_hikari$api$rest,
        mod_consts[392],
        NULL,
        0
    );


    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_hikari$api$rest$$$function__152_create_autocomplete_response(PyObject *annotations) {
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_hikari$api$rest$$$function__152_create_autocomplete_response,
        mod_consts[396],
#if PYTHON_VERSION >= 0x300
        mod_consts[397],
#endif
        codeobj_ec131d13f2837723addc4e5d122b3408,
        NULL,
#if PYTHON_VERSION >= 0x300
        NULL,
        annotations,
#endif
        module_hikari$api$rest,
        mod_consts[395],
        NULL,
        0
    );


    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_hikari$api$rest$$$function__153_build_action_row(PyObject *annotations) {
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        NULL,
        mod_consts[743],
#if PYTHON_VERSION >= 0x300
        mod_consts[744],
#endif
        codeobj_9b44f8a6f8f5db01cd6b2aa27458a5df,
        NULL,
#if PYTHON_VERSION >= 0x300
        NULL,
        annotations,
#endif
        module_hikari$api$rest,
        mod_consts[742],
        NULL,
        0
    );


    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_hikari$api$rest$$$function__154_fetch_scheduled_event(PyObject *annotations) {
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_hikari$api$rest$$$function__154_fetch_scheduled_event,
        mod_consts[399],
#if PYTHON_VERSION >= 0x300
        mod_consts[400],
#endif
        codeobj_6316c02615d76ac4fa4c4f4a94f98c2f,
        NULL,
#if PYTHON_VERSION >= 0x300
        NULL,
        annotations,
#endif
        module_hikari$api$rest,
        mod_consts[398],
        NULL,
        0
    );


    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_hikari$api$rest$$$function__155_fetch_scheduled_events(PyObject *annotations) {
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_hikari$api$rest$$$function__155_fetch_scheduled_events,
        mod_consts[402],
#if PYTHON_VERSION >= 0x300
        mod_consts[403],
#endif
        codeobj_b4909d4177445a7598bf0e970661e7bc,
        NULL,
#if PYTHON_VERSION >= 0x300
        NULL,
        annotations,
#endif
        module_hikari$api$rest,
        mod_consts[401],
        NULL,
        0
    );


    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_hikari$api$rest$$$function__156_create_stage_event(PyObject *kw_defaults, PyObject *annotations) {
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_hikari$api$rest$$$function__156_create_stage_event,
        mod_consts[405],
#if PYTHON_VERSION >= 0x300
        mod_consts[406],
#endif
        codeobj_c14228a11640df809168a49140f38b28,
        NULL,
#if PYTHON_VERSION >= 0x300
        kw_defaults,
        annotations,
#endif
        module_hikari$api$rest,
        mod_consts[404],
        NULL,
        0
    );


    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_hikari$api$rest$$$function__157_create_voice_event(PyObject *kw_defaults, PyObject *annotations) {
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_hikari$api$rest$$$function__157_create_voice_event,
        mod_consts[408],
#if PYTHON_VERSION >= 0x300
        mod_consts[409],
#endif
        codeobj_ab29f44c657c056b9a281e02adb179e8,
        NULL,
#if PYTHON_VERSION >= 0x300
        kw_defaults,
        annotations,
#endif
        module_hikari$api$rest,
        mod_consts[407],
        NULL,
        0
    );


    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_hikari$api$rest$$$function__158_create_external_event(PyObject *kw_defaults, PyObject *annotations) {
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_hikari$api$rest$$$function__158_create_external_event,
        mod_consts[411],
#if PYTHON_VERSION >= 0x300
        mod_consts[412],
#endif
        codeobj_03d62ee6529c757418777148f1c01630,
        NULL,
#if PYTHON_VERSION >= 0x300
        kw_defaults,
        annotations,
#endif
        module_hikari$api$rest,
        mod_consts[410],
        NULL,
        0
    );


    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_hikari$api$rest$$$function__159_edit_scheduled_event(PyObject *kw_defaults, PyObject *annotations) {
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_hikari$api$rest$$$function__159_edit_scheduled_event,
        mod_consts[414],
#if PYTHON_VERSION >= 0x300
        mod_consts[415],
#endif
        codeobj_56759f70da9f186d1b1d80e49a8c062f,
        NULL,
#if PYTHON_VERSION >= 0x300
        kw_defaults,
        annotations,
#endif
        module_hikari$api$rest,
        mod_consts[413],
        NULL,
        0
    );


    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_hikari$api$rest$$$function__15_edit_permission_overwrites(PyObject *kw_defaults, PyObject *annotations) {
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_hikari$api$rest$$$function__15_edit_permission_overwrites,
        mod_consts[25],
#if PYTHON_VERSION >= 0x300
        mod_consts[26],
#endif
        codeobj_d07e6291bdc309dd83bfdf05d0bf6f71,
        NULL,
#if PYTHON_VERSION >= 0x300
        kw_defaults,
        annotations,
#endif
        module_hikari$api$rest,
        mod_consts[27],
        NULL,
        0
    );


    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_hikari$api$rest$$$function__160_delete_scheduled_event(PyObject *annotations) {
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_hikari$api$rest$$$function__160_delete_scheduled_event,
        mod_consts[417],
#if PYTHON_VERSION >= 0x300
        mod_consts[418],
#endif
        codeobj_a62973ef75efa5d41f4ca8934be55fef,
        NULL,
#if PYTHON_VERSION >= 0x300
        NULL,
        annotations,
#endif
        module_hikari$api$rest,
        mod_consts[416],
        NULL,
        0
    );


    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_hikari$api$rest$$$function__161_fetch_scheduled_event_users(PyObject *kw_defaults, PyObject *annotations) {
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        NULL,
        mod_consts[763],
#if PYTHON_VERSION >= 0x300
        mod_consts[764],
#endif
        codeobj_4ae2fab4850752e0e6ce74522f50458d,
        NULL,
#if PYTHON_VERSION >= 0x300
        kw_defaults,
        annotations,
#endif
        module_hikari$api$rest,
        mod_consts[762],
        NULL,
        0
    );


    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_hikari$api$rest$$$function__16_edit_permission_overwrites(PyObject *kw_defaults, PyObject *annotations) {
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_hikari$api$rest$$$function__16_edit_permission_overwrites,
        mod_consts[25],
#if PYTHON_VERSION >= 0x300
        mod_consts[26],
#endif
        codeobj_b123d3753856d90ff010c7d7665460f7,
        NULL,
#if PYTHON_VERSION >= 0x300
        kw_defaults,
        annotations,
#endif
        module_hikari$api$rest,
        mod_consts[28],
        NULL,
        0
    );


    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_hikari$api$rest$$$function__17_delete_permission_overwrite(PyObject *annotations) {
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_hikari$api$rest$$$function__17_delete_permission_overwrite,
        mod_consts[30],
#if PYTHON_VERSION >= 0x300
        mod_consts[31],
#endif
        codeobj_c1e059673a38603153eaa38eae37353a,
        NULL,
#if PYTHON_VERSION >= 0x300
        NULL,
        annotations,
#endif
        module_hikari$api$rest,
        mod_consts[29],
        NULL,
        0
    );


    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_hikari$api$rest$$$function__18_fetch_channel_invites(PyObject *annotations) {
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_hikari$api$rest$$$function__18_fetch_channel_invites,
        mod_consts[33],
#if PYTHON_VERSION >= 0x300
        mod_consts[34],
#endif
        codeobj_892d739b78730b5f9d943817bbcf335c,
        NULL,
#if PYTHON_VERSION >= 0x300
        NULL,
        annotations,
#endif
        module_hikari$api$rest,
        mod_consts[32],
        NULL,
        0
    );


    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_hikari$api$rest$$$function__19_create_invite(PyObject *kw_defaults, PyObject *annotations) {
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_hikari$api$rest$$$function__19_create_invite,
        mod_consts[36],
#if PYTHON_VERSION >= 0x300
        mod_consts[37],
#endif
        codeobj_767f83eeec40354df8c763fa4489d51f,
        NULL,
#if PYTHON_VERSION >= 0x300
        kw_defaults,
        annotations,
#endif
        module_hikari$api$rest,
        mod_consts[35],
        NULL,
        0
    );


    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_hikari$api$rest$$$function__1_token_type(PyObject *annotations) {
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        NULL,
        mod_consts[460],
#if PYTHON_VERSION >= 0x300
        mod_consts[461],
#endif
        codeobj_6c0b925d29e6f67c920eff7a01a42634,
        NULL,
#if PYTHON_VERSION >= 0x300
        NULL,
        annotations,
#endif
        module_hikari$api$rest,
        mod_consts[459],
        NULL,
        0
    );


    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_hikari$api$rest$$$function__20_trigger_typing(PyObject *annotations) {
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        NULL,
        mod_consts[521],
#if PYTHON_VERSION >= 0x300
        mod_consts[522],
#endif
        codeobj_bcca91d182457884f0ef137e0755d5b4,
        NULL,
#if PYTHON_VERSION >= 0x300
        NULL,
        annotations,
#endif
        module_hikari$api$rest,
        mod_consts[520],
        NULL,
        0
    );


    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_hikari$api$rest$$$function__21_fetch_pins(PyObject *annotations) {
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_hikari$api$rest$$$function__21_fetch_pins,
        mod_consts[39],
#if PYTHON_VERSION >= 0x300
        mod_consts[40],
#endif
        codeobj_6890d6669b24051880ade97e5903d02a,
        NULL,
#if PYTHON_VERSION >= 0x300
        NULL,
        annotations,
#endif
        module_hikari$api$rest,
        mod_consts[38],
        NULL,
        0
    );


    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_hikari$api$rest$$$function__22_pin_message(PyObject *annotations) {
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_hikari$api$rest$$$function__22_pin_message,
        mod_consts[42],
#if PYTHON_VERSION >= 0x300
        mod_consts[43],
#endif
        codeobj_e02c07dc535f721d44993adb05cf68d1,
        NULL,
#if PYTHON_VERSION >= 0x300
        NULL,
        annotations,
#endif
        module_hikari$api$rest,
        mod_consts[41],
        NULL,
        0
    );


    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_hikari$api$rest$$$function__23_unpin_message(PyObject *annotations) {
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_hikari$api$rest$$$function__23_unpin_message,
        mod_consts[45],
#if PYTHON_VERSION >= 0x300
        mod_consts[46],
#endif
        codeobj_4b0df3364f3e1bcbca4bd177abb02aa3,
        NULL,
#if PYTHON_VERSION >= 0x300
        NULL,
        annotations,
#endif
        module_hikari$api$rest,
        mod_consts[44],
        NULL,
        0
    );


    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_hikari$api$rest$$$function__24_fetch_messages(PyObject *kw_defaults, PyObject *annotations) {
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        NULL,
        mod_consts[530],
#if PYTHON_VERSION >= 0x300
        mod_consts[531],
#endif
        codeobj_c43f3622966175a9df896aabfe0178c7,
        NULL,
#if PYTHON_VERSION >= 0x300
        kw_defaults,
        annotations,
#endif
        module_hikari$api$rest,
        mod_consts[529],
        NULL,
        0
    );


    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_hikari$api$rest$$$function__25_fetch_message(PyObject *annotations) {
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_hikari$api$rest$$$function__25_fetch_message,
        mod_consts[48],
#if PYTHON_VERSION >= 0x300
        mod_consts[49],
#endif
        codeobj_a6aa071612c3ccf585b57b9abcf3bded,
        NULL,
#if PYTHON_VERSION >= 0x300
        NULL,
        annotations,
#endif
        module_hikari$api$rest,
        mod_consts[47],
        NULL,
        0
    );


    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_hikari$api$rest$$$function__26_create_message(PyObject *defaults, PyObject *kw_defaults, PyObject *annotations) {
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_hikari$api$rest$$$function__26_create_message,
        mod_consts[51],
#if PYTHON_VERSION >= 0x300
        mod_consts[52],
#endif
        codeobj_047e2ec99402d774dfea4cdf299e1c3e,
        defaults,
#if PYTHON_VERSION >= 0x300
        kw_defaults,
        annotations,
#endif
        module_hikari$api$rest,
        mod_consts[50],
        NULL,
        0
    );


    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_hikari$api$rest$$$function__27_crosspost_message(PyObject *annotations) {
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_hikari$api$rest$$$function__27_crosspost_message,
        mod_consts[54],
#if PYTHON_VERSION >= 0x300
        mod_consts[55],
#endif
        codeobj_9637bd02e99b409ff1d86f4c8ad8277e,
        NULL,
#if PYTHON_VERSION >= 0x300
        NULL,
        annotations,
#endif
        module_hikari$api$rest,
        mod_consts[53],
        NULL,
        0
    );


    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_hikari$api$rest$$$function__28_edit_message(PyObject *defaults, PyObject *kw_defaults, PyObject *annotations) {
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_hikari$api$rest$$$function__28_edit_message,
        mod_consts[57],
#if PYTHON_VERSION >= 0x300
        mod_consts[58],
#endif
        codeobj_c40e2a6aa5050635853eda66b5668072,
        defaults,
#if PYTHON_VERSION >= 0x300
        kw_defaults,
        annotations,
#endif
        module_hikari$api$rest,
        mod_consts[56],
        NULL,
        0
    );


    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_hikari$api$rest$$$function__29_delete_message(PyObject *annotations) {
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_hikari$api$rest$$$function__29_delete_message,
        mod_consts[60],
#if PYTHON_VERSION >= 0x300
        mod_consts[61],
#endif
        codeobj_84ac493bc93d1770b2e4e186c670939e,
        NULL,
#if PYTHON_VERSION >= 0x300
        NULL,
        annotations,
#endif
        module_hikari$api$rest,
        mod_consts[59],
        NULL,
        0
    );


    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_hikari$api$rest$$$function__2_acquire(PyObject *annotations) {
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_hikari$api$rest$$$function__2_acquire,
        mod_consts[1],
#if PYTHON_VERSION >= 0x300
        mod_consts[2],
#endif
        codeobj_a3b66de07a5a56caeac07c4f5f6b2072,
        NULL,
#if PYTHON_VERSION >= 0x300
        NULL,
        annotations,
#endif
        module_hikari$api$rest,
        mod_consts[0],
        NULL,
        0
    );


    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_hikari$api$rest$$$function__30_delete_messages(PyObject *annotations) {
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_hikari$api$rest$$$function__30_delete_messages,
        mod_consts[63],
#if PYTHON_VERSION >= 0x300
        mod_consts[64],
#endif
        codeobj_1522b298d93f7d1a07c24ed0046572b3,
        NULL,
#if PYTHON_VERSION >= 0x300
        NULL,
        annotations,
#endif
        module_hikari$api$rest,
        mod_consts[62],
        NULL,
        0
    );


    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_hikari$api$rest$$$function__31_add_reaction(PyObject *defaults, PyObject *annotations) {
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_hikari$api$rest$$$function__31_add_reaction,
        mod_consts[66],
#if PYTHON_VERSION >= 0x300
        mod_consts[67],
#endif
        codeobj_ac7bcdd10415602e1bfc4f64aaa95484,
        defaults,
#if PYTHON_VERSION >= 0x300
        NULL,
        annotations,
#endif
        module_hikari$api$rest,
        mod_consts[65],
        NULL,
        0
    );


    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_hikari$api$rest$$$function__32_delete_my_reaction(PyObject *defaults, PyObject *annotations) {
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_hikari$api$rest$$$function__32_delete_my_reaction,
        mod_consts[69],
#if PYTHON_VERSION >= 0x300
        mod_consts[70],
#endif
        codeobj_f8f22833d3bb72cf4a61f8d6ceb03817,
        defaults,
#if PYTHON_VERSION >= 0x300
        NULL,
        annotations,
#endif
        module_hikari$api$rest,
        mod_consts[68],
        NULL,
        0
    );


    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_hikari$api$rest$$$function__33_delete_all_reactions_for_emoji(PyObject *defaults, PyObject *annotations) {
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_hikari$api$rest$$$function__33_delete_all_reactions_for_emoji,
        mod_consts[72],
#if PYTHON_VERSION >= 0x300
        mod_consts[73],
#endif
        codeobj_21f21cd388273606498c1eaa8c0d785c,
        defaults,
#if PYTHON_VERSION >= 0x300
        NULL,
        annotations,
#endif
        module_hikari$api$rest,
        mod_consts[71],
        NULL,
        0
    );


    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_hikari$api$rest$$$function__34_delete_reaction(PyObject *defaults, PyObject *annotations) {
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_hikari$api$rest$$$function__34_delete_reaction,
        mod_consts[75],
#if PYTHON_VERSION >= 0x300
        mod_consts[76],
#endif
        codeobj_d7b2eac5b38cc41eb3f05e85890e9bf7,
        defaults,
#if PYTHON_VERSION >= 0x300
        NULL,
        annotations,
#endif
        module_hikari$api$rest,
        mod_consts[74],
        NULL,
        0
    );


    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_hikari$api$rest$$$function__35_delete_all_reactions(PyObject *annotations) {
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_hikari$api$rest$$$function__35_delete_all_reactions,
        mod_consts[78],
#if PYTHON_VERSION >= 0x300
        mod_consts[79],
#endif
        codeobj_61a49502c9c457fcc45436725e3f5e94,
        NULL,
#if PYTHON_VERSION >= 0x300
        NULL,
        annotations,
#endif
        module_hikari$api$rest,
        mod_consts[77],
        NULL,
        0
    );


    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_hikari$api$rest$$$function__36_fetch_reactions_for_emoji(PyObject *defaults, PyObject *annotations) {
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        NULL,
        mod_consts[555],
#if PYTHON_VERSION >= 0x300
        mod_consts[556],
#endif
        codeobj_abb9569d8efb3255e82275ba2ccc153e,
        defaults,
#if PYTHON_VERSION >= 0x300
        NULL,
        annotations,
#endif
        module_hikari$api$rest,
        mod_consts[554],
        NULL,
        0
    );


    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_hikari$api$rest$$$function__37_create_webhook(PyObject *kw_defaults, PyObject *annotations) {
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_hikari$api$rest$$$function__37_create_webhook,
        mod_consts[81],
#if PYTHON_VERSION >= 0x300
        mod_consts[82],
#endif
        codeobj_32581de60cadc43f2b7b4dfd037bddfa,
        NULL,
#if PYTHON_VERSION >= 0x300
        kw_defaults,
        annotations,
#endif
        module_hikari$api$rest,
        mod_consts[80],
        NULL,
        0
    );


    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_hikari$api$rest$$$function__38_fetch_webhook(PyObject *kw_defaults, PyObject *annotations) {
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_hikari$api$rest$$$function__38_fetch_webhook,
        mod_consts[84],
#if PYTHON_VERSION >= 0x300
        mod_consts[85],
#endif
        codeobj_3ec2c4b987f49482becf480c5d7cfc03,
        NULL,
#if PYTHON_VERSION >= 0x300
        kw_defaults,
        annotations,
#endif
        module_hikari$api$rest,
        mod_consts[83],
        NULL,
        0
    );


    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_hikari$api$rest$$$function__39_fetch_channel_webhooks(PyObject *annotations) {
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_hikari$api$rest$$$function__39_fetch_channel_webhooks,
        mod_consts[87],
#if PYTHON_VERSION >= 0x300
        mod_consts[88],
#endif
        codeobj_7fec987c5efd78706d159b41f6a66254,
        NULL,
#if PYTHON_VERSION >= 0x300
        NULL,
        annotations,
#endif
        module_hikari$api$rest,
        mod_consts[86],
        NULL,
        0
    );


    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_hikari$api$rest$$$function__3_invalidate(PyObject *annotations) {
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        NULL,
        mod_consts[465],
#if PYTHON_VERSION >= 0x300
        mod_consts[466],
#endif
        codeobj_7931c42c07e0d2d5a43e627bdc83d325,
        NULL,
#if PYTHON_VERSION >= 0x300
        NULL,
        annotations,
#endif
        module_hikari$api$rest,
        mod_consts[464],
        NULL,
        0
    );


    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_hikari$api$rest$$$function__40_fetch_guild_webhooks(PyObject *annotations) {
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_hikari$api$rest$$$function__40_fetch_guild_webhooks,
        mod_consts[90],
#if PYTHON_VERSION >= 0x300
        mod_consts[91],
#endif
        codeobj_897da39a3921a4fb20f81c67aebf9615,
        NULL,
#if PYTHON_VERSION >= 0x300
        NULL,
        annotations,
#endif
        module_hikari$api$rest,
        mod_consts[89],
        NULL,
        0
    );


    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_hikari$api$rest$$$function__41_edit_webhook(PyObject *kw_defaults, PyObject *annotations) {
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_hikari$api$rest$$$function__41_edit_webhook,
        mod_consts[93],
#if PYTHON_VERSION >= 0x300
        mod_consts[94],
#endif
        codeobj_ab6ce3071043fa65a772b73f31b733d2,
        NULL,
#if PYTHON_VERSION >= 0x300
        kw_defaults,
        annotations,
#endif
        module_hikari$api$rest,
        mod_consts[92],
        NULL,
        0
    );


    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_hikari$api$rest$$$function__42_delete_webhook(PyObject *kw_defaults, PyObject *annotations) {
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_hikari$api$rest$$$function__42_delete_webhook,
        mod_consts[96],
#if PYTHON_VERSION >= 0x300
        mod_consts[97],
#endif
        codeobj_f175bac38463ebaf7f6b7020a9f501eb,
        NULL,
#if PYTHON_VERSION >= 0x300
        kw_defaults,
        annotations,
#endif
        module_hikari$api$rest,
        mod_consts[95],
        NULL,
        0
    );


    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_hikari$api$rest$$$function__43_execute_webhook(PyObject *defaults, PyObject *kw_defaults, PyObject *annotations) {
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_hikari$api$rest$$$function__43_execute_webhook,
        mod_consts[99],
#if PYTHON_VERSION >= 0x300
        mod_consts[100],
#endif
        codeobj_740e80e9d704456a9c1a4a09c2019ff4,
        defaults,
#if PYTHON_VERSION >= 0x300
        kw_defaults,
        annotations,
#endif
        module_hikari$api$rest,
        mod_consts[98],
        NULL,
        0
    );


    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_hikari$api$rest$$$function__44_fetch_webhook_message(PyObject *annotations) {
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_hikari$api$rest$$$function__44_fetch_webhook_message,
        mod_consts[102],
#if PYTHON_VERSION >= 0x300
        mod_consts[103],
#endif
        codeobj_3f78627ed1169b7991275a5b616d81a3,
        NULL,
#if PYTHON_VERSION >= 0x300
        NULL,
        annotations,
#endif
        module_hikari$api$rest,
        mod_consts[101],
        NULL,
        0
    );


    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_hikari$api$rest$$$function__45_edit_webhook_message(PyObject *defaults, PyObject *kw_defaults, PyObject *annotations) {
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_hikari$api$rest$$$function__45_edit_webhook_message,
        mod_consts[105],
#if PYTHON_VERSION >= 0x300
        mod_consts[106],
#endif
        codeobj_6ecc85b2a92137e7d96b51706f98b305,
        defaults,
#if PYTHON_VERSION >= 0x300
        kw_defaults,
        annotations,
#endif
        module_hikari$api$rest,
        mod_consts[104],
        NULL,
        0
    );


    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_hikari$api$rest$$$function__46_delete_webhook_message(PyObject *annotations) {
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_hikari$api$rest$$$function__46_delete_webhook_message,
        mod_consts[108],
#if PYTHON_VERSION >= 0x300
        mod_consts[109],
#endif
        codeobj_3794b902c3f3b912d5c9431679faf993,
        NULL,
#if PYTHON_VERSION >= 0x300
        NULL,
        annotations,
#endif
        module_hikari$api$rest,
        mod_consts[107],
        NULL,
        0
    );


    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_hikari$api$rest$$$function__47_fetch_gateway_url(PyObject *annotations) {
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_hikari$api$rest$$$function__47_fetch_gateway_url,
        mod_consts[111],
#if PYTHON_VERSION >= 0x300
        mod_consts[112],
#endif
        codeobj_9a178547a7eb03437641e09b597ccba0,
        NULL,
#if PYTHON_VERSION >= 0x300
        NULL,
        annotations,
#endif
        module_hikari$api$rest,
        mod_consts[110],
        NULL,
        0
    );


    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_hikari$api$rest$$$function__48_fetch_gateway_bot_info(PyObject *annotations) {
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_hikari$api$rest$$$function__48_fetch_gateway_bot_info,
        mod_consts[114],
#if PYTHON_VERSION >= 0x300
        mod_consts[115],
#endif
        codeobj_1b8b30e8f0275ccaf868189a8ed3f51d,
        NULL,
#if PYTHON_VERSION >= 0x300
        NULL,
        annotations,
#endif
        module_hikari$api$rest,
        mod_consts[113],
        NULL,
        0
    );


    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_hikari$api$rest$$$function__49_fetch_invite(PyObject *annotations) {
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_hikari$api$rest$$$function__49_fetch_invite,
        mod_consts[117],
#if PYTHON_VERSION >= 0x300
        mod_consts[118],
#endif
        codeobj_1cfe50d4370a8a818a27570fe3dd1f60,
        NULL,
#if PYTHON_VERSION >= 0x300
        NULL,
        annotations,
#endif
        module_hikari$api$rest,
        mod_consts[116],
        NULL,
        0
    );


    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_hikari$api$rest$$$function__4_is_alive(PyObject *annotations) {
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        NULL,
        mod_consts[473],
#if PYTHON_VERSION >= 0x300
        mod_consts[474],
#endif
        codeobj_192e3ea626b9d275dbd02aa153fccda6,
        NULL,
#if PYTHON_VERSION >= 0x300
        NULL,
        annotations,
#endif
        module_hikari$api$rest,
        mod_consts[472],
        NULL,
        0
    );


    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_hikari$api$rest$$$function__50_delete_invite(PyObject *annotations) {
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_hikari$api$rest$$$function__50_delete_invite,
        mod_consts[120],
#if PYTHON_VERSION >= 0x300
        mod_consts[121],
#endif
        codeobj_a7cff8c269d3d4bb6d35ad3514fa1ef1,
        NULL,
#if PYTHON_VERSION >= 0x300
        NULL,
        annotations,
#endif
        module_hikari$api$rest,
        mod_consts[119],
        NULL,
        0
    );


    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_hikari$api$rest$$$function__51_fetch_my_user(PyObject *annotations) {
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_hikari$api$rest$$$function__51_fetch_my_user,
        mod_consts[123],
#if PYTHON_VERSION >= 0x300
        mod_consts[124],
#endif
        codeobj_f7f835fee11a2ba50d39fdcf49417e24,
        NULL,
#if PYTHON_VERSION >= 0x300
        NULL,
        annotations,
#endif
        module_hikari$api$rest,
        mod_consts[122],
        NULL,
        0
    );


    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_hikari$api$rest$$$function__52_edit_my_user(PyObject *kw_defaults, PyObject *annotations) {
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_hikari$api$rest$$$function__52_edit_my_user,
        mod_consts[126],
#if PYTHON_VERSION >= 0x300
        mod_consts[127],
#endif
        codeobj_d1a9c3d728bb5f40e935c92a1bda0a4b,
        NULL,
#if PYTHON_VERSION >= 0x300
        kw_defaults,
        annotations,
#endif
        module_hikari$api$rest,
        mod_consts[125],
        NULL,
        0
    );


    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_hikari$api$rest$$$function__53_fetch_my_connections(PyObject *annotations) {
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_hikari$api$rest$$$function__53_fetch_my_connections,
        mod_consts[129],
#if PYTHON_VERSION >= 0x300
        mod_consts[130],
#endif
        codeobj_ba1ec6f1e1d723bafa837c4ba4beb49b,
        NULL,
#if PYTHON_VERSION >= 0x300
        NULL,
        annotations,
#endif
        module_hikari$api$rest,
        mod_consts[128],
        NULL,
        0
    );


    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_hikari$api$rest$$$function__54_fetch_my_guilds(PyObject *kw_defaults, PyObject *annotations) {
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        NULL,
        mod_consts[582],
#if PYTHON_VERSION >= 0x300
        mod_consts[583],
#endif
        codeobj_72bd5001662f78b8bb6f4ef730616043,
        NULL,
#if PYTHON_VERSION >= 0x300
        kw_defaults,
        annotations,
#endif
        module_hikari$api$rest,
        mod_consts[581],
        NULL,
        0
    );


    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_hikari$api$rest$$$function__55_leave_guild(PyObject *annotations) {
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_hikari$api$rest$$$function__55_leave_guild,
        mod_consts[132],
#if PYTHON_VERSION >= 0x300
        mod_consts[133],
#endif
        codeobj_54c4d39f47ffa80ae28f5f1176582446,
        NULL,
#if PYTHON_VERSION >= 0x300
        NULL,
        annotations,
#endif
        module_hikari$api$rest,
        mod_consts[131],
        NULL,
        0
    );


    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_hikari$api$rest$$$function__56_create_dm_channel(PyObject *annotations) {
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_hikari$api$rest$$$function__56_create_dm_channel,
        mod_consts[135],
#if PYTHON_VERSION >= 0x300
        mod_consts[136],
#endif
        codeobj_7a4b026e3f6658c2da5a749149872aa6,
        NULL,
#if PYTHON_VERSION >= 0x300
        NULL,
        annotations,
#endif
        module_hikari$api$rest,
        mod_consts[134],
        NULL,
        0
    );


    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_hikari$api$rest$$$function__57_fetch_application(PyObject *annotations) {
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_hikari$api$rest$$$function__57_fetch_application,
        mod_consts[138],
#if PYTHON_VERSION >= 0x300
        mod_consts[139],
#endif
        codeobj_1e700c87f1dae51368614adf81318717,
        NULL,
#if PYTHON_VERSION >= 0x300
        NULL,
        annotations,
#endif
        module_hikari$api$rest,
        mod_consts[137],
        NULL,
        0
    );


    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_hikari$api$rest$$$function__58_fetch_authorization(PyObject *annotations) {
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_hikari$api$rest$$$function__58_fetch_authorization,
        mod_consts[141],
#if PYTHON_VERSION >= 0x300
        mod_consts[142],
#endif
        codeobj_b3a4e0500c34d0c9bc55478f050e5d98,
        NULL,
#if PYTHON_VERSION >= 0x300
        NULL,
        annotations,
#endif
        module_hikari$api$rest,
        mod_consts[140],
        NULL,
        0
    );


    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_hikari$api$rest$$$function__59_authorize_client_credentials_token(PyObject *annotations) {
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_hikari$api$rest$$$function__59_authorize_client_credentials_token,
        mod_consts[144],
#if PYTHON_VERSION >= 0x300
        mod_consts[145],
#endif
        codeobj_a3b80c10bdf5d2012014f19665cea711,
        NULL,
#if PYTHON_VERSION >= 0x300
        NULL,
        annotations,
#endif
        module_hikari$api$rest,
        mod_consts[143],
        NULL,
        0
    );


    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_hikari$api$rest$$$function__5_entity_factory(PyObject *annotations) {
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        NULL,
        mod_consts[477],
#if PYTHON_VERSION >= 0x300
        mod_consts[478],
#endif
        codeobj_cff92b81f13f66788bdc5087de6f07bb,
        NULL,
#if PYTHON_VERSION >= 0x300
        NULL,
        annotations,
#endif
        module_hikari$api$rest,
        mod_consts[476],
        NULL,
        0
    );


    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_hikari$api$rest$$$function__60_authorize_access_token(PyObject *annotations) {
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_hikari$api$rest$$$function__60_authorize_access_token,
        mod_consts[147],
#if PYTHON_VERSION >= 0x300
        mod_consts[148],
#endif
        codeobj_32467e33cd28d3358caa3d9f6420fea5,
        NULL,
#if PYTHON_VERSION >= 0x300
        NULL,
        annotations,
#endif
        module_hikari$api$rest,
        mod_consts[146],
        NULL,
        0
    );


    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_hikari$api$rest$$$function__61_refresh_access_token(PyObject *kw_defaults, PyObject *annotations) {
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_hikari$api$rest$$$function__61_refresh_access_token,
        mod_consts[150],
#if PYTHON_VERSION >= 0x300
        mod_consts[151],
#endif
        codeobj_e349be883605ec25793c958e80d35ba0,
        NULL,
#if PYTHON_VERSION >= 0x300
        kw_defaults,
        annotations,
#endif
        module_hikari$api$rest,
        mod_consts[149],
        NULL,
        0
    );


    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_hikari$api$rest$$$function__62_revoke_access_token(PyObject *annotations) {
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_hikari$api$rest$$$function__62_revoke_access_token,
        mod_consts[153],
#if PYTHON_VERSION >= 0x300
        mod_consts[154],
#endif
        codeobj_d71591a07208a7d80804c9be3581fa8f,
        NULL,
#if PYTHON_VERSION >= 0x300
        NULL,
        annotations,
#endif
        module_hikari$api$rest,
        mod_consts[152],
        NULL,
        0
    );


    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_hikari$api$rest$$$function__63_add_user_to_guild(PyObject *kw_defaults, PyObject *annotations) {
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_hikari$api$rest$$$function__63_add_user_to_guild,
        mod_consts[156],
#if PYTHON_VERSION >= 0x300
        mod_consts[157],
#endif
        codeobj_f7ad739545259fd887ee27d5abe8dfc5,
        NULL,
#if PYTHON_VERSION >= 0x300
        kw_defaults,
        annotations,
#endif
        module_hikari$api$rest,
        mod_consts[155],
        NULL,
        0
    );


    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_hikari$api$rest$$$function__64_fetch_voice_regions(PyObject *annotations) {
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_hikari$api$rest$$$function__64_fetch_voice_regions,
        mod_consts[159],
#if PYTHON_VERSION >= 0x300
        mod_consts[160],
#endif
        codeobj_38a4907eea8f3097aa485e442ef45566,
        NULL,
#if PYTHON_VERSION >= 0x300
        NULL,
        annotations,
#endif
        module_hikari$api$rest,
        mod_consts[158],
        NULL,
        0
    );


    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_hikari$api$rest$$$function__65_fetch_user(PyObject *annotations) {
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_hikari$api$rest$$$function__65_fetch_user,
        mod_consts[162],
#if PYTHON_VERSION >= 0x300
        mod_consts[163],
#endif
        codeobj_21257f50bcc408d47f2b7c8ad85ae262,
        NULL,
#if PYTHON_VERSION >= 0x300
        NULL,
        annotations,
#endif
        module_hikari$api$rest,
        mod_consts[161],
        NULL,
        0
    );


    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_hikari$api$rest$$$function__66_fetch_audit_log(PyObject *kw_defaults, PyObject *annotations) {
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        NULL,
        mod_consts[605],
#if PYTHON_VERSION >= 0x300
        mod_consts[606],
#endif
        codeobj_85d832edea87824ef43e543419803e0e,
        NULL,
#if PYTHON_VERSION >= 0x300
        kw_defaults,
        annotations,
#endif
        module_hikari$api$rest,
        mod_consts[604],
        NULL,
        0
    );


    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_hikari$api$rest$$$function__67_fetch_emoji(PyObject *annotations) {
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_hikari$api$rest$$$function__67_fetch_emoji,
        mod_consts[165],
#if PYTHON_VERSION >= 0x300
        mod_consts[166],
#endif
        codeobj_48f65a01e4048f6d2bfef10fdc0bc7ef,
        NULL,
#if PYTHON_VERSION >= 0x300
        NULL,
        annotations,
#endif
        module_hikari$api$rest,
        mod_consts[164],
        NULL,
        0
    );


    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_hikari$api$rest$$$function__68_fetch_guild_emojis(PyObject *annotations) {
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_hikari$api$rest$$$function__68_fetch_guild_emojis,
        mod_consts[168],
#if PYTHON_VERSION >= 0x300
        mod_consts[169],
#endif
        codeobj_0c318e3d7579272de92091dec1b02e7b,
        NULL,
#if PYTHON_VERSION >= 0x300
        NULL,
        annotations,
#endif
        module_hikari$api$rest,
        mod_consts[167],
        NULL,
        0
    );


    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_hikari$api$rest$$$function__69_create_emoji(PyObject *kw_defaults, PyObject *annotations) {
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_hikari$api$rest$$$function__69_create_emoji,
        mod_consts[171],
#if PYTHON_VERSION >= 0x300
        mod_consts[172],
#endif
        codeobj_20827cf562e1f90f7639c4c86616d85d,
        NULL,
#if PYTHON_VERSION >= 0x300
        kw_defaults,
        annotations,
#endif
        module_hikari$api$rest,
        mod_consts[170],
        NULL,
        0
    );


    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_hikari$api$rest$$$function__6_token_type(PyObject *annotations) {
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        NULL,
        mod_consts[460],
#if PYTHON_VERSION >= 0x300
        mod_consts[481],
#endif
        codeobj_0187f19cf2c55c79d079ab7595edb960,
        NULL,
#if PYTHON_VERSION >= 0x300
        NULL,
        annotations,
#endif
        module_hikari$api$rest,
        mod_consts[480],
        NULL,
        0
    );


    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_hikari$api$rest$$$function__70_edit_emoji(PyObject *kw_defaults, PyObject *annotations) {
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_hikari$api$rest$$$function__70_edit_emoji,
        mod_consts[174],
#if PYTHON_VERSION >= 0x300
        mod_consts[175],
#endif
        codeobj_a5b60d65171b73bfba9097d900ee5da7,
        NULL,
#if PYTHON_VERSION >= 0x300
        kw_defaults,
        annotations,
#endif
        module_hikari$api$rest,
        mod_consts[173],
        NULL,
        0
    );


    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_hikari$api$rest$$$function__71_delete_emoji(PyObject *kw_defaults, PyObject *annotations) {
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_hikari$api$rest$$$function__71_delete_emoji,
        mod_consts[177],
#if PYTHON_VERSION >= 0x300
        mod_consts[178],
#endif
        codeobj_de12df71da1209e15e5aeca52e934193,
        NULL,
#if PYTHON_VERSION >= 0x300
        kw_defaults,
        annotations,
#endif
        module_hikari$api$rest,
        mod_consts[176],
        NULL,
        0
    );


    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_hikari$api$rest$$$function__72_fetch_available_sticker_packs(PyObject *annotations) {
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_hikari$api$rest$$$function__72_fetch_available_sticker_packs,
        mod_consts[180],
#if PYTHON_VERSION >= 0x300
        mod_consts[181],
#endif
        codeobj_0b6d0220a08979869f0a012939b4b77a,
        NULL,
#if PYTHON_VERSION >= 0x300
        NULL,
        annotations,
#endif
        module_hikari$api$rest,
        mod_consts[179],
        NULL,
        0
    );


    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_hikari$api$rest$$$function__73_fetch_sticker(PyObject *annotations) {
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_hikari$api$rest$$$function__73_fetch_sticker,
        mod_consts[183],
#if PYTHON_VERSION >= 0x300
        mod_consts[184],
#endif
        codeobj_db5e2fbdef3512cdeead2e78f1d550e7,
        NULL,
#if PYTHON_VERSION >= 0x300
        NULL,
        annotations,
#endif
        module_hikari$api$rest,
        mod_consts[182],
        NULL,
        0
    );


    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_hikari$api$rest$$$function__74_fetch_guild_stickers(PyObject *annotations) {
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_hikari$api$rest$$$function__74_fetch_guild_stickers,
        mod_consts[186],
#if PYTHON_VERSION >= 0x300
        mod_consts[187],
#endif
        codeobj_da885abe69f64210f2ff5c028e5ccd26,
        NULL,
#if PYTHON_VERSION >= 0x300
        NULL,
        annotations,
#endif
        module_hikari$api$rest,
        mod_consts[185],
        NULL,
        0
    );


    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_hikari$api$rest$$$function__75_fetch_guild_sticker(PyObject *annotations) {
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_hikari$api$rest$$$function__75_fetch_guild_sticker,
        mod_consts[189],
#if PYTHON_VERSION >= 0x300
        mod_consts[190],
#endif
        codeobj_95dc29580b8b5a29e1de025f1a9194a2,
        NULL,
#if PYTHON_VERSION >= 0x300
        NULL,
        annotations,
#endif
        module_hikari$api$rest,
        mod_consts[188],
        NULL,
        0
    );


    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_hikari$api$rest$$$function__76_create_sticker(PyObject *kw_defaults, PyObject *annotations) {
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_hikari$api$rest$$$function__76_create_sticker,
        mod_consts[192],
#if PYTHON_VERSION >= 0x300
        mod_consts[193],
#endif
        codeobj_6bc646cda82f339b5a37035a5de12a5a,
        NULL,
#if PYTHON_VERSION >= 0x300
        kw_defaults,
        annotations,
#endif
        module_hikari$api$rest,
        mod_consts[191],
        NULL,
        0
    );


    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_hikari$api$rest$$$function__77_edit_sticker(PyObject *kw_defaults, PyObject *annotations) {
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_hikari$api$rest$$$function__77_edit_sticker,
        mod_consts[195],
#if PYTHON_VERSION >= 0x300
        mod_consts[196],
#endif
        codeobj_43593321256b83bcc2a2e1cfcd1c76ba,
        NULL,
#if PYTHON_VERSION >= 0x300
        kw_defaults,
        annotations,
#endif
        module_hikari$api$rest,
        mod_consts[194],
        NULL,
        0
    );


    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_hikari$api$rest$$$function__78_delete_sticker(PyObject *kw_defaults, PyObject *annotations) {
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_hikari$api$rest$$$function__78_delete_sticker,
        mod_consts[198],
#if PYTHON_VERSION >= 0x300
        mod_consts[199],
#endif
        codeobj_409e13cb5f1475225f2cbc531c685ea2,
        NULL,
#if PYTHON_VERSION >= 0x300
        kw_defaults,
        annotations,
#endif
        module_hikari$api$rest,
        mod_consts[197],
        NULL,
        0
    );


    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_hikari$api$rest$$$function__79_guild_builder(PyObject *annotations) {
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        NULL,
        mod_consts[623],
#if PYTHON_VERSION >= 0x300
        mod_consts[624],
#endif
        codeobj_f40deb0035a1b642c13dfde4396dde8c,
        NULL,
#if PYTHON_VERSION >= 0x300
        NULL,
        annotations,
#endif
        module_hikari$api$rest,
        mod_consts[622],
        NULL,
        0
    );


    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_hikari$api$rest$$$function__7_close(PyObject *annotations) {
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_hikari$api$rest$$$function__7_close,
        mod_consts[4],
#if PYTHON_VERSION >= 0x300
        mod_consts[5],
#endif
        codeobj_db4161e2ae125e244e16b35b876d55a6,
        NULL,
#if PYTHON_VERSION >= 0x300
        NULL,
        annotations,
#endif
        module_hikari$api$rest,
        mod_consts[3],
        NULL,
        0
    );


    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_hikari$api$rest$$$function__80_fetch_guild(PyObject *annotations) {
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_hikari$api$rest$$$function__80_fetch_guild,
        mod_consts[201],
#if PYTHON_VERSION >= 0x300
        mod_consts[202],
#endif
        codeobj_9fa1bb76afe2555b4f588c1284a2fcd4,
        NULL,
#if PYTHON_VERSION >= 0x300
        NULL,
        annotations,
#endif
        module_hikari$api$rest,
        mod_consts[200],
        NULL,
        0
    );


    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_hikari$api$rest$$$function__81_fetch_guild_preview(PyObject *annotations) {
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_hikari$api$rest$$$function__81_fetch_guild_preview,
        mod_consts[204],
#if PYTHON_VERSION >= 0x300
        mod_consts[205],
#endif
        codeobj_b12e50ac6a955e7d9814a32bcafb352f,
        NULL,
#if PYTHON_VERSION >= 0x300
        NULL,
        annotations,
#endif
        module_hikari$api$rest,
        mod_consts[203],
        NULL,
        0
    );


    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_hikari$api$rest$$$function__82_edit_guild(PyObject *kw_defaults, PyObject *annotations) {
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_hikari$api$rest$$$function__82_edit_guild,
        mod_consts[207],
#if PYTHON_VERSION >= 0x300
        mod_consts[208],
#endif
        codeobj_b8572edead035d292c542034f790156d,
        NULL,
#if PYTHON_VERSION >= 0x300
        kw_defaults,
        annotations,
#endif
        module_hikari$api$rest,
        mod_consts[206],
        NULL,
        0
    );


    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_hikari$api$rest$$$function__83_delete_guild(PyObject *annotations) {
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_hikari$api$rest$$$function__83_delete_guild,
        mod_consts[210],
#if PYTHON_VERSION >= 0x300
        mod_consts[211],
#endif
        codeobj_c04fe507f41b0ac3283d08bde3e7eb5e,
        NULL,
#if PYTHON_VERSION >= 0x300
        NULL,
        annotations,
#endif
        module_hikari$api$rest,
        mod_consts[209],
        NULL,
        0
    );


    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_hikari$api$rest$$$function__84_fetch_guild_channels(PyObject *annotations) {
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_hikari$api$rest$$$function__84_fetch_guild_channels,
        mod_consts[213],
#if PYTHON_VERSION >= 0x300
        mod_consts[214],
#endif
        codeobj_f02c9c1a79dfd00d4112cd96a363cef4,
        NULL,
#if PYTHON_VERSION >= 0x300
        NULL,
        annotations,
#endif
        module_hikari$api$rest,
        mod_consts[212],
        NULL,
        0
    );


    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_hikari$api$rest$$$function__85_create_guild_text_channel(PyObject *kw_defaults, PyObject *annotations) {
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_hikari$api$rest$$$function__85_create_guild_text_channel,
        mod_consts[216],
#if PYTHON_VERSION >= 0x300
        mod_consts[217],
#endif
        codeobj_3b902179d941a30fc767e6b081474834,
        NULL,
#if PYTHON_VERSION >= 0x300
        kw_defaults,
        annotations,
#endif
        module_hikari$api$rest,
        mod_consts[215],
        NULL,
        0
    );


    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_hikari$api$rest$$$function__86_create_guild_news_channel(PyObject *kw_defaults, PyObject *annotations) {
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_hikari$api$rest$$$function__86_create_guild_news_channel,
        mod_consts[219],
#if PYTHON_VERSION >= 0x300
        mod_consts[220],
#endif
        codeobj_fcb3282dfce94e0118b54ed974ea5dca,
        NULL,
#if PYTHON_VERSION >= 0x300
        kw_defaults,
        annotations,
#endif
        module_hikari$api$rest,
        mod_consts[218],
        NULL,
        0
    );


    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_hikari$api$rest$$$function__87_create_guild_voice_channel(PyObject *kw_defaults, PyObject *annotations) {
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_hikari$api$rest$$$function__87_create_guild_voice_channel,
        mod_consts[222],
#if PYTHON_VERSION >= 0x300
        mod_consts[223],
#endif
        codeobj_404b46a06bf1bbaeece956d0adc5120e,
        NULL,
#if PYTHON_VERSION >= 0x300
        kw_defaults,
        annotations,
#endif
        module_hikari$api$rest,
        mod_consts[221],
        NULL,
        0
    );


    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_hikari$api$rest$$$function__88_create_guild_stage_channel(PyObject *kw_defaults, PyObject *annotations) {
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_hikari$api$rest$$$function__88_create_guild_stage_channel,
        mod_consts[225],
#if PYTHON_VERSION >= 0x300
        mod_consts[226],
#endif
        codeobj_bacc75bdb9795bb19510517993550d92,
        NULL,
#if PYTHON_VERSION >= 0x300
        kw_defaults,
        annotations,
#endif
        module_hikari$api$rest,
        mod_consts[224],
        NULL,
        0
    );


    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_hikari$api$rest$$$function__89_create_guild_category(PyObject *kw_defaults, PyObject *annotations) {
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_hikari$api$rest$$$function__89_create_guild_category,
        mod_consts[228],
#if PYTHON_VERSION >= 0x300
        mod_consts[229],
#endif
        codeobj_4371d9d20ead35c704a0e86e924d663a,
        NULL,
#if PYTHON_VERSION >= 0x300
        kw_defaults,
        annotations,
#endif
        module_hikari$api$rest,
        mod_consts[227],
        NULL,
        0
    );


    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_hikari$api$rest$$$function__8_fetch_channel(PyObject *annotations) {
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_hikari$api$rest$$$function__8_fetch_channel,
        mod_consts[7],
#if PYTHON_VERSION >= 0x300
        mod_consts[8],
#endif
        codeobj_b717f6be8a19f27f2c33558c9a709ffe,
        NULL,
#if PYTHON_VERSION >= 0x300
        NULL,
        annotations,
#endif
        module_hikari$api$rest,
        mod_consts[6],
        NULL,
        0
    );


    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_hikari$api$rest$$$function__90_reposition_channels(PyObject *annotations) {
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_hikari$api$rest$$$function__90_reposition_channels,
        mod_consts[231],
#if PYTHON_VERSION >= 0x300
        mod_consts[232],
#endif
        codeobj_6034723cc1f266b6ddd3d11b6b282685,
        NULL,
#if PYTHON_VERSION >= 0x300
        NULL,
        annotations,
#endif
        module_hikari$api$rest,
        mod_consts[230],
        NULL,
        0
    );


    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_hikari$api$rest$$$function__91_fetch_member(PyObject *annotations) {
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_hikari$api$rest$$$function__91_fetch_member,
        mod_consts[234],
#if PYTHON_VERSION >= 0x300
        mod_consts[235],
#endif
        codeobj_31b7bb0b4f6644f676934d3da23556f7,
        NULL,
#if PYTHON_VERSION >= 0x300
        NULL,
        annotations,
#endif
        module_hikari$api$rest,
        mod_consts[233],
        NULL,
        0
    );


    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_hikari$api$rest$$$function__92_fetch_members(PyObject *annotations) {
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        NULL,
        mod_consts[652],
#if PYTHON_VERSION >= 0x300
        mod_consts[653],
#endif
        codeobj_1748bb80dc27bac8e0d68641a4b9032a,
        NULL,
#if PYTHON_VERSION >= 0x300
        NULL,
        annotations,
#endif
        module_hikari$api$rest,
        mod_consts[651],
        NULL,
        0
    );


    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_hikari$api$rest$$$function__93_fetch_my_member(PyObject *annotations) {
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_hikari$api$rest$$$function__93_fetch_my_member,
        mod_consts[237],
#if PYTHON_VERSION >= 0x300
        mod_consts[238],
#endif
        codeobj_91bc149cc3afebf8779254973ad93480,
        NULL,
#if PYTHON_VERSION >= 0x300
        NULL,
        annotations,
#endif
        module_hikari$api$rest,
        mod_consts[236],
        NULL,
        0
    );


    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_hikari$api$rest$$$function__94_search_members(PyObject *annotations) {
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_hikari$api$rest$$$function__94_search_members,
        mod_consts[240],
#if PYTHON_VERSION >= 0x300
        mod_consts[241],
#endif
        codeobj_78d93943367f049d329e24c4fa8caba5,
        NULL,
#if PYTHON_VERSION >= 0x300
        NULL,
        annotations,
#endif
        module_hikari$api$rest,
        mod_consts[239],
        NULL,
        0
    );


    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_hikari$api$rest$$$function__95_edit_member(PyObject *kw_defaults, PyObject *annotations) {
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_hikari$api$rest$$$function__95_edit_member,
        mod_consts[243],
#if PYTHON_VERSION >= 0x300
        mod_consts[244],
#endif
        codeobj_ce648f5c121accd4aa67977eb5913b0a,
        NULL,
#if PYTHON_VERSION >= 0x300
        kw_defaults,
        annotations,
#endif
        module_hikari$api$rest,
        mod_consts[242],
        NULL,
        0
    );


    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_hikari$api$rest$$$function__96_edit_my_member(PyObject *kw_defaults, PyObject *annotations) {
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_hikari$api$rest$$$function__96_edit_my_member,
        mod_consts[246],
#if PYTHON_VERSION >= 0x300
        mod_consts[247],
#endif
        codeobj_3b5a99cecd12f7345243374797db49a1,
        NULL,
#if PYTHON_VERSION >= 0x300
        kw_defaults,
        annotations,
#endif
        module_hikari$api$rest,
        mod_consts[245],
        NULL,
        0
    );


    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_hikari$api$rest$$$function__97_edit_my_nick(PyObject *kw_defaults, PyObject *annotations) {
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_hikari$api$rest$$$function__97_edit_my_nick,
        mod_consts[249],
#if PYTHON_VERSION >= 0x300
        mod_consts[250],
#endif
        codeobj_e151f143653c171d06140f26248a3786,
        NULL,
#if PYTHON_VERSION >= 0x300
        kw_defaults,
        annotations,
#endif
        module_hikari$api$rest,
        mod_consts[248],
        NULL,
        0
    );


    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_hikari$api$rest$$$function__98_add_role_to_member(PyObject *kw_defaults, PyObject *annotations) {
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_hikari$api$rest$$$function__98_add_role_to_member,
        mod_consts[252],
#if PYTHON_VERSION >= 0x300
        mod_consts[253],
#endif
        codeobj_c9b70cf909535cbe61a3202904fcaa58,
        NULL,
#if PYTHON_VERSION >= 0x300
        kw_defaults,
        annotations,
#endif
        module_hikari$api$rest,
        mod_consts[251],
        NULL,
        0
    );


    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_hikari$api$rest$$$function__99_remove_role_from_member(PyObject *kw_defaults, PyObject *annotations) {
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_hikari$api$rest$$$function__99_remove_role_from_member,
        mod_consts[255],
#if PYTHON_VERSION >= 0x300
        mod_consts[256],
#endif
        codeobj_4e6209d5f6349c83f3cf0fdc61051eef,
        NULL,
#if PYTHON_VERSION >= 0x300
        kw_defaults,
        annotations,
#endif
        module_hikari$api$rest,
        mod_consts[254],
        NULL,
        0
    );


    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_hikari$api$rest$$$function__9_edit_channel(PyObject *kw_defaults, PyObject *annotations) {
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_hikari$api$rest$$$function__9_edit_channel,
        mod_consts[10],
#if PYTHON_VERSION >= 0x300
        mod_consts[11],
#endif
        codeobj_dddd995be6c3c59c8e1d62868bffbbbf,
        NULL,
#if PYTHON_VERSION >= 0x300
        kw_defaults,
        annotations,
#endif
        module_hikari$api$rest,
        mod_consts[9],
        NULL,
        0
    );


    return (PyObject *)result;
}


extern void _initCompiledCellType();
extern void _initCompiledGeneratorType();
extern void _initCompiledFunctionType();
extern void _initCompiledMethodType();
extern void _initCompiledFrameType();

extern PyTypeObject Nuitka_Loader_Type;

#ifdef _NUITKA_PLUGIN_DILL_ENABLED
// Provide a way to create find a function via its C code and create it back
// in another process, useful for multiprocessing extensions like dill
extern void registerDillPluginTables(char const *module_name, PyMethodDef *reduce_compiled_function, PyMethodDef *create_compiled_function);

function_impl_code functable_hikari$api$rest[] = {
    NULL,
    impl_hikari$api$rest$$$function__2_acquire,
    NULL,
    NULL,
    NULL,
    NULL,
    impl_hikari$api$rest$$$function__7_close,
    impl_hikari$api$rest$$$function__8_fetch_channel,
    impl_hikari$api$rest$$$function__9_edit_channel,
    impl_hikari$api$rest$$$function__10_follow_channel,
    impl_hikari$api$rest$$$function__11_delete_channel,
    impl_hikari$api$rest$$$function__12_edit_my_voice_state,
    impl_hikari$api$rest$$$function__13_edit_voice_state,
    impl_hikari$api$rest$$$function__14_edit_permission_overwrites,
    impl_hikari$api$rest$$$function__15_edit_permission_overwrites,
    impl_hikari$api$rest$$$function__16_edit_permission_overwrites,
    impl_hikari$api$rest$$$function__17_delete_permission_overwrite,
    impl_hikari$api$rest$$$function__18_fetch_channel_invites,
    impl_hikari$api$rest$$$function__19_create_invite,
    NULL,
    impl_hikari$api$rest$$$function__21_fetch_pins,
    impl_hikari$api$rest$$$function__22_pin_message,
    impl_hikari$api$rest$$$function__23_unpin_message,
    NULL,
    impl_hikari$api$rest$$$function__25_fetch_message,
    impl_hikari$api$rest$$$function__26_create_message,
    impl_hikari$api$rest$$$function__27_crosspost_message,
    impl_hikari$api$rest$$$function__28_edit_message,
    impl_hikari$api$rest$$$function__29_delete_message,
    impl_hikari$api$rest$$$function__30_delete_messages,
    impl_hikari$api$rest$$$function__31_add_reaction,
    impl_hikari$api$rest$$$function__32_delete_my_reaction,
    impl_hikari$api$rest$$$function__33_delete_all_reactions_for_emoji,
    impl_hikari$api$rest$$$function__34_delete_reaction,
    impl_hikari$api$rest$$$function__35_delete_all_reactions,
    NULL,
    impl_hikari$api$rest$$$function__37_create_webhook,
    impl_hikari$api$rest$$$function__38_fetch_webhook,
    impl_hikari$api$rest$$$function__39_fetch_channel_webhooks,
    impl_hikari$api$rest$$$function__40_fetch_guild_webhooks,
    impl_hikari$api$rest$$$function__41_edit_webhook,
    impl_hikari$api$rest$$$function__42_delete_webhook,
    impl_hikari$api$rest$$$function__43_execute_webhook,
    impl_hikari$api$rest$$$function__44_fetch_webhook_message,
    impl_hikari$api$rest$$$function__45_edit_webhook_message,
    impl_hikari$api$rest$$$function__46_delete_webhook_message,
    impl_hikari$api$rest$$$function__47_fetch_gateway_url,
    impl_hikari$api$rest$$$function__48_fetch_gateway_bot_info,
    impl_hikari$api$rest$$$function__49_fetch_invite,
    impl_hikari$api$rest$$$function__50_delete_invite,
    impl_hikari$api$rest$$$function__51_fetch_my_user,
    impl_hikari$api$rest$$$function__52_edit_my_user,
    impl_hikari$api$rest$$$function__53_fetch_my_connections,
    NULL,
    impl_hikari$api$rest$$$function__55_leave_guild,
    impl_hikari$api$rest$$$function__56_create_dm_channel,
    impl_hikari$api$rest$$$function__57_fetch_application,
    impl_hikari$api$rest$$$function__58_fetch_authorization,
    impl_hikari$api$rest$$$function__59_authorize_client_credentials_token,
    impl_hikari$api$rest$$$function__60_authorize_access_token,
    impl_hikari$api$rest$$$function__61_refresh_access_token,
    impl_hikari$api$rest$$$function__62_revoke_access_token,
    impl_hikari$api$rest$$$function__63_add_user_to_guild,
    impl_hikari$api$rest$$$function__64_fetch_voice_regions,
    impl_hikari$api$rest$$$function__65_fetch_user,
    NULL,
    impl_hikari$api$rest$$$function__67_fetch_emoji,
    impl_hikari$api$rest$$$function__68_fetch_guild_emojis,
    impl_hikari$api$rest$$$function__69_create_emoji,
    impl_hikari$api$rest$$$function__70_edit_emoji,
    impl_hikari$api$rest$$$function__71_delete_emoji,
    impl_hikari$api$rest$$$function__72_fetch_available_sticker_packs,
    impl_hikari$api$rest$$$function__73_fetch_sticker,
    impl_hikari$api$rest$$$function__74_fetch_guild_stickers,
    impl_hikari$api$rest$$$function__75_fetch_guild_sticker,
    impl_hikari$api$rest$$$function__76_create_sticker,
    impl_hikari$api$rest$$$function__77_edit_sticker,
    impl_hikari$api$rest$$$function__78_delete_sticker,
    NULL,
    impl_hikari$api$rest$$$function__80_fetch_guild,
    impl_hikari$api$rest$$$function__81_fetch_guild_preview,
    impl_hikari$api$rest$$$function__82_edit_guild,
    impl_hikari$api$rest$$$function__83_delete_guild,
    impl_hikari$api$rest$$$function__84_fetch_guild_channels,
    impl_hikari$api$rest$$$function__85_create_guild_text_channel,
    impl_hikari$api$rest$$$function__86_create_guild_news_channel,
    impl_hikari$api$rest$$$function__87_create_guild_voice_channel,
    impl_hikari$api$rest$$$function__88_create_guild_stage_channel,
    impl_hikari$api$rest$$$function__89_create_guild_category,
    impl_hikari$api$rest$$$function__90_reposition_channels,
    impl_hikari$api$rest$$$function__91_fetch_member,
    NULL,
    impl_hikari$api$rest$$$function__93_fetch_my_member,
    impl_hikari$api$rest$$$function__94_search_members,
    impl_hikari$api$rest$$$function__95_edit_member,
    impl_hikari$api$rest$$$function__96_edit_my_member,
    impl_hikari$api$rest$$$function__97_edit_my_nick,
    impl_hikari$api$rest$$$function__98_add_role_to_member,
    impl_hikari$api$rest$$$function__99_remove_role_from_member,
    impl_hikari$api$rest$$$function__100_kick_user,
    impl_hikari$api$rest$$$function__101_kick_member,
    impl_hikari$api$rest$$$function__102_ban_user,
    impl_hikari$api$rest$$$function__103_ban_member,
    impl_hikari$api$rest$$$function__104_unban_user,
    impl_hikari$api$rest$$$function__105_unban_member,
    impl_hikari$api$rest$$$function__106_fetch_ban,
    impl_hikari$api$rest$$$function__107_fetch_bans,
    impl_hikari$api$rest$$$function__108_fetch_roles,
    impl_hikari$api$rest$$$function__109_create_role,
    impl_hikari$api$rest$$$function__110_reposition_roles,
    impl_hikari$api$rest$$$function__111_edit_role,
    impl_hikari$api$rest$$$function__112_delete_role,
    impl_hikari$api$rest$$$function__113_estimate_guild_prune_count,
    impl_hikari$api$rest$$$function__114_begin_guild_prune,
    impl_hikari$api$rest$$$function__115_fetch_guild_voice_regions,
    impl_hikari$api$rest$$$function__116_fetch_guild_invites,
    impl_hikari$api$rest$$$function__117_fetch_integrations,
    impl_hikari$api$rest$$$function__118_fetch_widget,
    impl_hikari$api$rest$$$function__119_edit_widget,
    impl_hikari$api$rest$$$function__120_fetch_welcome_screen,
    impl_hikari$api$rest$$$function__121_edit_welcome_screen,
    impl_hikari$api$rest$$$function__122_fetch_vanity_url,
    impl_hikari$api$rest$$$function__123_create_template,
    impl_hikari$api$rest$$$function__124_create_guild_from_template,
    impl_hikari$api$rest$$$function__125_delete_template,
    impl_hikari$api$rest$$$function__126_edit_template,
    impl_hikari$api$rest$$$function__127_fetch_template,
    impl_hikari$api$rest$$$function__128_fetch_guild_templates,
    impl_hikari$api$rest$$$function__129_sync_guild_template,
    NULL,
    NULL,
    NULL,
    impl_hikari$api$rest$$$function__133_fetch_application_command,
    impl_hikari$api$rest$$$function__134_fetch_application_commands,
    impl_hikari$api$rest$$$function__135_create_application_command,
    impl_hikari$api$rest$$$function__136_create_slash_command,
    impl_hikari$api$rest$$$function__137_create_context_menu_command,
    impl_hikari$api$rest$$$function__138_set_application_commands,
    impl_hikari$api$rest$$$function__139_edit_application_command,
    impl_hikari$api$rest$$$function__140_delete_application_command,
    impl_hikari$api$rest$$$function__141_fetch_application_guild_commands_permissions,
    impl_hikari$api$rest$$$function__142_fetch_application_command_permissions,
    impl_hikari$api$rest$$$function__143_set_application_guild_commands_permissions,
    impl_hikari$api$rest$$$function__144_set_application_command_permissions,
    NULL,
    NULL,
    NULL,
    impl_hikari$api$rest$$$function__148_fetch_interaction_response,
    impl_hikari$api$rest$$$function__149_create_interaction_response,
    impl_hikari$api$rest$$$function__150_edit_interaction_response,
    impl_hikari$api$rest$$$function__151_delete_interaction_response,
    impl_hikari$api$rest$$$function__152_create_autocomplete_response,
    NULL,
    impl_hikari$api$rest$$$function__154_fetch_scheduled_event,
    impl_hikari$api$rest$$$function__155_fetch_scheduled_events,
    impl_hikari$api$rest$$$function__156_create_stage_event,
    impl_hikari$api$rest$$$function__157_create_voice_event,
    impl_hikari$api$rest$$$function__158_create_external_event,
    impl_hikari$api$rest$$$function__159_edit_scheduled_event,
    impl_hikari$api$rest$$$function__160_delete_scheduled_event,
    NULL,
    NULL
};

static char const *_reduce_compiled_function_argnames[] = {
    "func",
    NULL
};

static PyObject *_reduce_compiled_function(PyObject *self, PyObject *args, PyObject *kwds) {
    PyObject *func;

    if (!PyArg_ParseTupleAndKeywords(args, kwds, "O:reduce_compiled_function", (char **)_reduce_compiled_function_argnames, &func, NULL)) {
        return NULL;
    }

    if (Nuitka_Function_Check(func) == false) {
        SET_CURRENT_EXCEPTION_TYPE0_STR(PyExc_TypeError, "not a compiled function");
        return NULL;
    }

    struct Nuitka_FunctionObject *function = (struct Nuitka_FunctionObject *)func;

    function_impl_code *current = functable_hikari$api$rest;
    int offset = 0;

    while (*current != NULL) {
        if (*current == function->m_c_code) {
            break;
        }

        current += 1;
        offset += 1;
    }

    if (*current == NULL) {
        SET_CURRENT_EXCEPTION_TYPE0_STR(PyExc_TypeError, "Cannot find compiled function in module.");
        return NULL;
    }

    PyObject *code_object_desc = PyTuple_New(6);
    PyTuple_SET_ITEM0(code_object_desc, 0, function->m_code_object->co_filename);
    PyTuple_SET_ITEM0(code_object_desc, 1, function->m_code_object->co_name);
    PyTuple_SET_ITEM(code_object_desc, 2, PyLong_FromLong(function->m_code_object->co_firstlineno));
    PyTuple_SET_ITEM0(code_object_desc, 3, function->m_code_object->co_varnames);
    PyTuple_SET_ITEM(code_object_desc, 4, PyLong_FromLong(function->m_code_object->co_argcount));
    PyTuple_SET_ITEM(code_object_desc, 5, PyLong_FromLong(function->m_code_object->co_flags));

    CHECK_OBJECT_DEEP(code_object_desc);

    PyObject *result = PyTuple_New(4);
    PyTuple_SET_ITEM(result, 0, PyLong_FromLong(offset));
    PyTuple_SET_ITEM(result, 1, code_object_desc);
    PyTuple_SET_ITEM0(result, 2, function->m_defaults);
    PyTuple_SET_ITEM0(result, 3, function->m_doc != NULL ? function->m_doc : Py_None);

    CHECK_OBJECT_DEEP(result);

    return result;
}

static PyMethodDef _method_def_reduce_compiled_function = {"reduce_compiled_function", (PyCFunction)_reduce_compiled_function,
                                                           METH_VARARGS | METH_KEYWORDS, NULL};

static char const *_create_compiled_function_argnames[] = {
    "func",
    "code_object_desc",
    "defaults",
    "doc",
    NULL
};


static PyObject *_create_compiled_function(PyObject *self, PyObject *args, PyObject *kwds) {
    CHECK_OBJECT_DEEP(args);

    PyObject *func;
    PyObject *code_object_desc;
    PyObject *defaults;
    PyObject *doc;

    if (!PyArg_ParseTupleAndKeywords(args, kwds, "OOOO:create_compiled_function", (char **)_create_compiled_function_argnames, &func, &code_object_desc, &defaults, &doc, NULL)) {
        return NULL;
    }

    int offset = PyLong_AsLong(func);

    if (offset == -1 && ERROR_OCCURRED()) {
        return NULL;
    }

    if (offset > sizeof(functable_hikari$api$rest) || offset < 0) {
        SET_CURRENT_EXCEPTION_TYPE0_STR(PyExc_TypeError, "Wrong offset for compiled function.");
        return NULL;
    }

    PyObject *filename = PyTuple_GET_ITEM(code_object_desc, 0);
    PyObject *function_name = PyTuple_GET_ITEM(code_object_desc, 1);
    PyObject *line = PyTuple_GET_ITEM(code_object_desc, 2);
    int line_int = PyLong_AsLong(line);
    assert(!ERROR_OCCURRED());

    PyObject *argnames = PyTuple_GET_ITEM(code_object_desc, 3);
    PyObject *arg_count = PyTuple_GET_ITEM(code_object_desc, 4);
    int arg_count_int = PyLong_AsLong(arg_count);
    assert(!ERROR_OCCURRED());
    PyObject *flags = PyTuple_GET_ITEM(code_object_desc, 5);
    int flags_int = PyLong_AsLong(flags);
    assert(!ERROR_OCCURRED());

    PyCodeObject *code_object = MAKE_CODEOBJECT(
        filename,
        line_int,
        flags_int,
        function_name,
        argnames,
        NULL, // freevars
        arg_count_int,
        0, // TODO: Missing kw_only_count
        0 // TODO: Missing pos_only_count
    );

    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        functable_hikari$api$rest[offset],
        code_object->co_name,
#if PYTHON_VERSION >= 0x300
        NULL, // TODO: Not transferring qualname yet
#endif
        code_object,
        defaults,
#if PYTHON_VERSION >= 0x300
        NULL, // kwdefaults are done on the outside currently
        NULL, // TODO: Not transferring annotations
#endif
        module_hikari$api$rest,
        doc,
        NULL,
        0
    );

    return (PyObject *)result;
}

static PyMethodDef _method_def_create_compiled_function = {
    "create_compiled_function",
    (PyCFunction)_create_compiled_function,
    METH_VARARGS | METH_KEYWORDS, NULL
};


#endif

// Internal entry point for module code.
PyObject *modulecode_hikari$api$rest(PyObject *module, struct Nuitka_MetaPathBasedLoaderEntry const *loader_entry) {
    // Report entry to PGO.
    PGO_onModuleEntered("hikari.api.rest");

    // Store the module for future use.
    module_hikari$api$rest = module;

    // Modules can be loaded again in case of errors, avoid the init being done again.
    static bool init_done = false;

    if (init_done == false) {
#if defined(_NUITKA_MODULE) && 0
        // In case of an extension module loaded into a process, we need to call
        // initialization here because that's the first and potentially only time
        // we are going called.

        // Initialize the constant values used.
        _initBuiltinModule();
        createGlobalConstants();

        /* Initialize the compiled types of Nuitka. */
        _initCompiledCellType();
        _initCompiledGeneratorType();
        _initCompiledFunctionType();
        _initCompiledMethodType();
        _initCompiledFrameType();

        _initSlotCompare();
#if PYTHON_VERSION >= 0x270
        _initSlotIternext();
#endif

        patchTypeComparison();

        // Enable meta path based loader if not already done.
#ifdef _NUITKA_TRACE
        PRINT_STRING("hikari.api.rest: Calling setupMetaPathBasedLoader().\n");
#endif
        setupMetaPathBasedLoader();

#if PYTHON_VERSION >= 0x300
        patchInspectModule();
#endif

#endif

        /* The constants only used by this module are created now. */
#ifdef _NUITKA_TRACE
        PRINT_STRING("hikari.api.rest: Calling createModuleConstants().\n");
#endif
        createModuleConstants();

        /* The code objects used by this module are created now. */
#ifdef _NUITKA_TRACE
        PRINT_STRING("hikari.api.rest: Calling createModuleCodeObjects().\n");
#endif
        createModuleCodeObjects();

        init_done = true;
    }

    // PRINT_STRING("in inithikari$api$rest\n");

    moduledict_hikari$api$rest = MODULE_DICT(module_hikari$api$rest);

#ifdef _NUITKA_PLUGIN_DILL_ENABLED
    registerDillPluginTables(loader_entry->name, &_method_def_reduce_compiled_function, &_method_def_create_compiled_function);
#endif

    // Set "__compiled__" to what version information we have.
    UPDATE_STRING_DICT0(
        moduledict_hikari$api$rest,
        (Nuitka_StringObject *)const_str_plain___compiled__,
        Nuitka_dunder_compiled_value
    );

    // Update "__package__" value to what it ought to be.
    {
#if 0
        UPDATE_STRING_DICT0(
            moduledict_hikari$api$rest,
            (Nuitka_StringObject *)const_str_plain___package__,
            mod_consts[862]
        );
#elif 0
        PyObject *module_name = GET_STRING_DICT_VALUE(moduledict_hikari$api$rest, (Nuitka_StringObject *)const_str_plain___name__);

        UPDATE_STRING_DICT0(
            moduledict_hikari$api$rest,
            (Nuitka_StringObject *)const_str_plain___package__,
            module_name
        );
#else

#if PYTHON_VERSION < 0x300
        PyObject *module_name = GET_STRING_DICT_VALUE(moduledict_hikari$api$rest, (Nuitka_StringObject *)const_str_plain___name__);
        char const *module_name_cstr = PyString_AS_STRING(module_name);

        char const *last_dot = strrchr(module_name_cstr, '.');

        if (last_dot != NULL) {
            UPDATE_STRING_DICT1(
                moduledict_hikari$api$rest,
                (Nuitka_StringObject *)const_str_plain___package__,
                PyString_FromStringAndSize(module_name_cstr, last_dot - module_name_cstr)
            );
        }
#else
        PyObject *module_name = GET_STRING_DICT_VALUE(moduledict_hikari$api$rest, (Nuitka_StringObject *)const_str_plain___name__);
        Py_ssize_t dot_index = PyUnicode_Find(module_name, const_str_dot, 0, PyUnicode_GetLength(module_name), -1);

        if (dot_index != -1) {
            UPDATE_STRING_DICT1(
                moduledict_hikari$api$rest,
                (Nuitka_StringObject *)const_str_plain___package__,
                PyUnicode_Substring(module_name, 0, dot_index)
            );
        }
#endif
#endif
    }

    CHECK_OBJECT(module_hikari$api$rest);

    // For deep importing of a module we need to have "__builtins__", so we set
    // it ourselves in the same way than CPython does. Note: This must be done
    // before the frame object is allocated, or else it may fail.

    if (GET_STRING_DICT_VALUE(moduledict_hikari$api$rest, (Nuitka_StringObject *)const_str_plain___builtins__) == NULL) {
        PyObject *value = (PyObject *)builtin_module;

        // Check if main module, not a dict then but the module itself.
#if defined(_NUITKA_MODULE) || !0
        value = PyModule_GetDict(value);
#endif

        UPDATE_STRING_DICT0(moduledict_hikari$api$rest, (Nuitka_StringObject *)const_str_plain___builtins__, value);
    }

#if PYTHON_VERSION >= 0x300
    UPDATE_STRING_DICT0(moduledict_hikari$api$rest, (Nuitka_StringObject *)const_str_plain___loader__, (PyObject *)&Nuitka_Loader_Type);
#endif

#if PYTHON_VERSION >= 0x340
// Set the "__spec__" value

#if 0
    // Main modules just get "None" as spec.
    UPDATE_STRING_DICT0(moduledict_hikari$api$rest, (Nuitka_StringObject *)const_str_plain___spec__, Py_None);
#else
    // Other modules get a "ModuleSpec" from the standard mechanism.
    {
        PyObject *bootstrap_module = getImportLibBootstrapModule();
        CHECK_OBJECT(bootstrap_module);

        PyObject *_spec_from_module = PyObject_GetAttrString(bootstrap_module, "_spec_from_module");
        CHECK_OBJECT(_spec_from_module);

        PyObject *spec_value = CALL_FUNCTION_WITH_SINGLE_ARG(_spec_from_module, module_hikari$api$rest);
        Py_DECREF(_spec_from_module);

        // We can assume this to never fail, or else we are in trouble anyway.
        // CHECK_OBJECT(spec_value);

        if (spec_value == NULL) {
            PyErr_PrintEx(0);
            abort();
        }

// Mark the execution in the "__spec__" value.
        SET_ATTRIBUTE(spec_value, const_str_plain__initializing, Py_True);

        UPDATE_STRING_DICT1(moduledict_hikari$api$rest, (Nuitka_StringObject *)const_str_plain___spec__, spec_value);
    }
#endif
#endif

    // Temp variables if any
    PyObject *outline_0_var___class__ = NULL;
    PyObject *outline_1_var___class__ = NULL;
    PyObject *tmp_class_creation_1__bases = NULL;
    PyObject *tmp_class_creation_1__bases_orig = NULL;
    PyObject *tmp_class_creation_1__class_decl_dict = NULL;
    PyObject *tmp_class_creation_1__metaclass = NULL;
    PyObject *tmp_class_creation_1__prepared = NULL;
    PyObject *tmp_class_creation_2__bases = NULL;
    PyObject *tmp_class_creation_2__bases_orig = NULL;
    PyObject *tmp_class_creation_2__class_decl_dict = NULL;
    PyObject *tmp_class_creation_2__metaclass = NULL;
    PyObject *tmp_class_creation_2__prepared = NULL;
    struct Nuitka_FrameObject *frame_79a9a0fab045cdec33bf55099eaef1e6;
    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    bool tmp_result;
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    PyObject *tmp_dictset_value;
    PyObject *tmp_dictset_dict;
    PyObject *tmp_dictset_key;
    int tmp_res;
    PyObject *tmp_dictdel_dict;
    PyObject *tmp_dictdel_key;
    PyObject *locals_hikari$api$rest$$$class__1_TokenStrategy_65 = NULL;
    struct Nuitka_FrameObject *frame_a29cd1033c35705b678c14be18c09b67_2;
    NUITKA_MAY_BE_UNUSED char const *type_description_2 = NULL;
    static struct Nuitka_FrameObject *cache_frame_a29cd1033c35705b678c14be18c09b67_2 = NULL;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_1;
    PyObject *exception_keeper_type_2;
    PyObject *exception_keeper_value_2;
    PyTracebackObject *exception_keeper_tb_2;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_2;
    PyObject *exception_keeper_type_3;
    PyObject *exception_keeper_value_3;
    PyTracebackObject *exception_keeper_tb_3;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_3;
    PyObject *locals_hikari$api$rest$$$class__2_RESTClient_110 = NULL;
    struct Nuitka_FrameObject *frame_862833cacd6e5ba73c351f8d132a7b6b_3;
    NUITKA_MAY_BE_UNUSED char const *type_description_3 = NULL;
    static struct Nuitka_FrameObject *cache_frame_862833cacd6e5ba73c351f8d132a7b6b_3 = NULL;
    PyObject *exception_keeper_type_4;
    PyObject *exception_keeper_value_4;
    PyTracebackObject *exception_keeper_tb_4;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_4;
    PyObject *exception_keeper_type_5;
    PyObject *exception_keeper_value_5;
    PyTracebackObject *exception_keeper_tb_5;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_5;
    PyObject *exception_keeper_type_6;
    PyObject *exception_keeper_value_6;
    PyTracebackObject *exception_keeper_tb_6;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_6;

    // Module code.
    {
        PyObject *tmp_assign_source_1;
        tmp_assign_source_1 = mod_consts[419];
        UPDATE_STRING_DICT0(moduledict_hikari$api$rest, (Nuitka_StringObject *)mod_consts[420], tmp_assign_source_1);
    }
    {
        PyObject *tmp_assign_source_2;
        tmp_assign_source_2 = module_filename_obj;
        UPDATE_STRING_DICT0(moduledict_hikari$api$rest, (Nuitka_StringObject *)mod_consts[421], tmp_assign_source_2);
    }
    // Frame without reuse.
    frame_79a9a0fab045cdec33bf55099eaef1e6 = MAKE_MODULE_FRAME(codeobj_79a9a0fab045cdec33bf55099eaef1e6, module_hikari$api$rest);

    // Push the new frame as the currently active one, and we should be exclusively
    // owning it.
    pushFrameStack(frame_79a9a0fab045cdec33bf55099eaef1e6);
    assert(Py_REFCNT(frame_79a9a0fab045cdec33bf55099eaef1e6) == 2);

    // Framed code:
    {
        PyObject *tmp_assattr_value_1;
        PyObject *tmp_assattr_target_1;
        tmp_assattr_value_1 = module_filename_obj;
        tmp_assattr_target_1 = GET_STRING_DICT_VALUE(moduledict_hikari$api$rest, (Nuitka_StringObject *)mod_consts[422]);

        if (unlikely(tmp_assattr_target_1 == NULL)) {
            tmp_assattr_target_1 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[422]);
        }

        assert(!(tmp_assattr_target_1 == NULL));
        tmp_result = SET_ATTRIBUTE(tmp_assattr_target_1, mod_consts[423], tmp_assattr_value_1);
        if (tmp_result == false) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1;

            goto frame_exception_exit_1;
        }
    }
    {
        PyObject *tmp_assattr_value_2;
        PyObject *tmp_assattr_target_2;
        tmp_assattr_value_2 = Py_True;
        tmp_assattr_target_2 = GET_STRING_DICT_VALUE(moduledict_hikari$api$rest, (Nuitka_StringObject *)mod_consts[422]);

        if (unlikely(tmp_assattr_target_2 == NULL)) {
            tmp_assattr_target_2 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[422]);
        }

        assert(!(tmp_assattr_target_2 == NULL));
        tmp_result = SET_ATTRIBUTE(tmp_assattr_target_2, mod_consts[424], tmp_assattr_value_2);
        if (tmp_result == false) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1;

            goto frame_exception_exit_1;
        }
    }
    {
        PyObject *tmp_assign_source_3;
        tmp_assign_source_3 = Py_None;
        UPDATE_STRING_DICT0(moduledict_hikari$api$rest, (Nuitka_StringObject *)mod_consts[425], tmp_assign_source_3);
    }
    {
        PyObject *tmp_assign_source_4;
        tmp_assign_source_4 = PyDict_New();
        UPDATE_STRING_DICT1(moduledict_hikari$api$rest, (Nuitka_StringObject *)mod_consts[426], tmp_assign_source_4);
    }
    {
        PyObject *tmp_assign_source_5;
        frame_79a9a0fab045cdec33bf55099eaef1e6->m_frame.f_lineno = 24;
        {
            PyObject *hard_module = IMPORT_HARD___FUTURE__();
            tmp_assign_source_5 = LOOKUP_ATTRIBUTE(hard_module, mod_consts[427]);
        }

        assert(!(tmp_assign_source_5 == NULL));
        UPDATE_STRING_DICT0(moduledict_hikari$api$rest, (Nuitka_StringObject *)mod_consts[427], tmp_assign_source_5);
    }
    {
        PyObject *tmp_assign_source_6;
        tmp_assign_source_6 = LIST_COPY(mod_consts[428]);
        UPDATE_STRING_DICT1(moduledict_hikari$api$rest, (Nuitka_StringObject *)mod_consts[429], tmp_assign_source_6);
    }
    tmp_dictset_value = mod_consts[430];
    tmp_dictset_dict = GET_STRING_DICT_VALUE(moduledict_hikari$api$rest, (Nuitka_StringObject *)mod_consts[426]);

    if (unlikely(tmp_dictset_dict == NULL)) {
        tmp_dictset_dict = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[426]);
    }

    assert(!(tmp_dictset_dict == NULL));
    tmp_dictset_key = mod_consts[429];
    assert(PyDict_CheckExact(tmp_dictset_dict));
    tmp_res = PyDict_SetItem(tmp_dictset_dict, tmp_dictset_key, tmp_dictset_value);

    assert(!(tmp_res != 0));
    {
        PyObject *tmp_assign_source_7;
        PyObject *tmp_name_value_1;
        PyObject *tmp_globals_arg_value_1;
        PyObject *tmp_locals_arg_value_1;
        PyObject *tmp_fromlist_value_1;
        PyObject *tmp_level_value_1;
        tmp_name_value_1 = mod_consts[431];
        tmp_globals_arg_value_1 = (PyObject *)moduledict_hikari$api$rest;
        tmp_locals_arg_value_1 = Py_None;
        tmp_fromlist_value_1 = Py_None;
        tmp_level_value_1 = mod_consts[432];
        frame_79a9a0fab045cdec33bf55099eaef1e6->m_frame.f_lineno = 28;
        tmp_assign_source_7 = IMPORT_MODULE5(tmp_name_value_1, tmp_globals_arg_value_1, tmp_locals_arg_value_1, tmp_fromlist_value_1, tmp_level_value_1);
        if (tmp_assign_source_7 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 28;

            goto frame_exception_exit_1;
        }
        UPDATE_STRING_DICT1(moduledict_hikari$api$rest, (Nuitka_StringObject *)mod_consts[431], tmp_assign_source_7);
    }
    {
        PyObject *tmp_assign_source_8;
        tmp_assign_source_8 = IMPORT_HARD_TYPING();
        assert(!(tmp_assign_source_8 == NULL));
        UPDATE_STRING_DICT0(moduledict_hikari$api$rest, (Nuitka_StringObject *)mod_consts[433], tmp_assign_source_8);
    }
    {
        PyObject *tmp_assign_source_9;
        PyObject *tmp_import_name_from_1;
        PyObject *tmp_name_value_2;
        PyObject *tmp_globals_arg_value_2;
        PyObject *tmp_locals_arg_value_2;
        PyObject *tmp_fromlist_value_2;
        PyObject *tmp_level_value_2;
        tmp_name_value_2 = mod_consts[434];
        tmp_globals_arg_value_2 = (PyObject *)moduledict_hikari$api$rest;
        tmp_locals_arg_value_2 = Py_None;
        tmp_fromlist_value_2 = mod_consts[435];
        tmp_level_value_2 = mod_consts[432];
        frame_79a9a0fab045cdec33bf55099eaef1e6->m_frame.f_lineno = 31;
        tmp_import_name_from_1 = IMPORT_MODULE5(tmp_name_value_2, tmp_globals_arg_value_2, tmp_locals_arg_value_2, tmp_fromlist_value_2, tmp_level_value_2);
        if (tmp_import_name_from_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 31;

            goto frame_exception_exit_1;
        }
        if (PyModule_Check(tmp_import_name_from_1)) {
            tmp_assign_source_9 = IMPORT_NAME_OR_MODULE(
                tmp_import_name_from_1,
                (PyObject *)moduledict_hikari$api$rest,
                mod_consts[436],
                mod_consts[432]
            );
        } else {
            tmp_assign_source_9 = IMPORT_NAME(tmp_import_name_from_1, mod_consts[436]);
        }

        Py_DECREF(tmp_import_name_from_1);
        if (tmp_assign_source_9 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 31;

            goto frame_exception_exit_1;
        }
        UPDATE_STRING_DICT1(moduledict_hikari$api$rest, (Nuitka_StringObject *)mod_consts[436], tmp_assign_source_9);
    }
    {
        PyObject *tmp_assign_source_10;
        PyObject *tmp_import_name_from_2;
        PyObject *tmp_name_value_3;
        PyObject *tmp_globals_arg_value_3;
        PyObject *tmp_locals_arg_value_3;
        PyObject *tmp_fromlist_value_3;
        PyObject *tmp_level_value_3;
        tmp_name_value_3 = mod_consts[434];
        tmp_globals_arg_value_3 = (PyObject *)moduledict_hikari$api$rest;
        tmp_locals_arg_value_3 = Py_None;
        tmp_fromlist_value_3 = mod_consts[437];
        tmp_level_value_3 = mod_consts[432];
        frame_79a9a0fab045cdec33bf55099eaef1e6->m_frame.f_lineno = 32;
        tmp_import_name_from_2 = IMPORT_MODULE5(tmp_name_value_3, tmp_globals_arg_value_3, tmp_locals_arg_value_3, tmp_fromlist_value_3, tmp_level_value_3);
        if (tmp_import_name_from_2 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 32;

            goto frame_exception_exit_1;
        }
        if (PyModule_Check(tmp_import_name_from_2)) {
            tmp_assign_source_10 = IMPORT_NAME_OR_MODULE(
                tmp_import_name_from_2,
                (PyObject *)moduledict_hikari$api$rest,
                mod_consts[438],
                mod_consts[432]
            );
        } else {
            tmp_assign_source_10 = IMPORT_NAME(tmp_import_name_from_2, mod_consts[438]);
        }

        Py_DECREF(tmp_import_name_from_2);
        if (tmp_assign_source_10 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 32;

            goto frame_exception_exit_1;
        }
        UPDATE_STRING_DICT1(moduledict_hikari$api$rest, (Nuitka_StringObject *)mod_consts[438], tmp_assign_source_10);
    }
    {
        PyObject *tmp_assign_source_11;
        PyObject *tmp_import_name_from_3;
        PyObject *tmp_name_value_4;
        PyObject *tmp_globals_arg_value_4;
        PyObject *tmp_locals_arg_value_4;
        PyObject *tmp_fromlist_value_4;
        PyObject *tmp_level_value_4;
        tmp_name_value_4 = mod_consts[434];
        tmp_globals_arg_value_4 = (PyObject *)moduledict_hikari$api$rest;
        tmp_locals_arg_value_4 = Py_None;
        tmp_fromlist_value_4 = mod_consts[439];
        tmp_level_value_4 = mod_consts[432];
        frame_79a9a0fab045cdec33bf55099eaef1e6->m_frame.f_lineno = 33;
        tmp_import_name_from_3 = IMPORT_MODULE5(tmp_name_value_4, tmp_globals_arg_value_4, tmp_locals_arg_value_4, tmp_fromlist_value_4, tmp_level_value_4);
        if (tmp_import_name_from_3 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 33;

            goto frame_exception_exit_1;
        }
        if (PyModule_Check(tmp_import_name_from_3)) {
            tmp_assign_source_11 = IMPORT_NAME_OR_MODULE(
                tmp_import_name_from_3,
                (PyObject *)moduledict_hikari$api$rest,
                mod_consts[440],
                mod_consts[432]
            );
        } else {
            tmp_assign_source_11 = IMPORT_NAME(tmp_import_name_from_3, mod_consts[440]);
        }

        Py_DECREF(tmp_import_name_from_3);
        if (tmp_assign_source_11 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 33;

            goto frame_exception_exit_1;
        }
        UPDATE_STRING_DICT1(moduledict_hikari$api$rest, (Nuitka_StringObject *)mod_consts[440], tmp_assign_source_11);
    }
    // Tried code:
    {
        PyObject *tmp_assign_source_12;
        PyObject *tmp_tuple_element_1;
        PyObject *tmp_expression_value_1;
        tmp_expression_value_1 = GET_STRING_DICT_VALUE(moduledict_hikari$api$rest, (Nuitka_StringObject *)mod_consts[431]);

        if (unlikely(tmp_expression_value_1 == NULL)) {
            tmp_expression_value_1 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[431]);
        }

        if (tmp_expression_value_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 65;

            goto try_except_handler_1;
        }
        tmp_tuple_element_1 = LOOKUP_ATTRIBUTE(tmp_expression_value_1, mod_consts[441]);
        if (tmp_tuple_element_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 65;

            goto try_except_handler_1;
        }
        tmp_assign_source_12 = PyTuple_New(1);
        PyTuple_SET_ITEM(tmp_assign_source_12, 0, tmp_tuple_element_1);
        assert(tmp_class_creation_1__bases_orig == NULL);
        tmp_class_creation_1__bases_orig = tmp_assign_source_12;
    }
    {
        PyObject *tmp_assign_source_13;
        PyObject *tmp_dircall_arg1_1;
        CHECK_OBJECT(tmp_class_creation_1__bases_orig);
        tmp_dircall_arg1_1 = tmp_class_creation_1__bases_orig;
        Py_INCREF(tmp_dircall_arg1_1);

        {
            PyObject *dir_call_args[] = {tmp_dircall_arg1_1};
            tmp_assign_source_13 = impl___main__$$$function__4__mro_entries_conversion(dir_call_args);
        }
        if (tmp_assign_source_13 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 65;

            goto try_except_handler_1;
        }
        assert(tmp_class_creation_1__bases == NULL);
        tmp_class_creation_1__bases = tmp_assign_source_13;
    }
    {
        PyObject *tmp_assign_source_14;
        tmp_assign_source_14 = PyDict_New();
        assert(tmp_class_creation_1__class_decl_dict == NULL);
        tmp_class_creation_1__class_decl_dict = tmp_assign_source_14;
    }
    {
        PyObject *tmp_assign_source_15;
        PyObject *tmp_metaclass_value_1;
        bool tmp_condition_result_1;
        PyObject *tmp_key_value_1;
        PyObject *tmp_dict_arg_value_1;
        PyObject *tmp_dict_arg_value_2;
        PyObject *tmp_key_value_2;
        nuitka_bool tmp_condition_result_2;
        int tmp_truth_name_1;
        PyObject *tmp_type_arg_1;
        PyObject *tmp_expression_value_2;
        PyObject *tmp_subscript_value_1;
        PyObject *tmp_bases_value_1;
        tmp_key_value_1 = mod_consts[442];
        CHECK_OBJECT(tmp_class_creation_1__class_decl_dict);
        tmp_dict_arg_value_1 = tmp_class_creation_1__class_decl_dict;
        tmp_res = DICT_HAS_ITEM(tmp_dict_arg_value_1, tmp_key_value_1);
        assert(!(tmp_res == -1));
        tmp_condition_result_1 = (tmp_res != 0) ? true : false;
        if (tmp_condition_result_1 != false) {
            goto condexpr_true_1;
        } else {
            goto condexpr_false_1;
        }
        condexpr_true_1:;
        CHECK_OBJECT(tmp_class_creation_1__class_decl_dict);
        tmp_dict_arg_value_2 = tmp_class_creation_1__class_decl_dict;
        tmp_key_value_2 = mod_consts[442];
        tmp_metaclass_value_1 = DICT_GET_ITEM0(tmp_dict_arg_value_2, tmp_key_value_2);
        if (tmp_metaclass_value_1 == NULL) {
            tmp_metaclass_value_1 = Py_None;
        }
        assert(!(tmp_metaclass_value_1 == NULL));
        Py_INCREF(tmp_metaclass_value_1);
        goto condexpr_end_1;
        condexpr_false_1:;
        CHECK_OBJECT(tmp_class_creation_1__bases);
        tmp_truth_name_1 = CHECK_IF_TRUE(tmp_class_creation_1__bases);
        if (tmp_truth_name_1 == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 65;

            goto try_except_handler_1;
        }
        tmp_condition_result_2 = tmp_truth_name_1 == 0 ? NUITKA_BOOL_FALSE : NUITKA_BOOL_TRUE;
        if (tmp_condition_result_2 == NUITKA_BOOL_TRUE) {
            goto condexpr_true_2;
        } else {
            goto condexpr_false_2;
        }
        condexpr_true_2:;
        CHECK_OBJECT(tmp_class_creation_1__bases);
        tmp_expression_value_2 = tmp_class_creation_1__bases;
        tmp_subscript_value_1 = mod_consts[432];
        tmp_type_arg_1 = LOOKUP_SUBSCRIPT_CONST(tmp_expression_value_2, tmp_subscript_value_1, 0);
        if (tmp_type_arg_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 65;

            goto try_except_handler_1;
        }
        tmp_metaclass_value_1 = BUILTIN_TYPE1(tmp_type_arg_1);
        Py_DECREF(tmp_type_arg_1);
        if (tmp_metaclass_value_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 65;

            goto try_except_handler_1;
        }
        goto condexpr_end_2;
        condexpr_false_2:;
        tmp_metaclass_value_1 = (PyObject *)&PyType_Type;
        Py_INCREF(tmp_metaclass_value_1);
        condexpr_end_2:;
        condexpr_end_1:;
        CHECK_OBJECT(tmp_class_creation_1__bases);
        tmp_bases_value_1 = tmp_class_creation_1__bases;
        tmp_assign_source_15 = SELECT_METACLASS(tmp_metaclass_value_1, tmp_bases_value_1);
        Py_DECREF(tmp_metaclass_value_1);
        if (tmp_assign_source_15 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 65;

            goto try_except_handler_1;
        }
        assert(tmp_class_creation_1__metaclass == NULL);
        tmp_class_creation_1__metaclass = tmp_assign_source_15;
    }
    {
        bool tmp_condition_result_3;
        PyObject *tmp_key_value_3;
        PyObject *tmp_dict_arg_value_3;
        tmp_key_value_3 = mod_consts[442];
        CHECK_OBJECT(tmp_class_creation_1__class_decl_dict);
        tmp_dict_arg_value_3 = tmp_class_creation_1__class_decl_dict;
        tmp_res = DICT_HAS_ITEM(tmp_dict_arg_value_3, tmp_key_value_3);
        assert(!(tmp_res == -1));
        tmp_condition_result_3 = (tmp_res != 0) ? true : false;
        if (tmp_condition_result_3 != false) {
            goto branch_yes_1;
        } else {
            goto branch_no_1;
        }
    }
    branch_yes_1:;
    CHECK_OBJECT(tmp_class_creation_1__class_decl_dict);
    tmp_dictdel_dict = tmp_class_creation_1__class_decl_dict;
    tmp_dictdel_key = mod_consts[442];
    tmp_result = DICT_REMOVE_ITEM(tmp_dictdel_dict, tmp_dictdel_key);
    if (tmp_result == false) {
        assert(ERROR_OCCURRED());

        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


        exception_lineno = 65;

        goto try_except_handler_1;
    }
    branch_no_1:;
    {
        nuitka_bool tmp_condition_result_4;
        PyObject *tmp_expression_value_3;
        CHECK_OBJECT(tmp_class_creation_1__metaclass);
        tmp_expression_value_3 = tmp_class_creation_1__metaclass;
        tmp_result = HAS_ATTR_BOOL(tmp_expression_value_3, mod_consts[443]);
        tmp_condition_result_4 = (tmp_result) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        if (tmp_condition_result_4 == NUITKA_BOOL_TRUE) {
            goto branch_yes_2;
        } else {
            goto branch_no_2;
        }
    }
    branch_yes_2:;
    {
        PyObject *tmp_assign_source_16;
        PyObject *tmp_called_value_1;
        PyObject *tmp_expression_value_4;
        PyObject *tmp_args_value_1;
        PyObject *tmp_tuple_element_2;
        PyObject *tmp_kwargs_value_1;
        CHECK_OBJECT(tmp_class_creation_1__metaclass);
        tmp_expression_value_4 = tmp_class_creation_1__metaclass;
        tmp_called_value_1 = LOOKUP_ATTRIBUTE(tmp_expression_value_4, mod_consts[443]);
        if (tmp_called_value_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 65;

            goto try_except_handler_1;
        }
        tmp_tuple_element_2 = mod_consts[444];
        tmp_args_value_1 = PyTuple_New(2);
        PyTuple_SET_ITEM0(tmp_args_value_1, 0, tmp_tuple_element_2);
        CHECK_OBJECT(tmp_class_creation_1__bases);
        tmp_tuple_element_2 = tmp_class_creation_1__bases;
        PyTuple_SET_ITEM0(tmp_args_value_1, 1, tmp_tuple_element_2);
        CHECK_OBJECT(tmp_class_creation_1__class_decl_dict);
        tmp_kwargs_value_1 = tmp_class_creation_1__class_decl_dict;
        frame_79a9a0fab045cdec33bf55099eaef1e6->m_frame.f_lineno = 65;
        tmp_assign_source_16 = CALL_FUNCTION(tmp_called_value_1, tmp_args_value_1, tmp_kwargs_value_1);
        Py_DECREF(tmp_called_value_1);
        Py_DECREF(tmp_args_value_1);
        if (tmp_assign_source_16 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 65;

            goto try_except_handler_1;
        }
        assert(tmp_class_creation_1__prepared == NULL);
        tmp_class_creation_1__prepared = tmp_assign_source_16;
    }
    {
        bool tmp_condition_result_5;
        PyObject *tmp_operand_value_1;
        PyObject *tmp_expression_value_5;
        CHECK_OBJECT(tmp_class_creation_1__prepared);
        tmp_expression_value_5 = tmp_class_creation_1__prepared;
        tmp_result = HAS_ATTR_BOOL(tmp_expression_value_5, mod_consts[445]);
        tmp_operand_value_1 = (tmp_result) ? Py_True : Py_False;
        tmp_res = CHECK_IF_TRUE(tmp_operand_value_1);
        if (tmp_res == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 65;

            goto try_except_handler_1;
        }
        tmp_condition_result_5 = (tmp_res == 0) ? true : false;
        if (tmp_condition_result_5 != false) {
            goto branch_yes_3;
        } else {
            goto branch_no_3;
        }
    }
    branch_yes_3:;
    {
        PyObject *tmp_raise_type_1;
        PyObject *tmp_raise_value_1;
        PyObject *tmp_left_value_1;
        PyObject *tmp_right_value_1;
        PyObject *tmp_tuple_element_3;
        PyObject *tmp_getattr_target_1;
        PyObject *tmp_getattr_attr_1;
        PyObject *tmp_getattr_default_1;
        tmp_raise_type_1 = PyExc_TypeError;
        tmp_left_value_1 = mod_consts[446];
        CHECK_OBJECT(tmp_class_creation_1__metaclass);
        tmp_getattr_target_1 = tmp_class_creation_1__metaclass;
        tmp_getattr_attr_1 = mod_consts[447];
        tmp_getattr_default_1 = mod_consts[448];
        tmp_tuple_element_3 = BUILTIN_GETATTR(tmp_getattr_target_1, tmp_getattr_attr_1, tmp_getattr_default_1);
        if (tmp_tuple_element_3 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 65;

            goto try_except_handler_1;
        }
        tmp_right_value_1 = PyTuple_New(2);
        {
            PyObject *tmp_expression_value_6;
            PyObject *tmp_type_arg_2;
            PyTuple_SET_ITEM(tmp_right_value_1, 0, tmp_tuple_element_3);
            CHECK_OBJECT(tmp_class_creation_1__prepared);
            tmp_type_arg_2 = tmp_class_creation_1__prepared;
            tmp_expression_value_6 = BUILTIN_TYPE1(tmp_type_arg_2);
            assert(!(tmp_expression_value_6 == NULL));
            tmp_tuple_element_3 = LOOKUP_ATTRIBUTE(tmp_expression_value_6, mod_consts[447]);
            Py_DECREF(tmp_expression_value_6);
            if (tmp_tuple_element_3 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 65;

                goto tuple_build_exception_1;
            }
            PyTuple_SET_ITEM(tmp_right_value_1, 1, tmp_tuple_element_3);
        }
        goto tuple_build_noexception_1;
        // Exception handling pass through code for tuple_build:
        tuple_build_exception_1:;
        Py_DECREF(tmp_right_value_1);
        goto try_except_handler_1;
        // Finished with no exception for tuple_build:
        tuple_build_noexception_1:;
        tmp_raise_value_1 = BINARY_OPERATION_MOD_OBJECT_UNICODE_TUPLE(tmp_left_value_1, tmp_right_value_1);
        Py_DECREF(tmp_right_value_1);
        if (tmp_raise_value_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 65;

            goto try_except_handler_1;
        }
        exception_type = tmp_raise_type_1;
        Py_INCREF(tmp_raise_type_1);
        exception_value = tmp_raise_value_1;
        exception_lineno = 65;
        RAISE_EXCEPTION_IMPLICIT(&exception_type, &exception_value, &exception_tb);

        goto try_except_handler_1;
    }
    branch_no_3:;
    goto branch_end_2;
    branch_no_2:;
    {
        PyObject *tmp_assign_source_17;
        tmp_assign_source_17 = PyDict_New();
        assert(tmp_class_creation_1__prepared == NULL);
        tmp_class_creation_1__prepared = tmp_assign_source_17;
    }
    branch_end_2:;
    {
        PyObject *tmp_assign_source_18;
        {
            PyObject *tmp_set_locals_1;
            CHECK_OBJECT(tmp_class_creation_1__prepared);
            tmp_set_locals_1 = tmp_class_creation_1__prepared;
            locals_hikari$api$rest$$$class__1_TokenStrategy_65 = tmp_set_locals_1;
            Py_INCREF(tmp_set_locals_1);
        }
        // Tried code:
        // Tried code:
        tmp_dictset_value = mod_consts[449];
        tmp_res = PyObject_SetItem(locals_hikari$api$rest$$$class__1_TokenStrategy_65, mod_consts[450], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 65;

            goto try_except_handler_3;
        }
        tmp_dictset_value = mod_consts[451];
        tmp_res = PyObject_SetItem(locals_hikari$api$rest$$$class__1_TokenStrategy_65, mod_consts[420], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 65;

            goto try_except_handler_3;
        }
        tmp_dictset_value = mod_consts[444];
        tmp_res = PyObject_SetItem(locals_hikari$api$rest$$$class__1_TokenStrategy_65, mod_consts[452], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 65;

            goto try_except_handler_3;
        }
        tmp_dictset_value = PyDict_New();
        tmp_res = PyObject_SetItem(locals_hikari$api$rest$$$class__1_TokenStrategy_65, mod_consts[426], tmp_dictset_value);
        Py_DECREF(tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 65;

            goto try_except_handler_3;
        }
        if (isFrameUnusable(cache_frame_a29cd1033c35705b678c14be18c09b67_2)) {
            Py_XDECREF(cache_frame_a29cd1033c35705b678c14be18c09b67_2);

#if _DEBUG_REFCOUNTS
            if (cache_frame_a29cd1033c35705b678c14be18c09b67_2 == NULL) {
                count_active_frame_cache_instances += 1;
            } else {
                count_released_frame_cache_instances += 1;
            }
            count_allocated_frame_cache_instances += 1;
#endif
            cache_frame_a29cd1033c35705b678c14be18c09b67_2 = MAKE_FUNCTION_FRAME(codeobj_a29cd1033c35705b678c14be18c09b67, module_hikari$api$rest, sizeof(void *));
#if _DEBUG_REFCOUNTS
        } else {
            count_hit_frame_cache_instances += 1;
#endif
        }
        assert(cache_frame_a29cd1033c35705b678c14be18c09b67_2->m_type_description == NULL);
        frame_a29cd1033c35705b678c14be18c09b67_2 = cache_frame_a29cd1033c35705b678c14be18c09b67_2;

        // Push the new frame as the currently active one.
        pushFrameStack(frame_a29cd1033c35705b678c14be18c09b67_2);

        // Mark the frame object as in use, ref count 1 will be up for reuse.
        assert(Py_REFCNT(frame_a29cd1033c35705b678c14be18c09b67_2) == 2); // Frame stack

        // Framed code:
        tmp_dictset_value = mod_consts[453];
        tmp_res = PyObject_SetItem(locals_hikari$api$rest$$$class__1_TokenStrategy_65, mod_consts[454], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 68;
            type_description_2 = "o";
            goto frame_exception_exit_2;
        }
        {
            PyObject *tmp_ass_subvalue_1;
            PyObject *tmp_ass_subscribed_1;
            PyObject *tmp_ass_subscript_1;
            tmp_ass_subvalue_1 = mod_consts[455];
            tmp_ass_subscribed_1 = PyObject_GetItem(locals_hikari$api$rest$$$class__1_TokenStrategy_65, mod_consts[426]);

            if (unlikely(tmp_ass_subscribed_1 == NULL && CHECK_AND_CLEAR_KEY_ERROR_OCCURRED())) {

                FORMAT_NAME_ERROR(&exception_type, &exception_value, mod_consts[426]);
                NORMALIZE_EXCEPTION(&exception_type, &exception_value, &exception_tb);
                CHAIN_EXCEPTION(exception_value);

                exception_lineno = 68;
                type_description_2 = "o";
                goto frame_exception_exit_2;
            }

            if (tmp_ass_subscribed_1 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 68;
                type_description_2 = "o";
                goto frame_exception_exit_2;
            }
            tmp_ass_subscript_1 = mod_consts[454];
            tmp_result = SET_SUBSCRIPT(tmp_ass_subscribed_1, tmp_ass_subscript_1, tmp_ass_subvalue_1);
            Py_DECREF(tmp_ass_subscribed_1);
            if (tmp_result == false) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 68;
                type_description_2 = "o";
                goto frame_exception_exit_2;
            }
        }
        {
            nuitka_bool tmp_condition_result_6;
            PyObject *tmp_called_value_2;
            PyObject *tmp_args_element_value_1;
            PyObject *tmp_called_instance_1;
            PyObject *tmp_args_element_value_2;
            PyObject *tmp_annotations_1;
            PyObject *tmp_called_value_3;
            PyObject *tmp_args_element_value_3;
            PyObject *tmp_called_instance_2;
            PyObject *tmp_args_element_value_4;
            PyObject *tmp_annotations_2;
            tmp_res = MAPPING_HAS_ITEM(locals_hikari$api$rest$$$class__1_TokenStrategy_65, mod_consts[456]);

            if (tmp_res == -1) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 70;
                type_description_2 = "o";
                goto frame_exception_exit_2;
            }
            tmp_condition_result_6 = (tmp_res == 1) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
            if (tmp_condition_result_6 == NUITKA_BOOL_TRUE) {
                goto condexpr_true_3;
            } else {
                goto condexpr_false_3;
            }
            condexpr_true_3:;
            tmp_called_value_2 = PyObject_GetItem(locals_hikari$api$rest$$$class__1_TokenStrategy_65, mod_consts[456]);

            if (unlikely(tmp_called_value_2 == NULL && CHECK_AND_CLEAR_KEY_ERROR_OCCURRED())) {

                FORMAT_NAME_ERROR(&exception_type, &exception_value, mod_consts[456]);
                NORMALIZE_EXCEPTION(&exception_type, &exception_value, &exception_tb);
                CHAIN_EXCEPTION(exception_value);

                exception_lineno = 70;
                type_description_2 = "o";
                goto frame_exception_exit_2;
            }

            if (tmp_called_value_2 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 70;
                type_description_2 = "o";
                goto frame_exception_exit_2;
            }
            tmp_called_instance_1 = PyObject_GetItem(locals_hikari$api$rest$$$class__1_TokenStrategy_65, mod_consts[431]);

            if (tmp_called_instance_1 == NULL) {
                if (CHECK_AND_CLEAR_KEY_ERROR_OCCURRED()) {
                    tmp_called_instance_1 = GET_STRING_DICT_VALUE(moduledict_hikari$api$rest, (Nuitka_StringObject *)mod_consts[431]);

                    if (unlikely(tmp_called_instance_1 == NULL)) {
                        tmp_called_instance_1 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[431]);
                    }

                    if (tmp_called_instance_1 == NULL) {
                        assert(ERROR_OCCURRED());

                        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
                        Py_DECREF(tmp_called_value_2);

                        exception_lineno = 71;
                        type_description_2 = "o";
                        goto frame_exception_exit_2;
                    }
                    Py_INCREF(tmp_called_instance_1);
                } else {
                    goto frame_exception_exit_2;
                }
            }

            tmp_annotations_1 = PyDict_Copy(mod_consts[458]);


            tmp_args_element_value_2 = MAKE_FUNCTION_hikari$api$rest$$$function__1_token_type(tmp_annotations_1);

            frame_a29cd1033c35705b678c14be18c09b67_2->m_frame.f_lineno = 71;
            tmp_args_element_value_1 = CALL_METHOD_WITH_SINGLE_ARG(tmp_called_instance_1, mod_consts[457], tmp_args_element_value_2);
            Py_DECREF(tmp_called_instance_1);
            Py_DECREF(tmp_args_element_value_2);
            if (tmp_args_element_value_1 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
                Py_DECREF(tmp_called_value_2);

                exception_lineno = 71;
                type_description_2 = "o";
                goto frame_exception_exit_2;
            }
            frame_a29cd1033c35705b678c14be18c09b67_2->m_frame.f_lineno = 70;
            tmp_dictset_value = CALL_FUNCTION_WITH_SINGLE_ARG(tmp_called_value_2, tmp_args_element_value_1);
            Py_DECREF(tmp_called_value_2);
            Py_DECREF(tmp_args_element_value_1);
            if (tmp_dictset_value == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 70;
                type_description_2 = "o";
                goto frame_exception_exit_2;
            }
            goto condexpr_end_3;
            condexpr_false_3:;
            tmp_called_value_3 = (PyObject *)&PyProperty_Type;
            tmp_called_instance_2 = PyObject_GetItem(locals_hikari$api$rest$$$class__1_TokenStrategy_65, mod_consts[431]);

            if (tmp_called_instance_2 == NULL) {
                if (CHECK_AND_CLEAR_KEY_ERROR_OCCURRED()) {
                    tmp_called_instance_2 = GET_STRING_DICT_VALUE(moduledict_hikari$api$rest, (Nuitka_StringObject *)mod_consts[431]);

                    if (unlikely(tmp_called_instance_2 == NULL)) {
                        tmp_called_instance_2 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[431]);
                    }

                    if (tmp_called_instance_2 == NULL) {
                        assert(ERROR_OCCURRED());

                        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                        exception_lineno = 71;
                        type_description_2 = "o";
                        goto frame_exception_exit_2;
                    }
                    Py_INCREF(tmp_called_instance_2);
                } else {
                    goto frame_exception_exit_2;
                }
            }

            tmp_annotations_2 = PyDict_Copy(mod_consts[458]);


            tmp_args_element_value_4 = MAKE_FUNCTION_hikari$api$rest$$$function__1_token_type(tmp_annotations_2);

            frame_a29cd1033c35705b678c14be18c09b67_2->m_frame.f_lineno = 71;
            tmp_args_element_value_3 = CALL_METHOD_WITH_SINGLE_ARG(tmp_called_instance_2, mod_consts[457], tmp_args_element_value_4);
            Py_DECREF(tmp_called_instance_2);
            Py_DECREF(tmp_args_element_value_4);
            if (tmp_args_element_value_3 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 71;
                type_description_2 = "o";
                goto frame_exception_exit_2;
            }
            frame_a29cd1033c35705b678c14be18c09b67_2->m_frame.f_lineno = 70;
            tmp_dictset_value = CALL_FUNCTION_WITH_SINGLE_ARG(tmp_called_value_3, tmp_args_element_value_3);
            Py_DECREF(tmp_args_element_value_3);
            if (tmp_dictset_value == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 70;
                type_description_2 = "o";
                goto frame_exception_exit_2;
            }
            condexpr_end_3:;
            tmp_res = PyObject_SetItem(locals_hikari$api$rest$$$class__1_TokenStrategy_65, mod_consts[460], tmp_dictset_value);
            Py_DECREF(tmp_dictset_value);
            if (tmp_res != 0) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 72;
                type_description_2 = "o";
                goto frame_exception_exit_2;
            }
        }
        {
            PyObject *tmp_called_instance_3;
            PyObject *tmp_args_element_value_5;
            PyObject *tmp_annotations_3;
            tmp_called_instance_3 = PyObject_GetItem(locals_hikari$api$rest$$$class__1_TokenStrategy_65, mod_consts[431]);

            if (tmp_called_instance_3 == NULL) {
                if (CHECK_AND_CLEAR_KEY_ERROR_OCCURRED()) {
                    tmp_called_instance_3 = GET_STRING_DICT_VALUE(moduledict_hikari$api$rest, (Nuitka_StringObject *)mod_consts[431]);

                    if (unlikely(tmp_called_instance_3 == NULL)) {
                        tmp_called_instance_3 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[431]);
                    }

                    if (tmp_called_instance_3 == NULL) {
                        assert(ERROR_OCCURRED());

                        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                        exception_lineno = 81;
                        type_description_2 = "o";
                        goto frame_exception_exit_2;
                    }
                    Py_INCREF(tmp_called_instance_3);
                } else {
                    goto frame_exception_exit_2;
                }
            }

            tmp_annotations_3 = PyDict_Copy(mod_consts[462]);


            tmp_args_element_value_5 = MAKE_FUNCTION_hikari$api$rest$$$function__2_acquire(tmp_annotations_3);

            frame_a29cd1033c35705b678c14be18c09b67_2->m_frame.f_lineno = 81;
            tmp_dictset_value = CALL_METHOD_WITH_SINGLE_ARG(tmp_called_instance_3, mod_consts[457], tmp_args_element_value_5);
            Py_DECREF(tmp_called_instance_3);
            Py_DECREF(tmp_args_element_value_5);
            if (tmp_dictset_value == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 81;
                type_description_2 = "o";
                goto frame_exception_exit_2;
            }
            tmp_res = PyObject_SetItem(locals_hikari$api$rest$$$class__1_TokenStrategy_65, mod_consts[1], tmp_dictset_value);
            Py_DECREF(tmp_dictset_value);
            if (tmp_res != 0) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 82;
                type_description_2 = "o";
                goto frame_exception_exit_2;
            }
        }
        {
            PyObject *tmp_called_instance_4;
            PyObject *tmp_args_element_value_6;
            PyObject *tmp_annotations_4;
            tmp_called_instance_4 = PyObject_GetItem(locals_hikari$api$rest$$$class__1_TokenStrategy_65, mod_consts[431]);

            if (tmp_called_instance_4 == NULL) {
                if (CHECK_AND_CLEAR_KEY_ERROR_OCCURRED()) {
                    tmp_called_instance_4 = GET_STRING_DICT_VALUE(moduledict_hikari$api$rest, (Nuitka_StringObject *)mod_consts[431]);

                    if (unlikely(tmp_called_instance_4 == NULL)) {
                        tmp_called_instance_4 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[431]);
                    }

                    if (tmp_called_instance_4 == NULL) {
                        assert(ERROR_OCCURRED());

                        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                        exception_lineno = 92;
                        type_description_2 = "o";
                        goto frame_exception_exit_2;
                    }
                    Py_INCREF(tmp_called_instance_4);
                } else {
                    goto frame_exception_exit_2;
                }
            }

            tmp_annotations_4 = PyDict_Copy(mod_consts[463]);


            tmp_args_element_value_6 = MAKE_FUNCTION_hikari$api$rest$$$function__3_invalidate(tmp_annotations_4);

            frame_a29cd1033c35705b678c14be18c09b67_2->m_frame.f_lineno = 92;
            tmp_dictset_value = CALL_METHOD_WITH_SINGLE_ARG(tmp_called_instance_4, mod_consts[457], tmp_args_element_value_6);
            Py_DECREF(tmp_called_instance_4);
            Py_DECREF(tmp_args_element_value_6);
            if (tmp_dictset_value == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 92;
                type_description_2 = "o";
                goto frame_exception_exit_2;
            }
            tmp_res = PyObject_SetItem(locals_hikari$api$rest$$$class__1_TokenStrategy_65, mod_consts[465], tmp_dictset_value);
            Py_DECREF(tmp_dictset_value);
            if (tmp_res != 0) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 93;
                type_description_2 = "o";
                goto frame_exception_exit_2;
            }
        }

#if 0
        RESTORE_FRAME_EXCEPTION(frame_a29cd1033c35705b678c14be18c09b67_2);
#endif

        // Put the previous frame back on top.
        popFrameStack();

        goto frame_no_exception_1;

        frame_exception_exit_2:;

#if 0
        RESTORE_FRAME_EXCEPTION(frame_a29cd1033c35705b678c14be18c09b67_2);
#endif

        if (exception_tb == NULL) {
            exception_tb = MAKE_TRACEBACK(frame_a29cd1033c35705b678c14be18c09b67_2, exception_lineno);
        } else if (exception_tb->tb_frame != &frame_a29cd1033c35705b678c14be18c09b67_2->m_frame) {
            exception_tb = ADD_TRACEBACK(exception_tb, frame_a29cd1033c35705b678c14be18c09b67_2, exception_lineno);
        }

        // Attaches locals to frame if any.
        Nuitka_Frame_AttachLocals(
            frame_a29cd1033c35705b678c14be18c09b67_2,
            type_description_2,
            outline_0_var___class__
        );


        // Release cached frame if used for exception.
        if (frame_a29cd1033c35705b678c14be18c09b67_2 == cache_frame_a29cd1033c35705b678c14be18c09b67_2) {
#if _DEBUG_REFCOUNTS
            count_active_frame_cache_instances -= 1;
            count_released_frame_cache_instances += 1;
#endif

            Py_DECREF(cache_frame_a29cd1033c35705b678c14be18c09b67_2);
            cache_frame_a29cd1033c35705b678c14be18c09b67_2 = NULL;
        }

        assertFrameObject(frame_a29cd1033c35705b678c14be18c09b67_2);

        // Put the previous frame back on top.
        popFrameStack();

        // Return the error.
        goto nested_frame_exit_1;

        frame_no_exception_1:;
        goto skip_nested_handling_1;
        nested_frame_exit_1:;

        goto try_except_handler_3;
        skip_nested_handling_1:;
        {
            nuitka_bool tmp_condition_result_7;
            PyObject *tmp_cmp_expr_left_1;
            PyObject *tmp_cmp_expr_right_1;
            CHECK_OBJECT(tmp_class_creation_1__bases);
            tmp_cmp_expr_left_1 = tmp_class_creation_1__bases;
            CHECK_OBJECT(tmp_class_creation_1__bases_orig);
            tmp_cmp_expr_right_1 = tmp_class_creation_1__bases_orig;
            tmp_condition_result_7 = RICH_COMPARE_NE_NBOOL_OBJECT_TUPLE(tmp_cmp_expr_left_1, tmp_cmp_expr_right_1);
            if (tmp_condition_result_7 == NUITKA_BOOL_EXCEPTION) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 65;

                goto try_except_handler_3;
            }
            if (tmp_condition_result_7 == NUITKA_BOOL_TRUE) {
                goto branch_yes_4;
            } else {
                goto branch_no_4;
            }
            assert(tmp_condition_result_7 != NUITKA_BOOL_UNASSIGNED);
        }
        branch_yes_4:;
        CHECK_OBJECT(tmp_class_creation_1__bases_orig);
        tmp_dictset_value = tmp_class_creation_1__bases_orig;
        tmp_res = PyObject_SetItem(locals_hikari$api$rest$$$class__1_TokenStrategy_65, mod_consts[467], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 65;

            goto try_except_handler_3;
        }
        branch_no_4:;
        {
            PyObject *tmp_assign_source_19;
            PyObject *tmp_called_value_4;
            PyObject *tmp_args_value_2;
            PyObject *tmp_tuple_element_4;
            PyObject *tmp_kwargs_value_2;
            CHECK_OBJECT(tmp_class_creation_1__metaclass);
            tmp_called_value_4 = tmp_class_creation_1__metaclass;
            tmp_tuple_element_4 = mod_consts[444];
            tmp_args_value_2 = PyTuple_New(3);
            PyTuple_SET_ITEM0(tmp_args_value_2, 0, tmp_tuple_element_4);
            CHECK_OBJECT(tmp_class_creation_1__bases);
            tmp_tuple_element_4 = tmp_class_creation_1__bases;
            PyTuple_SET_ITEM0(tmp_args_value_2, 1, tmp_tuple_element_4);
            tmp_tuple_element_4 = locals_hikari$api$rest$$$class__1_TokenStrategy_65;
            PyTuple_SET_ITEM0(tmp_args_value_2, 2, tmp_tuple_element_4);
            CHECK_OBJECT(tmp_class_creation_1__class_decl_dict);
            tmp_kwargs_value_2 = tmp_class_creation_1__class_decl_dict;
            frame_79a9a0fab045cdec33bf55099eaef1e6->m_frame.f_lineno = 65;
            tmp_assign_source_19 = CALL_FUNCTION(tmp_called_value_4, tmp_args_value_2, tmp_kwargs_value_2);
            Py_DECREF(tmp_args_value_2);
            if (tmp_assign_source_19 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 65;

                goto try_except_handler_3;
            }
            assert(outline_0_var___class__ == NULL);
            outline_0_var___class__ = tmp_assign_source_19;
        }
        CHECK_OBJECT(outline_0_var___class__);
        tmp_assign_source_18 = outline_0_var___class__;
        Py_INCREF(tmp_assign_source_18);
        goto try_return_handler_3;
        NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
        return NULL;
        // Return handler code:
        try_return_handler_3:;
        Py_DECREF(locals_hikari$api$rest$$$class__1_TokenStrategy_65);
        locals_hikari$api$rest$$$class__1_TokenStrategy_65 = NULL;
        goto try_return_handler_2;
        // Exception handler code:
        try_except_handler_3:;
        exception_keeper_type_1 = exception_type;
        exception_keeper_value_1 = exception_value;
        exception_keeper_tb_1 = exception_tb;
        exception_keeper_lineno_1 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        Py_DECREF(locals_hikari$api$rest$$$class__1_TokenStrategy_65);
        locals_hikari$api$rest$$$class__1_TokenStrategy_65 = NULL;
        // Re-raise.
        exception_type = exception_keeper_type_1;
        exception_value = exception_keeper_value_1;
        exception_tb = exception_keeper_tb_1;
        exception_lineno = exception_keeper_lineno_1;

        goto try_except_handler_2;
        // End of try:
        NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
        return NULL;
        // Return handler code:
        try_return_handler_2:;
        CHECK_OBJECT(outline_0_var___class__);
        Py_DECREF(outline_0_var___class__);
        outline_0_var___class__ = NULL;
        goto outline_result_1;
        // Exception handler code:
        try_except_handler_2:;
        exception_keeper_type_2 = exception_type;
        exception_keeper_value_2 = exception_value;
        exception_keeper_tb_2 = exception_tb;
        exception_keeper_lineno_2 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        // Re-raise.
        exception_type = exception_keeper_type_2;
        exception_value = exception_keeper_value_2;
        exception_tb = exception_keeper_tb_2;
        exception_lineno = exception_keeper_lineno_2;

        goto outline_exception_1;
        // End of try:
        NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
        return NULL;
        outline_exception_1:;
        exception_lineno = 65;
        goto try_except_handler_1;
        outline_result_1:;
        UPDATE_STRING_DICT1(moduledict_hikari$api$rest, (Nuitka_StringObject *)mod_consts[444], tmp_assign_source_18);
    }
    goto try_end_1;
    // Exception handler code:
    try_except_handler_1:;
    exception_keeper_type_3 = exception_type;
    exception_keeper_value_3 = exception_value;
    exception_keeper_tb_3 = exception_tb;
    exception_keeper_lineno_3 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF(tmp_class_creation_1__bases_orig);
    tmp_class_creation_1__bases_orig = NULL;
    Py_XDECREF(tmp_class_creation_1__bases);
    tmp_class_creation_1__bases = NULL;
    Py_XDECREF(tmp_class_creation_1__class_decl_dict);
    tmp_class_creation_1__class_decl_dict = NULL;
    Py_XDECREF(tmp_class_creation_1__metaclass);
    tmp_class_creation_1__metaclass = NULL;
    Py_XDECREF(tmp_class_creation_1__prepared);
    tmp_class_creation_1__prepared = NULL;
    // Re-raise.
    exception_type = exception_keeper_type_3;
    exception_value = exception_keeper_value_3;
    exception_tb = exception_keeper_tb_3;
    exception_lineno = exception_keeper_lineno_3;

    goto frame_exception_exit_1;
    // End of try:
    try_end_1:;
    CHECK_OBJECT(tmp_class_creation_1__bases_orig);
    Py_DECREF(tmp_class_creation_1__bases_orig);
    tmp_class_creation_1__bases_orig = NULL;
    CHECK_OBJECT(tmp_class_creation_1__bases);
    Py_DECREF(tmp_class_creation_1__bases);
    tmp_class_creation_1__bases = NULL;
    CHECK_OBJECT(tmp_class_creation_1__class_decl_dict);
    Py_DECREF(tmp_class_creation_1__class_decl_dict);
    tmp_class_creation_1__class_decl_dict = NULL;
    CHECK_OBJECT(tmp_class_creation_1__metaclass);
    Py_DECREF(tmp_class_creation_1__metaclass);
    tmp_class_creation_1__metaclass = NULL;
    CHECK_OBJECT(tmp_class_creation_1__prepared);
    Py_DECREF(tmp_class_creation_1__prepared);
    tmp_class_creation_1__prepared = NULL;
    // Tried code:
    {
        PyObject *tmp_assign_source_20;
        PyObject *tmp_tuple_element_5;
        PyObject *tmp_expression_value_7;
        tmp_expression_value_7 = GET_STRING_DICT_VALUE(moduledict_hikari$api$rest, (Nuitka_StringObject *)mod_consts[438]);

        if (unlikely(tmp_expression_value_7 == NULL)) {
            tmp_expression_value_7 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[438]);
        }

        if (tmp_expression_value_7 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 110;

            goto try_except_handler_4;
        }
        tmp_tuple_element_5 = LOOKUP_ATTRIBUTE(tmp_expression_value_7, mod_consts[468]);
        if (tmp_tuple_element_5 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 110;

            goto try_except_handler_4;
        }
        tmp_assign_source_20 = PyTuple_New(2);
        {
            PyObject *tmp_expression_value_8;
            PyTuple_SET_ITEM(tmp_assign_source_20, 0, tmp_tuple_element_5);
            tmp_expression_value_8 = GET_STRING_DICT_VALUE(moduledict_hikari$api$rest, (Nuitka_StringObject *)mod_consts[431]);

            if (unlikely(tmp_expression_value_8 == NULL)) {
                tmp_expression_value_8 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[431]);
            }

            if (tmp_expression_value_8 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 110;

                goto tuple_build_exception_2;
            }
            tmp_tuple_element_5 = LOOKUP_ATTRIBUTE(tmp_expression_value_8, mod_consts[441]);
            if (tmp_tuple_element_5 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 110;

                goto tuple_build_exception_2;
            }
            PyTuple_SET_ITEM(tmp_assign_source_20, 1, tmp_tuple_element_5);
        }
        goto tuple_build_noexception_2;
        // Exception handling pass through code for tuple_build:
        tuple_build_exception_2:;
        Py_DECREF(tmp_assign_source_20);
        goto try_except_handler_4;
        // Finished with no exception for tuple_build:
        tuple_build_noexception_2:;
        assert(tmp_class_creation_2__bases_orig == NULL);
        tmp_class_creation_2__bases_orig = tmp_assign_source_20;
    }
    {
        PyObject *tmp_assign_source_21;
        PyObject *tmp_dircall_arg1_2;
        CHECK_OBJECT(tmp_class_creation_2__bases_orig);
        tmp_dircall_arg1_2 = tmp_class_creation_2__bases_orig;
        Py_INCREF(tmp_dircall_arg1_2);

        {
            PyObject *dir_call_args[] = {tmp_dircall_arg1_2};
            tmp_assign_source_21 = impl___main__$$$function__4__mro_entries_conversion(dir_call_args);
        }
        if (tmp_assign_source_21 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 110;

            goto try_except_handler_4;
        }
        assert(tmp_class_creation_2__bases == NULL);
        tmp_class_creation_2__bases = tmp_assign_source_21;
    }
    {
        PyObject *tmp_assign_source_22;
        tmp_assign_source_22 = PyDict_New();
        assert(tmp_class_creation_2__class_decl_dict == NULL);
        tmp_class_creation_2__class_decl_dict = tmp_assign_source_22;
    }
    {
        PyObject *tmp_assign_source_23;
        PyObject *tmp_metaclass_value_2;
        bool tmp_condition_result_8;
        PyObject *tmp_key_value_4;
        PyObject *tmp_dict_arg_value_4;
        PyObject *tmp_dict_arg_value_5;
        PyObject *tmp_key_value_5;
        nuitka_bool tmp_condition_result_9;
        int tmp_truth_name_2;
        PyObject *tmp_type_arg_3;
        PyObject *tmp_expression_value_9;
        PyObject *tmp_subscript_value_2;
        PyObject *tmp_bases_value_2;
        tmp_key_value_4 = mod_consts[442];
        CHECK_OBJECT(tmp_class_creation_2__class_decl_dict);
        tmp_dict_arg_value_4 = tmp_class_creation_2__class_decl_dict;
        tmp_res = DICT_HAS_ITEM(tmp_dict_arg_value_4, tmp_key_value_4);
        assert(!(tmp_res == -1));
        tmp_condition_result_8 = (tmp_res != 0) ? true : false;
        if (tmp_condition_result_8 != false) {
            goto condexpr_true_4;
        } else {
            goto condexpr_false_4;
        }
        condexpr_true_4:;
        CHECK_OBJECT(tmp_class_creation_2__class_decl_dict);
        tmp_dict_arg_value_5 = tmp_class_creation_2__class_decl_dict;
        tmp_key_value_5 = mod_consts[442];
        tmp_metaclass_value_2 = DICT_GET_ITEM0(tmp_dict_arg_value_5, tmp_key_value_5);
        if (tmp_metaclass_value_2 == NULL) {
            tmp_metaclass_value_2 = Py_None;
        }
        assert(!(tmp_metaclass_value_2 == NULL));
        Py_INCREF(tmp_metaclass_value_2);
        goto condexpr_end_4;
        condexpr_false_4:;
        CHECK_OBJECT(tmp_class_creation_2__bases);
        tmp_truth_name_2 = CHECK_IF_TRUE(tmp_class_creation_2__bases);
        if (tmp_truth_name_2 == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 110;

            goto try_except_handler_4;
        }
        tmp_condition_result_9 = tmp_truth_name_2 == 0 ? NUITKA_BOOL_FALSE : NUITKA_BOOL_TRUE;
        if (tmp_condition_result_9 == NUITKA_BOOL_TRUE) {
            goto condexpr_true_5;
        } else {
            goto condexpr_false_5;
        }
        condexpr_true_5:;
        CHECK_OBJECT(tmp_class_creation_2__bases);
        tmp_expression_value_9 = tmp_class_creation_2__bases;
        tmp_subscript_value_2 = mod_consts[432];
        tmp_type_arg_3 = LOOKUP_SUBSCRIPT_CONST(tmp_expression_value_9, tmp_subscript_value_2, 0);
        if (tmp_type_arg_3 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 110;

            goto try_except_handler_4;
        }
        tmp_metaclass_value_2 = BUILTIN_TYPE1(tmp_type_arg_3);
        Py_DECREF(tmp_type_arg_3);
        if (tmp_metaclass_value_2 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 110;

            goto try_except_handler_4;
        }
        goto condexpr_end_5;
        condexpr_false_5:;
        tmp_metaclass_value_2 = (PyObject *)&PyType_Type;
        Py_INCREF(tmp_metaclass_value_2);
        condexpr_end_5:;
        condexpr_end_4:;
        CHECK_OBJECT(tmp_class_creation_2__bases);
        tmp_bases_value_2 = tmp_class_creation_2__bases;
        tmp_assign_source_23 = SELECT_METACLASS(tmp_metaclass_value_2, tmp_bases_value_2);
        Py_DECREF(tmp_metaclass_value_2);
        if (tmp_assign_source_23 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 110;

            goto try_except_handler_4;
        }
        assert(tmp_class_creation_2__metaclass == NULL);
        tmp_class_creation_2__metaclass = tmp_assign_source_23;
    }
    {
        bool tmp_condition_result_10;
        PyObject *tmp_key_value_6;
        PyObject *tmp_dict_arg_value_6;
        tmp_key_value_6 = mod_consts[442];
        CHECK_OBJECT(tmp_class_creation_2__class_decl_dict);
        tmp_dict_arg_value_6 = tmp_class_creation_2__class_decl_dict;
        tmp_res = DICT_HAS_ITEM(tmp_dict_arg_value_6, tmp_key_value_6);
        assert(!(tmp_res == -1));
        tmp_condition_result_10 = (tmp_res != 0) ? true : false;
        if (tmp_condition_result_10 != false) {
            goto branch_yes_5;
        } else {
            goto branch_no_5;
        }
    }
    branch_yes_5:;
    CHECK_OBJECT(tmp_class_creation_2__class_decl_dict);
    tmp_dictdel_dict = tmp_class_creation_2__class_decl_dict;
    tmp_dictdel_key = mod_consts[442];
    tmp_result = DICT_REMOVE_ITEM(tmp_dictdel_dict, tmp_dictdel_key);
    if (tmp_result == false) {
        assert(ERROR_OCCURRED());

        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


        exception_lineno = 110;

        goto try_except_handler_4;
    }
    branch_no_5:;
    {
        nuitka_bool tmp_condition_result_11;
        PyObject *tmp_expression_value_10;
        CHECK_OBJECT(tmp_class_creation_2__metaclass);
        tmp_expression_value_10 = tmp_class_creation_2__metaclass;
        tmp_result = HAS_ATTR_BOOL(tmp_expression_value_10, mod_consts[443]);
        tmp_condition_result_11 = (tmp_result) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        if (tmp_condition_result_11 == NUITKA_BOOL_TRUE) {
            goto branch_yes_6;
        } else {
            goto branch_no_6;
        }
    }
    branch_yes_6:;
    {
        PyObject *tmp_assign_source_24;
        PyObject *tmp_called_value_5;
        PyObject *tmp_expression_value_11;
        PyObject *tmp_args_value_3;
        PyObject *tmp_tuple_element_6;
        PyObject *tmp_kwargs_value_3;
        CHECK_OBJECT(tmp_class_creation_2__metaclass);
        tmp_expression_value_11 = tmp_class_creation_2__metaclass;
        tmp_called_value_5 = LOOKUP_ATTRIBUTE(tmp_expression_value_11, mod_consts[443]);
        if (tmp_called_value_5 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 110;

            goto try_except_handler_4;
        }
        tmp_tuple_element_6 = mod_consts[469];
        tmp_args_value_3 = PyTuple_New(2);
        PyTuple_SET_ITEM0(tmp_args_value_3, 0, tmp_tuple_element_6);
        CHECK_OBJECT(tmp_class_creation_2__bases);
        tmp_tuple_element_6 = tmp_class_creation_2__bases;
        PyTuple_SET_ITEM0(tmp_args_value_3, 1, tmp_tuple_element_6);
        CHECK_OBJECT(tmp_class_creation_2__class_decl_dict);
        tmp_kwargs_value_3 = tmp_class_creation_2__class_decl_dict;
        frame_79a9a0fab045cdec33bf55099eaef1e6->m_frame.f_lineno = 110;
        tmp_assign_source_24 = CALL_FUNCTION(tmp_called_value_5, tmp_args_value_3, tmp_kwargs_value_3);
        Py_DECREF(tmp_called_value_5);
        Py_DECREF(tmp_args_value_3);
        if (tmp_assign_source_24 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 110;

            goto try_except_handler_4;
        }
        assert(tmp_class_creation_2__prepared == NULL);
        tmp_class_creation_2__prepared = tmp_assign_source_24;
    }
    {
        bool tmp_condition_result_12;
        PyObject *tmp_operand_value_2;
        PyObject *tmp_expression_value_12;
        CHECK_OBJECT(tmp_class_creation_2__prepared);
        tmp_expression_value_12 = tmp_class_creation_2__prepared;
        tmp_result = HAS_ATTR_BOOL(tmp_expression_value_12, mod_consts[445]);
        tmp_operand_value_2 = (tmp_result) ? Py_True : Py_False;
        tmp_res = CHECK_IF_TRUE(tmp_operand_value_2);
        if (tmp_res == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 110;

            goto try_except_handler_4;
        }
        tmp_condition_result_12 = (tmp_res == 0) ? true : false;
        if (tmp_condition_result_12 != false) {
            goto branch_yes_7;
        } else {
            goto branch_no_7;
        }
    }
    branch_yes_7:;
    {
        PyObject *tmp_raise_type_2;
        PyObject *tmp_raise_value_2;
        PyObject *tmp_left_value_2;
        PyObject *tmp_right_value_2;
        PyObject *tmp_tuple_element_7;
        PyObject *tmp_getattr_target_2;
        PyObject *tmp_getattr_attr_2;
        PyObject *tmp_getattr_default_2;
        tmp_raise_type_2 = PyExc_TypeError;
        tmp_left_value_2 = mod_consts[446];
        CHECK_OBJECT(tmp_class_creation_2__metaclass);
        tmp_getattr_target_2 = tmp_class_creation_2__metaclass;
        tmp_getattr_attr_2 = mod_consts[447];
        tmp_getattr_default_2 = mod_consts[448];
        tmp_tuple_element_7 = BUILTIN_GETATTR(tmp_getattr_target_2, tmp_getattr_attr_2, tmp_getattr_default_2);
        if (tmp_tuple_element_7 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 110;

            goto try_except_handler_4;
        }
        tmp_right_value_2 = PyTuple_New(2);
        {
            PyObject *tmp_expression_value_13;
            PyObject *tmp_type_arg_4;
            PyTuple_SET_ITEM(tmp_right_value_2, 0, tmp_tuple_element_7);
            CHECK_OBJECT(tmp_class_creation_2__prepared);
            tmp_type_arg_4 = tmp_class_creation_2__prepared;
            tmp_expression_value_13 = BUILTIN_TYPE1(tmp_type_arg_4);
            assert(!(tmp_expression_value_13 == NULL));
            tmp_tuple_element_7 = LOOKUP_ATTRIBUTE(tmp_expression_value_13, mod_consts[447]);
            Py_DECREF(tmp_expression_value_13);
            if (tmp_tuple_element_7 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 110;

                goto tuple_build_exception_3;
            }
            PyTuple_SET_ITEM(tmp_right_value_2, 1, tmp_tuple_element_7);
        }
        goto tuple_build_noexception_3;
        // Exception handling pass through code for tuple_build:
        tuple_build_exception_3:;
        Py_DECREF(tmp_right_value_2);
        goto try_except_handler_4;
        // Finished with no exception for tuple_build:
        tuple_build_noexception_3:;
        tmp_raise_value_2 = BINARY_OPERATION_MOD_OBJECT_UNICODE_TUPLE(tmp_left_value_2, tmp_right_value_2);
        Py_DECREF(tmp_right_value_2);
        if (tmp_raise_value_2 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 110;

            goto try_except_handler_4;
        }
        exception_type = tmp_raise_type_2;
        Py_INCREF(tmp_raise_type_2);
        exception_value = tmp_raise_value_2;
        exception_lineno = 110;
        RAISE_EXCEPTION_IMPLICIT(&exception_type, &exception_value, &exception_tb);

        goto try_except_handler_4;
    }
    branch_no_7:;
    goto branch_end_6;
    branch_no_6:;
    {
        PyObject *tmp_assign_source_25;
        tmp_assign_source_25 = PyDict_New();
        assert(tmp_class_creation_2__prepared == NULL);
        tmp_class_creation_2__prepared = tmp_assign_source_25;
    }
    branch_end_6:;
    {
        PyObject *tmp_assign_source_26;
        {
            PyObject *tmp_set_locals_2;
            CHECK_OBJECT(tmp_class_creation_2__prepared);
            tmp_set_locals_2 = tmp_class_creation_2__prepared;
            locals_hikari$api$rest$$$class__2_RESTClient_110 = tmp_set_locals_2;
            Py_INCREF(tmp_set_locals_2);
        }
        // Tried code:
        // Tried code:
        tmp_dictset_value = mod_consts[449];
        tmp_res = PyObject_SetItem(locals_hikari$api$rest$$$class__2_RESTClient_110, mod_consts[450], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 110;

            goto try_except_handler_6;
        }
        tmp_dictset_value = mod_consts[470];
        tmp_res = PyObject_SetItem(locals_hikari$api$rest$$$class__2_RESTClient_110, mod_consts[420], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 110;

            goto try_except_handler_6;
        }
        tmp_dictset_value = mod_consts[469];
        tmp_res = PyObject_SetItem(locals_hikari$api$rest$$$class__2_RESTClient_110, mod_consts[452], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 110;

            goto try_except_handler_6;
        }
        tmp_dictset_value = PyDict_New();
        tmp_res = PyObject_SetItem(locals_hikari$api$rest$$$class__2_RESTClient_110, mod_consts[426], tmp_dictset_value);
        Py_DECREF(tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 110;

            goto try_except_handler_6;
        }
        if (isFrameUnusable(cache_frame_862833cacd6e5ba73c351f8d132a7b6b_3)) {
            Py_XDECREF(cache_frame_862833cacd6e5ba73c351f8d132a7b6b_3);

#if _DEBUG_REFCOUNTS
            if (cache_frame_862833cacd6e5ba73c351f8d132a7b6b_3 == NULL) {
                count_active_frame_cache_instances += 1;
            } else {
                count_released_frame_cache_instances += 1;
            }
            count_allocated_frame_cache_instances += 1;
#endif
            cache_frame_862833cacd6e5ba73c351f8d132a7b6b_3 = MAKE_FUNCTION_FRAME(codeobj_862833cacd6e5ba73c351f8d132a7b6b, module_hikari$api$rest, sizeof(void *));
#if _DEBUG_REFCOUNTS
        } else {
            count_hit_frame_cache_instances += 1;
#endif
        }
        assert(cache_frame_862833cacd6e5ba73c351f8d132a7b6b_3->m_type_description == NULL);
        frame_862833cacd6e5ba73c351f8d132a7b6b_3 = cache_frame_862833cacd6e5ba73c351f8d132a7b6b_3;

        // Push the new frame as the currently active one.
        pushFrameStack(frame_862833cacd6e5ba73c351f8d132a7b6b_3);

        // Mark the frame object as in use, ref count 1 will be up for reuse.
        assert(Py_REFCNT(frame_862833cacd6e5ba73c351f8d132a7b6b_3) == 2); // Frame stack

        // Framed code:
        tmp_dictset_value = mod_consts[453];
        tmp_res = PyObject_SetItem(locals_hikari$api$rest$$$class__2_RESTClient_110, mod_consts[454], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 113;
            type_description_2 = "o";
            goto frame_exception_exit_3;
        }
        {
            PyObject *tmp_ass_subvalue_2;
            PyObject *tmp_ass_subscribed_2;
            PyObject *tmp_ass_subscript_2;
            tmp_ass_subvalue_2 = mod_consts[455];
            tmp_ass_subscribed_2 = PyObject_GetItem(locals_hikari$api$rest$$$class__2_RESTClient_110, mod_consts[426]);

            if (unlikely(tmp_ass_subscribed_2 == NULL && CHECK_AND_CLEAR_KEY_ERROR_OCCURRED())) {

                FORMAT_NAME_ERROR(&exception_type, &exception_value, mod_consts[426]);
                NORMALIZE_EXCEPTION(&exception_type, &exception_value, &exception_tb);
                CHAIN_EXCEPTION(exception_value);

                exception_lineno = 113;
                type_description_2 = "o";
                goto frame_exception_exit_3;
            }

            if (tmp_ass_subscribed_2 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 113;
                type_description_2 = "o";
                goto frame_exception_exit_3;
            }
            tmp_ass_subscript_2 = mod_consts[454];
            tmp_result = SET_SUBSCRIPT(tmp_ass_subscribed_2, tmp_ass_subscript_2, tmp_ass_subvalue_2);
            Py_DECREF(tmp_ass_subscribed_2);
            if (tmp_result == false) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 113;
                type_description_2 = "o";
                goto frame_exception_exit_3;
            }
        }
        {
            nuitka_bool tmp_condition_result_13;
            PyObject *tmp_called_value_6;
            PyObject *tmp_args_element_value_7;
            PyObject *tmp_called_instance_5;
            PyObject *tmp_args_element_value_8;
            PyObject *tmp_annotations_5;
            PyObject *tmp_called_value_7;
            PyObject *tmp_args_element_value_9;
            PyObject *tmp_called_instance_6;
            PyObject *tmp_args_element_value_10;
            PyObject *tmp_annotations_6;
            tmp_res = MAPPING_HAS_ITEM(locals_hikari$api$rest$$$class__2_RESTClient_110, mod_consts[456]);

            if (tmp_res == -1) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 115;
                type_description_2 = "o";
                goto frame_exception_exit_3;
            }
            tmp_condition_result_13 = (tmp_res == 1) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
            if (tmp_condition_result_13 == NUITKA_BOOL_TRUE) {
                goto condexpr_true_6;
            } else {
                goto condexpr_false_6;
            }
            condexpr_true_6:;
            tmp_called_value_6 = PyObject_GetItem(locals_hikari$api$rest$$$class__2_RESTClient_110, mod_consts[456]);

            if (unlikely(tmp_called_value_6 == NULL && CHECK_AND_CLEAR_KEY_ERROR_OCCURRED())) {

                FORMAT_NAME_ERROR(&exception_type, &exception_value, mod_consts[456]);
                NORMALIZE_EXCEPTION(&exception_type, &exception_value, &exception_tb);
                CHAIN_EXCEPTION(exception_value);

                exception_lineno = 115;
                type_description_2 = "o";
                goto frame_exception_exit_3;
            }

            if (tmp_called_value_6 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 115;
                type_description_2 = "o";
                goto frame_exception_exit_3;
            }
            tmp_called_instance_5 = PyObject_GetItem(locals_hikari$api$rest$$$class__2_RESTClient_110, mod_consts[431]);

            if (tmp_called_instance_5 == NULL) {
                if (CHECK_AND_CLEAR_KEY_ERROR_OCCURRED()) {
                    tmp_called_instance_5 = GET_STRING_DICT_VALUE(moduledict_hikari$api$rest, (Nuitka_StringObject *)mod_consts[431]);

                    if (unlikely(tmp_called_instance_5 == NULL)) {
                        tmp_called_instance_5 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[431]);
                    }

                    if (tmp_called_instance_5 == NULL) {
                        assert(ERROR_OCCURRED());

                        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
                        Py_DECREF(tmp_called_value_6);

                        exception_lineno = 116;
                        type_description_2 = "o";
                        goto frame_exception_exit_3;
                    }
                    Py_INCREF(tmp_called_instance_5);
                } else {
                    goto frame_exception_exit_3;
                }
            }

            tmp_annotations_5 = PyDict_Copy(mod_consts[471]);


            tmp_args_element_value_8 = MAKE_FUNCTION_hikari$api$rest$$$function__4_is_alive(tmp_annotations_5);

            frame_862833cacd6e5ba73c351f8d132a7b6b_3->m_frame.f_lineno = 116;
            tmp_args_element_value_7 = CALL_METHOD_WITH_SINGLE_ARG(tmp_called_instance_5, mod_consts[457], tmp_args_element_value_8);
            Py_DECREF(tmp_called_instance_5);
            Py_DECREF(tmp_args_element_value_8);
            if (tmp_args_element_value_7 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
                Py_DECREF(tmp_called_value_6);

                exception_lineno = 116;
                type_description_2 = "o";
                goto frame_exception_exit_3;
            }
            frame_862833cacd6e5ba73c351f8d132a7b6b_3->m_frame.f_lineno = 115;
            tmp_dictset_value = CALL_FUNCTION_WITH_SINGLE_ARG(tmp_called_value_6, tmp_args_element_value_7);
            Py_DECREF(tmp_called_value_6);
            Py_DECREF(tmp_args_element_value_7);
            if (tmp_dictset_value == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 115;
                type_description_2 = "o";
                goto frame_exception_exit_3;
            }
            goto condexpr_end_6;
            condexpr_false_6:;
            tmp_called_value_7 = (PyObject *)&PyProperty_Type;
            tmp_called_instance_6 = PyObject_GetItem(locals_hikari$api$rest$$$class__2_RESTClient_110, mod_consts[431]);

            if (tmp_called_instance_6 == NULL) {
                if (CHECK_AND_CLEAR_KEY_ERROR_OCCURRED()) {
                    tmp_called_instance_6 = GET_STRING_DICT_VALUE(moduledict_hikari$api$rest, (Nuitka_StringObject *)mod_consts[431]);

                    if (unlikely(tmp_called_instance_6 == NULL)) {
                        tmp_called_instance_6 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[431]);
                    }

                    if (tmp_called_instance_6 == NULL) {
                        assert(ERROR_OCCURRED());

                        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                        exception_lineno = 116;
                        type_description_2 = "o";
                        goto frame_exception_exit_3;
                    }
                    Py_INCREF(tmp_called_instance_6);
                } else {
                    goto frame_exception_exit_3;
                }
            }

            tmp_annotations_6 = PyDict_Copy(mod_consts[471]);


            tmp_args_element_value_10 = MAKE_FUNCTION_hikari$api$rest$$$function__4_is_alive(tmp_annotations_6);

            frame_862833cacd6e5ba73c351f8d132a7b6b_3->m_frame.f_lineno = 116;
            tmp_args_element_value_9 = CALL_METHOD_WITH_SINGLE_ARG(tmp_called_instance_6, mod_consts[457], tmp_args_element_value_10);
            Py_DECREF(tmp_called_instance_6);
            Py_DECREF(tmp_args_element_value_10);
            if (tmp_args_element_value_9 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 116;
                type_description_2 = "o";
                goto frame_exception_exit_3;
            }
            frame_862833cacd6e5ba73c351f8d132a7b6b_3->m_frame.f_lineno = 115;
            tmp_dictset_value = CALL_FUNCTION_WITH_SINGLE_ARG(tmp_called_value_7, tmp_args_element_value_9);
            Py_DECREF(tmp_args_element_value_9);
            if (tmp_dictset_value == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 115;
                type_description_2 = "o";
                goto frame_exception_exit_3;
            }
            condexpr_end_6:;
            tmp_res = PyObject_SetItem(locals_hikari$api$rest$$$class__2_RESTClient_110, mod_consts[473], tmp_dictset_value);
            Py_DECREF(tmp_dictset_value);
            if (tmp_res != 0) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 117;
                type_description_2 = "o";
                goto frame_exception_exit_3;
            }
        }
        {
            nuitka_bool tmp_condition_result_14;
            PyObject *tmp_called_value_8;
            PyObject *tmp_args_element_value_11;
            PyObject *tmp_called_instance_7;
            PyObject *tmp_args_element_value_12;
            PyObject *tmp_annotations_7;
            PyObject *tmp_called_value_9;
            PyObject *tmp_args_element_value_13;
            PyObject *tmp_called_instance_8;
            PyObject *tmp_args_element_value_14;
            PyObject *tmp_annotations_8;
            tmp_res = MAPPING_HAS_ITEM(locals_hikari$api$rest$$$class__2_RESTClient_110, mod_consts[456]);

            if (tmp_res == -1) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 120;
                type_description_2 = "o";
                goto frame_exception_exit_3;
            }
            tmp_condition_result_14 = (tmp_res == 1) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
            if (tmp_condition_result_14 == NUITKA_BOOL_TRUE) {
                goto condexpr_true_7;
            } else {
                goto condexpr_false_7;
            }
            condexpr_true_7:;
            tmp_called_value_8 = PyObject_GetItem(locals_hikari$api$rest$$$class__2_RESTClient_110, mod_consts[456]);

            if (unlikely(tmp_called_value_8 == NULL && CHECK_AND_CLEAR_KEY_ERROR_OCCURRED())) {

                FORMAT_NAME_ERROR(&exception_type, &exception_value, mod_consts[456]);
                NORMALIZE_EXCEPTION(&exception_type, &exception_value, &exception_tb);
                CHAIN_EXCEPTION(exception_value);

                exception_lineno = 120;
                type_description_2 = "o";
                goto frame_exception_exit_3;
            }

            if (tmp_called_value_8 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 120;
                type_description_2 = "o";
                goto frame_exception_exit_3;
            }
            tmp_called_instance_7 = PyObject_GetItem(locals_hikari$api$rest$$$class__2_RESTClient_110, mod_consts[431]);

            if (tmp_called_instance_7 == NULL) {
                if (CHECK_AND_CLEAR_KEY_ERROR_OCCURRED()) {
                    tmp_called_instance_7 = GET_STRING_DICT_VALUE(moduledict_hikari$api$rest, (Nuitka_StringObject *)mod_consts[431]);

                    if (unlikely(tmp_called_instance_7 == NULL)) {
                        tmp_called_instance_7 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[431]);
                    }

                    if (tmp_called_instance_7 == NULL) {
                        assert(ERROR_OCCURRED());

                        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
                        Py_DECREF(tmp_called_value_8);

                        exception_lineno = 121;
                        type_description_2 = "o";
                        goto frame_exception_exit_3;
                    }
                    Py_INCREF(tmp_called_instance_7);
                } else {
                    goto frame_exception_exit_3;
                }
            }

            tmp_annotations_7 = PyDict_Copy(mod_consts[475]);


            tmp_args_element_value_12 = MAKE_FUNCTION_hikari$api$rest$$$function__5_entity_factory(tmp_annotations_7);

            frame_862833cacd6e5ba73c351f8d132a7b6b_3->m_frame.f_lineno = 121;
            tmp_args_element_value_11 = CALL_METHOD_WITH_SINGLE_ARG(tmp_called_instance_7, mod_consts[457], tmp_args_element_value_12);
            Py_DECREF(tmp_called_instance_7);
            Py_DECREF(tmp_args_element_value_12);
            if (tmp_args_element_value_11 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
                Py_DECREF(tmp_called_value_8);

                exception_lineno = 121;
                type_description_2 = "o";
                goto frame_exception_exit_3;
            }
            frame_862833cacd6e5ba73c351f8d132a7b6b_3->m_frame.f_lineno = 120;
            tmp_dictset_value = CALL_FUNCTION_WITH_SINGLE_ARG(tmp_called_value_8, tmp_args_element_value_11);
            Py_DECREF(tmp_called_value_8);
            Py_DECREF(tmp_args_element_value_11);
            if (tmp_dictset_value == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 120;
                type_description_2 = "o";
                goto frame_exception_exit_3;
            }
            goto condexpr_end_7;
            condexpr_false_7:;
            tmp_called_value_9 = (PyObject *)&PyProperty_Type;
            tmp_called_instance_8 = PyObject_GetItem(locals_hikari$api$rest$$$class__2_RESTClient_110, mod_consts[431]);

            if (tmp_called_instance_8 == NULL) {
                if (CHECK_AND_CLEAR_KEY_ERROR_OCCURRED()) {
                    tmp_called_instance_8 = GET_STRING_DICT_VALUE(moduledict_hikari$api$rest, (Nuitka_StringObject *)mod_consts[431]);

                    if (unlikely(tmp_called_instance_8 == NULL)) {
                        tmp_called_instance_8 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[431]);
                    }

                    if (tmp_called_instance_8 == NULL) {
                        assert(ERROR_OCCURRED());

                        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                        exception_lineno = 121;
                        type_description_2 = "o";
                        goto frame_exception_exit_3;
                    }
                    Py_INCREF(tmp_called_instance_8);
                } else {
                    goto frame_exception_exit_3;
                }
            }

            tmp_annotations_8 = PyDict_Copy(mod_consts[475]);


            tmp_args_element_value_14 = MAKE_FUNCTION_hikari$api$rest$$$function__5_entity_factory(tmp_annotations_8);

            frame_862833cacd6e5ba73c351f8d132a7b6b_3->m_frame.f_lineno = 121;
            tmp_args_element_value_13 = CALL_METHOD_WITH_SINGLE_ARG(tmp_called_instance_8, mod_consts[457], tmp_args_element_value_14);
            Py_DECREF(tmp_called_instance_8);
            Py_DECREF(tmp_args_element_value_14);
            if (tmp_args_element_value_13 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 121;
                type_description_2 = "o";
                goto frame_exception_exit_3;
            }
            frame_862833cacd6e5ba73c351f8d132a7b6b_3->m_frame.f_lineno = 120;
            tmp_dictset_value = CALL_FUNCTION_WITH_SINGLE_ARG(tmp_called_value_9, tmp_args_element_value_13);
            Py_DECREF(tmp_args_element_value_13);
            if (tmp_dictset_value == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 120;
                type_description_2 = "o";
                goto frame_exception_exit_3;
            }
            condexpr_end_7:;
            tmp_res = PyObject_SetItem(locals_hikari$api$rest$$$class__2_RESTClient_110, mod_consts[477], tmp_dictset_value);
            Py_DECREF(tmp_dictset_value);
            if (tmp_res != 0) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 122;
                type_description_2 = "o";
                goto frame_exception_exit_3;
            }
        }
        {
            nuitka_bool tmp_condition_result_15;
            PyObject *tmp_called_value_10;
            PyObject *tmp_args_element_value_15;
            PyObject *tmp_called_instance_9;
            PyObject *tmp_args_element_value_16;
            PyObject *tmp_annotations_9;
            PyObject *tmp_called_value_11;
            PyObject *tmp_args_element_value_17;
            PyObject *tmp_called_instance_10;
            PyObject *tmp_args_element_value_18;
            PyObject *tmp_annotations_10;
            tmp_res = MAPPING_HAS_ITEM(locals_hikari$api$rest$$$class__2_RESTClient_110, mod_consts[456]);

            if (tmp_res == -1) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 125;
                type_description_2 = "o";
                goto frame_exception_exit_3;
            }
            tmp_condition_result_15 = (tmp_res == 1) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
            if (tmp_condition_result_15 == NUITKA_BOOL_TRUE) {
                goto condexpr_true_8;
            } else {
                goto condexpr_false_8;
            }
            condexpr_true_8:;
            tmp_called_value_10 = PyObject_GetItem(locals_hikari$api$rest$$$class__2_RESTClient_110, mod_consts[456]);

            if (unlikely(tmp_called_value_10 == NULL && CHECK_AND_CLEAR_KEY_ERROR_OCCURRED())) {

                FORMAT_NAME_ERROR(&exception_type, &exception_value, mod_consts[456]);
                NORMALIZE_EXCEPTION(&exception_type, &exception_value, &exception_tb);
                CHAIN_EXCEPTION(exception_value);

                exception_lineno = 125;
                type_description_2 = "o";
                goto frame_exception_exit_3;
            }

            if (tmp_called_value_10 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 125;
                type_description_2 = "o";
                goto frame_exception_exit_3;
            }
            tmp_called_instance_9 = PyObject_GetItem(locals_hikari$api$rest$$$class__2_RESTClient_110, mod_consts[431]);

            if (tmp_called_instance_9 == NULL) {
                if (CHECK_AND_CLEAR_KEY_ERROR_OCCURRED()) {
                    tmp_called_instance_9 = GET_STRING_DICT_VALUE(moduledict_hikari$api$rest, (Nuitka_StringObject *)mod_consts[431]);

                    if (unlikely(tmp_called_instance_9 == NULL)) {
                        tmp_called_instance_9 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[431]);
                    }

                    if (tmp_called_instance_9 == NULL) {
                        assert(ERROR_OCCURRED());

                        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
                        Py_DECREF(tmp_called_value_10);

                        exception_lineno = 126;
                        type_description_2 = "o";
                        goto frame_exception_exit_3;
                    }
                    Py_INCREF(tmp_called_instance_9);
                } else {
                    goto frame_exception_exit_3;
                }
            }

            tmp_annotations_9 = PyDict_Copy(mod_consts[479]);


            tmp_args_element_value_16 = MAKE_FUNCTION_hikari$api$rest$$$function__6_token_type(tmp_annotations_9);

            frame_862833cacd6e5ba73c351f8d132a7b6b_3->m_frame.f_lineno = 126;
            tmp_args_element_value_15 = CALL_METHOD_WITH_SINGLE_ARG(tmp_called_instance_9, mod_consts[457], tmp_args_element_value_16);
            Py_DECREF(tmp_called_instance_9);
            Py_DECREF(tmp_args_element_value_16);
            if (tmp_args_element_value_15 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
                Py_DECREF(tmp_called_value_10);

                exception_lineno = 126;
                type_description_2 = "o";
                goto frame_exception_exit_3;
            }
            frame_862833cacd6e5ba73c351f8d132a7b6b_3->m_frame.f_lineno = 125;
            tmp_dictset_value = CALL_FUNCTION_WITH_SINGLE_ARG(tmp_called_value_10, tmp_args_element_value_15);
            Py_DECREF(tmp_called_value_10);
            Py_DECREF(tmp_args_element_value_15);
            if (tmp_dictset_value == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 125;
                type_description_2 = "o";
                goto frame_exception_exit_3;
            }
            goto condexpr_end_8;
            condexpr_false_8:;
            tmp_called_value_11 = (PyObject *)&PyProperty_Type;
            tmp_called_instance_10 = PyObject_GetItem(locals_hikari$api$rest$$$class__2_RESTClient_110, mod_consts[431]);

            if (tmp_called_instance_10 == NULL) {
                if (CHECK_AND_CLEAR_KEY_ERROR_OCCURRED()) {
                    tmp_called_instance_10 = GET_STRING_DICT_VALUE(moduledict_hikari$api$rest, (Nuitka_StringObject *)mod_consts[431]);

                    if (unlikely(tmp_called_instance_10 == NULL)) {
                        tmp_called_instance_10 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[431]);
                    }

                    if (tmp_called_instance_10 == NULL) {
                        assert(ERROR_OCCURRED());

                        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                        exception_lineno = 126;
                        type_description_2 = "o";
                        goto frame_exception_exit_3;
                    }
                    Py_INCREF(tmp_called_instance_10);
                } else {
                    goto frame_exception_exit_3;
                }
            }

            tmp_annotations_10 = PyDict_Copy(mod_consts[479]);


            tmp_args_element_value_18 = MAKE_FUNCTION_hikari$api$rest$$$function__6_token_type(tmp_annotations_10);

            frame_862833cacd6e5ba73c351f8d132a7b6b_3->m_frame.f_lineno = 126;
            tmp_args_element_value_17 = CALL_METHOD_WITH_SINGLE_ARG(tmp_called_instance_10, mod_consts[457], tmp_args_element_value_18);
            Py_DECREF(tmp_called_instance_10);
            Py_DECREF(tmp_args_element_value_18);
            if (tmp_args_element_value_17 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 126;
                type_description_2 = "o";
                goto frame_exception_exit_3;
            }
            frame_862833cacd6e5ba73c351f8d132a7b6b_3->m_frame.f_lineno = 125;
            tmp_dictset_value = CALL_FUNCTION_WITH_SINGLE_ARG(tmp_called_value_11, tmp_args_element_value_17);
            Py_DECREF(tmp_args_element_value_17);
            if (tmp_dictset_value == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 125;
                type_description_2 = "o";
                goto frame_exception_exit_3;
            }
            condexpr_end_8:;
            tmp_res = PyObject_SetItem(locals_hikari$api$rest$$$class__2_RESTClient_110, mod_consts[460], tmp_dictset_value);
            Py_DECREF(tmp_dictset_value);
            if (tmp_res != 0) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 127;
                type_description_2 = "o";
                goto frame_exception_exit_3;
            }
        }
        {
            PyObject *tmp_called_instance_11;
            PyObject *tmp_args_element_value_19;
            PyObject *tmp_annotations_11;
            tmp_called_instance_11 = PyObject_GetItem(locals_hikari$api$rest$$$class__2_RESTClient_110, mod_consts[431]);

            if (tmp_called_instance_11 == NULL) {
                if (CHECK_AND_CLEAR_KEY_ERROR_OCCURRED()) {
                    tmp_called_instance_11 = GET_STRING_DICT_VALUE(moduledict_hikari$api$rest, (Nuitka_StringObject *)mod_consts[431]);

                    if (unlikely(tmp_called_instance_11 == NULL)) {
                        tmp_called_instance_11 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[431]);
                    }

                    if (tmp_called_instance_11 == NULL) {
                        assert(ERROR_OCCURRED());

                        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                        exception_lineno = 139;
                        type_description_2 = "o";
                        goto frame_exception_exit_3;
                    }
                    Py_INCREF(tmp_called_instance_11);
                } else {
                    goto frame_exception_exit_3;
                }
            }

            tmp_annotations_11 = PyDict_Copy(mod_consts[482]);


            tmp_args_element_value_19 = MAKE_FUNCTION_hikari$api$rest$$$function__7_close(tmp_annotations_11);

            frame_862833cacd6e5ba73c351f8d132a7b6b_3->m_frame.f_lineno = 139;
            tmp_dictset_value = CALL_METHOD_WITH_SINGLE_ARG(tmp_called_instance_11, mod_consts[457], tmp_args_element_value_19);
            Py_DECREF(tmp_called_instance_11);
            Py_DECREF(tmp_args_element_value_19);
            if (tmp_dictset_value == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 139;
                type_description_2 = "o";
                goto frame_exception_exit_3;
            }
            tmp_res = PyObject_SetItem(locals_hikari$api$rest$$$class__2_RESTClient_110, mod_consts[4], tmp_dictset_value);
            Py_DECREF(tmp_dictset_value);
            if (tmp_res != 0) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 140;
                type_description_2 = "o";
                goto frame_exception_exit_3;
            }
        }
        {
            PyObject *tmp_called_instance_12;
            PyObject *tmp_args_element_value_20;
            PyObject *tmp_annotations_12;
            tmp_called_instance_12 = PyObject_GetItem(locals_hikari$api$rest$$$class__2_RESTClient_110, mod_consts[431]);

            if (tmp_called_instance_12 == NULL) {
                if (CHECK_AND_CLEAR_KEY_ERROR_OCCURRED()) {
                    tmp_called_instance_12 = GET_STRING_DICT_VALUE(moduledict_hikari$api$rest, (Nuitka_StringObject *)mod_consts[431]);

                    if (unlikely(tmp_called_instance_12 == NULL)) {
                        tmp_called_instance_12 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[431]);
                    }

                    if (tmp_called_instance_12 == NULL) {
                        assert(ERROR_OCCURRED());

                        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                        exception_lineno = 143;
                        type_description_2 = "o";
                        goto frame_exception_exit_3;
                    }
                    Py_INCREF(tmp_called_instance_12);
                } else {
                    goto frame_exception_exit_3;
                }
            }

            tmp_annotations_12 = PyDict_Copy(mod_consts[483]);


            tmp_args_element_value_20 = MAKE_FUNCTION_hikari$api$rest$$$function__8_fetch_channel(tmp_annotations_12);

            frame_862833cacd6e5ba73c351f8d132a7b6b_3->m_frame.f_lineno = 143;
            tmp_dictset_value = CALL_METHOD_WITH_SINGLE_ARG(tmp_called_instance_12, mod_consts[457], tmp_args_element_value_20);
            Py_DECREF(tmp_called_instance_12);
            Py_DECREF(tmp_args_element_value_20);
            if (tmp_dictset_value == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 143;
                type_description_2 = "o";
                goto frame_exception_exit_3;
            }
            tmp_res = PyObject_SetItem(locals_hikari$api$rest$$$class__2_RESTClient_110, mod_consts[7], tmp_dictset_value);
            Py_DECREF(tmp_dictset_value);
            if (tmp_res != 0) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 144;
                type_description_2 = "o";
                goto frame_exception_exit_3;
            }
        }
        {
            PyObject *tmp_called_value_12;
            PyObject *tmp_expression_value_14;
            PyObject *tmp_args_element_value_21;
            PyObject *tmp_kw_defaults_1;
            PyObject *tmp_dict_key_1;
            PyObject *tmp_dict_value_1;
            PyObject *tmp_expression_value_15;
            PyObject *tmp_annotations_13;
            tmp_expression_value_14 = PyObject_GetItem(locals_hikari$api$rest$$$class__2_RESTClient_110, mod_consts[431]);

            if (tmp_expression_value_14 == NULL) {
                if (CHECK_AND_CLEAR_KEY_ERROR_OCCURRED()) {
                    tmp_expression_value_14 = GET_STRING_DICT_VALUE(moduledict_hikari$api$rest, (Nuitka_StringObject *)mod_consts[431]);

                    if (unlikely(tmp_expression_value_14 == NULL)) {
                        tmp_expression_value_14 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[431]);
                    }

                    if (tmp_expression_value_14 == NULL) {
                        assert(ERROR_OCCURRED());

                        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                        exception_lineno = 201;
                        type_description_2 = "o";
                        goto frame_exception_exit_3;
                    }
                    Py_INCREF(tmp_expression_value_14);
                } else {
                    goto frame_exception_exit_3;
                }
            }

            tmp_called_value_12 = LOOKUP_ATTRIBUTE(tmp_expression_value_14, mod_consts[457]);
            Py_DECREF(tmp_expression_value_14);
            if (tmp_called_value_12 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 201;
                type_description_2 = "o";
                goto frame_exception_exit_3;
            }
            tmp_dict_key_1 = mod_consts[484];
            tmp_expression_value_15 = PyObject_GetItem(locals_hikari$api$rest$$$class__2_RESTClient_110, mod_consts[440]);

            if (tmp_expression_value_15 == NULL) {
                if (CHECK_AND_CLEAR_KEY_ERROR_OCCURRED()) {
                    tmp_expression_value_15 = GET_STRING_DICT_VALUE(moduledict_hikari$api$rest, (Nuitka_StringObject *)mod_consts[440]);

                    if (unlikely(tmp_expression_value_15 == NULL)) {
                        tmp_expression_value_15 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[440]);
                    }

                    if (tmp_expression_value_15 == NULL) {
                        assert(ERROR_OCCURRED());

                        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
                        Py_DECREF(tmp_called_value_12);

                        exception_lineno = 207;
                        type_description_2 = "o";
                        goto frame_exception_exit_3;
                    }
                    Py_INCREF(tmp_expression_value_15);
                } else {
                    goto frame_exception_exit_3;
                }
            }

            tmp_dict_value_1 = LOOKUP_ATTRIBUTE(tmp_expression_value_15, mod_consts[485]);
            Py_DECREF(tmp_expression_value_15);
            if (tmp_dict_value_1 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
                Py_DECREF(tmp_called_value_12);

                exception_lineno = 207;
                type_description_2 = "o";
                goto frame_exception_exit_3;
            }
            tmp_kw_defaults_1 = _PyDict_NewPresized( 12 );
            {
                PyObject *tmp_expression_value_16;
                PyObject *tmp_expression_value_17;
                PyObject *tmp_expression_value_18;
                PyObject *tmp_expression_value_19;
                PyObject *tmp_expression_value_20;
                PyObject *tmp_expression_value_21;
                PyObject *tmp_expression_value_22;
                PyObject *tmp_expression_value_23;
                PyObject *tmp_expression_value_24;
                PyObject *tmp_expression_value_25;
                PyObject *tmp_expression_value_26;
                tmp_res = PyDict_SetItem(tmp_kw_defaults_1, tmp_dict_key_1, tmp_dict_value_1);
                Py_DECREF(tmp_dict_value_1);
                assert(!(tmp_res != 0));
                tmp_dict_key_1 = mod_consts[486];
                tmp_expression_value_16 = PyObject_GetItem(locals_hikari$api$rest$$$class__2_RESTClient_110, mod_consts[440]);

                if (tmp_expression_value_16 == NULL) {
                    if (CHECK_AND_CLEAR_KEY_ERROR_OCCURRED()) {
                        tmp_expression_value_16 = GET_STRING_DICT_VALUE(moduledict_hikari$api$rest, (Nuitka_StringObject *)mod_consts[440]);

                        if (unlikely(tmp_expression_value_16 == NULL)) {
                            tmp_expression_value_16 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[440]);
                        }

                        if (tmp_expression_value_16 == NULL) {
                            assert(ERROR_OCCURRED());

                            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                            exception_lineno = 208;
                            type_description_2 = "o";
                            goto dict_build_exception_1;
                        }
                        Py_INCREF(tmp_expression_value_16);
                    } else {
                        goto dict_build_exception_1;
                    }
                }

                tmp_dict_value_1 = LOOKUP_ATTRIBUTE(tmp_expression_value_16, mod_consts[485]);
                Py_DECREF(tmp_expression_value_16);
                if (tmp_dict_value_1 == NULL) {
                    assert(ERROR_OCCURRED());

                    FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                    exception_lineno = 208;
                    type_description_2 = "o";
                    goto dict_build_exception_1;
                }
                tmp_res = PyDict_SetItem(tmp_kw_defaults_1, tmp_dict_key_1, tmp_dict_value_1);
                Py_DECREF(tmp_dict_value_1);
                assert(!(tmp_res != 0));
                tmp_dict_key_1 = mod_consts[487];
                tmp_expression_value_17 = PyObject_GetItem(locals_hikari$api$rest$$$class__2_RESTClient_110, mod_consts[440]);

                if (tmp_expression_value_17 == NULL) {
                    if (CHECK_AND_CLEAR_KEY_ERROR_OCCURRED()) {
                        tmp_expression_value_17 = GET_STRING_DICT_VALUE(moduledict_hikari$api$rest, (Nuitka_StringObject *)mod_consts[440]);

                        if (unlikely(tmp_expression_value_17 == NULL)) {
                            tmp_expression_value_17 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[440]);
                        }

                        if (tmp_expression_value_17 == NULL) {
                            assert(ERROR_OCCURRED());

                            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                            exception_lineno = 209;
                            type_description_2 = "o";
                            goto dict_build_exception_1;
                        }
                        Py_INCREF(tmp_expression_value_17);
                    } else {
                        goto dict_build_exception_1;
                    }
                }

                tmp_dict_value_1 = LOOKUP_ATTRIBUTE(tmp_expression_value_17, mod_consts[485]);
                Py_DECREF(tmp_expression_value_17);
                if (tmp_dict_value_1 == NULL) {
                    assert(ERROR_OCCURRED());

                    FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                    exception_lineno = 209;
                    type_description_2 = "o";
                    goto dict_build_exception_1;
                }
                tmp_res = PyDict_SetItem(tmp_kw_defaults_1, tmp_dict_key_1, tmp_dict_value_1);
                Py_DECREF(tmp_dict_value_1);
                assert(!(tmp_res != 0));
                tmp_dict_key_1 = mod_consts[488];
                tmp_expression_value_18 = PyObject_GetItem(locals_hikari$api$rest$$$class__2_RESTClient_110, mod_consts[440]);

                if (tmp_expression_value_18 == NULL) {
                    if (CHECK_AND_CLEAR_KEY_ERROR_OCCURRED()) {
                        tmp_expression_value_18 = GET_STRING_DICT_VALUE(moduledict_hikari$api$rest, (Nuitka_StringObject *)mod_consts[440]);

                        if (unlikely(tmp_expression_value_18 == NULL)) {
                            tmp_expression_value_18 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[440]);
                        }

                        if (tmp_expression_value_18 == NULL) {
                            assert(ERROR_OCCURRED());

                            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                            exception_lineno = 210;
                            type_description_2 = "o";
                            goto dict_build_exception_1;
                        }
                        Py_INCREF(tmp_expression_value_18);
                    } else {
                        goto dict_build_exception_1;
                    }
                }

                tmp_dict_value_1 = LOOKUP_ATTRIBUTE(tmp_expression_value_18, mod_consts[485]);
                Py_DECREF(tmp_expression_value_18);
                if (tmp_dict_value_1 == NULL) {
                    assert(ERROR_OCCURRED());

                    FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                    exception_lineno = 210;
                    type_description_2 = "o";
                    goto dict_build_exception_1;
                }
                tmp_res = PyDict_SetItem(tmp_kw_defaults_1, tmp_dict_key_1, tmp_dict_value_1);
                Py_DECREF(tmp_dict_value_1);
                assert(!(tmp_res != 0));
                tmp_dict_key_1 = mod_consts[489];
                tmp_expression_value_19 = PyObject_GetItem(locals_hikari$api$rest$$$class__2_RESTClient_110, mod_consts[440]);

                if (tmp_expression_value_19 == NULL) {
                    if (CHECK_AND_CLEAR_KEY_ERROR_OCCURRED()) {
                        tmp_expression_value_19 = GET_STRING_DICT_VALUE(moduledict_hikari$api$rest, (Nuitka_StringObject *)mod_consts[440]);

                        if (unlikely(tmp_expression_value_19 == NULL)) {
                            tmp_expression_value_19 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[440]);
                        }

                        if (tmp_expression_value_19 == NULL) {
                            assert(ERROR_OCCURRED());

                            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                            exception_lineno = 211;
                            type_description_2 = "o";
                            goto dict_build_exception_1;
                        }
                        Py_INCREF(tmp_expression_value_19);
                    } else {
                        goto dict_build_exception_1;
                    }
                }

                tmp_dict_value_1 = LOOKUP_ATTRIBUTE(tmp_expression_value_19, mod_consts[485]);
                Py_DECREF(tmp_expression_value_19);
                if (tmp_dict_value_1 == NULL) {
                    assert(ERROR_OCCURRED());

                    FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                    exception_lineno = 211;
                    type_description_2 = "o";
                    goto dict_build_exception_1;
                }
                tmp_res = PyDict_SetItem(tmp_kw_defaults_1, tmp_dict_key_1, tmp_dict_value_1);
                Py_DECREF(tmp_dict_value_1);
                assert(!(tmp_res != 0));
                tmp_dict_key_1 = mod_consts[490];
                tmp_expression_value_20 = PyObject_GetItem(locals_hikari$api$rest$$$class__2_RESTClient_110, mod_consts[440]);

                if (tmp_expression_value_20 == NULL) {
                    if (CHECK_AND_CLEAR_KEY_ERROR_OCCURRED()) {
                        tmp_expression_value_20 = GET_STRING_DICT_VALUE(moduledict_hikari$api$rest, (Nuitka_StringObject *)mod_consts[440]);

                        if (unlikely(tmp_expression_value_20 == NULL)) {
                            tmp_expression_value_20 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[440]);
                        }

                        if (tmp_expression_value_20 == NULL) {
                            assert(ERROR_OCCURRED());

                            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                            exception_lineno = 212;
                            type_description_2 = "o";
                            goto dict_build_exception_1;
                        }
                        Py_INCREF(tmp_expression_value_20);
                    } else {
                        goto dict_build_exception_1;
                    }
                }

                tmp_dict_value_1 = LOOKUP_ATTRIBUTE(tmp_expression_value_20, mod_consts[485]);
                Py_DECREF(tmp_expression_value_20);
                if (tmp_dict_value_1 == NULL) {
                    assert(ERROR_OCCURRED());

                    FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                    exception_lineno = 212;
                    type_description_2 = "o";
                    goto dict_build_exception_1;
                }
                tmp_res = PyDict_SetItem(tmp_kw_defaults_1, tmp_dict_key_1, tmp_dict_value_1);
                Py_DECREF(tmp_dict_value_1);
                assert(!(tmp_res != 0));
                tmp_dict_key_1 = mod_consts[491];
                tmp_expression_value_21 = PyObject_GetItem(locals_hikari$api$rest$$$class__2_RESTClient_110, mod_consts[440]);

                if (tmp_expression_value_21 == NULL) {
                    if (CHECK_AND_CLEAR_KEY_ERROR_OCCURRED()) {
                        tmp_expression_value_21 = GET_STRING_DICT_VALUE(moduledict_hikari$api$rest, (Nuitka_StringObject *)mod_consts[440]);

                        if (unlikely(tmp_expression_value_21 == NULL)) {
                            tmp_expression_value_21 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[440]);
                        }

                        if (tmp_expression_value_21 == NULL) {
                            assert(ERROR_OCCURRED());

                            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                            exception_lineno = 213;
                            type_description_2 = "o";
                            goto dict_build_exception_1;
                        }
                        Py_INCREF(tmp_expression_value_21);
                    } else {
                        goto dict_build_exception_1;
                    }
                }

                tmp_dict_value_1 = LOOKUP_ATTRIBUTE(tmp_expression_value_21, mod_consts[485]);
                Py_DECREF(tmp_expression_value_21);
                if (tmp_dict_value_1 == NULL) {
                    assert(ERROR_OCCURRED());

                    FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                    exception_lineno = 213;
                    type_description_2 = "o";
                    goto dict_build_exception_1;
                }
                tmp_res = PyDict_SetItem(tmp_kw_defaults_1, tmp_dict_key_1, tmp_dict_value_1);
                Py_DECREF(tmp_dict_value_1);
                assert(!(tmp_res != 0));
                tmp_dict_key_1 = mod_consts[492];
                tmp_expression_value_22 = PyObject_GetItem(locals_hikari$api$rest$$$class__2_RESTClient_110, mod_consts[440]);

                if (tmp_expression_value_22 == NULL) {
                    if (CHECK_AND_CLEAR_KEY_ERROR_OCCURRED()) {
                        tmp_expression_value_22 = GET_STRING_DICT_VALUE(moduledict_hikari$api$rest, (Nuitka_StringObject *)mod_consts[440]);

                        if (unlikely(tmp_expression_value_22 == NULL)) {
                            tmp_expression_value_22 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[440]);
                        }

                        if (tmp_expression_value_22 == NULL) {
                            assert(ERROR_OCCURRED());

                            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                            exception_lineno = 214;
                            type_description_2 = "o";
                            goto dict_build_exception_1;
                        }
                        Py_INCREF(tmp_expression_value_22);
                    } else {
                        goto dict_build_exception_1;
                    }
                }

                tmp_dict_value_1 = LOOKUP_ATTRIBUTE(tmp_expression_value_22, mod_consts[485]);
                Py_DECREF(tmp_expression_value_22);
                if (tmp_dict_value_1 == NULL) {
                    assert(ERROR_OCCURRED());

                    FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                    exception_lineno = 214;
                    type_description_2 = "o";
                    goto dict_build_exception_1;
                }
                tmp_res = PyDict_SetItem(tmp_kw_defaults_1, tmp_dict_key_1, tmp_dict_value_1);
                Py_DECREF(tmp_dict_value_1);
                assert(!(tmp_res != 0));
                tmp_dict_key_1 = mod_consts[493];
                tmp_expression_value_23 = PyObject_GetItem(locals_hikari$api$rest$$$class__2_RESTClient_110, mod_consts[440]);

                if (tmp_expression_value_23 == NULL) {
                    if (CHECK_AND_CLEAR_KEY_ERROR_OCCURRED()) {
                        tmp_expression_value_23 = GET_STRING_DICT_VALUE(moduledict_hikari$api$rest, (Nuitka_StringObject *)mod_consts[440]);

                        if (unlikely(tmp_expression_value_23 == NULL)) {
                            tmp_expression_value_23 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[440]);
                        }

                        if (tmp_expression_value_23 == NULL) {
                            assert(ERROR_OCCURRED());

                            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                            exception_lineno = 215;
                            type_description_2 = "o";
                            goto dict_build_exception_1;
                        }
                        Py_INCREF(tmp_expression_value_23);
                    } else {
                        goto dict_build_exception_1;
                    }
                }

                tmp_dict_value_1 = LOOKUP_ATTRIBUTE(tmp_expression_value_23, mod_consts[485]);
                Py_DECREF(tmp_expression_value_23);
                if (tmp_dict_value_1 == NULL) {
                    assert(ERROR_OCCURRED());

                    FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                    exception_lineno = 215;
                    type_description_2 = "o";
                    goto dict_build_exception_1;
                }
                tmp_res = PyDict_SetItem(tmp_kw_defaults_1, tmp_dict_key_1, tmp_dict_value_1);
                Py_DECREF(tmp_dict_value_1);
                assert(!(tmp_res != 0));
                tmp_dict_key_1 = mod_consts[494];
                tmp_expression_value_24 = PyObject_GetItem(locals_hikari$api$rest$$$class__2_RESTClient_110, mod_consts[440]);

                if (tmp_expression_value_24 == NULL) {
                    if (CHECK_AND_CLEAR_KEY_ERROR_OCCURRED()) {
                        tmp_expression_value_24 = GET_STRING_DICT_VALUE(moduledict_hikari$api$rest, (Nuitka_StringObject *)mod_consts[440]);

                        if (unlikely(tmp_expression_value_24 == NULL)) {
                            tmp_expression_value_24 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[440]);
                        }

                        if (tmp_expression_value_24 == NULL) {
                            assert(ERROR_OCCURRED());

                            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                            exception_lineno = 218;
                            type_description_2 = "o";
                            goto dict_build_exception_1;
                        }
                        Py_INCREF(tmp_expression_value_24);
                    } else {
                        goto dict_build_exception_1;
                    }
                }

                tmp_dict_value_1 = LOOKUP_ATTRIBUTE(tmp_expression_value_24, mod_consts[485]);
                Py_DECREF(tmp_expression_value_24);
                if (tmp_dict_value_1 == NULL) {
                    assert(ERROR_OCCURRED());

                    FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                    exception_lineno = 218;
                    type_description_2 = "o";
                    goto dict_build_exception_1;
                }
                tmp_res = PyDict_SetItem(tmp_kw_defaults_1, tmp_dict_key_1, tmp_dict_value_1);
                Py_DECREF(tmp_dict_value_1);
                assert(!(tmp_res != 0));
                tmp_dict_key_1 = mod_consts[495];
                tmp_expression_value_25 = PyObject_GetItem(locals_hikari$api$rest$$$class__2_RESTClient_110, mod_consts[440]);

                if (tmp_expression_value_25 == NULL) {
                    if (CHECK_AND_CLEAR_KEY_ERROR_OCCURRED()) {
                        tmp_expression_value_25 = GET_STRING_DICT_VALUE(moduledict_hikari$api$rest, (Nuitka_StringObject *)mod_consts[440]);

                        if (unlikely(tmp_expression_value_25 == NULL)) {
                            tmp_expression_value_25 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[440]);
                        }

                        if (tmp_expression_value_25 == NULL) {
                            assert(ERROR_OCCURRED());

                            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                            exception_lineno = 221;
                            type_description_2 = "o";
                            goto dict_build_exception_1;
                        }
                        Py_INCREF(tmp_expression_value_25);
                    } else {
                        goto dict_build_exception_1;
                    }
                }

                tmp_dict_value_1 = LOOKUP_ATTRIBUTE(tmp_expression_value_25, mod_consts[485]);
                Py_DECREF(tmp_expression_value_25);
                if (tmp_dict_value_1 == NULL) {
                    assert(ERROR_OCCURRED());

                    FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                    exception_lineno = 221;
                    type_description_2 = "o";
                    goto dict_build_exception_1;
                }
                tmp_res = PyDict_SetItem(tmp_kw_defaults_1, tmp_dict_key_1, tmp_dict_value_1);
                Py_DECREF(tmp_dict_value_1);
                assert(!(tmp_res != 0));
                tmp_dict_key_1 = mod_consts[496];
                tmp_expression_value_26 = PyObject_GetItem(locals_hikari$api$rest$$$class__2_RESTClient_110, mod_consts[440]);

                if (tmp_expression_value_26 == NULL) {
                    if (CHECK_AND_CLEAR_KEY_ERROR_OCCURRED()) {
                        tmp_expression_value_26 = GET_STRING_DICT_VALUE(moduledict_hikari$api$rest, (Nuitka_StringObject *)mod_consts[440]);

                        if (unlikely(tmp_expression_value_26 == NULL)) {
                            tmp_expression_value_26 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[440]);
                        }

                        if (tmp_expression_value_26 == NULL) {
                            assert(ERROR_OCCURRED());

                            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                            exception_lineno = 222;
                            type_description_2 = "o";
                            goto dict_build_exception_1;
                        }
                        Py_INCREF(tmp_expression_value_26);
                    } else {
                        goto dict_build_exception_1;
                    }
                }

                tmp_dict_value_1 = LOOKUP_ATTRIBUTE(tmp_expression_value_26, mod_consts[485]);
                Py_DECREF(tmp_expression_value_26);
                if (tmp_dict_value_1 == NULL) {
                    assert(ERROR_OCCURRED());

                    FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                    exception_lineno = 222;
                    type_description_2 = "o";
                    goto dict_build_exception_1;
                }
                tmp_res = PyDict_SetItem(tmp_kw_defaults_1, tmp_dict_key_1, tmp_dict_value_1);
                Py_DECREF(tmp_dict_value_1);
                assert(!(tmp_res != 0));
            }
            goto dict_build_noexception_1;
            // Exception handling pass through code for dict_build:
            dict_build_exception_1:;
            Py_DECREF(tmp_called_value_12);
            Py_DECREF(tmp_kw_defaults_1);
            goto frame_exception_exit_3;
            // Finished with no exception for dict_build:
            dict_build_noexception_1:;
            tmp_annotations_13 = PyDict_Copy(mod_consts[497]);


            tmp_args_element_value_21 = MAKE_FUNCTION_hikari$api$rest$$$function__9_edit_channel(tmp_kw_defaults_1, tmp_annotations_13);

            frame_862833cacd6e5ba73c351f8d132a7b6b_3->m_frame.f_lineno = 201;
            tmp_dictset_value = CALL_FUNCTION_WITH_SINGLE_ARG(tmp_called_value_12, tmp_args_element_value_21);
            Py_DECREF(tmp_called_value_12);
            Py_DECREF(tmp_args_element_value_21);
            if (tmp_dictset_value == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 201;
                type_description_2 = "o";
                goto frame_exception_exit_3;
            }
            tmp_res = PyObject_SetItem(locals_hikari$api$rest$$$class__2_RESTClient_110, mod_consts[10], tmp_dictset_value);
            Py_DECREF(tmp_dictset_value);
            if (tmp_res != 0) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 202;
                type_description_2 = "o";
                goto frame_exception_exit_3;
            }
        }
        {
            PyObject *tmp_called_instance_13;
            PyObject *tmp_args_element_value_22;
            PyObject *tmp_annotations_14;
            tmp_called_instance_13 = PyObject_GetItem(locals_hikari$api$rest$$$class__2_RESTClient_110, mod_consts[431]);

            if (tmp_called_instance_13 == NULL) {
                if (CHECK_AND_CLEAR_KEY_ERROR_OCCURRED()) {
                    tmp_called_instance_13 = GET_STRING_DICT_VALUE(moduledict_hikari$api$rest, (Nuitka_StringObject *)mod_consts[431]);

                    if (unlikely(tmp_called_instance_13 == NULL)) {
                        tmp_called_instance_13 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[431]);
                    }

                    if (tmp_called_instance_13 == NULL) {
                        assert(ERROR_OCCURRED());

                        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                        exception_lineno = 293;
                        type_description_2 = "o";
                        goto frame_exception_exit_3;
                    }
                    Py_INCREF(tmp_called_instance_13);
                } else {
                    goto frame_exception_exit_3;
                }
            }

            tmp_annotations_14 = PyDict_Copy(mod_consts[498]);


            tmp_args_element_value_22 = MAKE_FUNCTION_hikari$api$rest$$$function__10_follow_channel(tmp_annotations_14);

            frame_862833cacd6e5ba73c351f8d132a7b6b_3->m_frame.f_lineno = 293;
            tmp_dictset_value = CALL_METHOD_WITH_SINGLE_ARG(tmp_called_instance_13, mod_consts[457], tmp_args_element_value_22);
            Py_DECREF(tmp_called_instance_13);
            Py_DECREF(tmp_args_element_value_22);
            if (tmp_dictset_value == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 293;
                type_description_2 = "o";
                goto frame_exception_exit_3;
            }
            tmp_res = PyObject_SetItem(locals_hikari$api$rest$$$class__2_RESTClient_110, mod_consts[13], tmp_dictset_value);
            Py_DECREF(tmp_dictset_value);
            if (tmp_res != 0) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 294;
                type_description_2 = "o";
                goto frame_exception_exit_3;
            }
        }
        {
            PyObject *tmp_called_instance_14;
            PyObject *tmp_args_element_value_23;
            PyObject *tmp_annotations_15;
            tmp_called_instance_14 = PyObject_GetItem(locals_hikari$api$rest$$$class__2_RESTClient_110, mod_consts[431]);

            if (tmp_called_instance_14 == NULL) {
                if (CHECK_AND_CLEAR_KEY_ERROR_OCCURRED()) {
                    tmp_called_instance_14 = GET_STRING_DICT_VALUE(moduledict_hikari$api$rest, (Nuitka_StringObject *)mod_consts[431]);

                    if (unlikely(tmp_called_instance_14 == NULL)) {
                        tmp_called_instance_14 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[431]);
                    }

                    if (tmp_called_instance_14 == NULL) {
                        assert(ERROR_OCCURRED());

                        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                        exception_lineno = 342;
                        type_description_2 = "o";
                        goto frame_exception_exit_3;
                    }
                    Py_INCREF(tmp_called_instance_14);
                } else {
                    goto frame_exception_exit_3;
                }
            }

            tmp_annotations_15 = PyDict_Copy(mod_consts[483]);


            tmp_args_element_value_23 = MAKE_FUNCTION_hikari$api$rest$$$function__11_delete_channel(tmp_annotations_15);

            frame_862833cacd6e5ba73c351f8d132a7b6b_3->m_frame.f_lineno = 342;
            tmp_dictset_value = CALL_METHOD_WITH_SINGLE_ARG(tmp_called_instance_14, mod_consts[457], tmp_args_element_value_23);
            Py_DECREF(tmp_called_instance_14);
            Py_DECREF(tmp_args_element_value_23);
            if (tmp_dictset_value == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 342;
                type_description_2 = "o";
                goto frame_exception_exit_3;
            }
            tmp_res = PyObject_SetItem(locals_hikari$api$rest$$$class__2_RESTClient_110, mod_consts[16], tmp_dictset_value);
            Py_DECREF(tmp_dictset_value);
            if (tmp_res != 0) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 343;
                type_description_2 = "o";
                goto frame_exception_exit_3;
            }
        }
        {
            PyObject *tmp_called_value_13;
            PyObject *tmp_expression_value_27;
            PyObject *tmp_args_element_value_24;
            PyObject *tmp_kw_defaults_2;
            PyObject *tmp_dict_key_2;
            PyObject *tmp_dict_value_2;
            PyObject *tmp_expression_value_28;
            PyObject *tmp_annotations_16;
            tmp_expression_value_27 = PyObject_GetItem(locals_hikari$api$rest$$$class__2_RESTClient_110, mod_consts[431]);

            if (tmp_expression_value_27 == NULL) {
                if (CHECK_AND_CLEAR_KEY_ERROR_OCCURRED()) {
                    tmp_expression_value_27 = GET_STRING_DICT_VALUE(moduledict_hikari$api$rest, (Nuitka_StringObject *)mod_consts[431]);

                    if (unlikely(tmp_expression_value_27 == NULL)) {
                        tmp_expression_value_27 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[431]);
                    }

                    if (tmp_expression_value_27 == NULL) {
                        assert(ERROR_OCCURRED());

                        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                        exception_lineno = 386;
                        type_description_2 = "o";
                        goto frame_exception_exit_3;
                    }
                    Py_INCREF(tmp_expression_value_27);
                } else {
                    goto frame_exception_exit_3;
                }
            }

            tmp_called_value_13 = LOOKUP_ATTRIBUTE(tmp_expression_value_27, mod_consts[457]);
            Py_DECREF(tmp_expression_value_27);
            if (tmp_called_value_13 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 386;
                type_description_2 = "o";
                goto frame_exception_exit_3;
            }
            tmp_dict_key_2 = mod_consts[499];
            tmp_expression_value_28 = PyObject_GetItem(locals_hikari$api$rest$$$class__2_RESTClient_110, mod_consts[440]);

            if (tmp_expression_value_28 == NULL) {
                if (CHECK_AND_CLEAR_KEY_ERROR_OCCURRED()) {
                    tmp_expression_value_28 = GET_STRING_DICT_VALUE(moduledict_hikari$api$rest, (Nuitka_StringObject *)mod_consts[440]);

                    if (unlikely(tmp_expression_value_28 == NULL)) {
                        tmp_expression_value_28 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[440]);
                    }

                    if (tmp_expression_value_28 == NULL) {
                        assert(ERROR_OCCURRED());

                        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
                        Py_DECREF(tmp_called_value_13);

                        exception_lineno = 392;
                        type_description_2 = "o";
                        goto frame_exception_exit_3;
                    }
                    Py_INCREF(tmp_expression_value_28);
                } else {
                    goto frame_exception_exit_3;
                }
            }

            tmp_dict_value_2 = LOOKUP_ATTRIBUTE(tmp_expression_value_28, mod_consts[485]);
            Py_DECREF(tmp_expression_value_28);
            if (tmp_dict_value_2 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
                Py_DECREF(tmp_called_value_13);

                exception_lineno = 392;
                type_description_2 = "o";
                goto frame_exception_exit_3;
            }
            tmp_kw_defaults_2 = _PyDict_NewPresized( 2 );
            {
                PyObject *tmp_expression_value_29;
                tmp_res = PyDict_SetItem(tmp_kw_defaults_2, tmp_dict_key_2, tmp_dict_value_2);
                Py_DECREF(tmp_dict_value_2);
                assert(!(tmp_res != 0));
                tmp_dict_key_2 = mod_consts[500];
                tmp_expression_value_29 = PyObject_GetItem(locals_hikari$api$rest$$$class__2_RESTClient_110, mod_consts[440]);

                if (tmp_expression_value_29 == NULL) {
                    if (CHECK_AND_CLEAR_KEY_ERROR_OCCURRED()) {
                        tmp_expression_value_29 = GET_STRING_DICT_VALUE(moduledict_hikari$api$rest, (Nuitka_StringObject *)mod_consts[440]);

                        if (unlikely(tmp_expression_value_29 == NULL)) {
                            tmp_expression_value_29 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[440]);
                        }

                        if (tmp_expression_value_29 == NULL) {
                            assert(ERROR_OCCURRED());

                            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                            exception_lineno = 393;
                            type_description_2 = "o";
                            goto dict_build_exception_2;
                        }
                        Py_INCREF(tmp_expression_value_29);
                    } else {
                        goto dict_build_exception_2;
                    }
                }

                tmp_dict_value_2 = LOOKUP_ATTRIBUTE(tmp_expression_value_29, mod_consts[485]);
                Py_DECREF(tmp_expression_value_29);
                if (tmp_dict_value_2 == NULL) {
                    assert(ERROR_OCCURRED());

                    FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                    exception_lineno = 393;
                    type_description_2 = "o";
                    goto dict_build_exception_2;
                }
                tmp_res = PyDict_SetItem(tmp_kw_defaults_2, tmp_dict_key_2, tmp_dict_value_2);
                Py_DECREF(tmp_dict_value_2);
                assert(!(tmp_res != 0));
            }
            goto dict_build_noexception_2;
            // Exception handling pass through code for dict_build:
            dict_build_exception_2:;
            Py_DECREF(tmp_called_value_13);
            Py_DECREF(tmp_kw_defaults_2);
            goto frame_exception_exit_3;
            // Finished with no exception for dict_build:
            dict_build_noexception_2:;
            tmp_annotations_16 = PyDict_Copy(mod_consts[501]);


            tmp_args_element_value_24 = MAKE_FUNCTION_hikari$api$rest$$$function__12_edit_my_voice_state(tmp_kw_defaults_2, tmp_annotations_16);

            frame_862833cacd6e5ba73c351f8d132a7b6b_3->m_frame.f_lineno = 386;
            tmp_dictset_value = CALL_FUNCTION_WITH_SINGLE_ARG(tmp_called_value_13, tmp_args_element_value_24);
            Py_DECREF(tmp_called_value_13);
            Py_DECREF(tmp_args_element_value_24);
            if (tmp_dictset_value == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 386;
                type_description_2 = "o";
                goto frame_exception_exit_3;
            }
            tmp_res = PyObject_SetItem(locals_hikari$api$rest$$$class__2_RESTClient_110, mod_consts[19], tmp_dictset_value);
            Py_DECREF(tmp_dictset_value);
            if (tmp_res != 0) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 387;
                type_description_2 = "o";
                goto frame_exception_exit_3;
            }
        }
        {
            PyObject *tmp_called_value_14;
            PyObject *tmp_expression_value_30;
            PyObject *tmp_args_element_value_25;
            PyObject *tmp_kw_defaults_3;
            PyObject *tmp_dict_key_3;
            PyObject *tmp_dict_value_3;
            PyObject *tmp_expression_value_31;
            PyObject *tmp_annotations_17;
            tmp_expression_value_30 = PyObject_GetItem(locals_hikari$api$rest$$$class__2_RESTClient_110, mod_consts[431]);

            if (tmp_expression_value_30 == NULL) {
                if (CHECK_AND_CLEAR_KEY_ERROR_OCCURRED()) {
                    tmp_expression_value_30 = GET_STRING_DICT_VALUE(moduledict_hikari$api$rest, (Nuitka_StringObject *)mod_consts[431]);

                    if (unlikely(tmp_expression_value_30 == NULL)) {
                        tmp_expression_value_30 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[431]);
                    }

                    if (tmp_expression_value_30 == NULL) {
                        assert(ERROR_OCCURRED());

                        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                        exception_lineno = 451;
                        type_description_2 = "o";
                        goto frame_exception_exit_3;
                    }
                    Py_INCREF(tmp_expression_value_30);
                } else {
                    goto frame_exception_exit_3;
                }
            }

            tmp_called_value_14 = LOOKUP_ATTRIBUTE(tmp_expression_value_30, mod_consts[457]);
            Py_DECREF(tmp_expression_value_30);
            if (tmp_called_value_14 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 451;
                type_description_2 = "o";
                goto frame_exception_exit_3;
            }
            tmp_dict_key_3 = mod_consts[499];
            tmp_expression_value_31 = PyObject_GetItem(locals_hikari$api$rest$$$class__2_RESTClient_110, mod_consts[440]);

            if (tmp_expression_value_31 == NULL) {
                if (CHECK_AND_CLEAR_KEY_ERROR_OCCURRED()) {
                    tmp_expression_value_31 = GET_STRING_DICT_VALUE(moduledict_hikari$api$rest, (Nuitka_StringObject *)mod_consts[440]);

                    if (unlikely(tmp_expression_value_31 == NULL)) {
                        tmp_expression_value_31 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[440]);
                    }

                    if (tmp_expression_value_31 == NULL) {
                        assert(ERROR_OCCURRED());

                        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
                        Py_DECREF(tmp_called_value_14);

                        exception_lineno = 458;
                        type_description_2 = "o";
                        goto frame_exception_exit_3;
                    }
                    Py_INCREF(tmp_expression_value_31);
                } else {
                    goto frame_exception_exit_3;
                }
            }

            tmp_dict_value_3 = LOOKUP_ATTRIBUTE(tmp_expression_value_31, mod_consts[485]);
            Py_DECREF(tmp_expression_value_31);
            if (tmp_dict_value_3 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
                Py_DECREF(tmp_called_value_14);

                exception_lineno = 458;
                type_description_2 = "o";
                goto frame_exception_exit_3;
            }
            tmp_kw_defaults_3 = _PyDict_NewPresized( 1 );
            tmp_res = PyDict_SetItem(tmp_kw_defaults_3, tmp_dict_key_3, tmp_dict_value_3);
            Py_DECREF(tmp_dict_value_3);
            assert(!(tmp_res != 0));
            tmp_annotations_17 = PyDict_Copy(mod_consts[502]);


            tmp_args_element_value_25 = MAKE_FUNCTION_hikari$api$rest$$$function__13_edit_voice_state(tmp_kw_defaults_3, tmp_annotations_17);

            frame_862833cacd6e5ba73c351f8d132a7b6b_3->m_frame.f_lineno = 451;
            tmp_dictset_value = CALL_FUNCTION_WITH_SINGLE_ARG(tmp_called_value_14, tmp_args_element_value_25);
            Py_DECREF(tmp_called_value_14);
            Py_DECREF(tmp_args_element_value_25);
            if (tmp_dictset_value == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 451;
                type_description_2 = "o";
                goto frame_exception_exit_3;
            }
            tmp_res = PyObject_SetItem(locals_hikari$api$rest$$$class__2_RESTClient_110, mod_consts[22], tmp_dictset_value);
            Py_DECREF(tmp_dictset_value);
            if (tmp_res != 0) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 452;
                type_description_2 = "o";
                goto frame_exception_exit_3;
            }
        }
        {
            PyObject *tmp_called_value_15;
            PyObject *tmp_expression_value_32;
            PyObject *tmp_args_element_value_26;
            PyObject *tmp_called_value_16;
            PyObject *tmp_expression_value_33;
            PyObject *tmp_args_element_value_27;
            PyObject *tmp_kw_defaults_4;
            PyObject *tmp_dict_key_4;
            PyObject *tmp_dict_value_4;
            PyObject *tmp_expression_value_34;
            PyObject *tmp_annotations_18;
            tmp_expression_value_32 = PyObject_GetItem(locals_hikari$api$rest$$$class__2_RESTClient_110, mod_consts[433]);

            if (tmp_expression_value_32 == NULL) {
                if (CHECK_AND_CLEAR_KEY_ERROR_OCCURRED()) {
                    tmp_expression_value_32 = GET_STRING_DICT_VALUE(moduledict_hikari$api$rest, (Nuitka_StringObject *)mod_consts[433]);

                    if (unlikely(tmp_expression_value_32 == NULL)) {
                        tmp_expression_value_32 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[433]);
                    }

                    if (tmp_expression_value_32 == NULL) {
                        assert(ERROR_OCCURRED());

                        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                        exception_lineno = 506;
                        type_description_2 = "o";
                        goto frame_exception_exit_3;
                    }
                    Py_INCREF(tmp_expression_value_32);
                } else {
                    goto frame_exception_exit_3;
                }
            }

            tmp_called_value_15 = LOOKUP_ATTRIBUTE(tmp_expression_value_32, mod_consts[503]);
            Py_DECREF(tmp_expression_value_32);
            if (tmp_called_value_15 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 506;
                type_description_2 = "o";
                goto frame_exception_exit_3;
            }
            tmp_expression_value_33 = PyObject_GetItem(locals_hikari$api$rest$$$class__2_RESTClient_110, mod_consts[431]);

            if (tmp_expression_value_33 == NULL) {
                if (CHECK_AND_CLEAR_KEY_ERROR_OCCURRED()) {
                    tmp_expression_value_33 = GET_STRING_DICT_VALUE(moduledict_hikari$api$rest, (Nuitka_StringObject *)mod_consts[431]);

                    if (unlikely(tmp_expression_value_33 == NULL)) {
                        tmp_expression_value_33 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[431]);
                    }

                    if (tmp_expression_value_33 == NULL) {
                        assert(ERROR_OCCURRED());

                        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
                        Py_DECREF(tmp_called_value_15);

                        exception_lineno = 507;
                        type_description_2 = "o";
                        goto frame_exception_exit_3;
                    }
                    Py_INCREF(tmp_expression_value_33);
                } else {
                    goto frame_exception_exit_3;
                }
            }

            tmp_called_value_16 = LOOKUP_ATTRIBUTE(tmp_expression_value_33, mod_consts[457]);
            Py_DECREF(tmp_expression_value_33);
            if (tmp_called_value_16 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
                Py_DECREF(tmp_called_value_15);

                exception_lineno = 507;
                type_description_2 = "o";
                goto frame_exception_exit_3;
            }
            tmp_dict_key_4 = mod_consts[504];
            tmp_expression_value_34 = PyObject_GetItem(locals_hikari$api$rest$$$class__2_RESTClient_110, mod_consts[440]);

            if (tmp_expression_value_34 == NULL) {
                if (CHECK_AND_CLEAR_KEY_ERROR_OCCURRED()) {
                    tmp_expression_value_34 = GET_STRING_DICT_VALUE(moduledict_hikari$api$rest, (Nuitka_StringObject *)mod_consts[440]);

                    if (unlikely(tmp_expression_value_34 == NULL)) {
                        tmp_expression_value_34 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[440]);
                    }

                    if (tmp_expression_value_34 == NULL) {
                        assert(ERROR_OCCURRED());

                        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
                        Py_DECREF(tmp_called_value_15);
                        Py_DECREF(tmp_called_value_16);

                        exception_lineno = 513;
                        type_description_2 = "o";
                        goto frame_exception_exit_3;
                    }
                    Py_INCREF(tmp_expression_value_34);
                } else {
                    goto frame_exception_exit_3;
                }
            }

            tmp_dict_value_4 = LOOKUP_ATTRIBUTE(tmp_expression_value_34, mod_consts[485]);
            Py_DECREF(tmp_expression_value_34);
            if (tmp_dict_value_4 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
                Py_DECREF(tmp_called_value_15);
                Py_DECREF(tmp_called_value_16);

                exception_lineno = 513;
                type_description_2 = "o";
                goto frame_exception_exit_3;
            }
            tmp_kw_defaults_4 = _PyDict_NewPresized( 3 );
            {
                PyObject *tmp_expression_value_35;
                PyObject *tmp_expression_value_36;
                tmp_res = PyDict_SetItem(tmp_kw_defaults_4, tmp_dict_key_4, tmp_dict_value_4);
                Py_DECREF(tmp_dict_value_4);
                assert(!(tmp_res != 0));
                tmp_dict_key_4 = mod_consts[505];
                tmp_expression_value_35 = PyObject_GetItem(locals_hikari$api$rest$$$class__2_RESTClient_110, mod_consts[440]);

                if (tmp_expression_value_35 == NULL) {
                    if (CHECK_AND_CLEAR_KEY_ERROR_OCCURRED()) {
                        tmp_expression_value_35 = GET_STRING_DICT_VALUE(moduledict_hikari$api$rest, (Nuitka_StringObject *)mod_consts[440]);

                        if (unlikely(tmp_expression_value_35 == NULL)) {
                            tmp_expression_value_35 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[440]);
                        }

                        if (tmp_expression_value_35 == NULL) {
                            assert(ERROR_OCCURRED());

                            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                            exception_lineno = 514;
                            type_description_2 = "o";
                            goto dict_build_exception_3;
                        }
                        Py_INCREF(tmp_expression_value_35);
                    } else {
                        goto dict_build_exception_3;
                    }
                }

                tmp_dict_value_4 = LOOKUP_ATTRIBUTE(tmp_expression_value_35, mod_consts[485]);
                Py_DECREF(tmp_expression_value_35);
                if (tmp_dict_value_4 == NULL) {
                    assert(ERROR_OCCURRED());

                    FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                    exception_lineno = 514;
                    type_description_2 = "o";
                    goto dict_build_exception_3;
                }
                tmp_res = PyDict_SetItem(tmp_kw_defaults_4, tmp_dict_key_4, tmp_dict_value_4);
                Py_DECREF(tmp_dict_value_4);
                assert(!(tmp_res != 0));
                tmp_dict_key_4 = mod_consts[496];
                tmp_expression_value_36 = PyObject_GetItem(locals_hikari$api$rest$$$class__2_RESTClient_110, mod_consts[440]);

                if (tmp_expression_value_36 == NULL) {
                    if (CHECK_AND_CLEAR_KEY_ERROR_OCCURRED()) {
                        tmp_expression_value_36 = GET_STRING_DICT_VALUE(moduledict_hikari$api$rest, (Nuitka_StringObject *)mod_consts[440]);

                        if (unlikely(tmp_expression_value_36 == NULL)) {
                            tmp_expression_value_36 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[440]);
                        }

                        if (tmp_expression_value_36 == NULL) {
                            assert(ERROR_OCCURRED());

                            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                            exception_lineno = 515;
                            type_description_2 = "o";
                            goto dict_build_exception_3;
                        }
                        Py_INCREF(tmp_expression_value_36);
                    } else {
                        goto dict_build_exception_3;
                    }
                }

                tmp_dict_value_4 = LOOKUP_ATTRIBUTE(tmp_expression_value_36, mod_consts[485]);
                Py_DECREF(tmp_expression_value_36);
                if (tmp_dict_value_4 == NULL) {
                    assert(ERROR_OCCURRED());

                    FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                    exception_lineno = 515;
                    type_description_2 = "o";
                    goto dict_build_exception_3;
                }
                tmp_res = PyDict_SetItem(tmp_kw_defaults_4, tmp_dict_key_4, tmp_dict_value_4);
                Py_DECREF(tmp_dict_value_4);
                assert(!(tmp_res != 0));
            }
            goto dict_build_noexception_3;
            // Exception handling pass through code for dict_build:
            dict_build_exception_3:;
            Py_DECREF(tmp_called_value_15);
            Py_DECREF(tmp_called_value_16);
            Py_DECREF(tmp_kw_defaults_4);
            goto frame_exception_exit_3;
            // Finished with no exception for dict_build:
            dict_build_noexception_3:;
            tmp_annotations_18 = PyDict_Copy(mod_consts[506]);


            tmp_args_element_value_27 = MAKE_FUNCTION_hikari$api$rest$$$function__14_edit_permission_overwrites(tmp_kw_defaults_4, tmp_annotations_18);

            frame_862833cacd6e5ba73c351f8d132a7b6b_3->m_frame.f_lineno = 507;
            tmp_args_element_value_26 = CALL_FUNCTION_WITH_SINGLE_ARG(tmp_called_value_16, tmp_args_element_value_27);
            Py_DECREF(tmp_called_value_16);
            Py_DECREF(tmp_args_element_value_27);
            if (tmp_args_element_value_26 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
                Py_DECREF(tmp_called_value_15);

                exception_lineno = 507;
                type_description_2 = "o";
                goto frame_exception_exit_3;
            }
            frame_862833cacd6e5ba73c351f8d132a7b6b_3->m_frame.f_lineno = 506;
            tmp_dictset_value = CALL_FUNCTION_WITH_SINGLE_ARG(tmp_called_value_15, tmp_args_element_value_26);
            Py_DECREF(tmp_called_value_15);
            Py_DECREF(tmp_args_element_value_26);
            if (tmp_dictset_value == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 506;
                type_description_2 = "o";
                goto frame_exception_exit_3;
            }
            tmp_res = PyObject_SetItem(locals_hikari$api$rest$$$class__2_RESTClient_110, mod_consts[25], tmp_dictset_value);
            Py_DECREF(tmp_dictset_value);
            if (tmp_res != 0) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 508;
                type_description_2 = "o";
                goto frame_exception_exit_3;
            }
        }
        {
            PyObject *tmp_called_value_17;
            PyObject *tmp_expression_value_37;
            PyObject *tmp_args_element_value_28;
            PyObject *tmp_called_value_18;
            PyObject *tmp_expression_value_38;
            PyObject *tmp_args_element_value_29;
            PyObject *tmp_kw_defaults_5;
            PyObject *tmp_dict_key_5;
            PyObject *tmp_dict_value_5;
            PyObject *tmp_expression_value_39;
            PyObject *tmp_annotations_19;
            tmp_expression_value_37 = PyObject_GetItem(locals_hikari$api$rest$$$class__2_RESTClient_110, mod_consts[433]);

            if (tmp_expression_value_37 == NULL) {
                if (CHECK_AND_CLEAR_KEY_ERROR_OCCURRED()) {
                    tmp_expression_value_37 = GET_STRING_DICT_VALUE(moduledict_hikari$api$rest, (Nuitka_StringObject *)mod_consts[433]);

                    if (unlikely(tmp_expression_value_37 == NULL)) {
                        tmp_expression_value_37 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[433]);
                    }

                    if (tmp_expression_value_37 == NULL) {
                        assert(ERROR_OCCURRED());

                        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                        exception_lineno = 519;
                        type_description_2 = "o";
                        goto frame_exception_exit_3;
                    }
                    Py_INCREF(tmp_expression_value_37);
                } else {
                    goto frame_exception_exit_3;
                }
            }

            tmp_called_value_17 = LOOKUP_ATTRIBUTE(tmp_expression_value_37, mod_consts[503]);
            Py_DECREF(tmp_expression_value_37);
            if (tmp_called_value_17 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 519;
                type_description_2 = "o";
                goto frame_exception_exit_3;
            }
            tmp_expression_value_38 = PyObject_GetItem(locals_hikari$api$rest$$$class__2_RESTClient_110, mod_consts[431]);

            if (tmp_expression_value_38 == NULL) {
                if (CHECK_AND_CLEAR_KEY_ERROR_OCCURRED()) {
                    tmp_expression_value_38 = GET_STRING_DICT_VALUE(moduledict_hikari$api$rest, (Nuitka_StringObject *)mod_consts[431]);

                    if (unlikely(tmp_expression_value_38 == NULL)) {
                        tmp_expression_value_38 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[431]);
                    }

                    if (tmp_expression_value_38 == NULL) {
                        assert(ERROR_OCCURRED());

                        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
                        Py_DECREF(tmp_called_value_17);

                        exception_lineno = 520;
                        type_description_2 = "o";
                        goto frame_exception_exit_3;
                    }
                    Py_INCREF(tmp_expression_value_38);
                } else {
                    goto frame_exception_exit_3;
                }
            }

            tmp_called_value_18 = LOOKUP_ATTRIBUTE(tmp_expression_value_38, mod_consts[457]);
            Py_DECREF(tmp_expression_value_38);
            if (tmp_called_value_18 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
                Py_DECREF(tmp_called_value_17);

                exception_lineno = 520;
                type_description_2 = "o";
                goto frame_exception_exit_3;
            }
            tmp_dict_key_5 = mod_consts[504];
            tmp_expression_value_39 = PyObject_GetItem(locals_hikari$api$rest$$$class__2_RESTClient_110, mod_consts[440]);

            if (tmp_expression_value_39 == NULL) {
                if (CHECK_AND_CLEAR_KEY_ERROR_OCCURRED()) {
                    tmp_expression_value_39 = GET_STRING_DICT_VALUE(moduledict_hikari$api$rest, (Nuitka_StringObject *)mod_consts[440]);

                    if (unlikely(tmp_expression_value_39 == NULL)) {
                        tmp_expression_value_39 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[440]);
                    }

                    if (tmp_expression_value_39 == NULL) {
                        assert(ERROR_OCCURRED());

                        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
                        Py_DECREF(tmp_called_value_17);
                        Py_DECREF(tmp_called_value_18);

                        exception_lineno = 527;
                        type_description_2 = "o";
                        goto frame_exception_exit_3;
                    }
                    Py_INCREF(tmp_expression_value_39);
                } else {
                    goto frame_exception_exit_3;
                }
            }

            tmp_dict_value_5 = LOOKUP_ATTRIBUTE(tmp_expression_value_39, mod_consts[485]);
            Py_DECREF(tmp_expression_value_39);
            if (tmp_dict_value_5 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
                Py_DECREF(tmp_called_value_17);
                Py_DECREF(tmp_called_value_18);

                exception_lineno = 527;
                type_description_2 = "o";
                goto frame_exception_exit_3;
            }
            tmp_kw_defaults_5 = _PyDict_NewPresized( 3 );
            {
                PyObject *tmp_expression_value_40;
                PyObject *tmp_expression_value_41;
                tmp_res = PyDict_SetItem(tmp_kw_defaults_5, tmp_dict_key_5, tmp_dict_value_5);
                Py_DECREF(tmp_dict_value_5);
                assert(!(tmp_res != 0));
                tmp_dict_key_5 = mod_consts[505];
                tmp_expression_value_40 = PyObject_GetItem(locals_hikari$api$rest$$$class__2_RESTClient_110, mod_consts[440]);

                if (tmp_expression_value_40 == NULL) {
                    if (CHECK_AND_CLEAR_KEY_ERROR_OCCURRED()) {
                        tmp_expression_value_40 = GET_STRING_DICT_VALUE(moduledict_hikari$api$rest, (Nuitka_StringObject *)mod_consts[440]);

                        if (unlikely(tmp_expression_value_40 == NULL)) {
                            tmp_expression_value_40 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[440]);
                        }

                        if (tmp_expression_value_40 == NULL) {
                            assert(ERROR_OCCURRED());

                            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                            exception_lineno = 528;
                            type_description_2 = "o";
                            goto dict_build_exception_4;
                        }
                        Py_INCREF(tmp_expression_value_40);
                    } else {
                        goto dict_build_exception_4;
                    }
                }

                tmp_dict_value_5 = LOOKUP_ATTRIBUTE(tmp_expression_value_40, mod_consts[485]);
                Py_DECREF(tmp_expression_value_40);
                if (tmp_dict_value_5 == NULL) {
                    assert(ERROR_OCCURRED());

                    FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                    exception_lineno = 528;
                    type_description_2 = "o";
                    goto dict_build_exception_4;
                }
                tmp_res = PyDict_SetItem(tmp_kw_defaults_5, tmp_dict_key_5, tmp_dict_value_5);
                Py_DECREF(tmp_dict_value_5);
                assert(!(tmp_res != 0));
                tmp_dict_key_5 = mod_consts[496];
                tmp_expression_value_41 = PyObject_GetItem(locals_hikari$api$rest$$$class__2_RESTClient_110, mod_consts[440]);

                if (tmp_expression_value_41 == NULL) {
                    if (CHECK_AND_CLEAR_KEY_ERROR_OCCURRED()) {
                        tmp_expression_value_41 = GET_STRING_DICT_VALUE(moduledict_hikari$api$rest, (Nuitka_StringObject *)mod_consts[440]);

                        if (unlikely(tmp_expression_value_41 == NULL)) {
                            tmp_expression_value_41 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[440]);
                        }

                        if (tmp_expression_value_41 == NULL) {
                            assert(ERROR_OCCURRED());

                            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                            exception_lineno = 529;
                            type_description_2 = "o";
                            goto dict_build_exception_4;
                        }
                        Py_INCREF(tmp_expression_value_41);
                    } else {
                        goto dict_build_exception_4;
                    }
                }

                tmp_dict_value_5 = LOOKUP_ATTRIBUTE(tmp_expression_value_41, mod_consts[485]);
                Py_DECREF(tmp_expression_value_41);
                if (tmp_dict_value_5 == NULL) {
                    assert(ERROR_OCCURRED());

                    FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                    exception_lineno = 529;
                    type_description_2 = "o";
                    goto dict_build_exception_4;
                }
                tmp_res = PyDict_SetItem(tmp_kw_defaults_5, tmp_dict_key_5, tmp_dict_value_5);
                Py_DECREF(tmp_dict_value_5);
                assert(!(tmp_res != 0));
            }
            goto dict_build_noexception_4;
            // Exception handling pass through code for dict_build:
            dict_build_exception_4:;
            Py_DECREF(tmp_called_value_17);
            Py_DECREF(tmp_called_value_18);
            Py_DECREF(tmp_kw_defaults_5);
            goto frame_exception_exit_3;
            // Finished with no exception for dict_build:
            dict_build_noexception_4:;
            tmp_annotations_19 = PyDict_Copy(mod_consts[507]);


            tmp_args_element_value_29 = MAKE_FUNCTION_hikari$api$rest$$$function__15_edit_permission_overwrites(tmp_kw_defaults_5, tmp_annotations_19);

            frame_862833cacd6e5ba73c351f8d132a7b6b_3->m_frame.f_lineno = 520;
            tmp_args_element_value_28 = CALL_FUNCTION_WITH_SINGLE_ARG(tmp_called_value_18, tmp_args_element_value_29);
            Py_DECREF(tmp_called_value_18);
            Py_DECREF(tmp_args_element_value_29);
            if (tmp_args_element_value_28 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
                Py_DECREF(tmp_called_value_17);

                exception_lineno = 520;
                type_description_2 = "o";
                goto frame_exception_exit_3;
            }
            frame_862833cacd6e5ba73c351f8d132a7b6b_3->m_frame.f_lineno = 519;
            tmp_dictset_value = CALL_FUNCTION_WITH_SINGLE_ARG(tmp_called_value_17, tmp_args_element_value_28);
            Py_DECREF(tmp_called_value_17);
            Py_DECREF(tmp_args_element_value_28);
            if (tmp_dictset_value == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 519;
                type_description_2 = "o";
                goto frame_exception_exit_3;
            }
            tmp_res = PyObject_SetItem(locals_hikari$api$rest$$$class__2_RESTClient_110, mod_consts[25], tmp_dictset_value);
            Py_DECREF(tmp_dictset_value);
            if (tmp_res != 0) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 521;
                type_description_2 = "o";
                goto frame_exception_exit_3;
            }
        }
        {
            PyObject *tmp_called_value_19;
            PyObject *tmp_expression_value_42;
            PyObject *tmp_args_element_value_30;
            PyObject *tmp_kw_defaults_6;
            PyObject *tmp_dict_key_6;
            PyObject *tmp_dict_value_6;
            PyObject *tmp_expression_value_43;
            PyObject *tmp_annotations_20;
            tmp_expression_value_42 = PyObject_GetItem(locals_hikari$api$rest$$$class__2_RESTClient_110, mod_consts[431]);

            if (tmp_expression_value_42 == NULL) {
                if (CHECK_AND_CLEAR_KEY_ERROR_OCCURRED()) {
                    tmp_expression_value_42 = GET_STRING_DICT_VALUE(moduledict_hikari$api$rest, (Nuitka_StringObject *)mod_consts[431]);

                    if (unlikely(tmp_expression_value_42 == NULL)) {
                        tmp_expression_value_42 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[431]);
                    }

                    if (tmp_expression_value_42 == NULL) {
                        assert(ERROR_OCCURRED());

                        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                        exception_lineno = 533;
                        type_description_2 = "o";
                        goto frame_exception_exit_3;
                    }
                    Py_INCREF(tmp_expression_value_42);
                } else {
                    goto frame_exception_exit_3;
                }
            }

            tmp_called_value_19 = LOOKUP_ATTRIBUTE(tmp_expression_value_42, mod_consts[457]);
            Py_DECREF(tmp_expression_value_42);
            if (tmp_called_value_19 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 533;
                type_description_2 = "o";
                goto frame_exception_exit_3;
            }
            tmp_dict_key_6 = mod_consts[508];
            tmp_expression_value_43 = PyObject_GetItem(locals_hikari$api$rest$$$class__2_RESTClient_110, mod_consts[440]);

            if (tmp_expression_value_43 == NULL) {
                if (CHECK_AND_CLEAR_KEY_ERROR_OCCURRED()) {
                    tmp_expression_value_43 = GET_STRING_DICT_VALUE(moduledict_hikari$api$rest, (Nuitka_StringObject *)mod_consts[440]);

                    if (unlikely(tmp_expression_value_43 == NULL)) {
                        tmp_expression_value_43 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[440]);
                    }

                    if (tmp_expression_value_43 == NULL) {
                        assert(ERROR_OCCURRED());

                        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
                        Py_DECREF(tmp_called_value_19);

                        exception_lineno = 541;
                        type_description_2 = "o";
                        goto frame_exception_exit_3;
                    }
                    Py_INCREF(tmp_expression_value_43);
                } else {
                    goto frame_exception_exit_3;
                }
            }

            tmp_dict_value_6 = LOOKUP_ATTRIBUTE(tmp_expression_value_43, mod_consts[485]);
            Py_DECREF(tmp_expression_value_43);
            if (tmp_dict_value_6 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
                Py_DECREF(tmp_called_value_19);

                exception_lineno = 541;
                type_description_2 = "o";
                goto frame_exception_exit_3;
            }
            tmp_kw_defaults_6 = _PyDict_NewPresized( 4 );
            {
                PyObject *tmp_expression_value_44;
                PyObject *tmp_expression_value_45;
                PyObject *tmp_expression_value_46;
                tmp_res = PyDict_SetItem(tmp_kw_defaults_6, tmp_dict_key_6, tmp_dict_value_6);
                Py_DECREF(tmp_dict_value_6);
                assert(!(tmp_res != 0));
                tmp_dict_key_6 = mod_consts[504];
                tmp_expression_value_44 = PyObject_GetItem(locals_hikari$api$rest$$$class__2_RESTClient_110, mod_consts[440]);

                if (tmp_expression_value_44 == NULL) {
                    if (CHECK_AND_CLEAR_KEY_ERROR_OCCURRED()) {
                        tmp_expression_value_44 = GET_STRING_DICT_VALUE(moduledict_hikari$api$rest, (Nuitka_StringObject *)mod_consts[440]);

                        if (unlikely(tmp_expression_value_44 == NULL)) {
                            tmp_expression_value_44 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[440]);
                        }

                        if (tmp_expression_value_44 == NULL) {
                            assert(ERROR_OCCURRED());

                            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                            exception_lineno = 542;
                            type_description_2 = "o";
                            goto dict_build_exception_5;
                        }
                        Py_INCREF(tmp_expression_value_44);
                    } else {
                        goto dict_build_exception_5;
                    }
                }

                tmp_dict_value_6 = LOOKUP_ATTRIBUTE(tmp_expression_value_44, mod_consts[485]);
                Py_DECREF(tmp_expression_value_44);
                if (tmp_dict_value_6 == NULL) {
                    assert(ERROR_OCCURRED());

                    FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                    exception_lineno = 542;
                    type_description_2 = "o";
                    goto dict_build_exception_5;
                }
                tmp_res = PyDict_SetItem(tmp_kw_defaults_6, tmp_dict_key_6, tmp_dict_value_6);
                Py_DECREF(tmp_dict_value_6);
                assert(!(tmp_res != 0));
                tmp_dict_key_6 = mod_consts[505];
                tmp_expression_value_45 = PyObject_GetItem(locals_hikari$api$rest$$$class__2_RESTClient_110, mod_consts[440]);

                if (tmp_expression_value_45 == NULL) {
                    if (CHECK_AND_CLEAR_KEY_ERROR_OCCURRED()) {
                        tmp_expression_value_45 = GET_STRING_DICT_VALUE(moduledict_hikari$api$rest, (Nuitka_StringObject *)mod_consts[440]);

                        if (unlikely(tmp_expression_value_45 == NULL)) {
                            tmp_expression_value_45 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[440]);
                        }

                        if (tmp_expression_value_45 == NULL) {
                            assert(ERROR_OCCURRED());

                            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                            exception_lineno = 543;
                            type_description_2 = "o";
                            goto dict_build_exception_5;
                        }
                        Py_INCREF(tmp_expression_value_45);
                    } else {
                        goto dict_build_exception_5;
                    }
                }

                tmp_dict_value_6 = LOOKUP_ATTRIBUTE(tmp_expression_value_45, mod_consts[485]);
                Py_DECREF(tmp_expression_value_45);
                if (tmp_dict_value_6 == NULL) {
                    assert(ERROR_OCCURRED());

                    FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                    exception_lineno = 543;
                    type_description_2 = "o";
                    goto dict_build_exception_5;
                }
                tmp_res = PyDict_SetItem(tmp_kw_defaults_6, tmp_dict_key_6, tmp_dict_value_6);
                Py_DECREF(tmp_dict_value_6);
                assert(!(tmp_res != 0));
                tmp_dict_key_6 = mod_consts[496];
                tmp_expression_value_46 = PyObject_GetItem(locals_hikari$api$rest$$$class__2_RESTClient_110, mod_consts[440]);

                if (tmp_expression_value_46 == NULL) {
                    if (CHECK_AND_CLEAR_KEY_ERROR_OCCURRED()) {
                        tmp_expression_value_46 = GET_STRING_DICT_VALUE(moduledict_hikari$api$rest, (Nuitka_StringObject *)mod_consts[440]);

                        if (unlikely(tmp_expression_value_46 == NULL)) {
                            tmp_expression_value_46 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[440]);
                        }

                        if (tmp_expression_value_46 == NULL) {
                            assert(ERROR_OCCURRED());

                            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                            exception_lineno = 544;
                            type_description_2 = "o";
                            goto dict_build_exception_5;
                        }
                        Py_INCREF(tmp_expression_value_46);
                    } else {
                        goto dict_build_exception_5;
                    }
                }

                tmp_dict_value_6 = LOOKUP_ATTRIBUTE(tmp_expression_value_46, mod_consts[485]);
                Py_DECREF(tmp_expression_value_46);
                if (tmp_dict_value_6 == NULL) {
                    assert(ERROR_OCCURRED());

                    FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                    exception_lineno = 544;
                    type_description_2 = "o";
                    goto dict_build_exception_5;
                }
                tmp_res = PyDict_SetItem(tmp_kw_defaults_6, tmp_dict_key_6, tmp_dict_value_6);
                Py_DECREF(tmp_dict_value_6);
                assert(!(tmp_res != 0));
            }
            goto dict_build_noexception_5;
            // Exception handling pass through code for dict_build:
            dict_build_exception_5:;
            Py_DECREF(tmp_called_value_19);
            Py_DECREF(tmp_kw_defaults_6);
            goto frame_exception_exit_3;
            // Finished with no exception for dict_build:
            dict_build_noexception_5:;
            tmp_annotations_20 = PyDict_Copy(mod_consts[509]);


            tmp_args_element_value_30 = MAKE_FUNCTION_hikari$api$rest$$$function__16_edit_permission_overwrites(tmp_kw_defaults_6, tmp_annotations_20);

            frame_862833cacd6e5ba73c351f8d132a7b6b_3->m_frame.f_lineno = 533;
            tmp_dictset_value = CALL_FUNCTION_WITH_SINGLE_ARG(tmp_called_value_19, tmp_args_element_value_30);
            Py_DECREF(tmp_called_value_19);
            Py_DECREF(tmp_args_element_value_30);
            if (tmp_dictset_value == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 533;
                type_description_2 = "o";
                goto frame_exception_exit_3;
            }
            tmp_res = PyObject_SetItem(locals_hikari$api$rest$$$class__2_RESTClient_110, mod_consts[25], tmp_dictset_value);
            Py_DECREF(tmp_dictset_value);
            if (tmp_res != 0) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 534;
                type_description_2 = "o";
                goto frame_exception_exit_3;
            }
        }
        {
            PyObject *tmp_called_instance_15;
            PyObject *tmp_args_element_value_31;
            PyObject *tmp_annotations_21;
            tmp_called_instance_15 = PyObject_GetItem(locals_hikari$api$rest$$$class__2_RESTClient_110, mod_consts[431]);

            if (tmp_called_instance_15 == NULL) {
                if (CHECK_AND_CLEAR_KEY_ERROR_OCCURRED()) {
                    tmp_called_instance_15 = GET_STRING_DICT_VALUE(moduledict_hikari$api$rest, (Nuitka_StringObject *)mod_consts[431]);

                    if (unlikely(tmp_called_instance_15 == NULL)) {
                        tmp_called_instance_15 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[431]);
                    }

                    if (tmp_called_instance_15 == NULL) {
                        assert(ERROR_OCCURRED());

                        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                        exception_lineno = 599;
                        type_description_2 = "o";
                        goto frame_exception_exit_3;
                    }
                    Py_INCREF(tmp_called_instance_15);
                } else {
                    goto frame_exception_exit_3;
                }
            }

            tmp_annotations_21 = PyDict_Copy(mod_consts[510]);


            tmp_args_element_value_31 = MAKE_FUNCTION_hikari$api$rest$$$function__17_delete_permission_overwrite(tmp_annotations_21);

            frame_862833cacd6e5ba73c351f8d132a7b6b_3->m_frame.f_lineno = 599;
            tmp_dictset_value = CALL_METHOD_WITH_SINGLE_ARG(tmp_called_instance_15, mod_consts[457], tmp_args_element_value_31);
            Py_DECREF(tmp_called_instance_15);
            Py_DECREF(tmp_args_element_value_31);
            if (tmp_dictset_value == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 599;
                type_description_2 = "o";
                goto frame_exception_exit_3;
            }
            tmp_res = PyObject_SetItem(locals_hikari$api$rest$$$class__2_RESTClient_110, mod_consts[30], tmp_dictset_value);
            Py_DECREF(tmp_dictset_value);
            if (tmp_res != 0) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 600;
                type_description_2 = "o";
                goto frame_exception_exit_3;
            }
        }
        {
            PyObject *tmp_called_instance_16;
            PyObject *tmp_args_element_value_32;
            PyObject *tmp_annotations_22;
            tmp_called_instance_16 = PyObject_GetItem(locals_hikari$api$rest$$$class__2_RESTClient_110, mod_consts[431]);

            if (tmp_called_instance_16 == NULL) {
                if (CHECK_AND_CLEAR_KEY_ERROR_OCCURRED()) {
                    tmp_called_instance_16 = GET_STRING_DICT_VALUE(moduledict_hikari$api$rest, (Nuitka_StringObject *)mod_consts[431]);

                    if (unlikely(tmp_called_instance_16 == NULL)) {
                        tmp_called_instance_16 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[431]);
                    }

                    if (tmp_called_instance_16 == NULL) {
                        assert(ERROR_OCCURRED());

                        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                        exception_lineno = 640;
                        type_description_2 = "o";
                        goto frame_exception_exit_3;
                    }
                    Py_INCREF(tmp_called_instance_16);
                } else {
                    goto frame_exception_exit_3;
                }
            }

            tmp_annotations_22 = PyDict_Copy(mod_consts[511]);


            tmp_args_element_value_32 = MAKE_FUNCTION_hikari$api$rest$$$function__18_fetch_channel_invites(tmp_annotations_22);

            frame_862833cacd6e5ba73c351f8d132a7b6b_3->m_frame.f_lineno = 640;
            tmp_dictset_value = CALL_METHOD_WITH_SINGLE_ARG(tmp_called_instance_16, mod_consts[457], tmp_args_element_value_32);
            Py_DECREF(tmp_called_instance_16);
            Py_DECREF(tmp_args_element_value_32);
            if (tmp_dictset_value == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 640;
                type_description_2 = "o";
                goto frame_exception_exit_3;
            }
            tmp_res = PyObject_SetItem(locals_hikari$api$rest$$$class__2_RESTClient_110, mod_consts[33], tmp_dictset_value);
            Py_DECREF(tmp_dictset_value);
            if (tmp_res != 0) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 641;
                type_description_2 = "o";
                goto frame_exception_exit_3;
            }
        }
        {
            PyObject *tmp_called_value_20;
            PyObject *tmp_expression_value_47;
            PyObject *tmp_args_element_value_33;
            PyObject *tmp_kw_defaults_7;
            PyObject *tmp_dict_key_7;
            PyObject *tmp_dict_value_7;
            PyObject *tmp_expression_value_48;
            PyObject *tmp_annotations_23;
            tmp_expression_value_47 = PyObject_GetItem(locals_hikari$api$rest$$$class__2_RESTClient_110, mod_consts[431]);

            if (tmp_expression_value_47 == NULL) {
                if (CHECK_AND_CLEAR_KEY_ERROR_OCCURRED()) {
                    tmp_expression_value_47 = GET_STRING_DICT_VALUE(moduledict_hikari$api$rest, (Nuitka_StringObject *)mod_consts[431]);

                    if (unlikely(tmp_expression_value_47 == NULL)) {
                        tmp_expression_value_47 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[431]);
                    }

                    if (tmp_expression_value_47 == NULL) {
                        assert(ERROR_OCCURRED());

                        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                        exception_lineno = 680;
                        type_description_2 = "o";
                        goto frame_exception_exit_3;
                    }
                    Py_INCREF(tmp_expression_value_47);
                } else {
                    goto frame_exception_exit_3;
                }
            }

            tmp_called_value_20 = LOOKUP_ATTRIBUTE(tmp_expression_value_47, mod_consts[457]);
            Py_DECREF(tmp_expression_value_47);
            if (tmp_called_value_20 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 680;
                type_description_2 = "o";
                goto frame_exception_exit_3;
            }
            tmp_dict_key_7 = mod_consts[512];
            tmp_expression_value_48 = PyObject_GetItem(locals_hikari$api$rest$$$class__2_RESTClient_110, mod_consts[440]);

            if (tmp_expression_value_48 == NULL) {
                if (CHECK_AND_CLEAR_KEY_ERROR_OCCURRED()) {
                    tmp_expression_value_48 = GET_STRING_DICT_VALUE(moduledict_hikari$api$rest, (Nuitka_StringObject *)mod_consts[440]);

                    if (unlikely(tmp_expression_value_48 == NULL)) {
                        tmp_expression_value_48 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[440]);
                    }

                    if (tmp_expression_value_48 == NULL) {
                        assert(ERROR_OCCURRED());

                        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
                        Py_DECREF(tmp_called_value_20);

                        exception_lineno = 685;
                        type_description_2 = "o";
                        goto frame_exception_exit_3;
                    }
                    Py_INCREF(tmp_expression_value_48);
                } else {
                    goto frame_exception_exit_3;
                }
            }

            tmp_dict_value_7 = LOOKUP_ATTRIBUTE(tmp_expression_value_48, mod_consts[485]);
            Py_DECREF(tmp_expression_value_48);
            if (tmp_dict_value_7 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
                Py_DECREF(tmp_called_value_20);

                exception_lineno = 685;
                type_description_2 = "o";
                goto frame_exception_exit_3;
            }
            tmp_kw_defaults_7 = _PyDict_NewPresized( 8 );
            {
                PyObject *tmp_expression_value_49;
                PyObject *tmp_expression_value_50;
                PyObject *tmp_expression_value_51;
                PyObject *tmp_expression_value_52;
                PyObject *tmp_expression_value_53;
                PyObject *tmp_expression_value_54;
                PyObject *tmp_expression_value_55;
                tmp_res = PyDict_SetItem(tmp_kw_defaults_7, tmp_dict_key_7, tmp_dict_value_7);
                Py_DECREF(tmp_dict_value_7);
                assert(!(tmp_res != 0));
                tmp_dict_key_7 = mod_consts[513];
                tmp_expression_value_49 = PyObject_GetItem(locals_hikari$api$rest$$$class__2_RESTClient_110, mod_consts[440]);

                if (tmp_expression_value_49 == NULL) {
                    if (CHECK_AND_CLEAR_KEY_ERROR_OCCURRED()) {
                        tmp_expression_value_49 = GET_STRING_DICT_VALUE(moduledict_hikari$api$rest, (Nuitka_StringObject *)mod_consts[440]);

                        if (unlikely(tmp_expression_value_49 == NULL)) {
                            tmp_expression_value_49 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[440]);
                        }

                        if (tmp_expression_value_49 == NULL) {
                            assert(ERROR_OCCURRED());

                            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                            exception_lineno = 686;
                            type_description_2 = "o";
                            goto dict_build_exception_6;
                        }
                        Py_INCREF(tmp_expression_value_49);
                    } else {
                        goto dict_build_exception_6;
                    }
                }

                tmp_dict_value_7 = LOOKUP_ATTRIBUTE(tmp_expression_value_49, mod_consts[485]);
                Py_DECREF(tmp_expression_value_49);
                if (tmp_dict_value_7 == NULL) {
                    assert(ERROR_OCCURRED());

                    FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                    exception_lineno = 686;
                    type_description_2 = "o";
                    goto dict_build_exception_6;
                }
                tmp_res = PyDict_SetItem(tmp_kw_defaults_7, tmp_dict_key_7, tmp_dict_value_7);
                Py_DECREF(tmp_dict_value_7);
                assert(!(tmp_res != 0));
                tmp_dict_key_7 = mod_consts[514];
                tmp_expression_value_50 = PyObject_GetItem(locals_hikari$api$rest$$$class__2_RESTClient_110, mod_consts[440]);

                if (tmp_expression_value_50 == NULL) {
                    if (CHECK_AND_CLEAR_KEY_ERROR_OCCURRED()) {
                        tmp_expression_value_50 = GET_STRING_DICT_VALUE(moduledict_hikari$api$rest, (Nuitka_StringObject *)mod_consts[440]);

                        if (unlikely(tmp_expression_value_50 == NULL)) {
                            tmp_expression_value_50 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[440]);
                        }

                        if (tmp_expression_value_50 == NULL) {
                            assert(ERROR_OCCURRED());

                            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                            exception_lineno = 687;
                            type_description_2 = "o";
                            goto dict_build_exception_6;
                        }
                        Py_INCREF(tmp_expression_value_50);
                    } else {
                        goto dict_build_exception_6;
                    }
                }

                tmp_dict_value_7 = LOOKUP_ATTRIBUTE(tmp_expression_value_50, mod_consts[485]);
                Py_DECREF(tmp_expression_value_50);
                if (tmp_dict_value_7 == NULL) {
                    assert(ERROR_OCCURRED());

                    FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                    exception_lineno = 687;
                    type_description_2 = "o";
                    goto dict_build_exception_6;
                }
                tmp_res = PyDict_SetItem(tmp_kw_defaults_7, tmp_dict_key_7, tmp_dict_value_7);
                Py_DECREF(tmp_dict_value_7);
                assert(!(tmp_res != 0));
                tmp_dict_key_7 = mod_consts[515];
                tmp_expression_value_51 = PyObject_GetItem(locals_hikari$api$rest$$$class__2_RESTClient_110, mod_consts[440]);

                if (tmp_expression_value_51 == NULL) {
                    if (CHECK_AND_CLEAR_KEY_ERROR_OCCURRED()) {
                        tmp_expression_value_51 = GET_STRING_DICT_VALUE(moduledict_hikari$api$rest, (Nuitka_StringObject *)mod_consts[440]);

                        if (unlikely(tmp_expression_value_51 == NULL)) {
                            tmp_expression_value_51 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[440]);
                        }

                        if (tmp_expression_value_51 == NULL) {
                            assert(ERROR_OCCURRED());

                            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                            exception_lineno = 688;
                            type_description_2 = "o";
                            goto dict_build_exception_6;
                        }
                        Py_INCREF(tmp_expression_value_51);
                    } else {
                        goto dict_build_exception_6;
                    }
                }

                tmp_dict_value_7 = LOOKUP_ATTRIBUTE(tmp_expression_value_51, mod_consts[485]);
                Py_DECREF(tmp_expression_value_51);
                if (tmp_dict_value_7 == NULL) {
                    assert(ERROR_OCCURRED());

                    FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                    exception_lineno = 688;
                    type_description_2 = "o";
                    goto dict_build_exception_6;
                }
                tmp_res = PyDict_SetItem(tmp_kw_defaults_7, tmp_dict_key_7, tmp_dict_value_7);
                Py_DECREF(tmp_dict_value_7);
                assert(!(tmp_res != 0));
                tmp_dict_key_7 = mod_consts[508];
                tmp_expression_value_52 = PyObject_GetItem(locals_hikari$api$rest$$$class__2_RESTClient_110, mod_consts[440]);

                if (tmp_expression_value_52 == NULL) {
                    if (CHECK_AND_CLEAR_KEY_ERROR_OCCURRED()) {
                        tmp_expression_value_52 = GET_STRING_DICT_VALUE(moduledict_hikari$api$rest, (Nuitka_StringObject *)mod_consts[440]);

                        if (unlikely(tmp_expression_value_52 == NULL)) {
                            tmp_expression_value_52 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[440]);
                        }

                        if (tmp_expression_value_52 == NULL) {
                            assert(ERROR_OCCURRED());

                            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                            exception_lineno = 689;
                            type_description_2 = "o";
                            goto dict_build_exception_6;
                        }
                        Py_INCREF(tmp_expression_value_52);
                    } else {
                        goto dict_build_exception_6;
                    }
                }

                tmp_dict_value_7 = LOOKUP_ATTRIBUTE(tmp_expression_value_52, mod_consts[485]);
                Py_DECREF(tmp_expression_value_52);
                if (tmp_dict_value_7 == NULL) {
                    assert(ERROR_OCCURRED());

                    FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                    exception_lineno = 689;
                    type_description_2 = "o";
                    goto dict_build_exception_6;
                }
                tmp_res = PyDict_SetItem(tmp_kw_defaults_7, tmp_dict_key_7, tmp_dict_value_7);
                Py_DECREF(tmp_dict_value_7);
                assert(!(tmp_res != 0));
                tmp_dict_key_7 = mod_consts[516];
                tmp_expression_value_53 = PyObject_GetItem(locals_hikari$api$rest$$$class__2_RESTClient_110, mod_consts[440]);

                if (tmp_expression_value_53 == NULL) {
                    if (CHECK_AND_CLEAR_KEY_ERROR_OCCURRED()) {
                        tmp_expression_value_53 = GET_STRING_DICT_VALUE(moduledict_hikari$api$rest, (Nuitka_StringObject *)mod_consts[440]);

                        if (unlikely(tmp_expression_value_53 == NULL)) {
                            tmp_expression_value_53 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[440]);
                        }

                        if (tmp_expression_value_53 == NULL) {
                            assert(ERROR_OCCURRED());

                            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                            exception_lineno = 690;
                            type_description_2 = "o";
                            goto dict_build_exception_6;
                        }
                        Py_INCREF(tmp_expression_value_53);
                    } else {
                        goto dict_build_exception_6;
                    }
                }

                tmp_dict_value_7 = LOOKUP_ATTRIBUTE(tmp_expression_value_53, mod_consts[485]);
                Py_DECREF(tmp_expression_value_53);
                if (tmp_dict_value_7 == NULL) {
                    assert(ERROR_OCCURRED());

                    FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                    exception_lineno = 690;
                    type_description_2 = "o";
                    goto dict_build_exception_6;
                }
                tmp_res = PyDict_SetItem(tmp_kw_defaults_7, tmp_dict_key_7, tmp_dict_value_7);
                Py_DECREF(tmp_dict_value_7);
                assert(!(tmp_res != 0));
                tmp_dict_key_7 = mod_consts[517];
                tmp_expression_value_54 = PyObject_GetItem(locals_hikari$api$rest$$$class__2_RESTClient_110, mod_consts[440]);

                if (tmp_expression_value_54 == NULL) {
                    if (CHECK_AND_CLEAR_KEY_ERROR_OCCURRED()) {
                        tmp_expression_value_54 = GET_STRING_DICT_VALUE(moduledict_hikari$api$rest, (Nuitka_StringObject *)mod_consts[440]);

                        if (unlikely(tmp_expression_value_54 == NULL)) {
                            tmp_expression_value_54 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[440]);
                        }

                        if (tmp_expression_value_54 == NULL) {
                            assert(ERROR_OCCURRED());

                            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                            exception_lineno = 693;
                            type_description_2 = "o";
                            goto dict_build_exception_6;
                        }
                        Py_INCREF(tmp_expression_value_54);
                    } else {
                        goto dict_build_exception_6;
                    }
                }

                tmp_dict_value_7 = LOOKUP_ATTRIBUTE(tmp_expression_value_54, mod_consts[485]);
                Py_DECREF(tmp_expression_value_54);
                if (tmp_dict_value_7 == NULL) {
                    assert(ERROR_OCCURRED());

                    FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                    exception_lineno = 693;
                    type_description_2 = "o";
                    goto dict_build_exception_6;
                }
                tmp_res = PyDict_SetItem(tmp_kw_defaults_7, tmp_dict_key_7, tmp_dict_value_7);
                Py_DECREF(tmp_dict_value_7);
                assert(!(tmp_res != 0));
                tmp_dict_key_7 = mod_consts[496];
                tmp_expression_value_55 = PyObject_GetItem(locals_hikari$api$rest$$$class__2_RESTClient_110, mod_consts[440]);

                if (tmp_expression_value_55 == NULL) {
                    if (CHECK_AND_CLEAR_KEY_ERROR_OCCURRED()) {
                        tmp_expression_value_55 = GET_STRING_DICT_VALUE(moduledict_hikari$api$rest, (Nuitka_StringObject *)mod_consts[440]);

                        if (unlikely(tmp_expression_value_55 == NULL)) {
                            tmp_expression_value_55 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[440]);
                        }

                        if (tmp_expression_value_55 == NULL) {
                            assert(ERROR_OCCURRED());

                            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                            exception_lineno = 694;
                            type_description_2 = "o";
                            goto dict_build_exception_6;
                        }
                        Py_INCREF(tmp_expression_value_55);
                    } else {
                        goto dict_build_exception_6;
                    }
                }

                tmp_dict_value_7 = LOOKUP_ATTRIBUTE(tmp_expression_value_55, mod_consts[485]);
                Py_DECREF(tmp_expression_value_55);
                if (tmp_dict_value_7 == NULL) {
                    assert(ERROR_OCCURRED());

                    FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                    exception_lineno = 694;
                    type_description_2 = "o";
                    goto dict_build_exception_6;
                }
                tmp_res = PyDict_SetItem(tmp_kw_defaults_7, tmp_dict_key_7, tmp_dict_value_7);
                Py_DECREF(tmp_dict_value_7);
                assert(!(tmp_res != 0));
            }
            goto dict_build_noexception_6;
            // Exception handling pass through code for dict_build:
            dict_build_exception_6:;
            Py_DECREF(tmp_called_value_20);
            Py_DECREF(tmp_kw_defaults_7);
            goto frame_exception_exit_3;
            // Finished with no exception for dict_build:
            dict_build_noexception_6:;
            tmp_annotations_23 = PyDict_Copy(mod_consts[518]);


            tmp_args_element_value_33 = MAKE_FUNCTION_hikari$api$rest$$$function__19_create_invite(tmp_kw_defaults_7, tmp_annotations_23);

            frame_862833cacd6e5ba73c351f8d132a7b6b_3->m_frame.f_lineno = 680;
            tmp_dictset_value = CALL_FUNCTION_WITH_SINGLE_ARG(tmp_called_value_20, tmp_args_element_value_33);
            Py_DECREF(tmp_called_value_20);
            Py_DECREF(tmp_args_element_value_33);
            if (tmp_dictset_value == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 680;
                type_description_2 = "o";
                goto frame_exception_exit_3;
            }
            tmp_res = PyObject_SetItem(locals_hikari$api$rest$$$class__2_RESTClient_110, mod_consts[36], tmp_dictset_value);
            Py_DECREF(tmp_dictset_value);
            if (tmp_res != 0) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 681;
                type_description_2 = "o";
                goto frame_exception_exit_3;
            }
        }
        {
            PyObject *tmp_called_instance_17;
            PyObject *tmp_args_element_value_34;
            PyObject *tmp_annotations_24;
            tmp_called_instance_17 = PyObject_GetItem(locals_hikari$api$rest$$$class__2_RESTClient_110, mod_consts[431]);

            if (tmp_called_instance_17 == NULL) {
                if (CHECK_AND_CLEAR_KEY_ERROR_OCCURRED()) {
                    tmp_called_instance_17 = GET_STRING_DICT_VALUE(moduledict_hikari$api$rest, (Nuitka_StringObject *)mod_consts[431]);

                    if (unlikely(tmp_called_instance_17 == NULL)) {
                        tmp_called_instance_17 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[431]);
                    }

                    if (tmp_called_instance_17 == NULL) {
                        assert(ERROR_OCCURRED());

                        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                        exception_lineno = 765;
                        type_description_2 = "o";
                        goto frame_exception_exit_3;
                    }
                    Py_INCREF(tmp_called_instance_17);
                } else {
                    goto frame_exception_exit_3;
                }
            }

            tmp_annotations_24 = PyDict_Copy(mod_consts[519]);


            tmp_args_element_value_34 = MAKE_FUNCTION_hikari$api$rest$$$function__20_trigger_typing(tmp_annotations_24);

            frame_862833cacd6e5ba73c351f8d132a7b6b_3->m_frame.f_lineno = 765;
            tmp_dictset_value = CALL_METHOD_WITH_SINGLE_ARG(tmp_called_instance_17, mod_consts[457], tmp_args_element_value_34);
            Py_DECREF(tmp_called_instance_17);
            Py_DECREF(tmp_args_element_value_34);
            if (tmp_dictset_value == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 765;
                type_description_2 = "o";
                goto frame_exception_exit_3;
            }
            tmp_res = PyObject_SetItem(locals_hikari$api$rest$$$class__2_RESTClient_110, mod_consts[521], tmp_dictset_value);
            Py_DECREF(tmp_dictset_value);
            if (tmp_res != 0) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 766;
                type_description_2 = "o";
                goto frame_exception_exit_3;
            }
        }
        {
            PyObject *tmp_called_instance_18;
            PyObject *tmp_args_element_value_35;
            PyObject *tmp_annotations_25;
            tmp_called_instance_18 = PyObject_GetItem(locals_hikari$api$rest$$$class__2_RESTClient_110, mod_consts[431]);

            if (tmp_called_instance_18 == NULL) {
                if (CHECK_AND_CLEAR_KEY_ERROR_OCCURRED()) {
                    tmp_called_instance_18 = GET_STRING_DICT_VALUE(moduledict_hikari$api$rest, (Nuitka_StringObject *)mod_consts[431]);

                    if (unlikely(tmp_called_instance_18 == NULL)) {
                        tmp_called_instance_18 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[431]);
                    }

                    if (tmp_called_instance_18 == NULL) {
                        assert(ERROR_OCCURRED());

                        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                        exception_lineno = 829;
                        type_description_2 = "o";
                        goto frame_exception_exit_3;
                    }
                    Py_INCREF(tmp_called_instance_18);
                } else {
                    goto frame_exception_exit_3;
                }
            }

            tmp_annotations_25 = PyDict_Copy(mod_consts[523]);


            tmp_args_element_value_35 = MAKE_FUNCTION_hikari$api$rest$$$function__21_fetch_pins(tmp_annotations_25);

            frame_862833cacd6e5ba73c351f8d132a7b6b_3->m_frame.f_lineno = 829;
            tmp_dictset_value = CALL_METHOD_WITH_SINGLE_ARG(tmp_called_instance_18, mod_consts[457], tmp_args_element_value_35);
            Py_DECREF(tmp_called_instance_18);
            Py_DECREF(tmp_args_element_value_35);
            if (tmp_dictset_value == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 829;
                type_description_2 = "o";
                goto frame_exception_exit_3;
            }
            tmp_res = PyObject_SetItem(locals_hikari$api$rest$$$class__2_RESTClient_110, mod_consts[39], tmp_dictset_value);
            Py_DECREF(tmp_dictset_value);
            if (tmp_res != 0) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 830;
                type_description_2 = "o";
                goto frame_exception_exit_3;
            }
        }
        {
            PyObject *tmp_called_instance_19;
            PyObject *tmp_args_element_value_36;
            PyObject *tmp_annotations_26;
            tmp_called_instance_19 = PyObject_GetItem(locals_hikari$api$rest$$$class__2_RESTClient_110, mod_consts[431]);

            if (tmp_called_instance_19 == NULL) {
                if (CHECK_AND_CLEAR_KEY_ERROR_OCCURRED()) {
                    tmp_called_instance_19 = GET_STRING_DICT_VALUE(moduledict_hikari$api$rest, (Nuitka_StringObject *)mod_consts[431]);

                    if (unlikely(tmp_called_instance_19 == NULL)) {
                        tmp_called_instance_19 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[431]);
                    }

                    if (tmp_called_instance_19 == NULL) {
                        assert(ERROR_OCCURRED());

                        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                        exception_lineno = 869;
                        type_description_2 = "o";
                        goto frame_exception_exit_3;
                    }
                    Py_INCREF(tmp_called_instance_19);
                } else {
                    goto frame_exception_exit_3;
                }
            }

            tmp_annotations_26 = PyDict_Copy(mod_consts[524]);


            tmp_args_element_value_36 = MAKE_FUNCTION_hikari$api$rest$$$function__22_pin_message(tmp_annotations_26);

            frame_862833cacd6e5ba73c351f8d132a7b6b_3->m_frame.f_lineno = 869;
            tmp_dictset_value = CALL_METHOD_WITH_SINGLE_ARG(tmp_called_instance_19, mod_consts[457], tmp_args_element_value_36);
            Py_DECREF(tmp_called_instance_19);
            Py_DECREF(tmp_args_element_value_36);
            if (tmp_dictset_value == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 869;
                type_description_2 = "o";
                goto frame_exception_exit_3;
            }
            tmp_res = PyObject_SetItem(locals_hikari$api$rest$$$class__2_RESTClient_110, mod_consts[42], tmp_dictset_value);
            Py_DECREF(tmp_dictset_value);
            if (tmp_res != 0) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 870;
                type_description_2 = "o";
                goto frame_exception_exit_3;
            }
        }
        {
            PyObject *tmp_called_instance_20;
            PyObject *tmp_args_element_value_37;
            PyObject *tmp_annotations_27;
            tmp_called_instance_20 = PyObject_GetItem(locals_hikari$api$rest$$$class__2_RESTClient_110, mod_consts[431]);

            if (tmp_called_instance_20 == NULL) {
                if (CHECK_AND_CLEAR_KEY_ERROR_OCCURRED()) {
                    tmp_called_instance_20 = GET_STRING_DICT_VALUE(moduledict_hikari$api$rest, (Nuitka_StringObject *)mod_consts[431]);

                    if (unlikely(tmp_called_instance_20 == NULL)) {
                        tmp_called_instance_20 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[431]);
                    }

                    if (tmp_called_instance_20 == NULL) {
                        assert(ERROR_OCCURRED());

                        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                        exception_lineno = 910;
                        type_description_2 = "o";
                        goto frame_exception_exit_3;
                    }
                    Py_INCREF(tmp_called_instance_20);
                } else {
                    goto frame_exception_exit_3;
                }
            }

            tmp_annotations_27 = PyDict_Copy(mod_consts[524]);


            tmp_args_element_value_37 = MAKE_FUNCTION_hikari$api$rest$$$function__23_unpin_message(tmp_annotations_27);

            frame_862833cacd6e5ba73c351f8d132a7b6b_3->m_frame.f_lineno = 910;
            tmp_dictset_value = CALL_METHOD_WITH_SINGLE_ARG(tmp_called_instance_20, mod_consts[457], tmp_args_element_value_37);
            Py_DECREF(tmp_called_instance_20);
            Py_DECREF(tmp_args_element_value_37);
            if (tmp_dictset_value == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 910;
                type_description_2 = "o";
                goto frame_exception_exit_3;
            }
            tmp_res = PyObject_SetItem(locals_hikari$api$rest$$$class__2_RESTClient_110, mod_consts[45], tmp_dictset_value);
            Py_DECREF(tmp_dictset_value);
            if (tmp_res != 0) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 911;
                type_description_2 = "o";
                goto frame_exception_exit_3;
            }
        }
        {
            PyObject *tmp_called_value_21;
            PyObject *tmp_expression_value_56;
            PyObject *tmp_args_element_value_38;
            PyObject *tmp_kw_defaults_8;
            PyObject *tmp_dict_key_8;
            PyObject *tmp_dict_value_8;
            PyObject *tmp_expression_value_57;
            PyObject *tmp_annotations_28;
            tmp_expression_value_56 = PyObject_GetItem(locals_hikari$api$rest$$$class__2_RESTClient_110, mod_consts[431]);

            if (tmp_expression_value_56 == NULL) {
                if (CHECK_AND_CLEAR_KEY_ERROR_OCCURRED()) {
                    tmp_expression_value_56 = GET_STRING_DICT_VALUE(moduledict_hikari$api$rest, (Nuitka_StringObject *)mod_consts[431]);

                    if (unlikely(tmp_expression_value_56 == NULL)) {
                        tmp_expression_value_56 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[431]);
                    }

                    if (tmp_expression_value_56 == NULL) {
                        assert(ERROR_OCCURRED());

                        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                        exception_lineno = 951;
                        type_description_2 = "o";
                        goto frame_exception_exit_3;
                    }
                    Py_INCREF(tmp_expression_value_56);
                } else {
                    goto frame_exception_exit_3;
                }
            }

            tmp_called_value_21 = LOOKUP_ATTRIBUTE(tmp_expression_value_56, mod_consts[457]);
            Py_DECREF(tmp_expression_value_56);
            if (tmp_called_value_21 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 951;
                type_description_2 = "o";
                goto frame_exception_exit_3;
            }
            tmp_dict_key_8 = mod_consts[525];
            tmp_expression_value_57 = PyObject_GetItem(locals_hikari$api$rest$$$class__2_RESTClient_110, mod_consts[440]);

            if (tmp_expression_value_57 == NULL) {
                if (CHECK_AND_CLEAR_KEY_ERROR_OCCURRED()) {
                    tmp_expression_value_57 = GET_STRING_DICT_VALUE(moduledict_hikari$api$rest, (Nuitka_StringObject *)mod_consts[440]);

                    if (unlikely(tmp_expression_value_57 == NULL)) {
                        tmp_expression_value_57 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[440]);
                    }

                    if (tmp_expression_value_57 == NULL) {
                        assert(ERROR_OCCURRED());

                        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
                        Py_DECREF(tmp_called_value_21);

                        exception_lineno = 956;
                        type_description_2 = "o";
                        goto frame_exception_exit_3;
                    }
                    Py_INCREF(tmp_expression_value_57);
                } else {
                    goto frame_exception_exit_3;
                }
            }

            tmp_dict_value_8 = LOOKUP_ATTRIBUTE(tmp_expression_value_57, mod_consts[485]);
            Py_DECREF(tmp_expression_value_57);
            if (tmp_dict_value_8 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
                Py_DECREF(tmp_called_value_21);

                exception_lineno = 956;
                type_description_2 = "o";
                goto frame_exception_exit_3;
            }
            tmp_kw_defaults_8 = _PyDict_NewPresized( 3 );
            {
                PyObject *tmp_expression_value_58;
                PyObject *tmp_expression_value_59;
                tmp_res = PyDict_SetItem(tmp_kw_defaults_8, tmp_dict_key_8, tmp_dict_value_8);
                Py_DECREF(tmp_dict_value_8);
                assert(!(tmp_res != 0));
                tmp_dict_key_8 = mod_consts[526];
                tmp_expression_value_58 = PyObject_GetItem(locals_hikari$api$rest$$$class__2_RESTClient_110, mod_consts[440]);

                if (tmp_expression_value_58 == NULL) {
                    if (CHECK_AND_CLEAR_KEY_ERROR_OCCURRED()) {
                        tmp_expression_value_58 = GET_STRING_DICT_VALUE(moduledict_hikari$api$rest, (Nuitka_StringObject *)mod_consts[440]);

                        if (unlikely(tmp_expression_value_58 == NULL)) {
                            tmp_expression_value_58 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[440]);
                        }

                        if (tmp_expression_value_58 == NULL) {
                            assert(ERROR_OCCURRED());

                            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                            exception_lineno = 957;
                            type_description_2 = "o";
                            goto dict_build_exception_7;
                        }
                        Py_INCREF(tmp_expression_value_58);
                    } else {
                        goto dict_build_exception_7;
                    }
                }

                tmp_dict_value_8 = LOOKUP_ATTRIBUTE(tmp_expression_value_58, mod_consts[485]);
                Py_DECREF(tmp_expression_value_58);
                if (tmp_dict_value_8 == NULL) {
                    assert(ERROR_OCCURRED());

                    FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                    exception_lineno = 957;
                    type_description_2 = "o";
                    goto dict_build_exception_7;
                }
                tmp_res = PyDict_SetItem(tmp_kw_defaults_8, tmp_dict_key_8, tmp_dict_value_8);
                Py_DECREF(tmp_dict_value_8);
                assert(!(tmp_res != 0));
                tmp_dict_key_8 = mod_consts[527];
                tmp_expression_value_59 = PyObject_GetItem(locals_hikari$api$rest$$$class__2_RESTClient_110, mod_consts[440]);

                if (tmp_expression_value_59 == NULL) {
                    if (CHECK_AND_CLEAR_KEY_ERROR_OCCURRED()) {
                        tmp_expression_value_59 = GET_STRING_DICT_VALUE(moduledict_hikari$api$rest, (Nuitka_StringObject *)mod_consts[440]);

                        if (unlikely(tmp_expression_value_59 == NULL)) {
                            tmp_expression_value_59 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[440]);
                        }

                        if (tmp_expression_value_59 == NULL) {
                            assert(ERROR_OCCURRED());

                            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                            exception_lineno = 958;
                            type_description_2 = "o";
                            goto dict_build_exception_7;
                        }
                        Py_INCREF(tmp_expression_value_59);
                    } else {
                        goto dict_build_exception_7;
                    }
                }

                tmp_dict_value_8 = LOOKUP_ATTRIBUTE(tmp_expression_value_59, mod_consts[485]);
                Py_DECREF(tmp_expression_value_59);
                if (tmp_dict_value_8 == NULL) {
                    assert(ERROR_OCCURRED());

                    FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                    exception_lineno = 958;
                    type_description_2 = "o";
                    goto dict_build_exception_7;
                }
                tmp_res = PyDict_SetItem(tmp_kw_defaults_8, tmp_dict_key_8, tmp_dict_value_8);
                Py_DECREF(tmp_dict_value_8);
                assert(!(tmp_res != 0));
            }
            goto dict_build_noexception_7;
            // Exception handling pass through code for dict_build:
            dict_build_exception_7:;
            Py_DECREF(tmp_called_value_21);
            Py_DECREF(tmp_kw_defaults_8);
            goto frame_exception_exit_3;
            // Finished with no exception for dict_build:
            dict_build_noexception_7:;
            tmp_annotations_28 = PyDict_Copy(mod_consts[528]);


            tmp_args_element_value_38 = MAKE_FUNCTION_hikari$api$rest$$$function__24_fetch_messages(tmp_kw_defaults_8, tmp_annotations_28);

            frame_862833cacd6e5ba73c351f8d132a7b6b_3->m_frame.f_lineno = 951;
            tmp_dictset_value = CALL_FUNCTION_WITH_SINGLE_ARG(tmp_called_value_21, tmp_args_element_value_38);
            Py_DECREF(tmp_called_value_21);
            Py_DECREF(tmp_args_element_value_38);
            if (tmp_dictset_value == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 951;
                type_description_2 = "o";
                goto frame_exception_exit_3;
            }
            tmp_res = PyObject_SetItem(locals_hikari$api$rest$$$class__2_RESTClient_110, mod_consts[530], tmp_dictset_value);
            Py_DECREF(tmp_dictset_value);
            if (tmp_res != 0) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 952;
                type_description_2 = "o";
                goto frame_exception_exit_3;
            }
        }
        {
            PyObject *tmp_called_instance_21;
            PyObject *tmp_args_element_value_39;
            PyObject *tmp_annotations_29;
            tmp_called_instance_21 = PyObject_GetItem(locals_hikari$api$rest$$$class__2_RESTClient_110, mod_consts[431]);

            if (tmp_called_instance_21 == NULL) {
                if (CHECK_AND_CLEAR_KEY_ERROR_OCCURRED()) {
                    tmp_called_instance_21 = GET_STRING_DICT_VALUE(moduledict_hikari$api$rest, (Nuitka_StringObject *)mod_consts[431]);

                    if (unlikely(tmp_called_instance_21 == NULL)) {
                        tmp_called_instance_21 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[431]);
                    }

                    if (tmp_called_instance_21 == NULL) {
                        assert(ERROR_OCCURRED());

                        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                        exception_lineno = 1027;
                        type_description_2 = "o";
                        goto frame_exception_exit_3;
                    }
                    Py_INCREF(tmp_called_instance_21);
                } else {
                    goto frame_exception_exit_3;
                }
            }

            tmp_annotations_29 = PyDict_Copy(mod_consts[532]);


            tmp_args_element_value_39 = MAKE_FUNCTION_hikari$api$rest$$$function__25_fetch_message(tmp_annotations_29);

            frame_862833cacd6e5ba73c351f8d132a7b6b_3->m_frame.f_lineno = 1027;
            tmp_dictset_value = CALL_METHOD_WITH_SINGLE_ARG(tmp_called_instance_21, mod_consts[457], tmp_args_element_value_39);
            Py_DECREF(tmp_called_instance_21);
            Py_DECREF(tmp_args_element_value_39);
            if (tmp_dictset_value == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 1027;
                type_description_2 = "o";
                goto frame_exception_exit_3;
            }
            tmp_res = PyObject_SetItem(locals_hikari$api$rest$$$class__2_RESTClient_110, mod_consts[48], tmp_dictset_value);
            Py_DECREF(tmp_dictset_value);
            if (tmp_res != 0) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 1028;
                type_description_2 = "o";
                goto frame_exception_exit_3;
            }
        }
        {
            PyObject *tmp_called_value_22;
            PyObject *tmp_expression_value_60;
            PyObject *tmp_args_element_value_40;
            PyObject *tmp_defaults_1;
            PyObject *tmp_tuple_element_8;
            PyObject *tmp_expression_value_61;
            PyObject *tmp_kw_defaults_9;
            PyObject *tmp_dict_key_9;
            PyObject *tmp_dict_value_9;
            PyObject *tmp_expression_value_62;
            PyObject *tmp_annotations_30;
            tmp_expression_value_60 = PyObject_GetItem(locals_hikari$api$rest$$$class__2_RESTClient_110, mod_consts[431]);

            if (tmp_expression_value_60 == NULL) {
                if (CHECK_AND_CLEAR_KEY_ERROR_OCCURRED()) {
                    tmp_expression_value_60 = GET_STRING_DICT_VALUE(moduledict_hikari$api$rest, (Nuitka_StringObject *)mod_consts[431]);

                    if (unlikely(tmp_expression_value_60 == NULL)) {
                        tmp_expression_value_60 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[431]);
                    }

                    if (tmp_expression_value_60 == NULL) {
                        assert(ERROR_OCCURRED());

                        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                        exception_lineno = 1073;
                        type_description_2 = "o";
                        goto frame_exception_exit_3;
                    }
                    Py_INCREF(tmp_expression_value_60);
                } else {
                    goto frame_exception_exit_3;
                }
            }

            tmp_called_value_22 = LOOKUP_ATTRIBUTE(tmp_expression_value_60, mod_consts[457]);
            Py_DECREF(tmp_expression_value_60);
            if (tmp_called_value_22 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 1073;
                type_description_2 = "o";
                goto frame_exception_exit_3;
            }
            tmp_expression_value_61 = PyObject_GetItem(locals_hikari$api$rest$$$class__2_RESTClient_110, mod_consts[440]);

            if (tmp_expression_value_61 == NULL) {
                if (CHECK_AND_CLEAR_KEY_ERROR_OCCURRED()) {
                    tmp_expression_value_61 = GET_STRING_DICT_VALUE(moduledict_hikari$api$rest, (Nuitka_StringObject *)mod_consts[440]);

                    if (unlikely(tmp_expression_value_61 == NULL)) {
                        tmp_expression_value_61 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[440]);
                    }

                    if (tmp_expression_value_61 == NULL) {
                        assert(ERROR_OCCURRED());

                        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
                        Py_DECREF(tmp_called_value_22);

                        exception_lineno = 1077;
                        type_description_2 = "o";
                        goto frame_exception_exit_3;
                    }
                    Py_INCREF(tmp_expression_value_61);
                } else {
                    goto frame_exception_exit_3;
                }
            }

            tmp_tuple_element_8 = LOOKUP_ATTRIBUTE(tmp_expression_value_61, mod_consts[485]);
            Py_DECREF(tmp_expression_value_61);
            if (tmp_tuple_element_8 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
                Py_DECREF(tmp_called_value_22);

                exception_lineno = 1077;
                type_description_2 = "o";
                goto frame_exception_exit_3;
            }
            tmp_defaults_1 = PyTuple_New(1);
            PyTuple_SET_ITEM(tmp_defaults_1, 0, tmp_tuple_element_8);
            tmp_dict_key_9 = mod_consts[533];
            tmp_expression_value_62 = PyObject_GetItem(locals_hikari$api$rest$$$class__2_RESTClient_110, mod_consts[440]);

            if (tmp_expression_value_62 == NULL) {
                if (CHECK_AND_CLEAR_KEY_ERROR_OCCURRED()) {
                    tmp_expression_value_62 = GET_STRING_DICT_VALUE(moduledict_hikari$api$rest, (Nuitka_StringObject *)mod_consts[440]);

                    if (unlikely(tmp_expression_value_62 == NULL)) {
                        tmp_expression_value_62 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[440]);
                    }

                    if (tmp_expression_value_62 == NULL) {
                        assert(ERROR_OCCURRED());

                        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
                        Py_DECREF(tmp_called_value_22);
                        Py_DECREF(tmp_defaults_1);

                        exception_lineno = 1079;
                        type_description_2 = "o";
                        goto frame_exception_exit_3;
                    }
                    Py_INCREF(tmp_expression_value_62);
                } else {
                    goto frame_exception_exit_3;
                }
            }

            tmp_dict_value_9 = LOOKUP_ATTRIBUTE(tmp_expression_value_62, mod_consts[485]);
            Py_DECREF(tmp_expression_value_62);
            if (tmp_dict_value_9 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
                Py_DECREF(tmp_called_value_22);
                Py_DECREF(tmp_defaults_1);

                exception_lineno = 1079;
                type_description_2 = "o";
                goto frame_exception_exit_3;
            }
            tmp_kw_defaults_9 = _PyDict_NewPresized( 12 );
            {
                PyObject *tmp_expression_value_63;
                PyObject *tmp_expression_value_64;
                PyObject *tmp_expression_value_65;
                PyObject *tmp_expression_value_66;
                PyObject *tmp_expression_value_67;
                PyObject *tmp_expression_value_68;
                PyObject *tmp_expression_value_69;
                PyObject *tmp_expression_value_70;
                PyObject *tmp_expression_value_71;
                PyObject *tmp_expression_value_72;
                PyObject *tmp_expression_value_73;
                tmp_res = PyDict_SetItem(tmp_kw_defaults_9, tmp_dict_key_9, tmp_dict_value_9);
                Py_DECREF(tmp_dict_value_9);
                assert(!(tmp_res != 0));
                tmp_dict_key_9 = mod_consts[534];
                tmp_expression_value_63 = PyObject_GetItem(locals_hikari$api$rest$$$class__2_RESTClient_110, mod_consts[440]);

                if (tmp_expression_value_63 == NULL) {
                    if (CHECK_AND_CLEAR_KEY_ERROR_OCCURRED()) {
                        tmp_expression_value_63 = GET_STRING_DICT_VALUE(moduledict_hikari$api$rest, (Nuitka_StringObject *)mod_consts[440]);

                        if (unlikely(tmp_expression_value_63 == NULL)) {
                            tmp_expression_value_63 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[440]);
                        }

                        if (tmp_expression_value_63 == NULL) {
                            assert(ERROR_OCCURRED());

                            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                            exception_lineno = 1080;
                            type_description_2 = "o";
                            goto dict_build_exception_8;
                        }
                        Py_INCREF(tmp_expression_value_63);
                    } else {
                        goto dict_build_exception_8;
                    }
                }

                tmp_dict_value_9 = LOOKUP_ATTRIBUTE(tmp_expression_value_63, mod_consts[485]);
                Py_DECREF(tmp_expression_value_63);
                if (tmp_dict_value_9 == NULL) {
                    assert(ERROR_OCCURRED());

                    FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                    exception_lineno = 1080;
                    type_description_2 = "o";
                    goto dict_build_exception_8;
                }
                tmp_res = PyDict_SetItem(tmp_kw_defaults_9, tmp_dict_key_9, tmp_dict_value_9);
                Py_DECREF(tmp_dict_value_9);
                assert(!(tmp_res != 0));
                tmp_dict_key_9 = mod_consts[535];
                tmp_expression_value_64 = PyObject_GetItem(locals_hikari$api$rest$$$class__2_RESTClient_110, mod_consts[440]);

                if (tmp_expression_value_64 == NULL) {
                    if (CHECK_AND_CLEAR_KEY_ERROR_OCCURRED()) {
                        tmp_expression_value_64 = GET_STRING_DICT_VALUE(moduledict_hikari$api$rest, (Nuitka_StringObject *)mod_consts[440]);

                        if (unlikely(tmp_expression_value_64 == NULL)) {
                            tmp_expression_value_64 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[440]);
                        }

                        if (tmp_expression_value_64 == NULL) {
                            assert(ERROR_OCCURRED());

                            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                            exception_lineno = 1081;
                            type_description_2 = "o";
                            goto dict_build_exception_8;
                        }
                        Py_INCREF(tmp_expression_value_64);
                    } else {
                        goto dict_build_exception_8;
                    }
                }

                tmp_dict_value_9 = LOOKUP_ATTRIBUTE(tmp_expression_value_64, mod_consts[485]);
                Py_DECREF(tmp_expression_value_64);
                if (tmp_dict_value_9 == NULL) {
                    assert(ERROR_OCCURRED());

                    FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                    exception_lineno = 1081;
                    type_description_2 = "o";
                    goto dict_build_exception_8;
                }
                tmp_res = PyDict_SetItem(tmp_kw_defaults_9, tmp_dict_key_9, tmp_dict_value_9);
                Py_DECREF(tmp_dict_value_9);
                assert(!(tmp_res != 0));
                tmp_dict_key_9 = mod_consts[536];
                tmp_expression_value_65 = PyObject_GetItem(locals_hikari$api$rest$$$class__2_RESTClient_110, mod_consts[440]);

                if (tmp_expression_value_65 == NULL) {
                    if (CHECK_AND_CLEAR_KEY_ERROR_OCCURRED()) {
                        tmp_expression_value_65 = GET_STRING_DICT_VALUE(moduledict_hikari$api$rest, (Nuitka_StringObject *)mod_consts[440]);

                        if (unlikely(tmp_expression_value_65 == NULL)) {
                            tmp_expression_value_65 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[440]);
                        }

                        if (tmp_expression_value_65 == NULL) {
                            assert(ERROR_OCCURRED());

                            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                            exception_lineno = 1082;
                            type_description_2 = "o";
                            goto dict_build_exception_8;
                        }
                        Py_INCREF(tmp_expression_value_65);
                    } else {
                        goto dict_build_exception_8;
                    }
                }

                tmp_dict_value_9 = LOOKUP_ATTRIBUTE(tmp_expression_value_65, mod_consts[485]);
                Py_DECREF(tmp_expression_value_65);
                if (tmp_dict_value_9 == NULL) {
                    assert(ERROR_OCCURRED());

                    FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                    exception_lineno = 1082;
                    type_description_2 = "o";
                    goto dict_build_exception_8;
                }
                tmp_res = PyDict_SetItem(tmp_kw_defaults_9, tmp_dict_key_9, tmp_dict_value_9);
                Py_DECREF(tmp_dict_value_9);
                assert(!(tmp_res != 0));
                tmp_dict_key_9 = mod_consts[537];
                tmp_expression_value_66 = PyObject_GetItem(locals_hikari$api$rest$$$class__2_RESTClient_110, mod_consts[440]);

                if (tmp_expression_value_66 == NULL) {
                    if (CHECK_AND_CLEAR_KEY_ERROR_OCCURRED()) {
                        tmp_expression_value_66 = GET_STRING_DICT_VALUE(moduledict_hikari$api$rest, (Nuitka_StringObject *)mod_consts[440]);

                        if (unlikely(tmp_expression_value_66 == NULL)) {
                            tmp_expression_value_66 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[440]);
                        }

                        if (tmp_expression_value_66 == NULL) {
                            assert(ERROR_OCCURRED());

                            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                            exception_lineno = 1083;
                            type_description_2 = "o";
                            goto dict_build_exception_8;
                        }
                        Py_INCREF(tmp_expression_value_66);
                    } else {
                        goto dict_build_exception_8;
                    }
                }

                tmp_dict_value_9 = LOOKUP_ATTRIBUTE(tmp_expression_value_66, mod_consts[485]);
                Py_DECREF(tmp_expression_value_66);
                if (tmp_dict_value_9 == NULL) {
                    assert(ERROR_OCCURRED());

                    FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                    exception_lineno = 1083;
                    type_description_2 = "o";
                    goto dict_build_exception_8;
                }
                tmp_res = PyDict_SetItem(tmp_kw_defaults_9, tmp_dict_key_9, tmp_dict_value_9);
                Py_DECREF(tmp_dict_value_9);
                assert(!(tmp_res != 0));
                tmp_dict_key_9 = mod_consts[538];
                tmp_expression_value_67 = PyObject_GetItem(locals_hikari$api$rest$$$class__2_RESTClient_110, mod_consts[440]);

                if (tmp_expression_value_67 == NULL) {
                    if (CHECK_AND_CLEAR_KEY_ERROR_OCCURRED()) {
                        tmp_expression_value_67 = GET_STRING_DICT_VALUE(moduledict_hikari$api$rest, (Nuitka_StringObject *)mod_consts[440]);

                        if (unlikely(tmp_expression_value_67 == NULL)) {
                            tmp_expression_value_67 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[440]);
                        }

                        if (tmp_expression_value_67 == NULL) {
                            assert(ERROR_OCCURRED());

                            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                            exception_lineno = 1084;
                            type_description_2 = "o";
                            goto dict_build_exception_8;
                        }
                        Py_INCREF(tmp_expression_value_67);
                    } else {
                        goto dict_build_exception_8;
                    }
                }

                tmp_dict_value_9 = LOOKUP_ATTRIBUTE(tmp_expression_value_67, mod_consts[485]);
                Py_DECREF(tmp_expression_value_67);
                if (tmp_dict_value_9 == NULL) {
                    assert(ERROR_OCCURRED());

                    FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                    exception_lineno = 1084;
                    type_description_2 = "o";
                    goto dict_build_exception_8;
                }
                tmp_res = PyDict_SetItem(tmp_kw_defaults_9, tmp_dict_key_9, tmp_dict_value_9);
                Py_DECREF(tmp_dict_value_9);
                assert(!(tmp_res != 0));
                tmp_dict_key_9 = mod_consts[539];
                tmp_expression_value_68 = PyObject_GetItem(locals_hikari$api$rest$$$class__2_RESTClient_110, mod_consts[440]);

                if (tmp_expression_value_68 == NULL) {
                    if (CHECK_AND_CLEAR_KEY_ERROR_OCCURRED()) {
                        tmp_expression_value_68 = GET_STRING_DICT_VALUE(moduledict_hikari$api$rest, (Nuitka_StringObject *)mod_consts[440]);

                        if (unlikely(tmp_expression_value_68 == NULL)) {
                            tmp_expression_value_68 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[440]);
                        }

                        if (tmp_expression_value_68 == NULL) {
                            assert(ERROR_OCCURRED());

                            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                            exception_lineno = 1085;
                            type_description_2 = "o";
                            goto dict_build_exception_8;
                        }
                        Py_INCREF(tmp_expression_value_68);
                    } else {
                        goto dict_build_exception_8;
                    }
                }

                tmp_dict_value_9 = LOOKUP_ATTRIBUTE(tmp_expression_value_68, mod_consts[485]);
                Py_DECREF(tmp_expression_value_68);
                if (tmp_dict_value_9 == NULL) {
                    assert(ERROR_OCCURRED());

                    FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                    exception_lineno = 1085;
                    type_description_2 = "o";
                    goto dict_build_exception_8;
                }
                tmp_res = PyDict_SetItem(tmp_kw_defaults_9, tmp_dict_key_9, tmp_dict_value_9);
                Py_DECREF(tmp_dict_value_9);
                assert(!(tmp_res != 0));
                tmp_dict_key_9 = mod_consts[540];
                tmp_expression_value_69 = PyObject_GetItem(locals_hikari$api$rest$$$class__2_RESTClient_110, mod_consts[440]);

                if (tmp_expression_value_69 == NULL) {
                    if (CHECK_AND_CLEAR_KEY_ERROR_OCCURRED()) {
                        tmp_expression_value_69 = GET_STRING_DICT_VALUE(moduledict_hikari$api$rest, (Nuitka_StringObject *)mod_consts[440]);

                        if (unlikely(tmp_expression_value_69 == NULL)) {
                            tmp_expression_value_69 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[440]);
                        }

                        if (tmp_expression_value_69 == NULL) {
                            assert(ERROR_OCCURRED());

                            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                            exception_lineno = 1086;
                            type_description_2 = "o";
                            goto dict_build_exception_8;
                        }
                        Py_INCREF(tmp_expression_value_69);
                    } else {
                        goto dict_build_exception_8;
                    }
                }

                tmp_dict_value_9 = LOOKUP_ATTRIBUTE(tmp_expression_value_69, mod_consts[485]);
                Py_DECREF(tmp_expression_value_69);
                if (tmp_dict_value_9 == NULL) {
                    assert(ERROR_OCCURRED());

                    FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                    exception_lineno = 1086;
                    type_description_2 = "o";
                    goto dict_build_exception_8;
                }
                tmp_res = PyDict_SetItem(tmp_kw_defaults_9, tmp_dict_key_9, tmp_dict_value_9);
                Py_DECREF(tmp_dict_value_9);
                assert(!(tmp_res != 0));
                tmp_dict_key_9 = mod_consts[541];
                tmp_expression_value_70 = PyObject_GetItem(locals_hikari$api$rest$$$class__2_RESTClient_110, mod_consts[440]);

                if (tmp_expression_value_70 == NULL) {
                    if (CHECK_AND_CLEAR_KEY_ERROR_OCCURRED()) {
                        tmp_expression_value_70 = GET_STRING_DICT_VALUE(moduledict_hikari$api$rest, (Nuitka_StringObject *)mod_consts[440]);

                        if (unlikely(tmp_expression_value_70 == NULL)) {
                            tmp_expression_value_70 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[440]);
                        }

                        if (tmp_expression_value_70 == NULL) {
                            assert(ERROR_OCCURRED());

                            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                            exception_lineno = 1087;
                            type_description_2 = "o";
                            goto dict_build_exception_8;
                        }
                        Py_INCREF(tmp_expression_value_70);
                    } else {
                        goto dict_build_exception_8;
                    }
                }

                tmp_dict_value_9 = LOOKUP_ATTRIBUTE(tmp_expression_value_70, mod_consts[485]);
                Py_DECREF(tmp_expression_value_70);
                if (tmp_dict_value_9 == NULL) {
                    assert(ERROR_OCCURRED());

                    FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                    exception_lineno = 1087;
                    type_description_2 = "o";
                    goto dict_build_exception_8;
                }
                tmp_res = PyDict_SetItem(tmp_kw_defaults_9, tmp_dict_key_9, tmp_dict_value_9);
                Py_DECREF(tmp_dict_value_9);
                assert(!(tmp_res != 0));
                tmp_dict_key_9 = mod_consts[542];
                tmp_expression_value_71 = PyObject_GetItem(locals_hikari$api$rest$$$class__2_RESTClient_110, mod_consts[440]);

                if (tmp_expression_value_71 == NULL) {
                    if (CHECK_AND_CLEAR_KEY_ERROR_OCCURRED()) {
                        tmp_expression_value_71 = GET_STRING_DICT_VALUE(moduledict_hikari$api$rest, (Nuitka_StringObject *)mod_consts[440]);

                        if (unlikely(tmp_expression_value_71 == NULL)) {
                            tmp_expression_value_71 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[440]);
                        }

                        if (tmp_expression_value_71 == NULL) {
                            assert(ERROR_OCCURRED());

                            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                            exception_lineno = 1088;
                            type_description_2 = "o";
                            goto dict_build_exception_8;
                        }
                        Py_INCREF(tmp_expression_value_71);
                    } else {
                        goto dict_build_exception_8;
                    }
                }

                tmp_dict_value_9 = LOOKUP_ATTRIBUTE(tmp_expression_value_71, mod_consts[485]);
                Py_DECREF(tmp_expression_value_71);
                if (tmp_dict_value_9 == NULL) {
                    assert(ERROR_OCCURRED());

                    FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                    exception_lineno = 1088;
                    type_description_2 = "o";
                    goto dict_build_exception_8;
                }
                tmp_res = PyDict_SetItem(tmp_kw_defaults_9, tmp_dict_key_9, tmp_dict_value_9);
                Py_DECREF(tmp_dict_value_9);
                assert(!(tmp_res != 0));
                tmp_dict_key_9 = mod_consts[543];
                tmp_expression_value_72 = PyObject_GetItem(locals_hikari$api$rest$$$class__2_RESTClient_110, mod_consts[440]);

                if (tmp_expression_value_72 == NULL) {
                    if (CHECK_AND_CLEAR_KEY_ERROR_OCCURRED()) {
                        tmp_expression_value_72 = GET_STRING_DICT_VALUE(moduledict_hikari$api$rest, (Nuitka_StringObject *)mod_consts[440]);

                        if (unlikely(tmp_expression_value_72 == NULL)) {
                            tmp_expression_value_72 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[440]);
                        }

                        if (tmp_expression_value_72 == NULL) {
                            assert(ERROR_OCCURRED());

                            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                            exception_lineno = 1091;
                            type_description_2 = "o";
                            goto dict_build_exception_8;
                        }
                        Py_INCREF(tmp_expression_value_72);
                    } else {
                        goto dict_build_exception_8;
                    }
                }

                tmp_dict_value_9 = LOOKUP_ATTRIBUTE(tmp_expression_value_72, mod_consts[485]);
                Py_DECREF(tmp_expression_value_72);
                if (tmp_dict_value_9 == NULL) {
                    assert(ERROR_OCCURRED());

                    FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                    exception_lineno = 1091;
                    type_description_2 = "o";
                    goto dict_build_exception_8;
                }
                tmp_res = PyDict_SetItem(tmp_kw_defaults_9, tmp_dict_key_9, tmp_dict_value_9);
                Py_DECREF(tmp_dict_value_9);
                assert(!(tmp_res != 0));
                tmp_dict_key_9 = mod_consts[544];
                tmp_expression_value_73 = PyObject_GetItem(locals_hikari$api$rest$$$class__2_RESTClient_110, mod_consts[440]);

                if (tmp_expression_value_73 == NULL) {
                    if (CHECK_AND_CLEAR_KEY_ERROR_OCCURRED()) {
                        tmp_expression_value_73 = GET_STRING_DICT_VALUE(moduledict_hikari$api$rest, (Nuitka_StringObject *)mod_consts[440]);

                        if (unlikely(tmp_expression_value_73 == NULL)) {
                            tmp_expression_value_73 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[440]);
                        }

                        if (tmp_expression_value_73 == NULL) {
                            assert(ERROR_OCCURRED());

                            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                            exception_lineno = 1094;
                            type_description_2 = "o";
                            goto dict_build_exception_8;
                        }
                        Py_INCREF(tmp_expression_value_73);
                    } else {
                        goto dict_build_exception_8;
                    }
                }

                tmp_dict_value_9 = LOOKUP_ATTRIBUTE(tmp_expression_value_73, mod_consts[485]);
                Py_DECREF(tmp_expression_value_73);
                if (tmp_dict_value_9 == NULL) {
                    assert(ERROR_OCCURRED());

                    FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                    exception_lineno = 1094;
                    type_description_2 = "o";
                    goto dict_build_exception_8;
                }
                tmp_res = PyDict_SetItem(tmp_kw_defaults_9, tmp_dict_key_9, tmp_dict_value_9);
                Py_DECREF(tmp_dict_value_9);
                assert(!(tmp_res != 0));
            }
            goto dict_build_noexception_8;
            // Exception handling pass through code for dict_build:
            dict_build_exception_8:;
            Py_DECREF(tmp_called_value_22);
            Py_DECREF(tmp_defaults_1);
            Py_DECREF(tmp_kw_defaults_9);
            goto frame_exception_exit_3;
            // Finished with no exception for dict_build:
            dict_build_noexception_8:;
            tmp_annotations_30 = PyDict_Copy(mod_consts[545]);


            tmp_args_element_value_40 = MAKE_FUNCTION_hikari$api$rest$$$function__26_create_message(tmp_defaults_1, tmp_kw_defaults_9, tmp_annotations_30);

            frame_862833cacd6e5ba73c351f8d132a7b6b_3->m_frame.f_lineno = 1073;
            tmp_dictset_value = CALL_FUNCTION_WITH_SINGLE_ARG(tmp_called_value_22, tmp_args_element_value_40);
            Py_DECREF(tmp_called_value_22);
            Py_DECREF(tmp_args_element_value_40);
            if (tmp_dictset_value == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 1073;
                type_description_2 = "o";
                goto frame_exception_exit_3;
            }
            tmp_res = PyObject_SetItem(locals_hikari$api$rest$$$class__2_RESTClient_110, mod_consts[51], tmp_dictset_value);
            Py_DECREF(tmp_dictset_value);
            if (tmp_res != 0) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 1074;
                type_description_2 = "o";
                goto frame_exception_exit_3;
            }
        }
        {
            PyObject *tmp_called_instance_22;
            PyObject *tmp_args_element_value_41;
            PyObject *tmp_annotations_31;
            tmp_called_instance_22 = PyObject_GetItem(locals_hikari$api$rest$$$class__2_RESTClient_110, mod_consts[431]);

            if (tmp_called_instance_22 == NULL) {
                if (CHECK_AND_CLEAR_KEY_ERROR_OCCURRED()) {
                    tmp_called_instance_22 = GET_STRING_DICT_VALUE(moduledict_hikari$api$rest, (Nuitka_StringObject *)mod_consts[431]);

                    if (unlikely(tmp_called_instance_22 == NULL)) {
                        tmp_called_instance_22 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[431]);
                    }

                    if (tmp_called_instance_22 == NULL) {
                        assert(ERROR_OCCURRED());

                        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                        exception_lineno = 1234;
                        type_description_2 = "o";
                        goto frame_exception_exit_3;
                    }
                    Py_INCREF(tmp_called_instance_22);
                } else {
                    goto frame_exception_exit_3;
                }
            }

            tmp_annotations_31 = PyDict_Copy(mod_consts[546]);


            tmp_args_element_value_41 = MAKE_FUNCTION_hikari$api$rest$$$function__27_crosspost_message(tmp_annotations_31);

            frame_862833cacd6e5ba73c351f8d132a7b6b_3->m_frame.f_lineno = 1234;
            tmp_dictset_value = CALL_METHOD_WITH_SINGLE_ARG(tmp_called_instance_22, mod_consts[457], tmp_args_element_value_41);
            Py_DECREF(tmp_called_instance_22);
            Py_DECREF(tmp_args_element_value_41);
            if (tmp_dictset_value == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 1234;
                type_description_2 = "o";
                goto frame_exception_exit_3;
            }
            tmp_res = PyObject_SetItem(locals_hikari$api$rest$$$class__2_RESTClient_110, mod_consts[54], tmp_dictset_value);
            Py_DECREF(tmp_dictset_value);
            if (tmp_res != 0) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 1235;
                type_description_2 = "o";
                goto frame_exception_exit_3;
            }
        }
        {
            PyObject *tmp_called_value_23;
            PyObject *tmp_expression_value_74;
            PyObject *tmp_args_element_value_42;
            PyObject *tmp_defaults_2;
            PyObject *tmp_tuple_element_9;
            PyObject *tmp_expression_value_75;
            PyObject *tmp_kw_defaults_10;
            PyObject *tmp_dict_key_10;
            PyObject *tmp_dict_value_10;
            PyObject *tmp_expression_value_76;
            PyObject *tmp_annotations_32;
            tmp_expression_value_74 = PyObject_GetItem(locals_hikari$api$rest$$$class__2_RESTClient_110, mod_consts[431]);

            if (tmp_expression_value_74 == NULL) {
                if (CHECK_AND_CLEAR_KEY_ERROR_OCCURRED()) {
                    tmp_expression_value_74 = GET_STRING_DICT_VALUE(moduledict_hikari$api$rest, (Nuitka_StringObject *)mod_consts[431]);

                    if (unlikely(tmp_expression_value_74 == NULL)) {
                        tmp_expression_value_74 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[431]);
                    }

                    if (tmp_expression_value_74 == NULL) {
                        assert(ERROR_OCCURRED());

                        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                        exception_lineno = 1282;
                        type_description_2 = "o";
                        goto frame_exception_exit_3;
                    }
                    Py_INCREF(tmp_expression_value_74);
                } else {
                    goto frame_exception_exit_3;
                }
            }

            tmp_called_value_23 = LOOKUP_ATTRIBUTE(tmp_expression_value_74, mod_consts[457]);
            Py_DECREF(tmp_expression_value_74);
            if (tmp_called_value_23 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 1282;
                type_description_2 = "o";
                goto frame_exception_exit_3;
            }
            tmp_expression_value_75 = PyObject_GetItem(locals_hikari$api$rest$$$class__2_RESTClient_110, mod_consts[440]);

            if (tmp_expression_value_75 == NULL) {
                if (CHECK_AND_CLEAR_KEY_ERROR_OCCURRED()) {
                    tmp_expression_value_75 = GET_STRING_DICT_VALUE(moduledict_hikari$api$rest, (Nuitka_StringObject *)mod_consts[440]);

                    if (unlikely(tmp_expression_value_75 == NULL)) {
                        tmp_expression_value_75 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[440]);
                    }

                    if (tmp_expression_value_75 == NULL) {
                        assert(ERROR_OCCURRED());

                        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
                        Py_DECREF(tmp_called_value_23);

                        exception_lineno = 1287;
                        type_description_2 = "o";
                        goto frame_exception_exit_3;
                    }
                    Py_INCREF(tmp_expression_value_75);
                } else {
                    goto frame_exception_exit_3;
                }
            }

            tmp_tuple_element_9 = LOOKUP_ATTRIBUTE(tmp_expression_value_75, mod_consts[485]);
            Py_DECREF(tmp_expression_value_75);
            if (tmp_tuple_element_9 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
                Py_DECREF(tmp_called_value_23);

                exception_lineno = 1287;
                type_description_2 = "o";
                goto frame_exception_exit_3;
            }
            tmp_defaults_2 = PyTuple_New(1);
            PyTuple_SET_ITEM(tmp_defaults_2, 0, tmp_tuple_element_9);
            tmp_dict_key_10 = mod_consts[533];
            tmp_expression_value_76 = PyObject_GetItem(locals_hikari$api$rest$$$class__2_RESTClient_110, mod_consts[440]);

            if (tmp_expression_value_76 == NULL) {
                if (CHECK_AND_CLEAR_KEY_ERROR_OCCURRED()) {
                    tmp_expression_value_76 = GET_STRING_DICT_VALUE(moduledict_hikari$api$rest, (Nuitka_StringObject *)mod_consts[440]);

                    if (unlikely(tmp_expression_value_76 == NULL)) {
                        tmp_expression_value_76 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[440]);
                    }

                    if (tmp_expression_value_76 == NULL) {
                        assert(ERROR_OCCURRED());

                        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
                        Py_DECREF(tmp_called_value_23);
                        Py_DECREF(tmp_defaults_2);

                        exception_lineno = 1289;
                        type_description_2 = "o";
                        goto frame_exception_exit_3;
                    }
                    Py_INCREF(tmp_expression_value_76);
                } else {
                    goto frame_exception_exit_3;
                }
            }

            tmp_dict_value_10 = LOOKUP_ATTRIBUTE(tmp_expression_value_76, mod_consts[485]);
            Py_DECREF(tmp_expression_value_76);
            if (tmp_dict_value_10 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
                Py_DECREF(tmp_called_value_23);
                Py_DECREF(tmp_defaults_2);

                exception_lineno = 1289;
                type_description_2 = "o";
                goto frame_exception_exit_3;
            }
            tmp_kw_defaults_10 = _PyDict_NewPresized( 12 );
            {
                PyObject *tmp_expression_value_77;
                PyObject *tmp_expression_value_78;
                PyObject *tmp_expression_value_79;
                PyObject *tmp_expression_value_80;
                PyObject *tmp_expression_value_81;
                PyObject *tmp_expression_value_82;
                PyObject *tmp_expression_value_83;
                PyObject *tmp_expression_value_84;
                PyObject *tmp_expression_value_85;
                PyObject *tmp_expression_value_86;
                tmp_res = PyDict_SetItem(tmp_kw_defaults_10, tmp_dict_key_10, tmp_dict_value_10);
                Py_DECREF(tmp_dict_value_10);
                assert(!(tmp_res != 0));
                tmp_dict_key_10 = mod_consts[534];
                tmp_expression_value_77 = PyObject_GetItem(locals_hikari$api$rest$$$class__2_RESTClient_110, mod_consts[440]);

                if (tmp_expression_value_77 == NULL) {
                    if (CHECK_AND_CLEAR_KEY_ERROR_OCCURRED()) {
                        tmp_expression_value_77 = GET_STRING_DICT_VALUE(moduledict_hikari$api$rest, (Nuitka_StringObject *)mod_consts[440]);

                        if (unlikely(tmp_expression_value_77 == NULL)) {
                            tmp_expression_value_77 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[440]);
                        }

                        if (tmp_expression_value_77 == NULL) {
                            assert(ERROR_OCCURRED());

                            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                            exception_lineno = 1290;
                            type_description_2 = "o";
                            goto dict_build_exception_9;
                        }
                        Py_INCREF(tmp_expression_value_77);
                    } else {
                        goto dict_build_exception_9;
                    }
                }

                tmp_dict_value_10 = LOOKUP_ATTRIBUTE(tmp_expression_value_77, mod_consts[485]);
                Py_DECREF(tmp_expression_value_77);
                if (tmp_dict_value_10 == NULL) {
                    assert(ERROR_OCCURRED());

                    FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                    exception_lineno = 1290;
                    type_description_2 = "o";
                    goto dict_build_exception_9;
                }
                tmp_res = PyDict_SetItem(tmp_kw_defaults_10, tmp_dict_key_10, tmp_dict_value_10);
                Py_DECREF(tmp_dict_value_10);
                assert(!(tmp_res != 0));
                tmp_dict_key_10 = mod_consts[535];
                tmp_expression_value_78 = PyObject_GetItem(locals_hikari$api$rest$$$class__2_RESTClient_110, mod_consts[440]);

                if (tmp_expression_value_78 == NULL) {
                    if (CHECK_AND_CLEAR_KEY_ERROR_OCCURRED()) {
                        tmp_expression_value_78 = GET_STRING_DICT_VALUE(moduledict_hikari$api$rest, (Nuitka_StringObject *)mod_consts[440]);

                        if (unlikely(tmp_expression_value_78 == NULL)) {
                            tmp_expression_value_78 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[440]);
                        }

                        if (tmp_expression_value_78 == NULL) {
                            assert(ERROR_OCCURRED());

                            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                            exception_lineno = 1291;
                            type_description_2 = "o";
                            goto dict_build_exception_9;
                        }
                        Py_INCREF(tmp_expression_value_78);
                    } else {
                        goto dict_build_exception_9;
                    }
                }

                tmp_dict_value_10 = LOOKUP_ATTRIBUTE(tmp_expression_value_78, mod_consts[485]);
                Py_DECREF(tmp_expression_value_78);
                if (tmp_dict_value_10 == NULL) {
                    assert(ERROR_OCCURRED());

                    FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                    exception_lineno = 1291;
                    type_description_2 = "o";
                    goto dict_build_exception_9;
                }
                tmp_res = PyDict_SetItem(tmp_kw_defaults_10, tmp_dict_key_10, tmp_dict_value_10);
                Py_DECREF(tmp_dict_value_10);
                assert(!(tmp_res != 0));
                tmp_dict_key_10 = mod_consts[536];
                tmp_expression_value_79 = PyObject_GetItem(locals_hikari$api$rest$$$class__2_RESTClient_110, mod_consts[440]);

                if (tmp_expression_value_79 == NULL) {
                    if (CHECK_AND_CLEAR_KEY_ERROR_OCCURRED()) {
                        tmp_expression_value_79 = GET_STRING_DICT_VALUE(moduledict_hikari$api$rest, (Nuitka_StringObject *)mod_consts[440]);

                        if (unlikely(tmp_expression_value_79 == NULL)) {
                            tmp_expression_value_79 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[440]);
                        }

                        if (tmp_expression_value_79 == NULL) {
                            assert(ERROR_OCCURRED());

                            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                            exception_lineno = 1294;
                            type_description_2 = "o";
                            goto dict_build_exception_9;
                        }
                        Py_INCREF(tmp_expression_value_79);
                    } else {
                        goto dict_build_exception_9;
                    }
                }

                tmp_dict_value_10 = LOOKUP_ATTRIBUTE(tmp_expression_value_79, mod_consts[485]);
                Py_DECREF(tmp_expression_value_79);
                if (tmp_dict_value_10 == NULL) {
                    assert(ERROR_OCCURRED());

                    FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                    exception_lineno = 1294;
                    type_description_2 = "o";
                    goto dict_build_exception_9;
                }
                tmp_res = PyDict_SetItem(tmp_kw_defaults_10, tmp_dict_key_10, tmp_dict_value_10);
                Py_DECREF(tmp_dict_value_10);
                assert(!(tmp_res != 0));
                tmp_dict_key_10 = mod_consts[537];
                tmp_expression_value_80 = PyObject_GetItem(locals_hikari$api$rest$$$class__2_RESTClient_110, mod_consts[440]);

                if (tmp_expression_value_80 == NULL) {
                    if (CHECK_AND_CLEAR_KEY_ERROR_OCCURRED()) {
                        tmp_expression_value_80 = GET_STRING_DICT_VALUE(moduledict_hikari$api$rest, (Nuitka_StringObject *)mod_consts[440]);

                        if (unlikely(tmp_expression_value_80 == NULL)) {
                            tmp_expression_value_80 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[440]);
                        }

                        if (tmp_expression_value_80 == NULL) {
                            assert(ERROR_OCCURRED());

                            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                            exception_lineno = 1295;
                            type_description_2 = "o";
                            goto dict_build_exception_9;
                        }
                        Py_INCREF(tmp_expression_value_80);
                    } else {
                        goto dict_build_exception_9;
                    }
                }

                tmp_dict_value_10 = LOOKUP_ATTRIBUTE(tmp_expression_value_80, mod_consts[485]);
                Py_DECREF(tmp_expression_value_80);
                if (tmp_dict_value_10 == NULL) {
                    assert(ERROR_OCCURRED());

                    FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                    exception_lineno = 1295;
                    type_description_2 = "o";
                    goto dict_build_exception_9;
                }
                tmp_res = PyDict_SetItem(tmp_kw_defaults_10, tmp_dict_key_10, tmp_dict_value_10);
                Py_DECREF(tmp_dict_value_10);
                assert(!(tmp_res != 0));
                tmp_dict_key_10 = mod_consts[538];
                tmp_expression_value_81 = PyObject_GetItem(locals_hikari$api$rest$$$class__2_RESTClient_110, mod_consts[440]);

                if (tmp_expression_value_81 == NULL) {
                    if (CHECK_AND_CLEAR_KEY_ERROR_OCCURRED()) {
                        tmp_expression_value_81 = GET_STRING_DICT_VALUE(moduledict_hikari$api$rest, (Nuitka_StringObject *)mod_consts[440]);

                        if (unlikely(tmp_expression_value_81 == NULL)) {
                            tmp_expression_value_81 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[440]);
                        }

                        if (tmp_expression_value_81 == NULL) {
                            assert(ERROR_OCCURRED());

                            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                            exception_lineno = 1296;
                            type_description_2 = "o";
                            goto dict_build_exception_9;
                        }
                        Py_INCREF(tmp_expression_value_81);
                    } else {
                        goto dict_build_exception_9;
                    }
                }

                tmp_dict_value_10 = LOOKUP_ATTRIBUTE(tmp_expression_value_81, mod_consts[485]);
                Py_DECREF(tmp_expression_value_81);
                if (tmp_dict_value_10 == NULL) {
                    assert(ERROR_OCCURRED());

                    FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                    exception_lineno = 1296;
                    type_description_2 = "o";
                    goto dict_build_exception_9;
                }
                tmp_res = PyDict_SetItem(tmp_kw_defaults_10, tmp_dict_key_10, tmp_dict_value_10);
                Py_DECREF(tmp_dict_value_10);
                assert(!(tmp_res != 0));
                tmp_dict_key_10 = mod_consts[547];
                tmp_dict_value_10 = Py_False;
                tmp_res = PyDict_SetItem(tmp_kw_defaults_10, tmp_dict_key_10, tmp_dict_value_10);
                assert(!(tmp_res != 0));
                tmp_dict_key_10 = mod_consts[541];
                tmp_expression_value_82 = PyObject_GetItem(locals_hikari$api$rest$$$class__2_RESTClient_110, mod_consts[440]);

                if (tmp_expression_value_82 == NULL) {
                    if (CHECK_AND_CLEAR_KEY_ERROR_OCCURRED()) {
                        tmp_expression_value_82 = GET_STRING_DICT_VALUE(moduledict_hikari$api$rest, (Nuitka_StringObject *)mod_consts[440]);

                        if (unlikely(tmp_expression_value_82 == NULL)) {
                            tmp_expression_value_82 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[440]);
                        }

                        if (tmp_expression_value_82 == NULL) {
                            assert(ERROR_OCCURRED());

                            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                            exception_lineno = 1298;
                            type_description_2 = "o";
                            goto dict_build_exception_9;
                        }
                        Py_INCREF(tmp_expression_value_82);
                    } else {
                        goto dict_build_exception_9;
                    }
                }

                tmp_dict_value_10 = LOOKUP_ATTRIBUTE(tmp_expression_value_82, mod_consts[485]);
                Py_DECREF(tmp_expression_value_82);
                if (tmp_dict_value_10 == NULL) {
                    assert(ERROR_OCCURRED());

                    FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                    exception_lineno = 1298;
                    type_description_2 = "o";
                    goto dict_build_exception_9;
                }
                tmp_res = PyDict_SetItem(tmp_kw_defaults_10, tmp_dict_key_10, tmp_dict_value_10);
                Py_DECREF(tmp_dict_value_10);
                assert(!(tmp_res != 0));
                tmp_dict_key_10 = mod_consts[542];
                tmp_expression_value_83 = PyObject_GetItem(locals_hikari$api$rest$$$class__2_RESTClient_110, mod_consts[440]);

                if (tmp_expression_value_83 == NULL) {
                    if (CHECK_AND_CLEAR_KEY_ERROR_OCCURRED()) {
                        tmp_expression_value_83 = GET_STRING_DICT_VALUE(moduledict_hikari$api$rest, (Nuitka_StringObject *)mod_consts[440]);

                        if (unlikely(tmp_expression_value_83 == NULL)) {
                            tmp_expression_value_83 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[440]);
                        }

                        if (tmp_expression_value_83 == NULL) {
                            assert(ERROR_OCCURRED());

                            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                            exception_lineno = 1299;
                            type_description_2 = "o";
                            goto dict_build_exception_9;
                        }
                        Py_INCREF(tmp_expression_value_83);
                    } else {
                        goto dict_build_exception_9;
                    }
                }

                tmp_dict_value_10 = LOOKUP_ATTRIBUTE(tmp_expression_value_83, mod_consts[485]);
                Py_DECREF(tmp_expression_value_83);
                if (tmp_dict_value_10 == NULL) {
                    assert(ERROR_OCCURRED());

                    FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                    exception_lineno = 1299;
                    type_description_2 = "o";
                    goto dict_build_exception_9;
                }
                tmp_res = PyDict_SetItem(tmp_kw_defaults_10, tmp_dict_key_10, tmp_dict_value_10);
                Py_DECREF(tmp_dict_value_10);
                assert(!(tmp_res != 0));
                tmp_dict_key_10 = mod_consts[543];
                tmp_expression_value_84 = PyObject_GetItem(locals_hikari$api$rest$$$class__2_RESTClient_110, mod_consts[440]);

                if (tmp_expression_value_84 == NULL) {
                    if (CHECK_AND_CLEAR_KEY_ERROR_OCCURRED()) {
                        tmp_expression_value_84 = GET_STRING_DICT_VALUE(moduledict_hikari$api$rest, (Nuitka_StringObject *)mod_consts[440]);

                        if (unlikely(tmp_expression_value_84 == NULL)) {
                            tmp_expression_value_84 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[440]);
                        }

                        if (tmp_expression_value_84 == NULL) {
                            assert(ERROR_OCCURRED());

                            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                            exception_lineno = 1302;
                            type_description_2 = "o";
                            goto dict_build_exception_9;
                        }
                        Py_INCREF(tmp_expression_value_84);
                    } else {
                        goto dict_build_exception_9;
                    }
                }

                tmp_dict_value_10 = LOOKUP_ATTRIBUTE(tmp_expression_value_84, mod_consts[485]);
                Py_DECREF(tmp_expression_value_84);
                if (tmp_dict_value_10 == NULL) {
                    assert(ERROR_OCCURRED());

                    FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                    exception_lineno = 1302;
                    type_description_2 = "o";
                    goto dict_build_exception_9;
                }
                tmp_res = PyDict_SetItem(tmp_kw_defaults_10, tmp_dict_key_10, tmp_dict_value_10);
                Py_DECREF(tmp_dict_value_10);
                assert(!(tmp_res != 0));
                tmp_dict_key_10 = mod_consts[544];
                tmp_expression_value_85 = PyObject_GetItem(locals_hikari$api$rest$$$class__2_RESTClient_110, mod_consts[440]);

                if (tmp_expression_value_85 == NULL) {
                    if (CHECK_AND_CLEAR_KEY_ERROR_OCCURRED()) {
                        tmp_expression_value_85 = GET_STRING_DICT_VALUE(moduledict_hikari$api$rest, (Nuitka_StringObject *)mod_consts[440]);

                        if (unlikely(tmp_expression_value_85 == NULL)) {
                            tmp_expression_value_85 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[440]);
                        }

                        if (tmp_expression_value_85 == NULL) {
                            assert(ERROR_OCCURRED());

                            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                            exception_lineno = 1305;
                            type_description_2 = "o";
                            goto dict_build_exception_9;
                        }
                        Py_INCREF(tmp_expression_value_85);
                    } else {
                        goto dict_build_exception_9;
                    }
                }

                tmp_dict_value_10 = LOOKUP_ATTRIBUTE(tmp_expression_value_85, mod_consts[485]);
                Py_DECREF(tmp_expression_value_85);
                if (tmp_dict_value_10 == NULL) {
                    assert(ERROR_OCCURRED());

                    FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                    exception_lineno = 1305;
                    type_description_2 = "o";
                    goto dict_build_exception_9;
                }
                tmp_res = PyDict_SetItem(tmp_kw_defaults_10, tmp_dict_key_10, tmp_dict_value_10);
                Py_DECREF(tmp_dict_value_10);
                assert(!(tmp_res != 0));
                tmp_dict_key_10 = mod_consts[548];
                tmp_expression_value_86 = PyObject_GetItem(locals_hikari$api$rest$$$class__2_RESTClient_110, mod_consts[440]);

                if (tmp_expression_value_86 == NULL) {
                    if (CHECK_AND_CLEAR_KEY_ERROR_OCCURRED()) {
                        tmp_expression_value_86 = GET_STRING_DICT_VALUE(moduledict_hikari$api$rest, (Nuitka_StringObject *)mod_consts[440]);

                        if (unlikely(tmp_expression_value_86 == NULL)) {
                            tmp_expression_value_86 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[440]);
                        }

                        if (tmp_expression_value_86 == NULL) {
                            assert(ERROR_OCCURRED());

                            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                            exception_lineno = 1306;
                            type_description_2 = "o";
                            goto dict_build_exception_9;
                        }
                        Py_INCREF(tmp_expression_value_86);
                    } else {
                        goto dict_build_exception_9;
                    }
                }

                tmp_dict_value_10 = LOOKUP_ATTRIBUTE(tmp_expression_value_86, mod_consts[485]);
                Py_DECREF(tmp_expression_value_86);
                if (tmp_dict_value_10 == NULL) {
                    assert(ERROR_OCCURRED());

                    FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                    exception_lineno = 1306;
                    type_description_2 = "o";
                    goto dict_build_exception_9;
                }
                tmp_res = PyDict_SetItem(tmp_kw_defaults_10, tmp_dict_key_10, tmp_dict_value_10);
                Py_DECREF(tmp_dict_value_10);
                assert(!(tmp_res != 0));
            }
            goto dict_build_noexception_9;
            // Exception handling pass through code for dict_build:
            dict_build_exception_9:;
            Py_DECREF(tmp_called_value_23);
            Py_DECREF(tmp_defaults_2);
            Py_DECREF(tmp_kw_defaults_10);
            goto frame_exception_exit_3;
            // Finished with no exception for dict_build:
            dict_build_noexception_9:;
            tmp_annotations_32 = PyDict_Copy(mod_consts[549]);


            tmp_args_element_value_42 = MAKE_FUNCTION_hikari$api$rest$$$function__28_edit_message(tmp_defaults_2, tmp_kw_defaults_10, tmp_annotations_32);

            frame_862833cacd6e5ba73c351f8d132a7b6b_3->m_frame.f_lineno = 1282;
            tmp_dictset_value = CALL_FUNCTION_WITH_SINGLE_ARG(tmp_called_value_23, tmp_args_element_value_42);
            Py_DECREF(tmp_called_value_23);
            Py_DECREF(tmp_args_element_value_42);
            if (tmp_dictset_value == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 1282;
                type_description_2 = "o";
                goto frame_exception_exit_3;
            }
            tmp_res = PyObject_SetItem(locals_hikari$api$rest$$$class__2_RESTClient_110, mod_consts[57], tmp_dictset_value);
            Py_DECREF(tmp_dictset_value);
            if (tmp_res != 0) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 1283;
                type_description_2 = "o";
                goto frame_exception_exit_3;
            }
        }
        {
            PyObject *tmp_called_instance_23;
            PyObject *tmp_args_element_value_43;
            PyObject *tmp_annotations_33;
            tmp_called_instance_23 = PyObject_GetItem(locals_hikari$api$rest$$$class__2_RESTClient_110, mod_consts[431]);

            if (tmp_called_instance_23 == NULL) {
                if (CHECK_AND_CLEAR_KEY_ERROR_OCCURRED()) {
                    tmp_called_instance_23 = GET_STRING_DICT_VALUE(moduledict_hikari$api$rest, (Nuitka_StringObject *)mod_consts[431]);

                    if (unlikely(tmp_called_instance_23 == NULL)) {
                        tmp_called_instance_23 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[431]);
                    }

                    if (tmp_called_instance_23 == NULL) {
                        assert(ERROR_OCCURRED());

                        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                        exception_lineno = 1481;
                        type_description_2 = "o";
                        goto frame_exception_exit_3;
                    }
                    Py_INCREF(tmp_called_instance_23);
                } else {
                    goto frame_exception_exit_3;
                }
            }

            tmp_annotations_33 = PyDict_Copy(mod_consts[524]);


            tmp_args_element_value_43 = MAKE_FUNCTION_hikari$api$rest$$$function__29_delete_message(tmp_annotations_33);

            frame_862833cacd6e5ba73c351f8d132a7b6b_3->m_frame.f_lineno = 1481;
            tmp_dictset_value = CALL_METHOD_WITH_SINGLE_ARG(tmp_called_instance_23, mod_consts[457], tmp_args_element_value_43);
            Py_DECREF(tmp_called_instance_23);
            Py_DECREF(tmp_args_element_value_43);
            if (tmp_dictset_value == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 1481;
                type_description_2 = "o";
                goto frame_exception_exit_3;
            }
            tmp_res = PyObject_SetItem(locals_hikari$api$rest$$$class__2_RESTClient_110, mod_consts[60], tmp_dictset_value);
            Py_DECREF(tmp_dictset_value);
            if (tmp_res != 0) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 1482;
                type_description_2 = "o";
                goto frame_exception_exit_3;
            }
        }
        {
            PyObject *tmp_called_instance_24;
            PyObject *tmp_args_element_value_44;
            PyObject *tmp_annotations_34;
            tmp_called_instance_24 = PyObject_GetItem(locals_hikari$api$rest$$$class__2_RESTClient_110, mod_consts[431]);

            if (tmp_called_instance_24 == NULL) {
                if (CHECK_AND_CLEAR_KEY_ERROR_OCCURRED()) {
                    tmp_called_instance_24 = GET_STRING_DICT_VALUE(moduledict_hikari$api$rest, (Nuitka_StringObject *)mod_consts[431]);

                    if (unlikely(tmp_called_instance_24 == NULL)) {
                        tmp_called_instance_24 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[431]);
                    }

                    if (tmp_called_instance_24 == NULL) {
                        assert(ERROR_OCCURRED());

                        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                        exception_lineno = 1522;
                        type_description_2 = "o";
                        goto frame_exception_exit_3;
                    }
                    Py_INCREF(tmp_called_instance_24);
                } else {
                    goto frame_exception_exit_3;
                }
            }

            tmp_annotations_34 = PyDict_Copy(mod_consts[550]);


            tmp_args_element_value_44 = MAKE_FUNCTION_hikari$api$rest$$$function__30_delete_messages(tmp_annotations_34);

            frame_862833cacd6e5ba73c351f8d132a7b6b_3->m_frame.f_lineno = 1522;
            tmp_dictset_value = CALL_METHOD_WITH_SINGLE_ARG(tmp_called_instance_24, mod_consts[457], tmp_args_element_value_44);
            Py_DECREF(tmp_called_instance_24);
            Py_DECREF(tmp_args_element_value_44);
            if (tmp_dictset_value == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 1522;
                type_description_2 = "o";
                goto frame_exception_exit_3;
            }
            tmp_res = PyObject_SetItem(locals_hikari$api$rest$$$class__2_RESTClient_110, mod_consts[63], tmp_dictset_value);
            Py_DECREF(tmp_dictset_value);
            if (tmp_res != 0) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 1523;
                type_description_2 = "o";
                goto frame_exception_exit_3;
            }
        }
        {
            PyObject *tmp_called_value_24;
            PyObject *tmp_expression_value_87;
            PyObject *tmp_args_element_value_45;
            PyObject *tmp_defaults_3;
            PyObject *tmp_tuple_element_10;
            PyObject *tmp_expression_value_88;
            PyObject *tmp_annotations_35;
            tmp_expression_value_87 = PyObject_GetItem(locals_hikari$api$rest$$$class__2_RESTClient_110, mod_consts[431]);

            if (tmp_expression_value_87 == NULL) {
                if (CHECK_AND_CLEAR_KEY_ERROR_OCCURRED()) {
                    tmp_expression_value_87 = GET_STRING_DICT_VALUE(moduledict_hikari$api$rest, (Nuitka_StringObject *)mod_consts[431]);

                    if (unlikely(tmp_expression_value_87 == NULL)) {
                        tmp_expression_value_87 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[431]);
                    }

                    if (tmp_expression_value_87 == NULL) {
                        assert(ERROR_OCCURRED());

                        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                        exception_lineno = 1579;
                        type_description_2 = "o";
                        goto frame_exception_exit_3;
                    }
                    Py_INCREF(tmp_expression_value_87);
                } else {
                    goto frame_exception_exit_3;
                }
            }

            tmp_called_value_24 = LOOKUP_ATTRIBUTE(tmp_expression_value_87, mod_consts[457]);
            Py_DECREF(tmp_expression_value_87);
            if (tmp_called_value_24 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 1579;
                type_description_2 = "o";
                goto frame_exception_exit_3;
            }
            tmp_expression_value_88 = PyObject_GetItem(locals_hikari$api$rest$$$class__2_RESTClient_110, mod_consts[440]);

            if (tmp_expression_value_88 == NULL) {
                if (CHECK_AND_CLEAR_KEY_ERROR_OCCURRED()) {
                    tmp_expression_value_88 = GET_STRING_DICT_VALUE(moduledict_hikari$api$rest, (Nuitka_StringObject *)mod_consts[440]);

                    if (unlikely(tmp_expression_value_88 == NULL)) {
                        tmp_expression_value_88 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[440]);
                    }

                    if (tmp_expression_value_88 == NULL) {
                        assert(ERROR_OCCURRED());

                        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
                        Py_DECREF(tmp_called_value_24);

                        exception_lineno = 1585;
                        type_description_2 = "o";
                        goto frame_exception_exit_3;
                    }
                    Py_INCREF(tmp_expression_value_88);
                } else {
                    goto frame_exception_exit_3;
                }
            }

            tmp_tuple_element_10 = LOOKUP_ATTRIBUTE(tmp_expression_value_88, mod_consts[485]);
            Py_DECREF(tmp_expression_value_88);
            if (tmp_tuple_element_10 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
                Py_DECREF(tmp_called_value_24);

                exception_lineno = 1585;
                type_description_2 = "o";
                goto frame_exception_exit_3;
            }
            tmp_defaults_3 = PyTuple_New(1);
            PyTuple_SET_ITEM(tmp_defaults_3, 0, tmp_tuple_element_10);
            tmp_annotations_35 = PyDict_Copy(mod_consts[551]);


            tmp_args_element_value_45 = MAKE_FUNCTION_hikari$api$rest$$$function__31_add_reaction(tmp_defaults_3, tmp_annotations_35);

            frame_862833cacd6e5ba73c351f8d132a7b6b_3->m_frame.f_lineno = 1579;
            tmp_dictset_value = CALL_FUNCTION_WITH_SINGLE_ARG(tmp_called_value_24, tmp_args_element_value_45);
            Py_DECREF(tmp_called_value_24);
            Py_DECREF(tmp_args_element_value_45);
            if (tmp_dictset_value == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 1579;
                type_description_2 = "o";
                goto frame_exception_exit_3;
            }
            tmp_res = PyObject_SetItem(locals_hikari$api$rest$$$class__2_RESTClient_110, mod_consts[66], tmp_dictset_value);
            Py_DECREF(tmp_dictset_value);
            if (tmp_res != 0) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 1580;
                type_description_2 = "o";
                goto frame_exception_exit_3;
            }
        }
        {
            PyObject *tmp_called_value_25;
            PyObject *tmp_expression_value_89;
            PyObject *tmp_args_element_value_46;
            PyObject *tmp_defaults_4;
            PyObject *tmp_tuple_element_11;
            PyObject *tmp_expression_value_90;
            PyObject *tmp_annotations_36;
            tmp_expression_value_89 = PyObject_GetItem(locals_hikari$api$rest$$$class__2_RESTClient_110, mod_consts[431]);

            if (tmp_expression_value_89 == NULL) {
                if (CHECK_AND_CLEAR_KEY_ERROR_OCCURRED()) {
                    tmp_expression_value_89 = GET_STRING_DICT_VALUE(moduledict_hikari$api$rest, (Nuitka_StringObject *)mod_consts[431]);

                    if (unlikely(tmp_expression_value_89 == NULL)) {
                        tmp_expression_value_89 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[431]);
                    }

                    if (tmp_expression_value_89 == NULL) {
                        assert(ERROR_OCCURRED());

                        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                        exception_lineno = 1635;
                        type_description_2 = "o";
                        goto frame_exception_exit_3;
                    }
                    Py_INCREF(tmp_expression_value_89);
                } else {
                    goto frame_exception_exit_3;
                }
            }

            tmp_called_value_25 = LOOKUP_ATTRIBUTE(tmp_expression_value_89, mod_consts[457]);
            Py_DECREF(tmp_expression_value_89);
            if (tmp_called_value_25 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 1635;
                type_description_2 = "o";
                goto frame_exception_exit_3;
            }
            tmp_expression_value_90 = PyObject_GetItem(locals_hikari$api$rest$$$class__2_RESTClient_110, mod_consts[440]);

            if (tmp_expression_value_90 == NULL) {
                if (CHECK_AND_CLEAR_KEY_ERROR_OCCURRED()) {
                    tmp_expression_value_90 = GET_STRING_DICT_VALUE(moduledict_hikari$api$rest, (Nuitka_StringObject *)mod_consts[440]);

                    if (unlikely(tmp_expression_value_90 == NULL)) {
                        tmp_expression_value_90 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[440]);
                    }

                    if (tmp_expression_value_90 == NULL) {
                        assert(ERROR_OCCURRED());

                        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
                        Py_DECREF(tmp_called_value_25);

                        exception_lineno = 1641;
                        type_description_2 = "o";
                        goto frame_exception_exit_3;
                    }
                    Py_INCREF(tmp_expression_value_90);
                } else {
                    goto frame_exception_exit_3;
                }
            }

            tmp_tuple_element_11 = LOOKUP_ATTRIBUTE(tmp_expression_value_90, mod_consts[485]);
            Py_DECREF(tmp_expression_value_90);
            if (tmp_tuple_element_11 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
                Py_DECREF(tmp_called_value_25);

                exception_lineno = 1641;
                type_description_2 = "o";
                goto frame_exception_exit_3;
            }
            tmp_defaults_4 = PyTuple_New(1);
            PyTuple_SET_ITEM(tmp_defaults_4, 0, tmp_tuple_element_11);
            tmp_annotations_36 = PyDict_Copy(mod_consts[551]);


            tmp_args_element_value_46 = MAKE_FUNCTION_hikari$api$rest$$$function__32_delete_my_reaction(tmp_defaults_4, tmp_annotations_36);

            frame_862833cacd6e5ba73c351f8d132a7b6b_3->m_frame.f_lineno = 1635;
            tmp_dictset_value = CALL_FUNCTION_WITH_SINGLE_ARG(tmp_called_value_25, tmp_args_element_value_46);
            Py_DECREF(tmp_called_value_25);
            Py_DECREF(tmp_args_element_value_46);
            if (tmp_dictset_value == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 1635;
                type_description_2 = "o";
                goto frame_exception_exit_3;
            }
            tmp_res = PyObject_SetItem(locals_hikari$api$rest$$$class__2_RESTClient_110, mod_consts[69], tmp_dictset_value);
            Py_DECREF(tmp_dictset_value);
            if (tmp_res != 0) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 1636;
                type_description_2 = "o";
                goto frame_exception_exit_3;
            }
        }
        {
            PyObject *tmp_called_value_26;
            PyObject *tmp_expression_value_91;
            PyObject *tmp_args_element_value_47;
            PyObject *tmp_defaults_5;
            PyObject *tmp_tuple_element_12;
            PyObject *tmp_expression_value_92;
            PyObject *tmp_annotations_37;
            tmp_expression_value_91 = PyObject_GetItem(locals_hikari$api$rest$$$class__2_RESTClient_110, mod_consts[431]);

            if (tmp_expression_value_91 == NULL) {
                if (CHECK_AND_CLEAR_KEY_ERROR_OCCURRED()) {
                    tmp_expression_value_91 = GET_STRING_DICT_VALUE(moduledict_hikari$api$rest, (Nuitka_StringObject *)mod_consts[431]);

                    if (unlikely(tmp_expression_value_91 == NULL)) {
                        tmp_expression_value_91 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[431]);
                    }

                    if (tmp_expression_value_91 == NULL) {
                        assert(ERROR_OCCURRED());

                        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                        exception_lineno = 1687;
                        type_description_2 = "o";
                        goto frame_exception_exit_3;
                    }
                    Py_INCREF(tmp_expression_value_91);
                } else {
                    goto frame_exception_exit_3;
                }
            }

            tmp_called_value_26 = LOOKUP_ATTRIBUTE(tmp_expression_value_91, mod_consts[457]);
            Py_DECREF(tmp_expression_value_91);
            if (tmp_called_value_26 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 1687;
                type_description_2 = "o";
                goto frame_exception_exit_3;
            }
            tmp_expression_value_92 = PyObject_GetItem(locals_hikari$api$rest$$$class__2_RESTClient_110, mod_consts[440]);

            if (tmp_expression_value_92 == NULL) {
                if (CHECK_AND_CLEAR_KEY_ERROR_OCCURRED()) {
                    tmp_expression_value_92 = GET_STRING_DICT_VALUE(moduledict_hikari$api$rest, (Nuitka_StringObject *)mod_consts[440]);

                    if (unlikely(tmp_expression_value_92 == NULL)) {
                        tmp_expression_value_92 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[440]);
                    }

                    if (tmp_expression_value_92 == NULL) {
                        assert(ERROR_OCCURRED());

                        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
                        Py_DECREF(tmp_called_value_26);

                        exception_lineno = 1693;
                        type_description_2 = "o";
                        goto frame_exception_exit_3;
                    }
                    Py_INCREF(tmp_expression_value_92);
                } else {
                    goto frame_exception_exit_3;
                }
            }

            tmp_tuple_element_12 = LOOKUP_ATTRIBUTE(tmp_expression_value_92, mod_consts[485]);
            Py_DECREF(tmp_expression_value_92);
            if (tmp_tuple_element_12 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
                Py_DECREF(tmp_called_value_26);

                exception_lineno = 1693;
                type_description_2 = "o";
                goto frame_exception_exit_3;
            }
            tmp_defaults_5 = PyTuple_New(1);
            PyTuple_SET_ITEM(tmp_defaults_5, 0, tmp_tuple_element_12);
            tmp_annotations_37 = PyDict_Copy(mod_consts[551]);


            tmp_args_element_value_47 = MAKE_FUNCTION_hikari$api$rest$$$function__33_delete_all_reactions_for_emoji(tmp_defaults_5, tmp_annotations_37);

            frame_862833cacd6e5ba73c351f8d132a7b6b_3->m_frame.f_lineno = 1687;
            tmp_dictset_value = CALL_FUNCTION_WITH_SINGLE_ARG(tmp_called_value_26, tmp_args_element_value_47);
            Py_DECREF(tmp_called_value_26);
            Py_DECREF(tmp_args_element_value_47);
            if (tmp_dictset_value == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 1687;
                type_description_2 = "o";
                goto frame_exception_exit_3;
            }
            tmp_res = PyObject_SetItem(locals_hikari$api$rest$$$class__2_RESTClient_110, mod_consts[72], tmp_dictset_value);
            Py_DECREF(tmp_dictset_value);
            if (tmp_res != 0) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 1688;
                type_description_2 = "o";
                goto frame_exception_exit_3;
            }
        }
        {
            PyObject *tmp_called_value_27;
            PyObject *tmp_expression_value_93;
            PyObject *tmp_args_element_value_48;
            PyObject *tmp_defaults_6;
            PyObject *tmp_tuple_element_13;
            PyObject *tmp_expression_value_94;
            PyObject *tmp_annotations_38;
            tmp_expression_value_93 = PyObject_GetItem(locals_hikari$api$rest$$$class__2_RESTClient_110, mod_consts[431]);

            if (tmp_expression_value_93 == NULL) {
                if (CHECK_AND_CLEAR_KEY_ERROR_OCCURRED()) {
                    tmp_expression_value_93 = GET_STRING_DICT_VALUE(moduledict_hikari$api$rest, (Nuitka_StringObject *)mod_consts[431]);

                    if (unlikely(tmp_expression_value_93 == NULL)) {
                        tmp_expression_value_93 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[431]);
                    }

                    if (tmp_expression_value_93 == NULL) {
                        assert(ERROR_OCCURRED());

                        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                        exception_lineno = 1741;
                        type_description_2 = "o";
                        goto frame_exception_exit_3;
                    }
                    Py_INCREF(tmp_expression_value_93);
                } else {
                    goto frame_exception_exit_3;
                }
            }

            tmp_called_value_27 = LOOKUP_ATTRIBUTE(tmp_expression_value_93, mod_consts[457]);
            Py_DECREF(tmp_expression_value_93);
            if (tmp_called_value_27 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 1741;
                type_description_2 = "o";
                goto frame_exception_exit_3;
            }
            tmp_expression_value_94 = PyObject_GetItem(locals_hikari$api$rest$$$class__2_RESTClient_110, mod_consts[440]);

            if (tmp_expression_value_94 == NULL) {
                if (CHECK_AND_CLEAR_KEY_ERROR_OCCURRED()) {
                    tmp_expression_value_94 = GET_STRING_DICT_VALUE(moduledict_hikari$api$rest, (Nuitka_StringObject *)mod_consts[440]);

                    if (unlikely(tmp_expression_value_94 == NULL)) {
                        tmp_expression_value_94 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[440]);
                    }

                    if (tmp_expression_value_94 == NULL) {
                        assert(ERROR_OCCURRED());

                        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
                        Py_DECREF(tmp_called_value_27);

                        exception_lineno = 1748;
                        type_description_2 = "o";
                        goto frame_exception_exit_3;
                    }
                    Py_INCREF(tmp_expression_value_94);
                } else {
                    goto frame_exception_exit_3;
                }
            }

            tmp_tuple_element_13 = LOOKUP_ATTRIBUTE(tmp_expression_value_94, mod_consts[485]);
            Py_DECREF(tmp_expression_value_94);
            if (tmp_tuple_element_13 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
                Py_DECREF(tmp_called_value_27);

                exception_lineno = 1748;
                type_description_2 = "o";
                goto frame_exception_exit_3;
            }
            tmp_defaults_6 = PyTuple_New(1);
            PyTuple_SET_ITEM(tmp_defaults_6, 0, tmp_tuple_element_13);
            tmp_annotations_38 = PyDict_Copy(mod_consts[552]);


            tmp_args_element_value_48 = MAKE_FUNCTION_hikari$api$rest$$$function__34_delete_reaction(tmp_defaults_6, tmp_annotations_38);

            frame_862833cacd6e5ba73c351f8d132a7b6b_3->m_frame.f_lineno = 1741;
            tmp_dictset_value = CALL_FUNCTION_WITH_SINGLE_ARG(tmp_called_value_27, tmp_args_element_value_48);
            Py_DECREF(tmp_called_value_27);
            Py_DECREF(tmp_args_element_value_48);
            if (tmp_dictset_value == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 1741;
                type_description_2 = "o";
                goto frame_exception_exit_3;
            }
            tmp_res = PyObject_SetItem(locals_hikari$api$rest$$$class__2_RESTClient_110, mod_consts[75], tmp_dictset_value);
            Py_DECREF(tmp_dictset_value);
            if (tmp_res != 0) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 1742;
                type_description_2 = "o";
                goto frame_exception_exit_3;
            }
        }
        {
            PyObject *tmp_called_instance_25;
            PyObject *tmp_args_element_value_49;
            PyObject *tmp_annotations_39;
            tmp_called_instance_25 = PyObject_GetItem(locals_hikari$api$rest$$$class__2_RESTClient_110, mod_consts[431]);

            if (tmp_called_instance_25 == NULL) {
                if (CHECK_AND_CLEAR_KEY_ERROR_OCCURRED()) {
                    tmp_called_instance_25 = GET_STRING_DICT_VALUE(moduledict_hikari$api$rest, (Nuitka_StringObject *)mod_consts[431]);

                    if (unlikely(tmp_called_instance_25 == NULL)) {
                        tmp_called_instance_25 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[431]);
                    }

                    if (tmp_called_instance_25 == NULL) {
                        assert(ERROR_OCCURRED());

                        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                        exception_lineno = 1801;
                        type_description_2 = "o";
                        goto frame_exception_exit_3;
                    }
                    Py_INCREF(tmp_called_instance_25);
                } else {
                    goto frame_exception_exit_3;
                }
            }

            tmp_annotations_39 = PyDict_Copy(mod_consts[524]);


            tmp_args_element_value_49 = MAKE_FUNCTION_hikari$api$rest$$$function__35_delete_all_reactions(tmp_annotations_39);

            frame_862833cacd6e5ba73c351f8d132a7b6b_3->m_frame.f_lineno = 1801;
            tmp_dictset_value = CALL_METHOD_WITH_SINGLE_ARG(tmp_called_instance_25, mod_consts[457], tmp_args_element_value_49);
            Py_DECREF(tmp_called_instance_25);
            Py_DECREF(tmp_args_element_value_49);
            if (tmp_dictset_value == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 1801;
                type_description_2 = "o";
                goto frame_exception_exit_3;
            }
            tmp_res = PyObject_SetItem(locals_hikari$api$rest$$$class__2_RESTClient_110, mod_consts[78], tmp_dictset_value);
            Py_DECREF(tmp_dictset_value);
            if (tmp_res != 0) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 1802;
                type_description_2 = "o";
                goto frame_exception_exit_3;
            }
        }
        {
            PyObject *tmp_called_value_28;
            PyObject *tmp_expression_value_95;
            PyObject *tmp_args_element_value_50;
            PyObject *tmp_defaults_7;
            PyObject *tmp_tuple_element_14;
            PyObject *tmp_expression_value_96;
            PyObject *tmp_annotations_40;
            tmp_expression_value_95 = PyObject_GetItem(locals_hikari$api$rest$$$class__2_RESTClient_110, mod_consts[431]);

            if (tmp_expression_value_95 == NULL) {
                if (CHECK_AND_CLEAR_KEY_ERROR_OCCURRED()) {
                    tmp_expression_value_95 = GET_STRING_DICT_VALUE(moduledict_hikari$api$rest, (Nuitka_StringObject *)mod_consts[431]);

                    if (unlikely(tmp_expression_value_95 == NULL)) {
                        tmp_expression_value_95 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[431]);
                    }

                    if (tmp_expression_value_95 == NULL) {
                        assert(ERROR_OCCURRED());

                        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                        exception_lineno = 1844;
                        type_description_2 = "o";
                        goto frame_exception_exit_3;
                    }
                    Py_INCREF(tmp_expression_value_95);
                } else {
                    goto frame_exception_exit_3;
                }
            }

            tmp_called_value_28 = LOOKUP_ATTRIBUTE(tmp_expression_value_95, mod_consts[457]);
            Py_DECREF(tmp_expression_value_95);
            if (tmp_called_value_28 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 1844;
                type_description_2 = "o";
                goto frame_exception_exit_3;
            }
            tmp_expression_value_96 = PyObject_GetItem(locals_hikari$api$rest$$$class__2_RESTClient_110, mod_consts[440]);

            if (tmp_expression_value_96 == NULL) {
                if (CHECK_AND_CLEAR_KEY_ERROR_OCCURRED()) {
                    tmp_expression_value_96 = GET_STRING_DICT_VALUE(moduledict_hikari$api$rest, (Nuitka_StringObject *)mod_consts[440]);

                    if (unlikely(tmp_expression_value_96 == NULL)) {
                        tmp_expression_value_96 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[440]);
                    }

                    if (tmp_expression_value_96 == NULL) {
                        assert(ERROR_OCCURRED());

                        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
                        Py_DECREF(tmp_called_value_28);

                        exception_lineno = 1850;
                        type_description_2 = "o";
                        goto frame_exception_exit_3;
                    }
                    Py_INCREF(tmp_expression_value_96);
                } else {
                    goto frame_exception_exit_3;
                }
            }

            tmp_tuple_element_14 = LOOKUP_ATTRIBUTE(tmp_expression_value_96, mod_consts[485]);
            Py_DECREF(tmp_expression_value_96);
            if (tmp_tuple_element_14 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
                Py_DECREF(tmp_called_value_28);

                exception_lineno = 1850;
                type_description_2 = "o";
                goto frame_exception_exit_3;
            }
            tmp_defaults_7 = PyTuple_New(1);
            PyTuple_SET_ITEM(tmp_defaults_7, 0, tmp_tuple_element_14);
            tmp_annotations_40 = PyDict_Copy(mod_consts[553]);


            tmp_args_element_value_50 = MAKE_FUNCTION_hikari$api$rest$$$function__36_fetch_reactions_for_emoji(tmp_defaults_7, tmp_annotations_40);

            frame_862833cacd6e5ba73c351f8d132a7b6b_3->m_frame.f_lineno = 1844;
            tmp_dictset_value = CALL_FUNCTION_WITH_SINGLE_ARG(tmp_called_value_28, tmp_args_element_value_50);
            Py_DECREF(tmp_called_value_28);
            Py_DECREF(tmp_args_element_value_50);
            if (tmp_dictset_value == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 1844;
                type_description_2 = "o";
                goto frame_exception_exit_3;
            }
            tmp_res = PyObject_SetItem(locals_hikari$api$rest$$$class__2_RESTClient_110, mod_consts[555], tmp_dictset_value);
            Py_DECREF(tmp_dictset_value);
            if (tmp_res != 0) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 1845;
                type_description_2 = "o";
                goto frame_exception_exit_3;
            }
        }
        {
            PyObject *tmp_called_value_29;
            PyObject *tmp_expression_value_97;
            PyObject *tmp_args_element_value_51;
            PyObject *tmp_kw_defaults_11;
            PyObject *tmp_dict_key_11;
            PyObject *tmp_dict_value_11;
            PyObject *tmp_expression_value_98;
            PyObject *tmp_annotations_41;
            tmp_expression_value_97 = PyObject_GetItem(locals_hikari$api$rest$$$class__2_RESTClient_110, mod_consts[431]);

            if (tmp_expression_value_97 == NULL) {
                if (CHECK_AND_CLEAR_KEY_ERROR_OCCURRED()) {
                    tmp_expression_value_97 = GET_STRING_DICT_VALUE(moduledict_hikari$api$rest, (Nuitka_StringObject *)mod_consts[431]);

                    if (unlikely(tmp_expression_value_97 == NULL)) {
                        tmp_expression_value_97 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[431]);
                    }

                    if (tmp_expression_value_97 == NULL) {
                        assert(ERROR_OCCURRED());

                        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                        exception_lineno = 1911;
                        type_description_2 = "o";
                        goto frame_exception_exit_3;
                    }
                    Py_INCREF(tmp_expression_value_97);
                } else {
                    goto frame_exception_exit_3;
                }
            }

            tmp_called_value_29 = LOOKUP_ATTRIBUTE(tmp_expression_value_97, mod_consts[457]);
            Py_DECREF(tmp_expression_value_97);
            if (tmp_called_value_29 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 1911;
                type_description_2 = "o";
                goto frame_exception_exit_3;
            }
            tmp_dict_key_11 = mod_consts[557];
            tmp_expression_value_98 = PyObject_GetItem(locals_hikari$api$rest$$$class__2_RESTClient_110, mod_consts[440]);

            if (tmp_expression_value_98 == NULL) {
                if (CHECK_AND_CLEAR_KEY_ERROR_OCCURRED()) {
                    tmp_expression_value_98 = GET_STRING_DICT_VALUE(moduledict_hikari$api$rest, (Nuitka_StringObject *)mod_consts[440]);

                    if (unlikely(tmp_expression_value_98 == NULL)) {
                        tmp_expression_value_98 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[440]);
                    }

                    if (tmp_expression_value_98 == NULL) {
                        assert(ERROR_OCCURRED());

                        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
                        Py_DECREF(tmp_called_value_29);

                        exception_lineno = 1917;
                        type_description_2 = "o";
                        goto frame_exception_exit_3;
                    }
                    Py_INCREF(tmp_expression_value_98);
                } else {
                    goto frame_exception_exit_3;
                }
            }

            tmp_dict_value_11 = LOOKUP_ATTRIBUTE(tmp_expression_value_98, mod_consts[485]);
            Py_DECREF(tmp_expression_value_98);
            if (tmp_dict_value_11 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
                Py_DECREF(tmp_called_value_29);

                exception_lineno = 1917;
                type_description_2 = "o";
                goto frame_exception_exit_3;
            }
            tmp_kw_defaults_11 = _PyDict_NewPresized( 2 );
            {
                PyObject *tmp_expression_value_99;
                tmp_res = PyDict_SetItem(tmp_kw_defaults_11, tmp_dict_key_11, tmp_dict_value_11);
                Py_DECREF(tmp_dict_value_11);
                assert(!(tmp_res != 0));
                tmp_dict_key_11 = mod_consts[496];
                tmp_expression_value_99 = PyObject_GetItem(locals_hikari$api$rest$$$class__2_RESTClient_110, mod_consts[440]);

                if (tmp_expression_value_99 == NULL) {
                    if (CHECK_AND_CLEAR_KEY_ERROR_OCCURRED()) {
                        tmp_expression_value_99 = GET_STRING_DICT_VALUE(moduledict_hikari$api$rest, (Nuitka_StringObject *)mod_consts[440]);

                        if (unlikely(tmp_expression_value_99 == NULL)) {
                            tmp_expression_value_99 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[440]);
                        }

                        if (tmp_expression_value_99 == NULL) {
                            assert(ERROR_OCCURRED());

                            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                            exception_lineno = 1918;
                            type_description_2 = "o";
                            goto dict_build_exception_10;
                        }
                        Py_INCREF(tmp_expression_value_99);
                    } else {
                        goto dict_build_exception_10;
                    }
                }

                tmp_dict_value_11 = LOOKUP_ATTRIBUTE(tmp_expression_value_99, mod_consts[485]);
                Py_DECREF(tmp_expression_value_99);
                if (tmp_dict_value_11 == NULL) {
                    assert(ERROR_OCCURRED());

                    FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                    exception_lineno = 1918;
                    type_description_2 = "o";
                    goto dict_build_exception_10;
                }
                tmp_res = PyDict_SetItem(tmp_kw_defaults_11, tmp_dict_key_11, tmp_dict_value_11);
                Py_DECREF(tmp_dict_value_11);
                assert(!(tmp_res != 0));
            }
            goto dict_build_noexception_10;
            // Exception handling pass through code for dict_build:
            dict_build_exception_10:;
            Py_DECREF(tmp_called_value_29);
            Py_DECREF(tmp_kw_defaults_11);
            goto frame_exception_exit_3;
            // Finished with no exception for dict_build:
            dict_build_noexception_10:;
            tmp_annotations_41 = PyDict_Copy(mod_consts[558]);


            tmp_args_element_value_51 = MAKE_FUNCTION_hikari$api$rest$$$function__37_create_webhook(tmp_kw_defaults_11, tmp_annotations_41);

            frame_862833cacd6e5ba73c351f8d132a7b6b_3->m_frame.f_lineno = 1911;
            tmp_dictset_value = CALL_FUNCTION_WITH_SINGLE_ARG(tmp_called_value_29, tmp_args_element_value_51);
            Py_DECREF(tmp_called_value_29);
            Py_DECREF(tmp_args_element_value_51);
            if (tmp_dictset_value == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 1911;
                type_description_2 = "o";
                goto frame_exception_exit_3;
            }
            tmp_res = PyObject_SetItem(locals_hikari$api$rest$$$class__2_RESTClient_110, mod_consts[81], tmp_dictset_value);
            Py_DECREF(tmp_dictset_value);
            if (tmp_res != 0) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 1912;
                type_description_2 = "o";
                goto frame_exception_exit_3;
            }
        }
        {
            PyObject *tmp_called_value_30;
            PyObject *tmp_expression_value_100;
            PyObject *tmp_args_element_value_52;
            PyObject *tmp_kw_defaults_12;
            PyObject *tmp_dict_key_12;
            PyObject *tmp_dict_value_12;
            PyObject *tmp_expression_value_101;
            PyObject *tmp_annotations_42;
            tmp_expression_value_100 = PyObject_GetItem(locals_hikari$api$rest$$$class__2_RESTClient_110, mod_consts[431]);

            if (tmp_expression_value_100 == NULL) {
                if (CHECK_AND_CLEAR_KEY_ERROR_OCCURRED()) {
                    tmp_expression_value_100 = GET_STRING_DICT_VALUE(moduledict_hikari$api$rest, (Nuitka_StringObject *)mod_consts[431]);

                    if (unlikely(tmp_expression_value_100 == NULL)) {
                        tmp_expression_value_100 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[431]);
                    }

                    if (tmp_expression_value_100 == NULL) {
                        assert(ERROR_OCCURRED());

                        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                        exception_lineno = 1968;
                        type_description_2 = "o";
                        goto frame_exception_exit_3;
                    }
                    Py_INCREF(tmp_expression_value_100);
                } else {
                    goto frame_exception_exit_3;
                }
            }

            tmp_called_value_30 = LOOKUP_ATTRIBUTE(tmp_expression_value_100, mod_consts[457]);
            Py_DECREF(tmp_expression_value_100);
            if (tmp_called_value_30 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 1968;
                type_description_2 = "o";
                goto frame_exception_exit_3;
            }
            tmp_dict_key_12 = mod_consts[559];
            tmp_expression_value_101 = PyObject_GetItem(locals_hikari$api$rest$$$class__2_RESTClient_110, mod_consts[440]);

            if (tmp_expression_value_101 == NULL) {
                if (CHECK_AND_CLEAR_KEY_ERROR_OCCURRED()) {
                    tmp_expression_value_101 = GET_STRING_DICT_VALUE(moduledict_hikari$api$rest, (Nuitka_StringObject *)mod_consts[440]);

                    if (unlikely(tmp_expression_value_101 == NULL)) {
                        tmp_expression_value_101 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[440]);
                    }

                    if (tmp_expression_value_101 == NULL) {
                        assert(ERROR_OCCURRED());

                        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
                        Py_DECREF(tmp_called_value_30);

                        exception_lineno = 1973;
                        type_description_2 = "o";
                        goto frame_exception_exit_3;
                    }
                    Py_INCREF(tmp_expression_value_101);
                } else {
                    goto frame_exception_exit_3;
                }
            }

            tmp_dict_value_12 = LOOKUP_ATTRIBUTE(tmp_expression_value_101, mod_consts[485]);
            Py_DECREF(tmp_expression_value_101);
            if (tmp_dict_value_12 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
                Py_DECREF(tmp_called_value_30);

                exception_lineno = 1973;
                type_description_2 = "o";
                goto frame_exception_exit_3;
            }
            tmp_kw_defaults_12 = _PyDict_NewPresized( 1 );
            tmp_res = PyDict_SetItem(tmp_kw_defaults_12, tmp_dict_key_12, tmp_dict_value_12);
            Py_DECREF(tmp_dict_value_12);
            assert(!(tmp_res != 0));
            tmp_annotations_42 = PyDict_Copy(mod_consts[560]);


            tmp_args_element_value_52 = MAKE_FUNCTION_hikari$api$rest$$$function__38_fetch_webhook(tmp_kw_defaults_12, tmp_annotations_42);

            frame_862833cacd6e5ba73c351f8d132a7b6b_3->m_frame.f_lineno = 1968;
            tmp_dictset_value = CALL_FUNCTION_WITH_SINGLE_ARG(tmp_called_value_30, tmp_args_element_value_52);
            Py_DECREF(tmp_called_value_30);
            Py_DECREF(tmp_args_element_value_52);
            if (tmp_dictset_value == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 1968;
                type_description_2 = "o";
                goto frame_exception_exit_3;
            }
            tmp_res = PyObject_SetItem(locals_hikari$api$rest$$$class__2_RESTClient_110, mod_consts[84], tmp_dictset_value);
            Py_DECREF(tmp_dictset_value);
            if (tmp_res != 0) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 1969;
                type_description_2 = "o";
                goto frame_exception_exit_3;
            }
        }
        {
            PyObject *tmp_called_instance_26;
            PyObject *tmp_args_element_value_53;
            PyObject *tmp_annotations_43;
            tmp_called_instance_26 = PyObject_GetItem(locals_hikari$api$rest$$$class__2_RESTClient_110, mod_consts[431]);

            if (tmp_called_instance_26 == NULL) {
                if (CHECK_AND_CLEAR_KEY_ERROR_OCCURRED()) {
                    tmp_called_instance_26 = GET_STRING_DICT_VALUE(moduledict_hikari$api$rest, (Nuitka_StringObject *)mod_consts[431]);

                    if (unlikely(tmp_called_instance_26 == NULL)) {
                        tmp_called_instance_26 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[431]);
                    }

                    if (tmp_called_instance_26 == NULL) {
                        assert(ERROR_OCCURRED());

                        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                        exception_lineno = 2018;
                        type_description_2 = "o";
                        goto frame_exception_exit_3;
                    }
                    Py_INCREF(tmp_called_instance_26);
                } else {
                    goto frame_exception_exit_3;
                }
            }

            tmp_annotations_43 = PyDict_Copy(mod_consts[561]);


            tmp_args_element_value_53 = MAKE_FUNCTION_hikari$api$rest$$$function__39_fetch_channel_webhooks(tmp_annotations_43);

            frame_862833cacd6e5ba73c351f8d132a7b6b_3->m_frame.f_lineno = 2018;
            tmp_dictset_value = CALL_METHOD_WITH_SINGLE_ARG(tmp_called_instance_26, mod_consts[457], tmp_args_element_value_53);
            Py_DECREF(tmp_called_instance_26);
            Py_DECREF(tmp_args_element_value_53);
            if (tmp_dictset_value == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 2018;
                type_description_2 = "o";
                goto frame_exception_exit_3;
            }
            tmp_res = PyObject_SetItem(locals_hikari$api$rest$$$class__2_RESTClient_110, mod_consts[87], tmp_dictset_value);
            Py_DECREF(tmp_dictset_value);
            if (tmp_res != 0) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 2019;
                type_description_2 = "o";
                goto frame_exception_exit_3;
            }
        }
        {
            PyObject *tmp_called_instance_27;
            PyObject *tmp_args_element_value_54;
            PyObject *tmp_annotations_44;
            tmp_called_instance_27 = PyObject_GetItem(locals_hikari$api$rest$$$class__2_RESTClient_110, mod_consts[431]);

            if (tmp_called_instance_27 == NULL) {
                if (CHECK_AND_CLEAR_KEY_ERROR_OCCURRED()) {
                    tmp_called_instance_27 = GET_STRING_DICT_VALUE(moduledict_hikari$api$rest, (Nuitka_StringObject *)mod_consts[431]);

                    if (unlikely(tmp_called_instance_27 == NULL)) {
                        tmp_called_instance_27 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[431]);
                    }

                    if (tmp_called_instance_27 == NULL) {
                        assert(ERROR_OCCURRED());

                        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                        exception_lineno = 2060;
                        type_description_2 = "o";
                        goto frame_exception_exit_3;
                    }
                    Py_INCREF(tmp_called_instance_27);
                } else {
                    goto frame_exception_exit_3;
                }
            }

            tmp_annotations_44 = PyDict_Copy(mod_consts[562]);


            tmp_args_element_value_54 = MAKE_FUNCTION_hikari$api$rest$$$function__40_fetch_guild_webhooks(tmp_annotations_44);

            frame_862833cacd6e5ba73c351f8d132a7b6b_3->m_frame.f_lineno = 2060;
            tmp_dictset_value = CALL_METHOD_WITH_SINGLE_ARG(tmp_called_instance_27, mod_consts[457], tmp_args_element_value_54);
            Py_DECREF(tmp_called_instance_27);
            Py_DECREF(tmp_args_element_value_54);
            if (tmp_dictset_value == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 2060;
                type_description_2 = "o";
                goto frame_exception_exit_3;
            }
            tmp_res = PyObject_SetItem(locals_hikari$api$rest$$$class__2_RESTClient_110, mod_consts[90], tmp_dictset_value);
            Py_DECREF(tmp_dictset_value);
            if (tmp_res != 0) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 2061;
                type_description_2 = "o";
                goto frame_exception_exit_3;
            }
        }
        {
            PyObject *tmp_called_value_31;
            PyObject *tmp_expression_value_102;
            PyObject *tmp_args_element_value_55;
            PyObject *tmp_kw_defaults_13;
            PyObject *tmp_dict_key_13;
            PyObject *tmp_dict_value_13;
            PyObject *tmp_expression_value_103;
            PyObject *tmp_annotations_45;
            tmp_expression_value_102 = PyObject_GetItem(locals_hikari$api$rest$$$class__2_RESTClient_110, mod_consts[431]);

            if (tmp_expression_value_102 == NULL) {
                if (CHECK_AND_CLEAR_KEY_ERROR_OCCURRED()) {
                    tmp_expression_value_102 = GET_STRING_DICT_VALUE(moduledict_hikari$api$rest, (Nuitka_StringObject *)mod_consts[431]);

                    if (unlikely(tmp_expression_value_102 == NULL)) {
                        tmp_expression_value_102 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[431]);
                    }

                    if (tmp_expression_value_102 == NULL) {
                        assert(ERROR_OCCURRED());

                        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                        exception_lineno = 2101;
                        type_description_2 = "o";
                        goto frame_exception_exit_3;
                    }
                    Py_INCREF(tmp_expression_value_102);
                } else {
                    goto frame_exception_exit_3;
                }
            }

            tmp_called_value_31 = LOOKUP_ATTRIBUTE(tmp_expression_value_102, mod_consts[457]);
            Py_DECREF(tmp_expression_value_102);
            if (tmp_called_value_31 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 2101;
                type_description_2 = "o";
                goto frame_exception_exit_3;
            }
            tmp_dict_key_13 = mod_consts[559];
            tmp_expression_value_103 = PyObject_GetItem(locals_hikari$api$rest$$$class__2_RESTClient_110, mod_consts[440]);

            if (tmp_expression_value_103 == NULL) {
                if (CHECK_AND_CLEAR_KEY_ERROR_OCCURRED()) {
                    tmp_expression_value_103 = GET_STRING_DICT_VALUE(moduledict_hikari$api$rest, (Nuitka_StringObject *)mod_consts[440]);

                    if (unlikely(tmp_expression_value_103 == NULL)) {
                        tmp_expression_value_103 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[440]);
                    }

                    if (tmp_expression_value_103 == NULL) {
                        assert(ERROR_OCCURRED());

                        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
                        Py_DECREF(tmp_called_value_31);

                        exception_lineno = 2106;
                        type_description_2 = "o";
                        goto frame_exception_exit_3;
                    }
                    Py_INCREF(tmp_expression_value_103);
                } else {
                    goto frame_exception_exit_3;
                }
            }

            tmp_dict_value_13 = LOOKUP_ATTRIBUTE(tmp_expression_value_103, mod_consts[485]);
            Py_DECREF(tmp_expression_value_103);
            if (tmp_dict_value_13 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
                Py_DECREF(tmp_called_value_31);

                exception_lineno = 2106;
                type_description_2 = "o";
                goto frame_exception_exit_3;
            }
            tmp_kw_defaults_13 = _PyDict_NewPresized( 5 );
            {
                PyObject *tmp_expression_value_104;
                PyObject *tmp_expression_value_105;
                PyObject *tmp_expression_value_106;
                PyObject *tmp_expression_value_107;
                tmp_res = PyDict_SetItem(tmp_kw_defaults_13, tmp_dict_key_13, tmp_dict_value_13);
                Py_DECREF(tmp_dict_value_13);
                assert(!(tmp_res != 0));
                tmp_dict_key_13 = mod_consts[484];
                tmp_expression_value_104 = PyObject_GetItem(locals_hikari$api$rest$$$class__2_RESTClient_110, mod_consts[440]);

                if (tmp_expression_value_104 == NULL) {
                    if (CHECK_AND_CLEAR_KEY_ERROR_OCCURRED()) {
                        tmp_expression_value_104 = GET_STRING_DICT_VALUE(moduledict_hikari$api$rest, (Nuitka_StringObject *)mod_consts[440]);

                        if (unlikely(tmp_expression_value_104 == NULL)) {
                            tmp_expression_value_104 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[440]);
                        }

                        if (tmp_expression_value_104 == NULL) {
                            assert(ERROR_OCCURRED());

                            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                            exception_lineno = 2107;
                            type_description_2 = "o";
                            goto dict_build_exception_11;
                        }
                        Py_INCREF(tmp_expression_value_104);
                    } else {
                        goto dict_build_exception_11;
                    }
                }

                tmp_dict_value_13 = LOOKUP_ATTRIBUTE(tmp_expression_value_104, mod_consts[485]);
                Py_DECREF(tmp_expression_value_104);
                if (tmp_dict_value_13 == NULL) {
                    assert(ERROR_OCCURRED());

                    FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                    exception_lineno = 2107;
                    type_description_2 = "o";
                    goto dict_build_exception_11;
                }
                tmp_res = PyDict_SetItem(tmp_kw_defaults_13, tmp_dict_key_13, tmp_dict_value_13);
                Py_DECREF(tmp_dict_value_13);
                assert(!(tmp_res != 0));
                tmp_dict_key_13 = mod_consts[557];
                tmp_expression_value_105 = PyObject_GetItem(locals_hikari$api$rest$$$class__2_RESTClient_110, mod_consts[440]);

                if (tmp_expression_value_105 == NULL) {
                    if (CHECK_AND_CLEAR_KEY_ERROR_OCCURRED()) {
                        tmp_expression_value_105 = GET_STRING_DICT_VALUE(moduledict_hikari$api$rest, (Nuitka_StringObject *)mod_consts[440]);

                        if (unlikely(tmp_expression_value_105 == NULL)) {
                            tmp_expression_value_105 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[440]);
                        }

                        if (tmp_expression_value_105 == NULL) {
                            assert(ERROR_OCCURRED());

                            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                            exception_lineno = 2108;
                            type_description_2 = "o";
                            goto dict_build_exception_11;
                        }
                        Py_INCREF(tmp_expression_value_105);
                    } else {
                        goto dict_build_exception_11;
                    }
                }

                tmp_dict_value_13 = LOOKUP_ATTRIBUTE(tmp_expression_value_105, mod_consts[485]);
                Py_DECREF(tmp_expression_value_105);
                if (tmp_dict_value_13 == NULL) {
                    assert(ERROR_OCCURRED());

                    FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                    exception_lineno = 2108;
                    type_description_2 = "o";
                    goto dict_build_exception_11;
                }
                tmp_res = PyDict_SetItem(tmp_kw_defaults_13, tmp_dict_key_13, tmp_dict_value_13);
                Py_DECREF(tmp_dict_value_13);
                assert(!(tmp_res != 0));
                tmp_dict_key_13 = mod_consts[563];
                tmp_expression_value_106 = PyObject_GetItem(locals_hikari$api$rest$$$class__2_RESTClient_110, mod_consts[440]);

                if (tmp_expression_value_106 == NULL) {
                    if (CHECK_AND_CLEAR_KEY_ERROR_OCCURRED()) {
                        tmp_expression_value_106 = GET_STRING_DICT_VALUE(moduledict_hikari$api$rest, (Nuitka_StringObject *)mod_consts[440]);

                        if (unlikely(tmp_expression_value_106 == NULL)) {
                            tmp_expression_value_106 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[440]);
                        }

                        if (tmp_expression_value_106 == NULL) {
                            assert(ERROR_OCCURRED());

                            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                            exception_lineno = 2109;
                            type_description_2 = "o";
                            goto dict_build_exception_11;
                        }
                        Py_INCREF(tmp_expression_value_106);
                    } else {
                        goto dict_build_exception_11;
                    }
                }

                tmp_dict_value_13 = LOOKUP_ATTRIBUTE(tmp_expression_value_106, mod_consts[485]);
                Py_DECREF(tmp_expression_value_106);
                if (tmp_dict_value_13 == NULL) {
                    assert(ERROR_OCCURRED());

                    FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                    exception_lineno = 2109;
                    type_description_2 = "o";
                    goto dict_build_exception_11;
                }
                tmp_res = PyDict_SetItem(tmp_kw_defaults_13, tmp_dict_key_13, tmp_dict_value_13);
                Py_DECREF(tmp_dict_value_13);
                assert(!(tmp_res != 0));
                tmp_dict_key_13 = mod_consts[496];
                tmp_expression_value_107 = PyObject_GetItem(locals_hikari$api$rest$$$class__2_RESTClient_110, mod_consts[440]);

                if (tmp_expression_value_107 == NULL) {
                    if (CHECK_AND_CLEAR_KEY_ERROR_OCCURRED()) {
                        tmp_expression_value_107 = GET_STRING_DICT_VALUE(moduledict_hikari$api$rest, (Nuitka_StringObject *)mod_consts[440]);

                        if (unlikely(tmp_expression_value_107 == NULL)) {
                            tmp_expression_value_107 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[440]);
                        }

                        if (tmp_expression_value_107 == NULL) {
                            assert(ERROR_OCCURRED());

                            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                            exception_lineno = 2110;
                            type_description_2 = "o";
                            goto dict_build_exception_11;
                        }
                        Py_INCREF(tmp_expression_value_107);
                    } else {
                        goto dict_build_exception_11;
                    }
                }

                tmp_dict_value_13 = LOOKUP_ATTRIBUTE(tmp_expression_value_107, mod_consts[485]);
                Py_DECREF(tmp_expression_value_107);
                if (tmp_dict_value_13 == NULL) {
                    assert(ERROR_OCCURRED());

                    FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                    exception_lineno = 2110;
                    type_description_2 = "o";
                    goto dict_build_exception_11;
                }
                tmp_res = PyDict_SetItem(tmp_kw_defaults_13, tmp_dict_key_13, tmp_dict_value_13);
                Py_DECREF(tmp_dict_value_13);
                assert(!(tmp_res != 0));
            }
            goto dict_build_noexception_11;
            // Exception handling pass through code for dict_build:
            dict_build_exception_11:;
            Py_DECREF(tmp_called_value_31);
            Py_DECREF(tmp_kw_defaults_13);
            goto frame_exception_exit_3;
            // Finished with no exception for dict_build:
            dict_build_noexception_11:;
            tmp_annotations_45 = PyDict_Copy(mod_consts[564]);


            tmp_args_element_value_55 = MAKE_FUNCTION_hikari$api$rest$$$function__41_edit_webhook(tmp_kw_defaults_13, tmp_annotations_45);

            frame_862833cacd6e5ba73c351f8d132a7b6b_3->m_frame.f_lineno = 2101;
            tmp_dictset_value = CALL_FUNCTION_WITH_SINGLE_ARG(tmp_called_value_31, tmp_args_element_value_55);
            Py_DECREF(tmp_called_value_31);
            Py_DECREF(tmp_args_element_value_55);
            if (tmp_dictset_value == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 2101;
                type_description_2 = "o";
                goto frame_exception_exit_3;
            }
            tmp_res = PyObject_SetItem(locals_hikari$api$rest$$$class__2_RESTClient_110, mod_consts[93], tmp_dictset_value);
            Py_DECREF(tmp_dictset_value);
            if (tmp_res != 0) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 2102;
                type_description_2 = "o";
                goto frame_exception_exit_3;
            }
        }
        {
            PyObject *tmp_called_value_32;
            PyObject *tmp_expression_value_108;
            PyObject *tmp_args_element_value_56;
            PyObject *tmp_kw_defaults_14;
            PyObject *tmp_dict_key_14;
            PyObject *tmp_dict_value_14;
            PyObject *tmp_expression_value_109;
            PyObject *tmp_annotations_46;
            tmp_expression_value_108 = PyObject_GetItem(locals_hikari$api$rest$$$class__2_RESTClient_110, mod_consts[431]);

            if (tmp_expression_value_108 == NULL) {
                if (CHECK_AND_CLEAR_KEY_ERROR_OCCURRED()) {
                    tmp_expression_value_108 = GET_STRING_DICT_VALUE(moduledict_hikari$api$rest, (Nuitka_StringObject *)mod_consts[431]);

                    if (unlikely(tmp_expression_value_108 == NULL)) {
                        tmp_expression_value_108 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[431]);
                    }

                    if (tmp_expression_value_108 == NULL) {
                        assert(ERROR_OCCURRED());

                        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                        exception_lineno = 2165;
                        type_description_2 = "o";
                        goto frame_exception_exit_3;
                    }
                    Py_INCREF(tmp_expression_value_108);
                } else {
                    goto frame_exception_exit_3;
                }
            }

            tmp_called_value_32 = LOOKUP_ATTRIBUTE(tmp_expression_value_108, mod_consts[457]);
            Py_DECREF(tmp_expression_value_108);
            if (tmp_called_value_32 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 2165;
                type_description_2 = "o";
                goto frame_exception_exit_3;
            }
            tmp_dict_key_14 = mod_consts[559];
            tmp_expression_value_109 = PyObject_GetItem(locals_hikari$api$rest$$$class__2_RESTClient_110, mod_consts[440]);

            if (tmp_expression_value_109 == NULL) {
                if (CHECK_AND_CLEAR_KEY_ERROR_OCCURRED()) {
                    tmp_expression_value_109 = GET_STRING_DICT_VALUE(moduledict_hikari$api$rest, (Nuitka_StringObject *)mod_consts[440]);

                    if (unlikely(tmp_expression_value_109 == NULL)) {
                        tmp_expression_value_109 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[440]);
                    }

                    if (tmp_expression_value_109 == NULL) {
                        assert(ERROR_OCCURRED());

                        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
                        Py_DECREF(tmp_called_value_32);

                        exception_lineno = 2170;
                        type_description_2 = "o";
                        goto frame_exception_exit_3;
                    }
                    Py_INCREF(tmp_expression_value_109);
                } else {
                    goto frame_exception_exit_3;
                }
            }

            tmp_dict_value_14 = LOOKUP_ATTRIBUTE(tmp_expression_value_109, mod_consts[485]);
            Py_DECREF(tmp_expression_value_109);
            if (tmp_dict_value_14 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
                Py_DECREF(tmp_called_value_32);

                exception_lineno = 2170;
                type_description_2 = "o";
                goto frame_exception_exit_3;
            }
            tmp_kw_defaults_14 = _PyDict_NewPresized( 1 );
            tmp_res = PyDict_SetItem(tmp_kw_defaults_14, tmp_dict_key_14, tmp_dict_value_14);
            Py_DECREF(tmp_dict_value_14);
            assert(!(tmp_res != 0));
            tmp_annotations_46 = PyDict_Copy(mod_consts[565]);


            tmp_args_element_value_56 = MAKE_FUNCTION_hikari$api$rest$$$function__42_delete_webhook(tmp_kw_defaults_14, tmp_annotations_46);

            frame_862833cacd6e5ba73c351f8d132a7b6b_3->m_frame.f_lineno = 2165;
            tmp_dictset_value = CALL_FUNCTION_WITH_SINGLE_ARG(tmp_called_value_32, tmp_args_element_value_56);
            Py_DECREF(tmp_called_value_32);
            Py_DECREF(tmp_args_element_value_56);
            if (tmp_dictset_value == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 2165;
                type_description_2 = "o";
                goto frame_exception_exit_3;
            }
            tmp_res = PyObject_SetItem(locals_hikari$api$rest$$$class__2_RESTClient_110, mod_consts[96], tmp_dictset_value);
            Py_DECREF(tmp_dictset_value);
            if (tmp_res != 0) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 2166;
                type_description_2 = "o";
                goto frame_exception_exit_3;
            }
        }
        {
            PyObject *tmp_called_value_33;
            PyObject *tmp_expression_value_110;
            PyObject *tmp_args_element_value_57;
            PyObject *tmp_defaults_8;
            PyObject *tmp_tuple_element_15;
            PyObject *tmp_expression_value_111;
            PyObject *tmp_kw_defaults_15;
            PyObject *tmp_dict_key_15;
            PyObject *tmp_dict_value_15;
            PyObject *tmp_expression_value_112;
            PyObject *tmp_annotations_47;
            tmp_expression_value_110 = PyObject_GetItem(locals_hikari$api$rest$$$class__2_RESTClient_110, mod_consts[431]);

            if (tmp_expression_value_110 == NULL) {
                if (CHECK_AND_CLEAR_KEY_ERROR_OCCURRED()) {
                    tmp_expression_value_110 = GET_STRING_DICT_VALUE(moduledict_hikari$api$rest, (Nuitka_StringObject *)mod_consts[431]);

                    if (unlikely(tmp_expression_value_110 == NULL)) {
                        tmp_expression_value_110 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[431]);
                    }

                    if (tmp_expression_value_110 == NULL) {
                        assert(ERROR_OCCURRED());

                        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                        exception_lineno = 2210;
                        type_description_2 = "o";
                        goto frame_exception_exit_3;
                    }
                    Py_INCREF(tmp_expression_value_110);
                } else {
                    goto frame_exception_exit_3;
                }
            }

            tmp_called_value_33 = LOOKUP_ATTRIBUTE(tmp_expression_value_110, mod_consts[457]);
            Py_DECREF(tmp_expression_value_110);
            if (tmp_called_value_33 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 2210;
                type_description_2 = "o";
                goto frame_exception_exit_3;
            }
            tmp_expression_value_111 = PyObject_GetItem(locals_hikari$api$rest$$$class__2_RESTClient_110, mod_consts[440]);

            if (tmp_expression_value_111 == NULL) {
                if (CHECK_AND_CLEAR_KEY_ERROR_OCCURRED()) {
                    tmp_expression_value_111 = GET_STRING_DICT_VALUE(moduledict_hikari$api$rest, (Nuitka_StringObject *)mod_consts[440]);

                    if (unlikely(tmp_expression_value_111 == NULL)) {
                        tmp_expression_value_111 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[440]);
                    }

                    if (tmp_expression_value_111 == NULL) {
                        assert(ERROR_OCCURRED());

                        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
                        Py_DECREF(tmp_called_value_33);

                        exception_lineno = 2216;
                        type_description_2 = "o";
                        goto frame_exception_exit_3;
                    }
                    Py_INCREF(tmp_expression_value_111);
                } else {
                    goto frame_exception_exit_3;
                }
            }

            tmp_tuple_element_15 = LOOKUP_ATTRIBUTE(tmp_expression_value_111, mod_consts[485]);
            Py_DECREF(tmp_expression_value_111);
            if (tmp_tuple_element_15 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
                Py_DECREF(tmp_called_value_33);

                exception_lineno = 2216;
                type_description_2 = "o";
                goto frame_exception_exit_3;
            }
            tmp_defaults_8 = PyTuple_New(1);
            PyTuple_SET_ITEM(tmp_defaults_8, 0, tmp_tuple_element_15);
            tmp_dict_key_15 = mod_consts[566];
            tmp_expression_value_112 = PyObject_GetItem(locals_hikari$api$rest$$$class__2_RESTClient_110, mod_consts[440]);

            if (tmp_expression_value_112 == NULL) {
                if (CHECK_AND_CLEAR_KEY_ERROR_OCCURRED()) {
                    tmp_expression_value_112 = GET_STRING_DICT_VALUE(moduledict_hikari$api$rest, (Nuitka_StringObject *)mod_consts[440]);

                    if (unlikely(tmp_expression_value_112 == NULL)) {
                        tmp_expression_value_112 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[440]);
                    }

                    if (tmp_expression_value_112 == NULL) {
                        assert(ERROR_OCCURRED());

                        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
                        Py_DECREF(tmp_called_value_33);
                        Py_DECREF(tmp_defaults_8);

                        exception_lineno = 2218;
                        type_description_2 = "o";
                        goto frame_exception_exit_3;
                    }
                    Py_INCREF(tmp_expression_value_112);
                } else {
                    goto frame_exception_exit_3;
                }
            }

            tmp_dict_value_15 = LOOKUP_ATTRIBUTE(tmp_expression_value_112, mod_consts[485]);
            Py_DECREF(tmp_expression_value_112);
            if (tmp_dict_value_15 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
                Py_DECREF(tmp_called_value_33);
                Py_DECREF(tmp_defaults_8);

                exception_lineno = 2218;
                type_description_2 = "o";
                goto frame_exception_exit_3;
            }
            tmp_kw_defaults_15 = _PyDict_NewPresized( 13 );
            {
                PyObject *tmp_expression_value_113;
                PyObject *tmp_expression_value_114;
                PyObject *tmp_expression_value_115;
                PyObject *tmp_expression_value_116;
                PyObject *tmp_expression_value_117;
                PyObject *tmp_expression_value_118;
                PyObject *tmp_expression_value_119;
                PyObject *tmp_expression_value_120;
                PyObject *tmp_expression_value_121;
                PyObject *tmp_expression_value_122;
                PyObject *tmp_expression_value_123;
                PyObject *tmp_expression_value_124;
                tmp_res = PyDict_SetItem(tmp_kw_defaults_15, tmp_dict_key_15, tmp_dict_value_15);
                Py_DECREF(tmp_dict_value_15);
                assert(!(tmp_res != 0));
                tmp_dict_key_15 = mod_consts[567];
                tmp_expression_value_113 = PyObject_GetItem(locals_hikari$api$rest$$$class__2_RESTClient_110, mod_consts[440]);

                if (tmp_expression_value_113 == NULL) {
                    if (CHECK_AND_CLEAR_KEY_ERROR_OCCURRED()) {
                        tmp_expression_value_113 = GET_STRING_DICT_VALUE(moduledict_hikari$api$rest, (Nuitka_StringObject *)mod_consts[440]);

                        if (unlikely(tmp_expression_value_113 == NULL)) {
                            tmp_expression_value_113 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[440]);
                        }

                        if (tmp_expression_value_113 == NULL) {
                            assert(ERROR_OCCURRED());

                            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                            exception_lineno = 2219;
                            type_description_2 = "o";
                            goto dict_build_exception_12;
                        }
                        Py_INCREF(tmp_expression_value_113);
                    } else {
                        goto dict_build_exception_12;
                    }
                }

                tmp_dict_value_15 = LOOKUP_ATTRIBUTE(tmp_expression_value_113, mod_consts[485]);
                Py_DECREF(tmp_expression_value_113);
                if (tmp_dict_value_15 == NULL) {
                    assert(ERROR_OCCURRED());

                    FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                    exception_lineno = 2219;
                    type_description_2 = "o";
                    goto dict_build_exception_12;
                }
                tmp_res = PyDict_SetItem(tmp_kw_defaults_15, tmp_dict_key_15, tmp_dict_value_15);
                Py_DECREF(tmp_dict_value_15);
                assert(!(tmp_res != 0));
                tmp_dict_key_15 = mod_consts[533];
                tmp_expression_value_114 = PyObject_GetItem(locals_hikari$api$rest$$$class__2_RESTClient_110, mod_consts[440]);

                if (tmp_expression_value_114 == NULL) {
                    if (CHECK_AND_CLEAR_KEY_ERROR_OCCURRED()) {
                        tmp_expression_value_114 = GET_STRING_DICT_VALUE(moduledict_hikari$api$rest, (Nuitka_StringObject *)mod_consts[440]);

                        if (unlikely(tmp_expression_value_114 == NULL)) {
                            tmp_expression_value_114 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[440]);
                        }

                        if (tmp_expression_value_114 == NULL) {
                            assert(ERROR_OCCURRED());

                            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                            exception_lineno = 2220;
                            type_description_2 = "o";
                            goto dict_build_exception_12;
                        }
                        Py_INCREF(tmp_expression_value_114);
                    } else {
                        goto dict_build_exception_12;
                    }
                }

                tmp_dict_value_15 = LOOKUP_ATTRIBUTE(tmp_expression_value_114, mod_consts[485]);
                Py_DECREF(tmp_expression_value_114);
                if (tmp_dict_value_15 == NULL) {
                    assert(ERROR_OCCURRED());

                    FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                    exception_lineno = 2220;
                    type_description_2 = "o";
                    goto dict_build_exception_12;
                }
                tmp_res = PyDict_SetItem(tmp_kw_defaults_15, tmp_dict_key_15, tmp_dict_value_15);
                Py_DECREF(tmp_dict_value_15);
                assert(!(tmp_res != 0));
                tmp_dict_key_15 = mod_consts[534];
                tmp_expression_value_115 = PyObject_GetItem(locals_hikari$api$rest$$$class__2_RESTClient_110, mod_consts[440]);

                if (tmp_expression_value_115 == NULL) {
                    if (CHECK_AND_CLEAR_KEY_ERROR_OCCURRED()) {
                        tmp_expression_value_115 = GET_STRING_DICT_VALUE(moduledict_hikari$api$rest, (Nuitka_StringObject *)mod_consts[440]);

                        if (unlikely(tmp_expression_value_115 == NULL)) {
                            tmp_expression_value_115 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[440]);
                        }

                        if (tmp_expression_value_115 == NULL) {
                            assert(ERROR_OCCURRED());

                            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                            exception_lineno = 2221;
                            type_description_2 = "o";
                            goto dict_build_exception_12;
                        }
                        Py_INCREF(tmp_expression_value_115);
                    } else {
                        goto dict_build_exception_12;
                    }
                }

                tmp_dict_value_15 = LOOKUP_ATTRIBUTE(tmp_expression_value_115, mod_consts[485]);
                Py_DECREF(tmp_expression_value_115);
                if (tmp_dict_value_15 == NULL) {
                    assert(ERROR_OCCURRED());

                    FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                    exception_lineno = 2221;
                    type_description_2 = "o";
                    goto dict_build_exception_12;
                }
                tmp_res = PyDict_SetItem(tmp_kw_defaults_15, tmp_dict_key_15, tmp_dict_value_15);
                Py_DECREF(tmp_dict_value_15);
                assert(!(tmp_res != 0));
                tmp_dict_key_15 = mod_consts[535];
                tmp_expression_value_116 = PyObject_GetItem(locals_hikari$api$rest$$$class__2_RESTClient_110, mod_consts[440]);

                if (tmp_expression_value_116 == NULL) {
                    if (CHECK_AND_CLEAR_KEY_ERROR_OCCURRED()) {
                        tmp_expression_value_116 = GET_STRING_DICT_VALUE(moduledict_hikari$api$rest, (Nuitka_StringObject *)mod_consts[440]);

                        if (unlikely(tmp_expression_value_116 == NULL)) {
                            tmp_expression_value_116 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[440]);
                        }

                        if (tmp_expression_value_116 == NULL) {
                            assert(ERROR_OCCURRED());

                            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                            exception_lineno = 2222;
                            type_description_2 = "o";
                            goto dict_build_exception_12;
                        }
                        Py_INCREF(tmp_expression_value_116);
                    } else {
                        goto dict_build_exception_12;
                    }
                }

                tmp_dict_value_15 = LOOKUP_ATTRIBUTE(tmp_expression_value_116, mod_consts[485]);
                Py_DECREF(tmp_expression_value_116);
                if (tmp_dict_value_15 == NULL) {
                    assert(ERROR_OCCURRED());

                    FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                    exception_lineno = 2222;
                    type_description_2 = "o";
                    goto dict_build_exception_12;
                }
                tmp_res = PyDict_SetItem(tmp_kw_defaults_15, tmp_dict_key_15, tmp_dict_value_15);
                Py_DECREF(tmp_dict_value_15);
                assert(!(tmp_res != 0));
                tmp_dict_key_15 = mod_consts[536];
                tmp_expression_value_117 = PyObject_GetItem(locals_hikari$api$rest$$$class__2_RESTClient_110, mod_consts[440]);

                if (tmp_expression_value_117 == NULL) {
                    if (CHECK_AND_CLEAR_KEY_ERROR_OCCURRED()) {
                        tmp_expression_value_117 = GET_STRING_DICT_VALUE(moduledict_hikari$api$rest, (Nuitka_StringObject *)mod_consts[440]);

                        if (unlikely(tmp_expression_value_117 == NULL)) {
                            tmp_expression_value_117 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[440]);
                        }

                        if (tmp_expression_value_117 == NULL) {
                            assert(ERROR_OCCURRED());

                            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                            exception_lineno = 2223;
                            type_description_2 = "o";
                            goto dict_build_exception_12;
                        }
                        Py_INCREF(tmp_expression_value_117);
                    } else {
                        goto dict_build_exception_12;
                    }
                }

                tmp_dict_value_15 = LOOKUP_ATTRIBUTE(tmp_expression_value_117, mod_consts[485]);
                Py_DECREF(tmp_expression_value_117);
                if (tmp_dict_value_15 == NULL) {
                    assert(ERROR_OCCURRED());

                    FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                    exception_lineno = 2223;
                    type_description_2 = "o";
                    goto dict_build_exception_12;
                }
                tmp_res = PyDict_SetItem(tmp_kw_defaults_15, tmp_dict_key_15, tmp_dict_value_15);
                Py_DECREF(tmp_dict_value_15);
                assert(!(tmp_res != 0));
                tmp_dict_key_15 = mod_consts[537];
                tmp_expression_value_118 = PyObject_GetItem(locals_hikari$api$rest$$$class__2_RESTClient_110, mod_consts[440]);

                if (tmp_expression_value_118 == NULL) {
                    if (CHECK_AND_CLEAR_KEY_ERROR_OCCURRED()) {
                        tmp_expression_value_118 = GET_STRING_DICT_VALUE(moduledict_hikari$api$rest, (Nuitka_StringObject *)mod_consts[440]);

                        if (unlikely(tmp_expression_value_118 == NULL)) {
                            tmp_expression_value_118 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[440]);
                        }

                        if (tmp_expression_value_118 == NULL) {
                            assert(ERROR_OCCURRED());

                            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                            exception_lineno = 2224;
                            type_description_2 = "o";
                            goto dict_build_exception_12;
                        }
                        Py_INCREF(tmp_expression_value_118);
                    } else {
                        goto dict_build_exception_12;
                    }
                }

                tmp_dict_value_15 = LOOKUP_ATTRIBUTE(tmp_expression_value_118, mod_consts[485]);
                Py_DECREF(tmp_expression_value_118);
                if (tmp_dict_value_15 == NULL) {
                    assert(ERROR_OCCURRED());

                    FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                    exception_lineno = 2224;
                    type_description_2 = "o";
                    goto dict_build_exception_12;
                }
                tmp_res = PyDict_SetItem(tmp_kw_defaults_15, tmp_dict_key_15, tmp_dict_value_15);
                Py_DECREF(tmp_dict_value_15);
                assert(!(tmp_res != 0));
                tmp_dict_key_15 = mod_consts[538];
                tmp_expression_value_119 = PyObject_GetItem(locals_hikari$api$rest$$$class__2_RESTClient_110, mod_consts[440]);

                if (tmp_expression_value_119 == NULL) {
                    if (CHECK_AND_CLEAR_KEY_ERROR_OCCURRED()) {
                        tmp_expression_value_119 = GET_STRING_DICT_VALUE(moduledict_hikari$api$rest, (Nuitka_StringObject *)mod_consts[440]);

                        if (unlikely(tmp_expression_value_119 == NULL)) {
                            tmp_expression_value_119 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[440]);
                        }

                        if (tmp_expression_value_119 == NULL) {
                            assert(ERROR_OCCURRED());

                            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                            exception_lineno = 2225;
                            type_description_2 = "o";
                            goto dict_build_exception_12;
                        }
                        Py_INCREF(tmp_expression_value_119);
                    } else {
                        goto dict_build_exception_12;
                    }
                }

                tmp_dict_value_15 = LOOKUP_ATTRIBUTE(tmp_expression_value_119, mod_consts[485]);
                Py_DECREF(tmp_expression_value_119);
                if (tmp_dict_value_15 == NULL) {
                    assert(ERROR_OCCURRED());

                    FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                    exception_lineno = 2225;
                    type_description_2 = "o";
                    goto dict_build_exception_12;
                }
                tmp_res = PyDict_SetItem(tmp_kw_defaults_15, tmp_dict_key_15, tmp_dict_value_15);
                Py_DECREF(tmp_dict_value_15);
                assert(!(tmp_res != 0));
                tmp_dict_key_15 = mod_consts[539];
                tmp_expression_value_120 = PyObject_GetItem(locals_hikari$api$rest$$$class__2_RESTClient_110, mod_consts[440]);

                if (tmp_expression_value_120 == NULL) {
                    if (CHECK_AND_CLEAR_KEY_ERROR_OCCURRED()) {
                        tmp_expression_value_120 = GET_STRING_DICT_VALUE(moduledict_hikari$api$rest, (Nuitka_StringObject *)mod_consts[440]);

                        if (unlikely(tmp_expression_value_120 == NULL)) {
                            tmp_expression_value_120 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[440]);
                        }

                        if (tmp_expression_value_120 == NULL) {
                            assert(ERROR_OCCURRED());

                            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                            exception_lineno = 2226;
                            type_description_2 = "o";
                            goto dict_build_exception_12;
                        }
                        Py_INCREF(tmp_expression_value_120);
                    } else {
                        goto dict_build_exception_12;
                    }
                }

                tmp_dict_value_15 = LOOKUP_ATTRIBUTE(tmp_expression_value_120, mod_consts[485]);
                Py_DECREF(tmp_expression_value_120);
                if (tmp_dict_value_15 == NULL) {
                    assert(ERROR_OCCURRED());

                    FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                    exception_lineno = 2226;
                    type_description_2 = "o";
                    goto dict_build_exception_12;
                }
                tmp_res = PyDict_SetItem(tmp_kw_defaults_15, tmp_dict_key_15, tmp_dict_value_15);
                Py_DECREF(tmp_dict_value_15);
                assert(!(tmp_res != 0));
                tmp_dict_key_15 = mod_consts[541];
                tmp_expression_value_121 = PyObject_GetItem(locals_hikari$api$rest$$$class__2_RESTClient_110, mod_consts[440]);

                if (tmp_expression_value_121 == NULL) {
                    if (CHECK_AND_CLEAR_KEY_ERROR_OCCURRED()) {
                        tmp_expression_value_121 = GET_STRING_DICT_VALUE(moduledict_hikari$api$rest, (Nuitka_StringObject *)mod_consts[440]);

                        if (unlikely(tmp_expression_value_121 == NULL)) {
                            tmp_expression_value_121 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[440]);
                        }

                        if (tmp_expression_value_121 == NULL) {
                            assert(ERROR_OCCURRED());

                            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                            exception_lineno = 2227;
                            type_description_2 = "o";
                            goto dict_build_exception_12;
                        }
                        Py_INCREF(tmp_expression_value_121);
                    } else {
                        goto dict_build_exception_12;
                    }
                }

                tmp_dict_value_15 = LOOKUP_ATTRIBUTE(tmp_expression_value_121, mod_consts[485]);
                Py_DECREF(tmp_expression_value_121);
                if (tmp_dict_value_15 == NULL) {
                    assert(ERROR_OCCURRED());

                    FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                    exception_lineno = 2227;
                    type_description_2 = "o";
                    goto dict_build_exception_12;
                }
                tmp_res = PyDict_SetItem(tmp_kw_defaults_15, tmp_dict_key_15, tmp_dict_value_15);
                Py_DECREF(tmp_dict_value_15);
                assert(!(tmp_res != 0));
                tmp_dict_key_15 = mod_consts[543];
                tmp_expression_value_122 = PyObject_GetItem(locals_hikari$api$rest$$$class__2_RESTClient_110, mod_consts[440]);

                if (tmp_expression_value_122 == NULL) {
                    if (CHECK_AND_CLEAR_KEY_ERROR_OCCURRED()) {
                        tmp_expression_value_122 = GET_STRING_DICT_VALUE(moduledict_hikari$api$rest, (Nuitka_StringObject *)mod_consts[440]);

                        if (unlikely(tmp_expression_value_122 == NULL)) {
                            tmp_expression_value_122 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[440]);
                        }

                        if (tmp_expression_value_122 == NULL) {
                            assert(ERROR_OCCURRED());

                            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                            exception_lineno = 2230;
                            type_description_2 = "o";
                            goto dict_build_exception_12;
                        }
                        Py_INCREF(tmp_expression_value_122);
                    } else {
                        goto dict_build_exception_12;
                    }
                }

                tmp_dict_value_15 = LOOKUP_ATTRIBUTE(tmp_expression_value_122, mod_consts[485]);
                Py_DECREF(tmp_expression_value_122);
                if (tmp_dict_value_15 == NULL) {
                    assert(ERROR_OCCURRED());

                    FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                    exception_lineno = 2230;
                    type_description_2 = "o";
                    goto dict_build_exception_12;
                }
                tmp_res = PyDict_SetItem(tmp_kw_defaults_15, tmp_dict_key_15, tmp_dict_value_15);
                Py_DECREF(tmp_dict_value_15);
                assert(!(tmp_res != 0));
                tmp_dict_key_15 = mod_consts[544];
                tmp_expression_value_123 = PyObject_GetItem(locals_hikari$api$rest$$$class__2_RESTClient_110, mod_consts[440]);

                if (tmp_expression_value_123 == NULL) {
                    if (CHECK_AND_CLEAR_KEY_ERROR_OCCURRED()) {
                        tmp_expression_value_123 = GET_STRING_DICT_VALUE(moduledict_hikari$api$rest, (Nuitka_StringObject *)mod_consts[440]);

                        if (unlikely(tmp_expression_value_123 == NULL)) {
                            tmp_expression_value_123 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[440]);
                        }

                        if (tmp_expression_value_123 == NULL) {
                            assert(ERROR_OCCURRED());

                            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                            exception_lineno = 2233;
                            type_description_2 = "o";
                            goto dict_build_exception_12;
                        }
                        Py_INCREF(tmp_expression_value_123);
                    } else {
                        goto dict_build_exception_12;
                    }
                }

                tmp_dict_value_15 = LOOKUP_ATTRIBUTE(tmp_expression_value_123, mod_consts[485]);
                Py_DECREF(tmp_expression_value_123);
                if (tmp_dict_value_15 == NULL) {
                    assert(ERROR_OCCURRED());

                    FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                    exception_lineno = 2233;
                    type_description_2 = "o";
                    goto dict_build_exception_12;
                }
                tmp_res = PyDict_SetItem(tmp_kw_defaults_15, tmp_dict_key_15, tmp_dict_value_15);
                Py_DECREF(tmp_dict_value_15);
                assert(!(tmp_res != 0));
                tmp_dict_key_15 = mod_consts[548];
                tmp_expression_value_124 = PyObject_GetItem(locals_hikari$api$rest$$$class__2_RESTClient_110, mod_consts[440]);

                if (tmp_expression_value_124 == NULL) {
                    if (CHECK_AND_CLEAR_KEY_ERROR_OCCURRED()) {
                        tmp_expression_value_124 = GET_STRING_DICT_VALUE(moduledict_hikari$api$rest, (Nuitka_StringObject *)mod_consts[440]);

                        if (unlikely(tmp_expression_value_124 == NULL)) {
                            tmp_expression_value_124 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[440]);
                        }

                        if (tmp_expression_value_124 == NULL) {
                            assert(ERROR_OCCURRED());

                            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                            exception_lineno = 2234;
                            type_description_2 = "o";
                            goto dict_build_exception_12;
                        }
                        Py_INCREF(tmp_expression_value_124);
                    } else {
                        goto dict_build_exception_12;
                    }
                }

                tmp_dict_value_15 = LOOKUP_ATTRIBUTE(tmp_expression_value_124, mod_consts[485]);
                Py_DECREF(tmp_expression_value_124);
                if (tmp_dict_value_15 == NULL) {
                    assert(ERROR_OCCURRED());

                    FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                    exception_lineno = 2234;
                    type_description_2 = "o";
                    goto dict_build_exception_12;
                }
                tmp_res = PyDict_SetItem(tmp_kw_defaults_15, tmp_dict_key_15, tmp_dict_value_15);
                Py_DECREF(tmp_dict_value_15);
                assert(!(tmp_res != 0));
            }
            goto dict_build_noexception_12;
            // Exception handling pass through code for dict_build:
            dict_build_exception_12:;
            Py_DECREF(tmp_called_value_33);
            Py_DECREF(tmp_defaults_8);
            Py_DECREF(tmp_kw_defaults_15);
            goto frame_exception_exit_3;
            // Finished with no exception for dict_build:
            dict_build_noexception_12:;
            tmp_annotations_47 = PyDict_Copy(mod_consts[568]);


            tmp_args_element_value_57 = MAKE_FUNCTION_hikari$api$rest$$$function__43_execute_webhook(tmp_defaults_8, tmp_kw_defaults_15, tmp_annotations_47);

            frame_862833cacd6e5ba73c351f8d132a7b6b_3->m_frame.f_lineno = 2210;
            tmp_dictset_value = CALL_FUNCTION_WITH_SINGLE_ARG(tmp_called_value_33, tmp_args_element_value_57);
            Py_DECREF(tmp_called_value_33);
            Py_DECREF(tmp_args_element_value_57);
            if (tmp_dictset_value == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 2210;
                type_description_2 = "o";
                goto frame_exception_exit_3;
            }
            tmp_res = PyObject_SetItem(locals_hikari$api$rest$$$class__2_RESTClient_110, mod_consts[99], tmp_dictset_value);
            Py_DECREF(tmp_dictset_value);
            if (tmp_res != 0) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 2211;
                type_description_2 = "o";
                goto frame_exception_exit_3;
            }
        }
        {
            PyObject *tmp_called_instance_28;
            PyObject *tmp_args_element_value_58;
            PyObject *tmp_annotations_48;
            tmp_called_instance_28 = PyObject_GetItem(locals_hikari$api$rest$$$class__2_RESTClient_110, mod_consts[431]);

            if (tmp_called_instance_28 == NULL) {
                if (CHECK_AND_CLEAR_KEY_ERROR_OCCURRED()) {
                    tmp_called_instance_28 = GET_STRING_DICT_VALUE(moduledict_hikari$api$rest, (Nuitka_StringObject *)mod_consts[431]);

                    if (unlikely(tmp_called_instance_28 == NULL)) {
                        tmp_called_instance_28 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[431]);
                    }

                    if (tmp_called_instance_28 == NULL) {
                        assert(ERROR_OCCURRED());

                        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                        exception_lineno = 2388;
                        type_description_2 = "o";
                        goto frame_exception_exit_3;
                    }
                    Py_INCREF(tmp_called_instance_28);
                } else {
                    goto frame_exception_exit_3;
                }
            }

            tmp_annotations_48 = PyDict_Copy(mod_consts[569]);


            tmp_args_element_value_58 = MAKE_FUNCTION_hikari$api$rest$$$function__44_fetch_webhook_message(tmp_annotations_48);

            frame_862833cacd6e5ba73c351f8d132a7b6b_3->m_frame.f_lineno = 2388;
            tmp_dictset_value = CALL_METHOD_WITH_SINGLE_ARG(tmp_called_instance_28, mod_consts[457], tmp_args_element_value_58);
            Py_DECREF(tmp_called_instance_28);
            Py_DECREF(tmp_args_element_value_58);
            if (tmp_dictset_value == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 2388;
                type_description_2 = "o";
                goto frame_exception_exit_3;
            }
            tmp_res = PyObject_SetItem(locals_hikari$api$rest$$$class__2_RESTClient_110, mod_consts[102], tmp_dictset_value);
            Py_DECREF(tmp_dictset_value);
            if (tmp_res != 0) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 2389;
                type_description_2 = "o";
                goto frame_exception_exit_3;
            }
        }
        {
            PyObject *tmp_called_value_34;
            PyObject *tmp_expression_value_125;
            PyObject *tmp_args_element_value_59;
            PyObject *tmp_defaults_9;
            PyObject *tmp_tuple_element_16;
            PyObject *tmp_expression_value_126;
            PyObject *tmp_kw_defaults_16;
            PyObject *tmp_dict_key_16;
            PyObject *tmp_dict_value_16;
            PyObject *tmp_expression_value_127;
            PyObject *tmp_annotations_49;
            tmp_expression_value_125 = PyObject_GetItem(locals_hikari$api$rest$$$class__2_RESTClient_110, mod_consts[431]);

            if (tmp_expression_value_125 == NULL) {
                if (CHECK_AND_CLEAR_KEY_ERROR_OCCURRED()) {
                    tmp_expression_value_125 = GET_STRING_DICT_VALUE(moduledict_hikari$api$rest, (Nuitka_StringObject *)mod_consts[431]);

                    if (unlikely(tmp_expression_value_125 == NULL)) {
                        tmp_expression_value_125 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[431]);
                    }

                    if (tmp_expression_value_125 == NULL) {
                        assert(ERROR_OCCURRED());

                        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                        exception_lineno = 2435;
                        type_description_2 = "o";
                        goto frame_exception_exit_3;
                    }
                    Py_INCREF(tmp_expression_value_125);
                } else {
                    goto frame_exception_exit_3;
                }
            }

            tmp_called_value_34 = LOOKUP_ATTRIBUTE(tmp_expression_value_125, mod_consts[457]);
            Py_DECREF(tmp_expression_value_125);
            if (tmp_called_value_34 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 2435;
                type_description_2 = "o";
                goto frame_exception_exit_3;
            }
            tmp_expression_value_126 = PyObject_GetItem(locals_hikari$api$rest$$$class__2_RESTClient_110, mod_consts[440]);

            if (tmp_expression_value_126 == NULL) {
                if (CHECK_AND_CLEAR_KEY_ERROR_OCCURRED()) {
                    tmp_expression_value_126 = GET_STRING_DICT_VALUE(moduledict_hikari$api$rest, (Nuitka_StringObject *)mod_consts[440]);

                    if (unlikely(tmp_expression_value_126 == NULL)) {
                        tmp_expression_value_126 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[440]);
                    }

                    if (tmp_expression_value_126 == NULL) {
                        assert(ERROR_OCCURRED());

                        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
                        Py_DECREF(tmp_called_value_34);

                        exception_lineno = 2442;
                        type_description_2 = "o";
                        goto frame_exception_exit_3;
                    }
                    Py_INCREF(tmp_expression_value_126);
                } else {
                    goto frame_exception_exit_3;
                }
            }

            tmp_tuple_element_16 = LOOKUP_ATTRIBUTE(tmp_expression_value_126, mod_consts[485]);
            Py_DECREF(tmp_expression_value_126);
            if (tmp_tuple_element_16 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
                Py_DECREF(tmp_called_value_34);

                exception_lineno = 2442;
                type_description_2 = "o";
                goto frame_exception_exit_3;
            }
            tmp_defaults_9 = PyTuple_New(1);
            PyTuple_SET_ITEM(tmp_defaults_9, 0, tmp_tuple_element_16);
            tmp_dict_key_16 = mod_consts[533];
            tmp_expression_value_127 = PyObject_GetItem(locals_hikari$api$rest$$$class__2_RESTClient_110, mod_consts[440]);

            if (tmp_expression_value_127 == NULL) {
                if (CHECK_AND_CLEAR_KEY_ERROR_OCCURRED()) {
                    tmp_expression_value_127 = GET_STRING_DICT_VALUE(moduledict_hikari$api$rest, (Nuitka_StringObject *)mod_consts[440]);

                    if (unlikely(tmp_expression_value_127 == NULL)) {
                        tmp_expression_value_127 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[440]);
                    }

                    if (tmp_expression_value_127 == NULL) {
                        assert(ERROR_OCCURRED());

                        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
                        Py_DECREF(tmp_called_value_34);
                        Py_DECREF(tmp_defaults_9);

                        exception_lineno = 2444;
                        type_description_2 = "o";
                        goto frame_exception_exit_3;
                    }
                    Py_INCREF(tmp_expression_value_127);
                } else {
                    goto frame_exception_exit_3;
                }
            }

            tmp_dict_value_16 = LOOKUP_ATTRIBUTE(tmp_expression_value_127, mod_consts[485]);
            Py_DECREF(tmp_expression_value_127);
            if (tmp_dict_value_16 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
                Py_DECREF(tmp_called_value_34);
                Py_DECREF(tmp_defaults_9);

                exception_lineno = 2444;
                type_description_2 = "o";
                goto frame_exception_exit_3;
            }
            tmp_kw_defaults_16 = _PyDict_NewPresized( 10 );
            {
                PyObject *tmp_expression_value_128;
                PyObject *tmp_expression_value_129;
                PyObject *tmp_expression_value_130;
                PyObject *tmp_expression_value_131;
                PyObject *tmp_expression_value_132;
                PyObject *tmp_expression_value_133;
                PyObject *tmp_expression_value_134;
                PyObject *tmp_expression_value_135;
                tmp_res = PyDict_SetItem(tmp_kw_defaults_16, tmp_dict_key_16, tmp_dict_value_16);
                Py_DECREF(tmp_dict_value_16);
                assert(!(tmp_res != 0));
                tmp_dict_key_16 = mod_consts[534];
                tmp_expression_value_128 = PyObject_GetItem(locals_hikari$api$rest$$$class__2_RESTClient_110, mod_consts[440]);

                if (tmp_expression_value_128 == NULL) {
                    if (CHECK_AND_CLEAR_KEY_ERROR_OCCURRED()) {
                        tmp_expression_value_128 = GET_STRING_DICT_VALUE(moduledict_hikari$api$rest, (Nuitka_StringObject *)mod_consts[440]);

                        if (unlikely(tmp_expression_value_128 == NULL)) {
                            tmp_expression_value_128 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[440]);
                        }

                        if (tmp_expression_value_128 == NULL) {
                            assert(ERROR_OCCURRED());

                            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                            exception_lineno = 2445;
                            type_description_2 = "o";
                            goto dict_build_exception_13;
                        }
                        Py_INCREF(tmp_expression_value_128);
                    } else {
                        goto dict_build_exception_13;
                    }
                }

                tmp_dict_value_16 = LOOKUP_ATTRIBUTE(tmp_expression_value_128, mod_consts[485]);
                Py_DECREF(tmp_expression_value_128);
                if (tmp_dict_value_16 == NULL) {
                    assert(ERROR_OCCURRED());

                    FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                    exception_lineno = 2445;
                    type_description_2 = "o";
                    goto dict_build_exception_13;
                }
                tmp_res = PyDict_SetItem(tmp_kw_defaults_16, tmp_dict_key_16, tmp_dict_value_16);
                Py_DECREF(tmp_dict_value_16);
                assert(!(tmp_res != 0));
                tmp_dict_key_16 = mod_consts[535];
                tmp_expression_value_129 = PyObject_GetItem(locals_hikari$api$rest$$$class__2_RESTClient_110, mod_consts[440]);

                if (tmp_expression_value_129 == NULL) {
                    if (CHECK_AND_CLEAR_KEY_ERROR_OCCURRED()) {
                        tmp_expression_value_129 = GET_STRING_DICT_VALUE(moduledict_hikari$api$rest, (Nuitka_StringObject *)mod_consts[440]);

                        if (unlikely(tmp_expression_value_129 == NULL)) {
                            tmp_expression_value_129 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[440]);
                        }

                        if (tmp_expression_value_129 == NULL) {
                            assert(ERROR_OCCURRED());

                            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                            exception_lineno = 2446;
                            type_description_2 = "o";
                            goto dict_build_exception_13;
                        }
                        Py_INCREF(tmp_expression_value_129);
                    } else {
                        goto dict_build_exception_13;
                    }
                }

                tmp_dict_value_16 = LOOKUP_ATTRIBUTE(tmp_expression_value_129, mod_consts[485]);
                Py_DECREF(tmp_expression_value_129);
                if (tmp_dict_value_16 == NULL) {
                    assert(ERROR_OCCURRED());

                    FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                    exception_lineno = 2446;
                    type_description_2 = "o";
                    goto dict_build_exception_13;
                }
                tmp_res = PyDict_SetItem(tmp_kw_defaults_16, tmp_dict_key_16, tmp_dict_value_16);
                Py_DECREF(tmp_dict_value_16);
                assert(!(tmp_res != 0));
                tmp_dict_key_16 = mod_consts[536];
                tmp_expression_value_130 = PyObject_GetItem(locals_hikari$api$rest$$$class__2_RESTClient_110, mod_consts[440]);

                if (tmp_expression_value_130 == NULL) {
                    if (CHECK_AND_CLEAR_KEY_ERROR_OCCURRED()) {
                        tmp_expression_value_130 = GET_STRING_DICT_VALUE(moduledict_hikari$api$rest, (Nuitka_StringObject *)mod_consts[440]);

                        if (unlikely(tmp_expression_value_130 == NULL)) {
                            tmp_expression_value_130 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[440]);
                        }

                        if (tmp_expression_value_130 == NULL) {
                            assert(ERROR_OCCURRED());

                            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                            exception_lineno = 2449;
                            type_description_2 = "o";
                            goto dict_build_exception_13;
                        }
                        Py_INCREF(tmp_expression_value_130);
                    } else {
                        goto dict_build_exception_13;
                    }
                }

                tmp_dict_value_16 = LOOKUP_ATTRIBUTE(tmp_expression_value_130, mod_consts[485]);
                Py_DECREF(tmp_expression_value_130);
                if (tmp_dict_value_16 == NULL) {
                    assert(ERROR_OCCURRED());

                    FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                    exception_lineno = 2449;
                    type_description_2 = "o";
                    goto dict_build_exception_13;
                }
                tmp_res = PyDict_SetItem(tmp_kw_defaults_16, tmp_dict_key_16, tmp_dict_value_16);
                Py_DECREF(tmp_dict_value_16);
                assert(!(tmp_res != 0));
                tmp_dict_key_16 = mod_consts[537];
                tmp_expression_value_131 = PyObject_GetItem(locals_hikari$api$rest$$$class__2_RESTClient_110, mod_consts[440]);

                if (tmp_expression_value_131 == NULL) {
                    if (CHECK_AND_CLEAR_KEY_ERROR_OCCURRED()) {
                        tmp_expression_value_131 = GET_STRING_DICT_VALUE(moduledict_hikari$api$rest, (Nuitka_StringObject *)mod_consts[440]);

                        if (unlikely(tmp_expression_value_131 == NULL)) {
                            tmp_expression_value_131 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[440]);
                        }

                        if (tmp_expression_value_131 == NULL) {
                            assert(ERROR_OCCURRED());

                            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                            exception_lineno = 2450;
                            type_description_2 = "o";
                            goto dict_build_exception_13;
                        }
                        Py_INCREF(tmp_expression_value_131);
                    } else {
                        goto dict_build_exception_13;
                    }
                }

                tmp_dict_value_16 = LOOKUP_ATTRIBUTE(tmp_expression_value_131, mod_consts[485]);
                Py_DECREF(tmp_expression_value_131);
                if (tmp_dict_value_16 == NULL) {
                    assert(ERROR_OCCURRED());

                    FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                    exception_lineno = 2450;
                    type_description_2 = "o";
                    goto dict_build_exception_13;
                }
                tmp_res = PyDict_SetItem(tmp_kw_defaults_16, tmp_dict_key_16, tmp_dict_value_16);
                Py_DECREF(tmp_dict_value_16);
                assert(!(tmp_res != 0));
                tmp_dict_key_16 = mod_consts[538];
                tmp_expression_value_132 = PyObject_GetItem(locals_hikari$api$rest$$$class__2_RESTClient_110, mod_consts[440]);

                if (tmp_expression_value_132 == NULL) {
                    if (CHECK_AND_CLEAR_KEY_ERROR_OCCURRED()) {
                        tmp_expression_value_132 = GET_STRING_DICT_VALUE(moduledict_hikari$api$rest, (Nuitka_StringObject *)mod_consts[440]);

                        if (unlikely(tmp_expression_value_132 == NULL)) {
                            tmp_expression_value_132 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[440]);
                        }

                        if (tmp_expression_value_132 == NULL) {
                            assert(ERROR_OCCURRED());

                            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                            exception_lineno = 2451;
                            type_description_2 = "o";
                            goto dict_build_exception_13;
                        }
                        Py_INCREF(tmp_expression_value_132);
                    } else {
                        goto dict_build_exception_13;
                    }
                }

                tmp_dict_value_16 = LOOKUP_ATTRIBUTE(tmp_expression_value_132, mod_consts[485]);
                Py_DECREF(tmp_expression_value_132);
                if (tmp_dict_value_16 == NULL) {
                    assert(ERROR_OCCURRED());

                    FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                    exception_lineno = 2451;
                    type_description_2 = "o";
                    goto dict_build_exception_13;
                }
                tmp_res = PyDict_SetItem(tmp_kw_defaults_16, tmp_dict_key_16, tmp_dict_value_16);
                Py_DECREF(tmp_dict_value_16);
                assert(!(tmp_res != 0));
                tmp_dict_key_16 = mod_consts[547];
                tmp_dict_value_16 = Py_False;
                tmp_res = PyDict_SetItem(tmp_kw_defaults_16, tmp_dict_key_16, tmp_dict_value_16);
                assert(!(tmp_res != 0));
                tmp_dict_key_16 = mod_consts[541];
                tmp_expression_value_133 = PyObject_GetItem(locals_hikari$api$rest$$$class__2_RESTClient_110, mod_consts[440]);

                if (tmp_expression_value_133 == NULL) {
                    if (CHECK_AND_CLEAR_KEY_ERROR_OCCURRED()) {
                        tmp_expression_value_133 = GET_STRING_DICT_VALUE(moduledict_hikari$api$rest, (Nuitka_StringObject *)mod_consts[440]);

                        if (unlikely(tmp_expression_value_133 == NULL)) {
                            tmp_expression_value_133 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[440]);
                        }

                        if (tmp_expression_value_133 == NULL) {
                            assert(ERROR_OCCURRED());

                            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                            exception_lineno = 2453;
                            type_description_2 = "o";
                            goto dict_build_exception_13;
                        }
                        Py_INCREF(tmp_expression_value_133);
                    } else {
                        goto dict_build_exception_13;
                    }
                }

                tmp_dict_value_16 = LOOKUP_ATTRIBUTE(tmp_expression_value_133, mod_consts[485]);
                Py_DECREF(tmp_expression_value_133);
                if (tmp_dict_value_16 == NULL) {
                    assert(ERROR_OCCURRED());

                    FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                    exception_lineno = 2453;
                    type_description_2 = "o";
                    goto dict_build_exception_13;
                }
                tmp_res = PyDict_SetItem(tmp_kw_defaults_16, tmp_dict_key_16, tmp_dict_value_16);
                Py_DECREF(tmp_dict_value_16);
                assert(!(tmp_res != 0));
                tmp_dict_key_16 = mod_consts[543];
                tmp_expression_value_134 = PyObject_GetItem(locals_hikari$api$rest$$$class__2_RESTClient_110, mod_consts[440]);

                if (tmp_expression_value_134 == NULL) {
                    if (CHECK_AND_CLEAR_KEY_ERROR_OCCURRED()) {
                        tmp_expression_value_134 = GET_STRING_DICT_VALUE(moduledict_hikari$api$rest, (Nuitka_StringObject *)mod_consts[440]);

                        if (unlikely(tmp_expression_value_134 == NULL)) {
                            tmp_expression_value_134 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[440]);
                        }

                        if (tmp_expression_value_134 == NULL) {
                            assert(ERROR_OCCURRED());

                            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                            exception_lineno = 2456;
                            type_description_2 = "o";
                            goto dict_build_exception_13;
                        }
                        Py_INCREF(tmp_expression_value_134);
                    } else {
                        goto dict_build_exception_13;
                    }
                }

                tmp_dict_value_16 = LOOKUP_ATTRIBUTE(tmp_expression_value_134, mod_consts[485]);
                Py_DECREF(tmp_expression_value_134);
                if (tmp_dict_value_16 == NULL) {
                    assert(ERROR_OCCURRED());

                    FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                    exception_lineno = 2456;
                    type_description_2 = "o";
                    goto dict_build_exception_13;
                }
                tmp_res = PyDict_SetItem(tmp_kw_defaults_16, tmp_dict_key_16, tmp_dict_value_16);
                Py_DECREF(tmp_dict_value_16);
                assert(!(tmp_res != 0));
                tmp_dict_key_16 = mod_consts[544];
                tmp_expression_value_135 = PyObject_GetItem(locals_hikari$api$rest$$$class__2_RESTClient_110, mod_consts[440]);

                if (tmp_expression_value_135 == NULL) {
                    if (CHECK_AND_CLEAR_KEY_ERROR_OCCURRED()) {
                        tmp_expression_value_135 = GET_STRING_DICT_VALUE(moduledict_hikari$api$rest, (Nuitka_StringObject *)mod_consts[440]);

                        if (unlikely(tmp_expression_value_135 == NULL)) {
                            tmp_expression_value_135 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[440]);
                        }

                        if (tmp_expression_value_135 == NULL) {
                            assert(ERROR_OCCURRED());

                            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                            exception_lineno = 2459;
                            type_description_2 = "o";
                            goto dict_build_exception_13;
                        }
                        Py_INCREF(tmp_expression_value_135);
                    } else {
                        goto dict_build_exception_13;
                    }
                }

                tmp_dict_value_16 = LOOKUP_ATTRIBUTE(tmp_expression_value_135, mod_consts[485]);
                Py_DECREF(tmp_expression_value_135);
                if (tmp_dict_value_16 == NULL) {
                    assert(ERROR_OCCURRED());

                    FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                    exception_lineno = 2459;
                    type_description_2 = "o";
                    goto dict_build_exception_13;
                }
                tmp_res = PyDict_SetItem(tmp_kw_defaults_16, tmp_dict_key_16, tmp_dict_value_16);
                Py_DECREF(tmp_dict_value_16);
                assert(!(tmp_res != 0));
            }
            goto dict_build_noexception_13;
            // Exception handling pass through code for dict_build:
            dict_build_exception_13:;
            Py_DECREF(tmp_called_value_34);
            Py_DECREF(tmp_defaults_9);
            Py_DECREF(tmp_kw_defaults_16);
            goto frame_exception_exit_3;
            // Finished with no exception for dict_build:
            dict_build_noexception_13:;
            tmp_annotations_49 = PyDict_Copy(mod_consts[570]);


            tmp_args_element_value_59 = MAKE_FUNCTION_hikari$api$rest$$$function__45_edit_webhook_message(tmp_defaults_9, tmp_kw_defaults_16, tmp_annotations_49);

            frame_862833cacd6e5ba73c351f8d132a7b6b_3->m_frame.f_lineno = 2435;
            tmp_dictset_value = CALL_FUNCTION_WITH_SINGLE_ARG(tmp_called_value_34, tmp_args_element_value_59);
            Py_DECREF(tmp_called_value_34);
            Py_DECREF(tmp_args_element_value_59);
            if (tmp_dictset_value == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 2435;
                type_description_2 = "o";
                goto frame_exception_exit_3;
            }
            tmp_res = PyObject_SetItem(locals_hikari$api$rest$$$class__2_RESTClient_110, mod_consts[105], tmp_dictset_value);
            Py_DECREF(tmp_dictset_value);
            if (tmp_res != 0) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 2436;
                type_description_2 = "o";
                goto frame_exception_exit_3;
            }
        }
        {
            PyObject *tmp_called_instance_29;
            PyObject *tmp_args_element_value_60;
            PyObject *tmp_annotations_50;
            tmp_called_instance_29 = PyObject_GetItem(locals_hikari$api$rest$$$class__2_RESTClient_110, mod_consts[431]);

            if (tmp_called_instance_29 == NULL) {
                if (CHECK_AND_CLEAR_KEY_ERROR_OCCURRED()) {
                    tmp_called_instance_29 = GET_STRING_DICT_VALUE(moduledict_hikari$api$rest, (Nuitka_StringObject *)mod_consts[431]);

                    if (unlikely(tmp_called_instance_29 == NULL)) {
                        tmp_called_instance_29 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[431]);
                    }

                    if (tmp_called_instance_29 == NULL) {
                        assert(ERROR_OCCURRED());

                        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                        exception_lineno = 2610;
                        type_description_2 = "o";
                        goto frame_exception_exit_3;
                    }
                    Py_INCREF(tmp_called_instance_29);
                } else {
                    goto frame_exception_exit_3;
                }
            }

            tmp_annotations_50 = PyDict_Copy(mod_consts[571]);


            tmp_args_element_value_60 = MAKE_FUNCTION_hikari$api$rest$$$function__46_delete_webhook_message(tmp_annotations_50);

            frame_862833cacd6e5ba73c351f8d132a7b6b_3->m_frame.f_lineno = 2610;
            tmp_dictset_value = CALL_METHOD_WITH_SINGLE_ARG(tmp_called_instance_29, mod_consts[457], tmp_args_element_value_60);
            Py_DECREF(tmp_called_instance_29);
            Py_DECREF(tmp_args_element_value_60);
            if (tmp_dictset_value == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 2610;
                type_description_2 = "o";
                goto frame_exception_exit_3;
            }
            tmp_res = PyObject_SetItem(locals_hikari$api$rest$$$class__2_RESTClient_110, mod_consts[108], tmp_dictset_value);
            Py_DECREF(tmp_dictset_value);
            if (tmp_res != 0) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 2611;
                type_description_2 = "o";
                goto frame_exception_exit_3;
            }
        }
        {
            PyObject *tmp_called_instance_30;
            PyObject *tmp_args_element_value_61;
            PyObject *tmp_annotations_51;
            tmp_called_instance_30 = PyObject_GetItem(locals_hikari$api$rest$$$class__2_RESTClient_110, mod_consts[431]);

            if (tmp_called_instance_30 == NULL) {
                if (CHECK_AND_CLEAR_KEY_ERROR_OCCURRED()) {
                    tmp_called_instance_30 = GET_STRING_DICT_VALUE(moduledict_hikari$api$rest, (Nuitka_StringObject *)mod_consts[431]);

                    if (unlikely(tmp_called_instance_30 == NULL)) {
                        tmp_called_instance_30 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[431]);
                    }

                    if (tmp_called_instance_30 == NULL) {
                        assert(ERROR_OCCURRED());

                        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                        exception_lineno = 2652;
                        type_description_2 = "o";
                        goto frame_exception_exit_3;
                    }
                    Py_INCREF(tmp_called_instance_30);
                } else {
                    goto frame_exception_exit_3;
                }
            }

            tmp_annotations_51 = PyDict_Copy(mod_consts[572]);


            tmp_args_element_value_61 = MAKE_FUNCTION_hikari$api$rest$$$function__47_fetch_gateway_url(tmp_annotations_51);

            frame_862833cacd6e5ba73c351f8d132a7b6b_3->m_frame.f_lineno = 2652;
            tmp_dictset_value = CALL_METHOD_WITH_SINGLE_ARG(tmp_called_instance_30, mod_consts[457], tmp_args_element_value_61);
            Py_DECREF(tmp_called_instance_30);
            Py_DECREF(tmp_args_element_value_61);
            if (tmp_dictset_value == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 2652;
                type_description_2 = "o";
                goto frame_exception_exit_3;
            }
            tmp_res = PyObject_SetItem(locals_hikari$api$rest$$$class__2_RESTClient_110, mod_consts[111], tmp_dictset_value);
            Py_DECREF(tmp_dictset_value);
            if (tmp_res != 0) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 2653;
                type_description_2 = "o";
                goto frame_exception_exit_3;
            }
        }
        {
            PyObject *tmp_called_instance_31;
            PyObject *tmp_args_element_value_62;
            PyObject *tmp_annotations_52;
            tmp_called_instance_31 = PyObject_GetItem(locals_hikari$api$rest$$$class__2_RESTClient_110, mod_consts[431]);

            if (tmp_called_instance_31 == NULL) {
                if (CHECK_AND_CLEAR_KEY_ERROR_OCCURRED()) {
                    tmp_called_instance_31 = GET_STRING_DICT_VALUE(moduledict_hikari$api$rest, (Nuitka_StringObject *)mod_consts[431]);

                    if (unlikely(tmp_called_instance_31 == NULL)) {
                        tmp_called_instance_31 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[431]);
                    }

                    if (tmp_called_instance_31 == NULL) {
                        assert(ERROR_OCCURRED());

                        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                        exception_lineno = 2676;
                        type_description_2 = "o";
                        goto frame_exception_exit_3;
                    }
                    Py_INCREF(tmp_called_instance_31);
                } else {
                    goto frame_exception_exit_3;
                }
            }

            tmp_annotations_52 = PyDict_Copy(mod_consts[573]);


            tmp_args_element_value_62 = MAKE_FUNCTION_hikari$api$rest$$$function__48_fetch_gateway_bot_info(tmp_annotations_52);

            frame_862833cacd6e5ba73c351f8d132a7b6b_3->m_frame.f_lineno = 2676;
            tmp_dictset_value = CALL_METHOD_WITH_SINGLE_ARG(tmp_called_instance_31, mod_consts[457], tmp_args_element_value_62);
            Py_DECREF(tmp_called_instance_31);
            Py_DECREF(tmp_args_element_value_62);
            if (tmp_dictset_value == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 2676;
                type_description_2 = "o";
                goto frame_exception_exit_3;
            }
            tmp_res = PyObject_SetItem(locals_hikari$api$rest$$$class__2_RESTClient_110, mod_consts[114], tmp_dictset_value);
            Py_DECREF(tmp_dictset_value);
            if (tmp_res != 0) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 2677;
                type_description_2 = "o";
                goto frame_exception_exit_3;
            }
        }
        {
            PyObject *tmp_called_instance_32;
            PyObject *tmp_args_element_value_63;
            PyObject *tmp_annotations_53;
            tmp_called_instance_32 = PyObject_GetItem(locals_hikari$api$rest$$$class__2_RESTClient_110, mod_consts[431]);

            if (tmp_called_instance_32 == NULL) {
                if (CHECK_AND_CLEAR_KEY_ERROR_OCCURRED()) {
                    tmp_called_instance_32 = GET_STRING_DICT_VALUE(moduledict_hikari$api$rest, (Nuitka_StringObject *)mod_consts[431]);

                    if (unlikely(tmp_called_instance_32 == NULL)) {
                        tmp_called_instance_32 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[431]);
                    }

                    if (tmp_called_instance_32 == NULL) {
                        assert(ERROR_OCCURRED());

                        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                        exception_lineno = 2704;
                        type_description_2 = "o";
                        goto frame_exception_exit_3;
                    }
                    Py_INCREF(tmp_called_instance_32);
                } else {
                    goto frame_exception_exit_3;
                }
            }

            tmp_annotations_53 = PyDict_Copy(mod_consts[574]);


            tmp_args_element_value_63 = MAKE_FUNCTION_hikari$api$rest$$$function__49_fetch_invite(tmp_annotations_53);

            frame_862833cacd6e5ba73c351f8d132a7b6b_3->m_frame.f_lineno = 2704;
            tmp_dictset_value = CALL_METHOD_WITH_SINGLE_ARG(tmp_called_instance_32, mod_consts[457], tmp_args_element_value_63);
            Py_DECREF(tmp_called_instance_32);
            Py_DECREF(tmp_args_element_value_63);
            if (tmp_dictset_value == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 2704;
                type_description_2 = "o";
                goto frame_exception_exit_3;
            }
            tmp_res = PyObject_SetItem(locals_hikari$api$rest$$$class__2_RESTClient_110, mod_consts[117], tmp_dictset_value);
            Py_DECREF(tmp_dictset_value);
            if (tmp_res != 0) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 2705;
                type_description_2 = "o";
                goto frame_exception_exit_3;
            }
        }
        {
            PyObject *tmp_called_instance_33;
            PyObject *tmp_args_element_value_64;
            PyObject *tmp_annotations_54;
            tmp_called_instance_33 = PyObject_GetItem(locals_hikari$api$rest$$$class__2_RESTClient_110, mod_consts[431]);

            if (tmp_called_instance_33 == NULL) {
                if (CHECK_AND_CLEAR_KEY_ERROR_OCCURRED()) {
                    tmp_called_instance_33 = GET_STRING_DICT_VALUE(moduledict_hikari$api$rest, (Nuitka_StringObject *)mod_consts[431]);

                    if (unlikely(tmp_called_instance_33 == NULL)) {
                        tmp_called_instance_33 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[431]);
                    }

                    if (tmp_called_instance_33 == NULL) {
                        assert(ERROR_OCCURRED());

                        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                        exception_lineno = 2740;
                        type_description_2 = "o";
                        goto frame_exception_exit_3;
                    }
                    Py_INCREF(tmp_called_instance_33);
                } else {
                    goto frame_exception_exit_3;
                }
            }

            tmp_annotations_54 = PyDict_Copy(mod_consts[574]);


            tmp_args_element_value_64 = MAKE_FUNCTION_hikari$api$rest$$$function__50_delete_invite(tmp_annotations_54);

            frame_862833cacd6e5ba73c351f8d132a7b6b_3->m_frame.f_lineno = 2740;
            tmp_dictset_value = CALL_METHOD_WITH_SINGLE_ARG(tmp_called_instance_33, mod_consts[457], tmp_args_element_value_64);
            Py_DECREF(tmp_called_instance_33);
            Py_DECREF(tmp_args_element_value_64);
            if (tmp_dictset_value == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 2740;
                type_description_2 = "o";
                goto frame_exception_exit_3;
            }
            tmp_res = PyObject_SetItem(locals_hikari$api$rest$$$class__2_RESTClient_110, mod_consts[120], tmp_dictset_value);
            Py_DECREF(tmp_dictset_value);
            if (tmp_res != 0) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 2741;
                type_description_2 = "o";
                goto frame_exception_exit_3;
            }
        }
        {
            PyObject *tmp_called_instance_34;
            PyObject *tmp_args_element_value_65;
            PyObject *tmp_annotations_55;
            tmp_called_instance_34 = PyObject_GetItem(locals_hikari$api$rest$$$class__2_RESTClient_110, mod_consts[431]);

            if (tmp_called_instance_34 == NULL) {
                if (CHECK_AND_CLEAR_KEY_ERROR_OCCURRED()) {
                    tmp_called_instance_34 = GET_STRING_DICT_VALUE(moduledict_hikari$api$rest, (Nuitka_StringObject *)mod_consts[431]);

                    if (unlikely(tmp_called_instance_34 == NULL)) {
                        tmp_called_instance_34 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[431]);
                    }

                    if (tmp_called_instance_34 == NULL) {
                        assert(ERROR_OCCURRED());

                        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                        exception_lineno = 2780;
                        type_description_2 = "o";
                        goto frame_exception_exit_3;
                    }
                    Py_INCREF(tmp_called_instance_34);
                } else {
                    goto frame_exception_exit_3;
                }
            }

            tmp_annotations_55 = PyDict_Copy(mod_consts[575]);


            tmp_args_element_value_65 = MAKE_FUNCTION_hikari$api$rest$$$function__51_fetch_my_user(tmp_annotations_55);

            frame_862833cacd6e5ba73c351f8d132a7b6b_3->m_frame.f_lineno = 2780;
            tmp_dictset_value = CALL_METHOD_WITH_SINGLE_ARG(tmp_called_instance_34, mod_consts[457], tmp_args_element_value_65);
            Py_DECREF(tmp_called_instance_34);
            Py_DECREF(tmp_args_element_value_65);
            if (tmp_dictset_value == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 2780;
                type_description_2 = "o";
                goto frame_exception_exit_3;
            }
            tmp_res = PyObject_SetItem(locals_hikari$api$rest$$$class__2_RESTClient_110, mod_consts[123], tmp_dictset_value);
            Py_DECREF(tmp_dictset_value);
            if (tmp_res != 0) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 2781;
                type_description_2 = "o";
                goto frame_exception_exit_3;
            }
        }
        {
            PyObject *tmp_called_value_35;
            PyObject *tmp_expression_value_136;
            PyObject *tmp_args_element_value_66;
            PyObject *tmp_kw_defaults_17;
            PyObject *tmp_dict_key_17;
            PyObject *tmp_dict_value_17;
            PyObject *tmp_expression_value_137;
            PyObject *tmp_annotations_56;
            tmp_expression_value_136 = PyObject_GetItem(locals_hikari$api$rest$$$class__2_RESTClient_110, mod_consts[431]);

            if (tmp_expression_value_136 == NULL) {
                if (CHECK_AND_CLEAR_KEY_ERROR_OCCURRED()) {
                    tmp_expression_value_136 = GET_STRING_DICT_VALUE(moduledict_hikari$api$rest, (Nuitka_StringObject *)mod_consts[431]);

                    if (unlikely(tmp_expression_value_136 == NULL)) {
                        tmp_expression_value_136 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[431]);
                    }

                    if (tmp_expression_value_136 == NULL) {
                        assert(ERROR_OCCURRED());

                        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                        exception_lineno = 2808;
                        type_description_2 = "o";
                        goto frame_exception_exit_3;
                    }
                    Py_INCREF(tmp_expression_value_136);
                } else {
                    goto frame_exception_exit_3;
                }
            }

            tmp_called_value_35 = LOOKUP_ATTRIBUTE(tmp_expression_value_136, mod_consts[457]);
            Py_DECREF(tmp_expression_value_136);
            if (tmp_called_value_35 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 2808;
                type_description_2 = "o";
                goto frame_exception_exit_3;
            }
            tmp_dict_key_17 = mod_consts[566];
            tmp_expression_value_137 = PyObject_GetItem(locals_hikari$api$rest$$$class__2_RESTClient_110, mod_consts[440]);

            if (tmp_expression_value_137 == NULL) {
                if (CHECK_AND_CLEAR_KEY_ERROR_OCCURRED()) {
                    tmp_expression_value_137 = GET_STRING_DICT_VALUE(moduledict_hikari$api$rest, (Nuitka_StringObject *)mod_consts[440]);

                    if (unlikely(tmp_expression_value_137 == NULL)) {
                        tmp_expression_value_137 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[440]);
                    }

                    if (tmp_expression_value_137 == NULL) {
                        assert(ERROR_OCCURRED());

                        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
                        Py_DECREF(tmp_called_value_35);

                        exception_lineno = 2812;
                        type_description_2 = "o";
                        goto frame_exception_exit_3;
                    }
                    Py_INCREF(tmp_expression_value_137);
                } else {
                    goto frame_exception_exit_3;
                }
            }

            tmp_dict_value_17 = LOOKUP_ATTRIBUTE(tmp_expression_value_137, mod_consts[485]);
            Py_DECREF(tmp_expression_value_137);
            if (tmp_dict_value_17 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
                Py_DECREF(tmp_called_value_35);

                exception_lineno = 2812;
                type_description_2 = "o";
                goto frame_exception_exit_3;
            }
            tmp_kw_defaults_17 = _PyDict_NewPresized( 2 );
            {
                PyObject *tmp_expression_value_138;
                tmp_res = PyDict_SetItem(tmp_kw_defaults_17, tmp_dict_key_17, tmp_dict_value_17);
                Py_DECREF(tmp_dict_value_17);
                assert(!(tmp_res != 0));
                tmp_dict_key_17 = mod_consts[557];
                tmp_expression_value_138 = PyObject_GetItem(locals_hikari$api$rest$$$class__2_RESTClient_110, mod_consts[440]);

                if (tmp_expression_value_138 == NULL) {
                    if (CHECK_AND_CLEAR_KEY_ERROR_OCCURRED()) {
                        tmp_expression_value_138 = GET_STRING_DICT_VALUE(moduledict_hikari$api$rest, (Nuitka_StringObject *)mod_consts[440]);

                        if (unlikely(tmp_expression_value_138 == NULL)) {
                            tmp_expression_value_138 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[440]);
                        }

                        if (tmp_expression_value_138 == NULL) {
                            assert(ERROR_OCCURRED());

                            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                            exception_lineno = 2813;
                            type_description_2 = "o";
                            goto dict_build_exception_14;
                        }
                        Py_INCREF(tmp_expression_value_138);
                    } else {
                        goto dict_build_exception_14;
                    }
                }

                tmp_dict_value_17 = LOOKUP_ATTRIBUTE(tmp_expression_value_138, mod_consts[485]);
                Py_DECREF(tmp_expression_value_138);
                if (tmp_dict_value_17 == NULL) {
                    assert(ERROR_OCCURRED());

                    FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                    exception_lineno = 2813;
                    type_description_2 = "o";
                    goto dict_build_exception_14;
                }
                tmp_res = PyDict_SetItem(tmp_kw_defaults_17, tmp_dict_key_17, tmp_dict_value_17);
                Py_DECREF(tmp_dict_value_17);
                assert(!(tmp_res != 0));
            }
            goto dict_build_noexception_14;
            // Exception handling pass through code for dict_build:
            dict_build_exception_14:;
            Py_DECREF(tmp_called_value_35);
            Py_DECREF(tmp_kw_defaults_17);
            goto frame_exception_exit_3;
            // Finished with no exception for dict_build:
            dict_build_noexception_14:;
            tmp_annotations_56 = PyDict_Copy(mod_consts[576]);


            tmp_args_element_value_66 = MAKE_FUNCTION_hikari$api$rest$$$function__52_edit_my_user(tmp_kw_defaults_17, tmp_annotations_56);

            frame_862833cacd6e5ba73c351f8d132a7b6b_3->m_frame.f_lineno = 2808;
            tmp_dictset_value = CALL_FUNCTION_WITH_SINGLE_ARG(tmp_called_value_35, tmp_args_element_value_66);
            Py_DECREF(tmp_called_value_35);
            Py_DECREF(tmp_args_element_value_66);
            if (tmp_dictset_value == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 2808;
                type_description_2 = "o";
                goto frame_exception_exit_3;
            }
            tmp_res = PyObject_SetItem(locals_hikari$api$rest$$$class__2_RESTClient_110, mod_consts[126], tmp_dictset_value);
            Py_DECREF(tmp_dictset_value);
            if (tmp_res != 0) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 2809;
                type_description_2 = "o";
                goto frame_exception_exit_3;
            }
        }
        {
            PyObject *tmp_called_instance_35;
            PyObject *tmp_args_element_value_67;
            PyObject *tmp_annotations_57;
            tmp_called_instance_35 = PyObject_GetItem(locals_hikari$api$rest$$$class__2_RESTClient_110, mod_consts[431]);

            if (tmp_called_instance_35 == NULL) {
                if (CHECK_AND_CLEAR_KEY_ERROR_OCCURRED()) {
                    tmp_called_instance_35 = GET_STRING_DICT_VALUE(moduledict_hikari$api$rest, (Nuitka_StringObject *)mod_consts[431]);

                    if (unlikely(tmp_called_instance_35 == NULL)) {
                        tmp_called_instance_35 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[431]);
                    }

                    if (tmp_called_instance_35 == NULL) {
                        assert(ERROR_OCCURRED());

                        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                        exception_lineno = 2843;
                        type_description_2 = "o";
                        goto frame_exception_exit_3;
                    }
                    Py_INCREF(tmp_called_instance_35);
                } else {
                    goto frame_exception_exit_3;
                }
            }

            tmp_annotations_57 = PyDict_Copy(mod_consts[577]);


            tmp_args_element_value_67 = MAKE_FUNCTION_hikari$api$rest$$$function__53_fetch_my_connections(tmp_annotations_57);

            frame_862833cacd6e5ba73c351f8d132a7b6b_3->m_frame.f_lineno = 2843;
            tmp_dictset_value = CALL_METHOD_WITH_SINGLE_ARG(tmp_called_instance_35, mod_consts[457], tmp_args_element_value_67);
            Py_DECREF(tmp_called_instance_35);
            Py_DECREF(tmp_args_element_value_67);
            if (tmp_dictset_value == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 2843;
                type_description_2 = "o";
                goto frame_exception_exit_3;
            }
            tmp_res = PyObject_SetItem(locals_hikari$api$rest$$$class__2_RESTClient_110, mod_consts[129], tmp_dictset_value);
            Py_DECREF(tmp_dictset_value);
            if (tmp_res != 0) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 2844;
                type_description_2 = "o";
                goto frame_exception_exit_3;
            }
        }
        {
            PyObject *tmp_called_value_36;
            PyObject *tmp_expression_value_139;
            PyObject *tmp_args_element_value_68;
            PyObject *tmp_kw_defaults_18;
            PyObject *tmp_dict_key_18;
            PyObject *tmp_dict_value_18;
            PyObject *tmp_annotations_58;
            tmp_expression_value_139 = PyObject_GetItem(locals_hikari$api$rest$$$class__2_RESTClient_110, mod_consts[431]);

            if (tmp_expression_value_139 == NULL) {
                if (CHECK_AND_CLEAR_KEY_ERROR_OCCURRED()) {
                    tmp_expression_value_139 = GET_STRING_DICT_VALUE(moduledict_hikari$api$rest, (Nuitka_StringObject *)mod_consts[431]);

                    if (unlikely(tmp_expression_value_139 == NULL)) {
                        tmp_expression_value_139 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[431]);
                    }

                    if (tmp_expression_value_139 == NULL) {
                        assert(ERROR_OCCURRED());

                        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                        exception_lineno = 2871;
                        type_description_2 = "o";
                        goto frame_exception_exit_3;
                    }
                    Py_INCREF(tmp_expression_value_139);
                } else {
                    goto frame_exception_exit_3;
                }
            }

            tmp_called_value_36 = LOOKUP_ATTRIBUTE(tmp_expression_value_139, mod_consts[457]);
            Py_DECREF(tmp_expression_value_139);
            if (tmp_called_value_36 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 2871;
                type_description_2 = "o";
                goto frame_exception_exit_3;
            }
            tmp_dict_key_18 = mod_consts[578];
            tmp_dict_value_18 = Py_False;
            tmp_kw_defaults_18 = _PyDict_NewPresized( 2 );
            {
                PyObject *tmp_expression_value_140;
                tmp_res = PyDict_SetItem(tmp_kw_defaults_18, tmp_dict_key_18, tmp_dict_value_18);
                assert(!(tmp_res != 0));
                tmp_dict_key_18 = mod_consts[579];
                tmp_expression_value_140 = PyObject_GetItem(locals_hikari$api$rest$$$class__2_RESTClient_110, mod_consts[440]);

                if (tmp_expression_value_140 == NULL) {
                    if (CHECK_AND_CLEAR_KEY_ERROR_OCCURRED()) {
                        tmp_expression_value_140 = GET_STRING_DICT_VALUE(moduledict_hikari$api$rest, (Nuitka_StringObject *)mod_consts[440]);

                        if (unlikely(tmp_expression_value_140 == NULL)) {
                            tmp_expression_value_140 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[440]);
                        }

                        if (tmp_expression_value_140 == NULL) {
                            assert(ERROR_OCCURRED());

                            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                            exception_lineno = 2876;
                            type_description_2 = "o";
                            goto dict_build_exception_15;
                        }
                        Py_INCREF(tmp_expression_value_140);
                    } else {
                        goto dict_build_exception_15;
                    }
                }

                tmp_dict_value_18 = LOOKUP_ATTRIBUTE(tmp_expression_value_140, mod_consts[485]);
                Py_DECREF(tmp_expression_value_140);
                if (tmp_dict_value_18 == NULL) {
                    assert(ERROR_OCCURRED());

                    FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                    exception_lineno = 2876;
                    type_description_2 = "o";
                    goto dict_build_exception_15;
                }
                tmp_res = PyDict_SetItem(tmp_kw_defaults_18, tmp_dict_key_18, tmp_dict_value_18);
                Py_DECREF(tmp_dict_value_18);
                assert(!(tmp_res != 0));
            }
            goto dict_build_noexception_15;
            // Exception handling pass through code for dict_build:
            dict_build_exception_15:;
            Py_DECREF(tmp_called_value_36);
            Py_DECREF(tmp_kw_defaults_18);
            goto frame_exception_exit_3;
            // Finished with no exception for dict_build:
            dict_build_noexception_15:;
            tmp_annotations_58 = PyDict_Copy(mod_consts[580]);


            tmp_args_element_value_68 = MAKE_FUNCTION_hikari$api$rest$$$function__54_fetch_my_guilds(tmp_kw_defaults_18, tmp_annotations_58);

            frame_862833cacd6e5ba73c351f8d132a7b6b_3->m_frame.f_lineno = 2871;
            tmp_dictset_value = CALL_FUNCTION_WITH_SINGLE_ARG(tmp_called_value_36, tmp_args_element_value_68);
            Py_DECREF(tmp_called_value_36);
            Py_DECREF(tmp_args_element_value_68);
            if (tmp_dictset_value == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 2871;
                type_description_2 = "o";
                goto frame_exception_exit_3;
            }
            tmp_res = PyObject_SetItem(locals_hikari$api$rest$$$class__2_RESTClient_110, mod_consts[582], tmp_dictset_value);
            Py_DECREF(tmp_dictset_value);
            if (tmp_res != 0) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 2872;
                type_description_2 = "o";
                goto frame_exception_exit_3;
            }
        }
        {
            PyObject *tmp_called_instance_36;
            PyObject *tmp_args_element_value_69;
            PyObject *tmp_annotations_59;
            tmp_called_instance_36 = PyObject_GetItem(locals_hikari$api$rest$$$class__2_RESTClient_110, mod_consts[431]);

            if (tmp_called_instance_36 == NULL) {
                if (CHECK_AND_CLEAR_KEY_ERROR_OCCURRED()) {
                    tmp_called_instance_36 = GET_STRING_DICT_VALUE(moduledict_hikari$api$rest, (Nuitka_StringObject *)mod_consts[431]);

                    if (unlikely(tmp_called_instance_36 == NULL)) {
                        tmp_called_instance_36 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[431]);
                    }

                    if (tmp_called_instance_36 == NULL) {
                        assert(ERROR_OCCURRED());

                        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                        exception_lineno = 2927;
                        type_description_2 = "o";
                        goto frame_exception_exit_3;
                    }
                    Py_INCREF(tmp_called_instance_36);
                } else {
                    goto frame_exception_exit_3;
                }
            }

            tmp_annotations_59 = PyDict_Copy(mod_consts[584]);


            tmp_args_element_value_69 = MAKE_FUNCTION_hikari$api$rest$$$function__55_leave_guild(tmp_annotations_59);

            frame_862833cacd6e5ba73c351f8d132a7b6b_3->m_frame.f_lineno = 2927;
            tmp_dictset_value = CALL_METHOD_WITH_SINGLE_ARG(tmp_called_instance_36, mod_consts[457], tmp_args_element_value_69);
            Py_DECREF(tmp_called_instance_36);
            Py_DECREF(tmp_args_element_value_69);
            if (tmp_dictset_value == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 2927;
                type_description_2 = "o";
                goto frame_exception_exit_3;
            }
            tmp_res = PyObject_SetItem(locals_hikari$api$rest$$$class__2_RESTClient_110, mod_consts[132], tmp_dictset_value);
            Py_DECREF(tmp_dictset_value);
            if (tmp_res != 0) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 2928;
                type_description_2 = "o";
                goto frame_exception_exit_3;
            }
        }
        {
            PyObject *tmp_called_instance_37;
            PyObject *tmp_args_element_value_70;
            PyObject *tmp_annotations_60;
            tmp_called_instance_37 = PyObject_GetItem(locals_hikari$api$rest$$$class__2_RESTClient_110, mod_consts[431]);

            if (tmp_called_instance_37 == NULL) {
                if (CHECK_AND_CLEAR_KEY_ERROR_OCCURRED()) {
                    tmp_called_instance_37 = GET_STRING_DICT_VALUE(moduledict_hikari$api$rest, (Nuitka_StringObject *)mod_consts[431]);

                    if (unlikely(tmp_called_instance_37 == NULL)) {
                        tmp_called_instance_37 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[431]);
                    }

                    if (tmp_called_instance_37 == NULL) {
                        assert(ERROR_OCCURRED());

                        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                        exception_lineno = 2958;
                        type_description_2 = "o";
                        goto frame_exception_exit_3;
                    }
                    Py_INCREF(tmp_called_instance_37);
                } else {
                    goto frame_exception_exit_3;
                }
            }

            tmp_annotations_60 = PyDict_Copy(mod_consts[585]);


            tmp_args_element_value_70 = MAKE_FUNCTION_hikari$api$rest$$$function__56_create_dm_channel(tmp_annotations_60);

            frame_862833cacd6e5ba73c351f8d132a7b6b_3->m_frame.f_lineno = 2958;
            tmp_dictset_value = CALL_METHOD_WITH_SINGLE_ARG(tmp_called_instance_37, mod_consts[457], tmp_args_element_value_70);
            Py_DECREF(tmp_called_instance_37);
            Py_DECREF(tmp_args_element_value_70);
            if (tmp_dictset_value == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 2958;
                type_description_2 = "o";
                goto frame_exception_exit_3;
            }
            tmp_res = PyObject_SetItem(locals_hikari$api$rest$$$class__2_RESTClient_110, mod_consts[135], tmp_dictset_value);
            Py_DECREF(tmp_dictset_value);
            if (tmp_res != 0) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 2959;
                type_description_2 = "o";
                goto frame_exception_exit_3;
            }
        }
        {
            PyObject *tmp_called_instance_38;
            PyObject *tmp_args_element_value_71;
            PyObject *tmp_annotations_61;
            tmp_called_instance_38 = PyObject_GetItem(locals_hikari$api$rest$$$class__2_RESTClient_110, mod_consts[431]);

            if (tmp_called_instance_38 == NULL) {
                if (CHECK_AND_CLEAR_KEY_ERROR_OCCURRED()) {
                    tmp_called_instance_38 = GET_STRING_DICT_VALUE(moduledict_hikari$api$rest, (Nuitka_StringObject *)mod_consts[431]);

                    if (unlikely(tmp_called_instance_38 == NULL)) {
                        tmp_called_instance_38 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[431]);
                    }

                    if (tmp_called_instance_38 == NULL) {
                        assert(ERROR_OCCURRED());

                        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                        exception_lineno = 2995;
                        type_description_2 = "o";
                        goto frame_exception_exit_3;
                    }
                    Py_INCREF(tmp_called_instance_38);
                } else {
                    goto frame_exception_exit_3;
                }
            }

            tmp_annotations_61 = PyDict_Copy(mod_consts[586]);


            tmp_args_element_value_71 = MAKE_FUNCTION_hikari$api$rest$$$function__57_fetch_application(tmp_annotations_61);

            frame_862833cacd6e5ba73c351f8d132a7b6b_3->m_frame.f_lineno = 2995;
            tmp_dictset_value = CALL_METHOD_WITH_SINGLE_ARG(tmp_called_instance_38, mod_consts[457], tmp_args_element_value_71);
            Py_DECREF(tmp_called_instance_38);
            Py_DECREF(tmp_args_element_value_71);
            if (tmp_dictset_value == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 2995;
                type_description_2 = "o";
                goto frame_exception_exit_3;
            }
            tmp_res = PyObject_SetItem(locals_hikari$api$rest$$$class__2_RESTClient_110, mod_consts[138], tmp_dictset_value);
            Py_DECREF(tmp_dictset_value);
            if (tmp_res != 0) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 2996;
                type_description_2 = "o";
                goto frame_exception_exit_3;
            }
        }
        {
            PyObject *tmp_called_instance_39;
            PyObject *tmp_args_element_value_72;
            PyObject *tmp_annotations_62;
            tmp_called_instance_39 = PyObject_GetItem(locals_hikari$api$rest$$$class__2_RESTClient_110, mod_consts[431]);

            if (tmp_called_instance_39 == NULL) {
                if (CHECK_AND_CLEAR_KEY_ERROR_OCCURRED()) {
                    tmp_called_instance_39 = GET_STRING_DICT_VALUE(moduledict_hikari$api$rest, (Nuitka_StringObject *)mod_consts[431]);

                    if (unlikely(tmp_called_instance_39 == NULL)) {
                        tmp_called_instance_39 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[431]);
                    }

                    if (tmp_called_instance_39 == NULL) {
                        assert(ERROR_OCCURRED());

                        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                        exception_lineno = 3028;
                        type_description_2 = "o";
                        goto frame_exception_exit_3;
                    }
                    Py_INCREF(tmp_called_instance_39);
                } else {
                    goto frame_exception_exit_3;
                }
            }

            tmp_annotations_62 = PyDict_Copy(mod_consts[587]);


            tmp_args_element_value_72 = MAKE_FUNCTION_hikari$api$rest$$$function__58_fetch_authorization(tmp_annotations_62);

            frame_862833cacd6e5ba73c351f8d132a7b6b_3->m_frame.f_lineno = 3028;
            tmp_dictset_value = CALL_METHOD_WITH_SINGLE_ARG(tmp_called_instance_39, mod_consts[457], tmp_args_element_value_72);
            Py_DECREF(tmp_called_instance_39);
            Py_DECREF(tmp_args_element_value_72);
            if (tmp_dictset_value == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 3028;
                type_description_2 = "o";
                goto frame_exception_exit_3;
            }
            tmp_res = PyObject_SetItem(locals_hikari$api$rest$$$class__2_RESTClient_110, mod_consts[141], tmp_dictset_value);
            Py_DECREF(tmp_dictset_value);
            if (tmp_res != 0) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 3029;
                type_description_2 = "o";
                goto frame_exception_exit_3;
            }
        }
        {
            PyObject *tmp_called_instance_40;
            PyObject *tmp_args_element_value_73;
            PyObject *tmp_annotations_63;
            tmp_called_instance_40 = PyObject_GetItem(locals_hikari$api$rest$$$class__2_RESTClient_110, mod_consts[431]);

            if (tmp_called_instance_40 == NULL) {
                if (CHECK_AND_CLEAR_KEY_ERROR_OCCURRED()) {
                    tmp_called_instance_40 = GET_STRING_DICT_VALUE(moduledict_hikari$api$rest, (Nuitka_StringObject *)mod_consts[431]);

                    if (unlikely(tmp_called_instance_40 == NULL)) {
                        tmp_called_instance_40 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[431]);
                    }

                    if (tmp_called_instance_40 == NULL) {
                        assert(ERROR_OCCURRED());

                        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                        exception_lineno = 3060;
                        type_description_2 = "o";
                        goto frame_exception_exit_3;
                    }
                    Py_INCREF(tmp_called_instance_40);
                } else {
                    goto frame_exception_exit_3;
                }
            }

            tmp_annotations_63 = PyDict_Copy(mod_consts[588]);


            tmp_args_element_value_73 = MAKE_FUNCTION_hikari$api$rest$$$function__59_authorize_client_credentials_token(tmp_annotations_63);

            frame_862833cacd6e5ba73c351f8d132a7b6b_3->m_frame.f_lineno = 3060;
            tmp_dictset_value = CALL_METHOD_WITH_SINGLE_ARG(tmp_called_instance_40, mod_consts[457], tmp_args_element_value_73);
            Py_DECREF(tmp_called_instance_40);
            Py_DECREF(tmp_args_element_value_73);
            if (tmp_dictset_value == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 3060;
                type_description_2 = "o";
                goto frame_exception_exit_3;
            }
            tmp_res = PyObject_SetItem(locals_hikari$api$rest$$$class__2_RESTClient_110, mod_consts[144], tmp_dictset_value);
            Py_DECREF(tmp_dictset_value);
            if (tmp_res != 0) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 3061;
                type_description_2 = "o";
                goto frame_exception_exit_3;
            }
        }
        {
            PyObject *tmp_called_instance_41;
            PyObject *tmp_args_element_value_74;
            PyObject *tmp_annotations_64;
            tmp_called_instance_41 = PyObject_GetItem(locals_hikari$api$rest$$$class__2_RESTClient_110, mod_consts[431]);

            if (tmp_called_instance_41 == NULL) {
                if (CHECK_AND_CLEAR_KEY_ERROR_OCCURRED()) {
                    tmp_called_instance_41 = GET_STRING_DICT_VALUE(moduledict_hikari$api$rest, (Nuitka_StringObject *)mod_consts[431]);

                    if (unlikely(tmp_called_instance_41 == NULL)) {
                        tmp_called_instance_41 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[431]);
                    }

                    if (tmp_called_instance_41 == NULL) {
                        assert(ERROR_OCCURRED());

                        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                        exception_lineno = 3105;
                        type_description_2 = "o";
                        goto frame_exception_exit_3;
                    }
                    Py_INCREF(tmp_called_instance_41);
                } else {
                    goto frame_exception_exit_3;
                }
            }

            tmp_annotations_64 = PyDict_Copy(mod_consts[589]);


            tmp_args_element_value_74 = MAKE_FUNCTION_hikari$api$rest$$$function__60_authorize_access_token(tmp_annotations_64);

            frame_862833cacd6e5ba73c351f8d132a7b6b_3->m_frame.f_lineno = 3105;
            tmp_dictset_value = CALL_METHOD_WITH_SINGLE_ARG(tmp_called_instance_41, mod_consts[457], tmp_args_element_value_74);
            Py_DECREF(tmp_called_instance_41);
            Py_DECREF(tmp_args_element_value_74);
            if (tmp_dictset_value == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 3105;
                type_description_2 = "o";
                goto frame_exception_exit_3;
            }
            tmp_res = PyObject_SetItem(locals_hikari$api$rest$$$class__2_RESTClient_110, mod_consts[147], tmp_dictset_value);
            Py_DECREF(tmp_dictset_value);
            if (tmp_res != 0) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 3106;
                type_description_2 = "o";
                goto frame_exception_exit_3;
            }
        }
        {
            PyObject *tmp_called_value_37;
            PyObject *tmp_expression_value_141;
            PyObject *tmp_args_element_value_75;
            PyObject *tmp_kw_defaults_19;
            PyObject *tmp_dict_key_19;
            PyObject *tmp_dict_value_19;
            PyObject *tmp_expression_value_142;
            PyObject *tmp_annotations_65;
            tmp_expression_value_141 = PyObject_GetItem(locals_hikari$api$rest$$$class__2_RESTClient_110, mod_consts[431]);

            if (tmp_expression_value_141 == NULL) {
                if (CHECK_AND_CLEAR_KEY_ERROR_OCCURRED()) {
                    tmp_expression_value_141 = GET_STRING_DICT_VALUE(moduledict_hikari$api$rest, (Nuitka_StringObject *)mod_consts[431]);

                    if (unlikely(tmp_expression_value_141 == NULL)) {
                        tmp_expression_value_141 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[431]);
                    }

                    if (tmp_expression_value_141 == NULL) {
                        assert(ERROR_OCCURRED());

                        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                        exception_lineno = 3152;
                        type_description_2 = "o";
                        goto frame_exception_exit_3;
                    }
                    Py_INCREF(tmp_expression_value_141);
                } else {
                    goto frame_exception_exit_3;
                }
            }

            tmp_called_value_37 = LOOKUP_ATTRIBUTE(tmp_expression_value_141, mod_consts[457]);
            Py_DECREF(tmp_expression_value_141);
            if (tmp_called_value_37 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 3152;
                type_description_2 = "o";
                goto frame_exception_exit_3;
            }
            tmp_dict_key_19 = mod_consts[590];
            tmp_expression_value_142 = PyObject_GetItem(locals_hikari$api$rest$$$class__2_RESTClient_110, mod_consts[440]);

            if (tmp_expression_value_142 == NULL) {
                if (CHECK_AND_CLEAR_KEY_ERROR_OCCURRED()) {
                    tmp_expression_value_142 = GET_STRING_DICT_VALUE(moduledict_hikari$api$rest, (Nuitka_StringObject *)mod_consts[440]);

                    if (unlikely(tmp_expression_value_142 == NULL)) {
                        tmp_expression_value_142 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[440]);
                    }

                    if (tmp_expression_value_142 == NULL) {
                        assert(ERROR_OCCURRED());

                        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
                        Py_DECREF(tmp_called_value_37);

                        exception_lineno = 3161;
                        type_description_2 = "o";
                        goto frame_exception_exit_3;
                    }
                    Py_INCREF(tmp_expression_value_142);
                } else {
                    goto frame_exception_exit_3;
                }
            }

            tmp_dict_value_19 = LOOKUP_ATTRIBUTE(tmp_expression_value_142, mod_consts[485]);
            Py_DECREF(tmp_expression_value_142);
            if (tmp_dict_value_19 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
                Py_DECREF(tmp_called_value_37);

                exception_lineno = 3161;
                type_description_2 = "o";
                goto frame_exception_exit_3;
            }
            tmp_kw_defaults_19 = _PyDict_NewPresized( 1 );
            tmp_res = PyDict_SetItem(tmp_kw_defaults_19, tmp_dict_key_19, tmp_dict_value_19);
            Py_DECREF(tmp_dict_value_19);
            assert(!(tmp_res != 0));
            tmp_annotations_65 = PyDict_Copy(mod_consts[591]);


            tmp_args_element_value_75 = MAKE_FUNCTION_hikari$api$rest$$$function__61_refresh_access_token(tmp_kw_defaults_19, tmp_annotations_65);

            frame_862833cacd6e5ba73c351f8d132a7b6b_3->m_frame.f_lineno = 3152;
            tmp_dictset_value = CALL_FUNCTION_WITH_SINGLE_ARG(tmp_called_value_37, tmp_args_element_value_75);
            Py_DECREF(tmp_called_value_37);
            Py_DECREF(tmp_args_element_value_75);
            if (tmp_dictset_value == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 3152;
                type_description_2 = "o";
                goto frame_exception_exit_3;
            }
            tmp_res = PyObject_SetItem(locals_hikari$api$rest$$$class__2_RESTClient_110, mod_consts[150], tmp_dictset_value);
            Py_DECREF(tmp_dictset_value);
            if (tmp_res != 0) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 3153;
                type_description_2 = "o";
                goto frame_exception_exit_3;
            }
        }
        {
            PyObject *tmp_called_instance_42;
            PyObject *tmp_args_element_value_76;
            PyObject *tmp_annotations_66;
            tmp_called_instance_42 = PyObject_GetItem(locals_hikari$api$rest$$$class__2_RESTClient_110, mod_consts[431]);

            if (tmp_called_instance_42 == NULL) {
                if (CHECK_AND_CLEAR_KEY_ERROR_OCCURRED()) {
                    tmp_called_instance_42 = GET_STRING_DICT_VALUE(moduledict_hikari$api$rest, (Nuitka_StringObject *)mod_consts[431]);

                    if (unlikely(tmp_called_instance_42 == NULL)) {
                        tmp_called_instance_42 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[431]);
                    }

                    if (tmp_called_instance_42 == NULL) {
                        assert(ERROR_OCCURRED());

                        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                        exception_lineno = 3211;
                        type_description_2 = "o";
                        goto frame_exception_exit_3;
                    }
                    Py_INCREF(tmp_called_instance_42);
                } else {
                    goto frame_exception_exit_3;
                }
            }

            tmp_annotations_66 = PyDict_Copy(mod_consts[592]);


            tmp_args_element_value_76 = MAKE_FUNCTION_hikari$api$rest$$$function__62_revoke_access_token(tmp_annotations_66);

            frame_862833cacd6e5ba73c351f8d132a7b6b_3->m_frame.f_lineno = 3211;
            tmp_dictset_value = CALL_METHOD_WITH_SINGLE_ARG(tmp_called_instance_42, mod_consts[457], tmp_args_element_value_76);
            Py_DECREF(tmp_called_instance_42);
            Py_DECREF(tmp_args_element_value_76);
            if (tmp_dictset_value == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 3211;
                type_description_2 = "o";
                goto frame_exception_exit_3;
            }
            tmp_res = PyObject_SetItem(locals_hikari$api$rest$$$class__2_RESTClient_110, mod_consts[153], tmp_dictset_value);
            Py_DECREF(tmp_dictset_value);
            if (tmp_res != 0) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 3212;
                type_description_2 = "o";
                goto frame_exception_exit_3;
            }
        }
        {
            PyObject *tmp_called_value_38;
            PyObject *tmp_expression_value_143;
            PyObject *tmp_args_element_value_77;
            PyObject *tmp_kw_defaults_20;
            PyObject *tmp_dict_key_20;
            PyObject *tmp_dict_value_20;
            PyObject *tmp_expression_value_144;
            PyObject *tmp_annotations_67;
            tmp_expression_value_143 = PyObject_GetItem(locals_hikari$api$rest$$$class__2_RESTClient_110, mod_consts[431]);

            if (tmp_expression_value_143 == NULL) {
                if (CHECK_AND_CLEAR_KEY_ERROR_OCCURRED()) {
                    tmp_expression_value_143 = GET_STRING_DICT_VALUE(moduledict_hikari$api$rest, (Nuitka_StringObject *)mod_consts[431]);

                    if (unlikely(tmp_expression_value_143 == NULL)) {
                        tmp_expression_value_143 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[431]);
                    }

                    if (tmp_expression_value_143 == NULL) {
                        assert(ERROR_OCCURRED());

                        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                        exception_lineno = 3249;
                        type_description_2 = "o";
                        goto frame_exception_exit_3;
                    }
                    Py_INCREF(tmp_expression_value_143);
                } else {
                    goto frame_exception_exit_3;
                }
            }

            tmp_called_value_38 = LOOKUP_ATTRIBUTE(tmp_expression_value_143, mod_consts[457]);
            Py_DECREF(tmp_expression_value_143);
            if (tmp_called_value_38 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 3249;
                type_description_2 = "o";
                goto frame_exception_exit_3;
            }
            tmp_dict_key_20 = mod_consts[593];
            tmp_expression_value_144 = PyObject_GetItem(locals_hikari$api$rest$$$class__2_RESTClient_110, mod_consts[440]);

            if (tmp_expression_value_144 == NULL) {
                if (CHECK_AND_CLEAR_KEY_ERROR_OCCURRED()) {
                    tmp_expression_value_144 = GET_STRING_DICT_VALUE(moduledict_hikari$api$rest, (Nuitka_StringObject *)mod_consts[440]);

                    if (unlikely(tmp_expression_value_144 == NULL)) {
                        tmp_expression_value_144 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[440]);
                    }

                    if (tmp_expression_value_144 == NULL) {
                        assert(ERROR_OCCURRED());

                        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
                        Py_DECREF(tmp_called_value_38);

                        exception_lineno = 3256;
                        type_description_2 = "o";
                        goto frame_exception_exit_3;
                    }
                    Py_INCREF(tmp_expression_value_144);
                } else {
                    goto frame_exception_exit_3;
                }
            }

            tmp_dict_value_20 = LOOKUP_ATTRIBUTE(tmp_expression_value_144, mod_consts[485]);
            Py_DECREF(tmp_expression_value_144);
            if (tmp_dict_value_20 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
                Py_DECREF(tmp_called_value_38);

                exception_lineno = 3256;
                type_description_2 = "o";
                goto frame_exception_exit_3;
            }
            tmp_kw_defaults_20 = _PyDict_NewPresized( 5 );
            {
                PyObject *tmp_expression_value_145;
                PyObject *tmp_expression_value_146;
                PyObject *tmp_expression_value_147;
                PyObject *tmp_expression_value_148;
                tmp_res = PyDict_SetItem(tmp_kw_defaults_20, tmp_dict_key_20, tmp_dict_value_20);
                Py_DECREF(tmp_dict_value_20);
                assert(!(tmp_res != 0));
                tmp_dict_key_20 = mod_consts[594];
                tmp_expression_value_145 = PyObject_GetItem(locals_hikari$api$rest$$$class__2_RESTClient_110, mod_consts[440]);

                if (tmp_expression_value_145 == NULL) {
                    if (CHECK_AND_CLEAR_KEY_ERROR_OCCURRED()) {
                        tmp_expression_value_145 = GET_STRING_DICT_VALUE(moduledict_hikari$api$rest, (Nuitka_StringObject *)mod_consts[440]);

                        if (unlikely(tmp_expression_value_145 == NULL)) {
                            tmp_expression_value_145 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[440]);
                        }

                        if (tmp_expression_value_145 == NULL) {
                            assert(ERROR_OCCURRED());

                            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                            exception_lineno = 3257;
                            type_description_2 = "o";
                            goto dict_build_exception_16;
                        }
                        Py_INCREF(tmp_expression_value_145);
                    } else {
                        goto dict_build_exception_16;
                    }
                }

                tmp_dict_value_20 = LOOKUP_ATTRIBUTE(tmp_expression_value_145, mod_consts[485]);
                Py_DECREF(tmp_expression_value_145);
                if (tmp_dict_value_20 == NULL) {
                    assert(ERROR_OCCURRED());

                    FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                    exception_lineno = 3257;
                    type_description_2 = "o";
                    goto dict_build_exception_16;
                }
                tmp_res = PyDict_SetItem(tmp_kw_defaults_20, tmp_dict_key_20, tmp_dict_value_20);
                Py_DECREF(tmp_dict_value_20);
                assert(!(tmp_res != 0));
                tmp_dict_key_20 = mod_consts[595];
                tmp_expression_value_146 = PyObject_GetItem(locals_hikari$api$rest$$$class__2_RESTClient_110, mod_consts[440]);

                if (tmp_expression_value_146 == NULL) {
                    if (CHECK_AND_CLEAR_KEY_ERROR_OCCURRED()) {
                        tmp_expression_value_146 = GET_STRING_DICT_VALUE(moduledict_hikari$api$rest, (Nuitka_StringObject *)mod_consts[440]);

                        if (unlikely(tmp_expression_value_146 == NULL)) {
                            tmp_expression_value_146 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[440]);
                        }

                        if (tmp_expression_value_146 == NULL) {
                            assert(ERROR_OCCURRED());

                            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                            exception_lineno = 3258;
                            type_description_2 = "o";
                            goto dict_build_exception_16;
                        }
                        Py_INCREF(tmp_expression_value_146);
                    } else {
                        goto dict_build_exception_16;
                    }
                }

                tmp_dict_value_20 = LOOKUP_ATTRIBUTE(tmp_expression_value_146, mod_consts[485]);
                Py_DECREF(tmp_expression_value_146);
                if (tmp_dict_value_20 == NULL) {
                    assert(ERROR_OCCURRED());

                    FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                    exception_lineno = 3258;
                    type_description_2 = "o";
                    goto dict_build_exception_16;
                }
                tmp_res = PyDict_SetItem(tmp_kw_defaults_20, tmp_dict_key_20, tmp_dict_value_20);
                Py_DECREF(tmp_dict_value_20);
                assert(!(tmp_res != 0));
                tmp_dict_key_20 = mod_consts[596];
                tmp_expression_value_147 = PyObject_GetItem(locals_hikari$api$rest$$$class__2_RESTClient_110, mod_consts[440]);

                if (tmp_expression_value_147 == NULL) {
                    if (CHECK_AND_CLEAR_KEY_ERROR_OCCURRED()) {
                        tmp_expression_value_147 = GET_STRING_DICT_VALUE(moduledict_hikari$api$rest, (Nuitka_StringObject *)mod_consts[440]);

                        if (unlikely(tmp_expression_value_147 == NULL)) {
                            tmp_expression_value_147 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[440]);
                        }

                        if (tmp_expression_value_147 == NULL) {
                            assert(ERROR_OCCURRED());

                            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                            exception_lineno = 3259;
                            type_description_2 = "o";
                            goto dict_build_exception_16;
                        }
                        Py_INCREF(tmp_expression_value_147);
                    } else {
                        goto dict_build_exception_16;
                    }
                }

                tmp_dict_value_20 = LOOKUP_ATTRIBUTE(tmp_expression_value_147, mod_consts[485]);
                Py_DECREF(tmp_expression_value_147);
                if (tmp_dict_value_20 == NULL) {
                    assert(ERROR_OCCURRED());

                    FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                    exception_lineno = 3259;
                    type_description_2 = "o";
                    goto dict_build_exception_16;
                }
                tmp_res = PyDict_SetItem(tmp_kw_defaults_20, tmp_dict_key_20, tmp_dict_value_20);
                Py_DECREF(tmp_dict_value_20);
                assert(!(tmp_res != 0));
                tmp_dict_key_20 = mod_consts[597];
                tmp_expression_value_148 = PyObject_GetItem(locals_hikari$api$rest$$$class__2_RESTClient_110, mod_consts[440]);

                if (tmp_expression_value_148 == NULL) {
                    if (CHECK_AND_CLEAR_KEY_ERROR_OCCURRED()) {
                        tmp_expression_value_148 = GET_STRING_DICT_VALUE(moduledict_hikari$api$rest, (Nuitka_StringObject *)mod_consts[440]);

                        if (unlikely(tmp_expression_value_148 == NULL)) {
                            tmp_expression_value_148 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[440]);
                        }

                        if (tmp_expression_value_148 == NULL) {
                            assert(ERROR_OCCURRED());

                            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                            exception_lineno = 3260;
                            type_description_2 = "o";
                            goto dict_build_exception_16;
                        }
                        Py_INCREF(tmp_expression_value_148);
                    } else {
                        goto dict_build_exception_16;
                    }
                }

                tmp_dict_value_20 = LOOKUP_ATTRIBUTE(tmp_expression_value_148, mod_consts[485]);
                Py_DECREF(tmp_expression_value_148);
                if (tmp_dict_value_20 == NULL) {
                    assert(ERROR_OCCURRED());

                    FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                    exception_lineno = 3260;
                    type_description_2 = "o";
                    goto dict_build_exception_16;
                }
                tmp_res = PyDict_SetItem(tmp_kw_defaults_20, tmp_dict_key_20, tmp_dict_value_20);
                Py_DECREF(tmp_dict_value_20);
                assert(!(tmp_res != 0));
            }
            goto dict_build_noexception_16;
            // Exception handling pass through code for dict_build:
            dict_build_exception_16:;
            Py_DECREF(tmp_called_value_38);
            Py_DECREF(tmp_kw_defaults_20);
            goto frame_exception_exit_3;
            // Finished with no exception for dict_build:
            dict_build_noexception_16:;
            tmp_annotations_67 = PyDict_Copy(mod_consts[598]);


            tmp_args_element_value_77 = MAKE_FUNCTION_hikari$api$rest$$$function__63_add_user_to_guild(tmp_kw_defaults_20, tmp_annotations_67);

            frame_862833cacd6e5ba73c351f8d132a7b6b_3->m_frame.f_lineno = 3249;
            tmp_dictset_value = CALL_FUNCTION_WITH_SINGLE_ARG(tmp_called_value_38, tmp_args_element_value_77);
            Py_DECREF(tmp_called_value_38);
            Py_DECREF(tmp_args_element_value_77);
            if (tmp_dictset_value == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 3249;
                type_description_2 = "o";
                goto frame_exception_exit_3;
            }
            tmp_res = PyObject_SetItem(locals_hikari$api$rest$$$class__2_RESTClient_110, mod_consts[156], tmp_dictset_value);
            Py_DECREF(tmp_dictset_value);
            if (tmp_res != 0) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 3250;
                type_description_2 = "o";
                goto frame_exception_exit_3;
            }
        }
        {
            PyObject *tmp_called_instance_43;
            PyObject *tmp_args_element_value_78;
            PyObject *tmp_annotations_68;
            tmp_called_instance_43 = PyObject_GetItem(locals_hikari$api$rest$$$class__2_RESTClient_110, mod_consts[431]);

            if (tmp_called_instance_43 == NULL) {
                if (CHECK_AND_CLEAR_KEY_ERROR_OCCURRED()) {
                    tmp_called_instance_43 = GET_STRING_DICT_VALUE(moduledict_hikari$api$rest, (Nuitka_StringObject *)mod_consts[431]);

                    if (unlikely(tmp_called_instance_43 == NULL)) {
                        tmp_called_instance_43 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[431]);
                    }

                    if (tmp_called_instance_43 == NULL) {
                        assert(ERROR_OCCURRED());

                        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                        exception_lineno = 3338;
                        type_description_2 = "o";
                        goto frame_exception_exit_3;
                    }
                    Py_INCREF(tmp_called_instance_43);
                } else {
                    goto frame_exception_exit_3;
                }
            }

            tmp_annotations_68 = PyDict_Copy(mod_consts[599]);


            tmp_args_element_value_78 = MAKE_FUNCTION_hikari$api$rest$$$function__64_fetch_voice_regions(tmp_annotations_68);

            frame_862833cacd6e5ba73c351f8d132a7b6b_3->m_frame.f_lineno = 3338;
            tmp_dictset_value = CALL_METHOD_WITH_SINGLE_ARG(tmp_called_instance_43, mod_consts[457], tmp_args_element_value_78);
            Py_DECREF(tmp_called_instance_43);
            Py_DECREF(tmp_args_element_value_78);
            if (tmp_dictset_value == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 3338;
                type_description_2 = "o";
                goto frame_exception_exit_3;
            }
            tmp_res = PyObject_SetItem(locals_hikari$api$rest$$$class__2_RESTClient_110, mod_consts[159], tmp_dictset_value);
            Py_DECREF(tmp_dictset_value);
            if (tmp_res != 0) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 3339;
                type_description_2 = "o";
                goto frame_exception_exit_3;
            }
        }
        {
            PyObject *tmp_called_instance_44;
            PyObject *tmp_args_element_value_79;
            PyObject *tmp_annotations_69;
            tmp_called_instance_44 = PyObject_GetItem(locals_hikari$api$rest$$$class__2_RESTClient_110, mod_consts[431]);

            if (tmp_called_instance_44 == NULL) {
                if (CHECK_AND_CLEAR_KEY_ERROR_OCCURRED()) {
                    tmp_called_instance_44 = GET_STRING_DICT_VALUE(moduledict_hikari$api$rest, (Nuitka_StringObject *)mod_consts[431]);

                    if (unlikely(tmp_called_instance_44 == NULL)) {
                        tmp_called_instance_44 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[431]);
                    }

                    if (tmp_called_instance_44 == NULL) {
                        assert(ERROR_OCCURRED());

                        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                        exception_lineno = 3366;
                        type_description_2 = "o";
                        goto frame_exception_exit_3;
                    }
                    Py_INCREF(tmp_called_instance_44);
                } else {
                    goto frame_exception_exit_3;
                }
            }

            tmp_annotations_69 = PyDict_Copy(mod_consts[600]);


            tmp_args_element_value_79 = MAKE_FUNCTION_hikari$api$rest$$$function__65_fetch_user(tmp_annotations_69);

            frame_862833cacd6e5ba73c351f8d132a7b6b_3->m_frame.f_lineno = 3366;
            tmp_dictset_value = CALL_METHOD_WITH_SINGLE_ARG(tmp_called_instance_44, mod_consts[457], tmp_args_element_value_79);
            Py_DECREF(tmp_called_instance_44);
            Py_DECREF(tmp_args_element_value_79);
            if (tmp_dictset_value == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 3366;
                type_description_2 = "o";
                goto frame_exception_exit_3;
            }
            tmp_res = PyObject_SetItem(locals_hikari$api$rest$$$class__2_RESTClient_110, mod_consts[162], tmp_dictset_value);
            Py_DECREF(tmp_dictset_value);
            if (tmp_res != 0) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 3367;
                type_description_2 = "o";
                goto frame_exception_exit_3;
            }
        }
        {
            PyObject *tmp_called_value_39;
            PyObject *tmp_expression_value_149;
            PyObject *tmp_args_element_value_80;
            PyObject *tmp_kw_defaults_21;
            PyObject *tmp_dict_key_21;
            PyObject *tmp_dict_value_21;
            PyObject *tmp_expression_value_150;
            PyObject *tmp_annotations_70;
            tmp_expression_value_149 = PyObject_GetItem(locals_hikari$api$rest$$$class__2_RESTClient_110, mod_consts[431]);

            if (tmp_expression_value_149 == NULL) {
                if (CHECK_AND_CLEAR_KEY_ERROR_OCCURRED()) {
                    tmp_expression_value_149 = GET_STRING_DICT_VALUE(moduledict_hikari$api$rest, (Nuitka_StringObject *)mod_consts[431]);

                    if (unlikely(tmp_expression_value_149 == NULL)) {
                        tmp_expression_value_149 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[431]);
                    }

                    if (tmp_expression_value_149 == NULL) {
                        assert(ERROR_OCCURRED());

                        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                        exception_lineno = 3402;
                        type_description_2 = "o";
                        goto frame_exception_exit_3;
                    }
                    Py_INCREF(tmp_expression_value_149);
                } else {
                    goto frame_exception_exit_3;
                }
            }

            tmp_called_value_39 = LOOKUP_ATTRIBUTE(tmp_expression_value_149, mod_consts[457]);
            Py_DECREF(tmp_expression_value_149);
            if (tmp_called_value_39 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 3402;
                type_description_2 = "o";
                goto frame_exception_exit_3;
            }
            tmp_dict_key_21 = mod_consts[525];
            tmp_expression_value_150 = PyObject_GetItem(locals_hikari$api$rest$$$class__2_RESTClient_110, mod_consts[440]);

            if (tmp_expression_value_150 == NULL) {
                if (CHECK_AND_CLEAR_KEY_ERROR_OCCURRED()) {
                    tmp_expression_value_150 = GET_STRING_DICT_VALUE(moduledict_hikari$api$rest, (Nuitka_StringObject *)mod_consts[440]);

                    if (unlikely(tmp_expression_value_150 == NULL)) {
                        tmp_expression_value_150 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[440]);
                    }

                    if (tmp_expression_value_150 == NULL) {
                        assert(ERROR_OCCURRED());

                        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
                        Py_DECREF(tmp_called_value_39);

                        exception_lineno = 3407;
                        type_description_2 = "o";
                        goto frame_exception_exit_3;
                    }
                    Py_INCREF(tmp_expression_value_150);
                } else {
                    goto frame_exception_exit_3;
                }
            }

            tmp_dict_value_21 = LOOKUP_ATTRIBUTE(tmp_expression_value_150, mod_consts[485]);
            Py_DECREF(tmp_expression_value_150);
            if (tmp_dict_value_21 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
                Py_DECREF(tmp_called_value_39);

                exception_lineno = 3407;
                type_description_2 = "o";
                goto frame_exception_exit_3;
            }
            tmp_kw_defaults_21 = _PyDict_NewPresized( 3 );
            {
                PyObject *tmp_expression_value_151;
                PyObject *tmp_expression_value_152;
                tmp_res = PyDict_SetItem(tmp_kw_defaults_21, tmp_dict_key_21, tmp_dict_value_21);
                Py_DECREF(tmp_dict_value_21);
                assert(!(tmp_res != 0));
                tmp_dict_key_21 = mod_consts[601];
                tmp_expression_value_151 = PyObject_GetItem(locals_hikari$api$rest$$$class__2_RESTClient_110, mod_consts[440]);

                if (tmp_expression_value_151 == NULL) {
                    if (CHECK_AND_CLEAR_KEY_ERROR_OCCURRED()) {
                        tmp_expression_value_151 = GET_STRING_DICT_VALUE(moduledict_hikari$api$rest, (Nuitka_StringObject *)mod_consts[440]);

                        if (unlikely(tmp_expression_value_151 == NULL)) {
                            tmp_expression_value_151 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[440]);
                        }

                        if (tmp_expression_value_151 == NULL) {
                            assert(ERROR_OCCURRED());

                            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                            exception_lineno = 3408;
                            type_description_2 = "o";
                            goto dict_build_exception_17;
                        }
                        Py_INCREF(tmp_expression_value_151);
                    } else {
                        goto dict_build_exception_17;
                    }
                }

                tmp_dict_value_21 = LOOKUP_ATTRIBUTE(tmp_expression_value_151, mod_consts[485]);
                Py_DECREF(tmp_expression_value_151);
                if (tmp_dict_value_21 == NULL) {
                    assert(ERROR_OCCURRED());

                    FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                    exception_lineno = 3408;
                    type_description_2 = "o";
                    goto dict_build_exception_17;
                }
                tmp_res = PyDict_SetItem(tmp_kw_defaults_21, tmp_dict_key_21, tmp_dict_value_21);
                Py_DECREF(tmp_dict_value_21);
                assert(!(tmp_res != 0));
                tmp_dict_key_21 = mod_consts[602];
                tmp_expression_value_152 = PyObject_GetItem(locals_hikari$api$rest$$$class__2_RESTClient_110, mod_consts[440]);

                if (tmp_expression_value_152 == NULL) {
                    if (CHECK_AND_CLEAR_KEY_ERROR_OCCURRED()) {
                        tmp_expression_value_152 = GET_STRING_DICT_VALUE(moduledict_hikari$api$rest, (Nuitka_StringObject *)mod_consts[440]);

                        if (unlikely(tmp_expression_value_152 == NULL)) {
                            tmp_expression_value_152 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[440]);
                        }

                        if (tmp_expression_value_152 == NULL) {
                            assert(ERROR_OCCURRED());

                            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                            exception_lineno = 3409;
                            type_description_2 = "o";
                            goto dict_build_exception_17;
                        }
                        Py_INCREF(tmp_expression_value_152);
                    } else {
                        goto dict_build_exception_17;
                    }
                }

                tmp_dict_value_21 = LOOKUP_ATTRIBUTE(tmp_expression_value_152, mod_consts[485]);
                Py_DECREF(tmp_expression_value_152);
                if (tmp_dict_value_21 == NULL) {
                    assert(ERROR_OCCURRED());

                    FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                    exception_lineno = 3409;
                    type_description_2 = "o";
                    goto dict_build_exception_17;
                }
                tmp_res = PyDict_SetItem(tmp_kw_defaults_21, tmp_dict_key_21, tmp_dict_value_21);
                Py_DECREF(tmp_dict_value_21);
                assert(!(tmp_res != 0));
            }
            goto dict_build_noexception_17;
            // Exception handling pass through code for dict_build:
            dict_build_exception_17:;
            Py_DECREF(tmp_called_value_39);
            Py_DECREF(tmp_kw_defaults_21);
            goto frame_exception_exit_3;
            // Finished with no exception for dict_build:
            dict_build_noexception_17:;
            tmp_annotations_70 = PyDict_Copy(mod_consts[603]);


            tmp_args_element_value_80 = MAKE_FUNCTION_hikari$api$rest$$$function__66_fetch_audit_log(tmp_kw_defaults_21, tmp_annotations_70);

            frame_862833cacd6e5ba73c351f8d132a7b6b_3->m_frame.f_lineno = 3402;
            tmp_dictset_value = CALL_FUNCTION_WITH_SINGLE_ARG(tmp_called_value_39, tmp_args_element_value_80);
            Py_DECREF(tmp_called_value_39);
            Py_DECREF(tmp_args_element_value_80);
            if (tmp_dictset_value == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 3402;
                type_description_2 = "o";
                goto frame_exception_exit_3;
            }
            tmp_res = PyObject_SetItem(locals_hikari$api$rest$$$class__2_RESTClient_110, mod_consts[605], tmp_dictset_value);
            Py_DECREF(tmp_dictset_value);
            if (tmp_res != 0) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 3403;
                type_description_2 = "o";
                goto frame_exception_exit_3;
            }
        }
        {
            PyObject *tmp_called_instance_45;
            PyObject *tmp_args_element_value_81;
            PyObject *tmp_annotations_71;
            tmp_called_instance_45 = PyObject_GetItem(locals_hikari$api$rest$$$class__2_RESTClient_110, mod_consts[431]);

            if (tmp_called_instance_45 == NULL) {
                if (CHECK_AND_CLEAR_KEY_ERROR_OCCURRED()) {
                    tmp_called_instance_45 = GET_STRING_DICT_VALUE(moduledict_hikari$api$rest, (Nuitka_StringObject *)mod_consts[431]);

                    if (unlikely(tmp_called_instance_45 == NULL)) {
                        tmp_called_instance_45 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[431]);
                    }

                    if (tmp_called_instance_45 == NULL) {
                        assert(ERROR_OCCURRED());

                        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                        exception_lineno = 3469;
                        type_description_2 = "o";
                        goto frame_exception_exit_3;
                    }
                    Py_INCREF(tmp_called_instance_45);
                } else {
                    goto frame_exception_exit_3;
                }
            }

            tmp_annotations_71 = PyDict_Copy(mod_consts[607]);


            tmp_args_element_value_81 = MAKE_FUNCTION_hikari$api$rest$$$function__67_fetch_emoji(tmp_annotations_71);

            frame_862833cacd6e5ba73c351f8d132a7b6b_3->m_frame.f_lineno = 3469;
            tmp_dictset_value = CALL_METHOD_WITH_SINGLE_ARG(tmp_called_instance_45, mod_consts[457], tmp_args_element_value_81);
            Py_DECREF(tmp_called_instance_45);
            Py_DECREF(tmp_args_element_value_81);
            if (tmp_dictset_value == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 3469;
                type_description_2 = "o";
                goto frame_exception_exit_3;
            }
            tmp_res = PyObject_SetItem(locals_hikari$api$rest$$$class__2_RESTClient_110, mod_consts[165], tmp_dictset_value);
            Py_DECREF(tmp_dictset_value);
            if (tmp_res != 0) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 3470;
                type_description_2 = "o";
                goto frame_exception_exit_3;
            }
        }
        {
            PyObject *tmp_called_instance_46;
            PyObject *tmp_args_element_value_82;
            PyObject *tmp_annotations_72;
            tmp_called_instance_46 = PyObject_GetItem(locals_hikari$api$rest$$$class__2_RESTClient_110, mod_consts[431]);

            if (tmp_called_instance_46 == NULL) {
                if (CHECK_AND_CLEAR_KEY_ERROR_OCCURRED()) {
                    tmp_called_instance_46 = GET_STRING_DICT_VALUE(moduledict_hikari$api$rest, (Nuitka_StringObject *)mod_consts[431]);

                    if (unlikely(tmp_called_instance_46 == NULL)) {
                        tmp_called_instance_46 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[431]);
                    }

                    if (tmp_called_instance_46 == NULL) {
                        assert(ERROR_OCCURRED());

                        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                        exception_lineno = 3512;
                        type_description_2 = "o";
                        goto frame_exception_exit_3;
                    }
                    Py_INCREF(tmp_called_instance_46);
                } else {
                    goto frame_exception_exit_3;
                }
            }

            tmp_annotations_72 = PyDict_Copy(mod_consts[608]);


            tmp_args_element_value_82 = MAKE_FUNCTION_hikari$api$rest$$$function__68_fetch_guild_emojis(tmp_annotations_72);

            frame_862833cacd6e5ba73c351f8d132a7b6b_3->m_frame.f_lineno = 3512;
            tmp_dictset_value = CALL_METHOD_WITH_SINGLE_ARG(tmp_called_instance_46, mod_consts[457], tmp_args_element_value_82);
            Py_DECREF(tmp_called_instance_46);
            Py_DECREF(tmp_args_element_value_82);
            if (tmp_dictset_value == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 3512;
                type_description_2 = "o";
                goto frame_exception_exit_3;
            }
            tmp_res = PyObject_SetItem(locals_hikari$api$rest$$$class__2_RESTClient_110, mod_consts[168], tmp_dictset_value);
            Py_DECREF(tmp_dictset_value);
            if (tmp_res != 0) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 3513;
                type_description_2 = "o";
                goto frame_exception_exit_3;
            }
        }
        {
            PyObject *tmp_called_value_40;
            PyObject *tmp_expression_value_153;
            PyObject *tmp_args_element_value_83;
            PyObject *tmp_kw_defaults_22;
            PyObject *tmp_dict_key_22;
            PyObject *tmp_dict_value_22;
            PyObject *tmp_expression_value_154;
            PyObject *tmp_annotations_73;
            tmp_expression_value_153 = PyObject_GetItem(locals_hikari$api$rest$$$class__2_RESTClient_110, mod_consts[431]);

            if (tmp_expression_value_153 == NULL) {
                if (CHECK_AND_CLEAR_KEY_ERROR_OCCURRED()) {
                    tmp_expression_value_153 = GET_STRING_DICT_VALUE(moduledict_hikari$api$rest, (Nuitka_StringObject *)mod_consts[431]);

                    if (unlikely(tmp_expression_value_153 == NULL)) {
                        tmp_expression_value_153 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[431]);
                    }

                    if (tmp_expression_value_153 == NULL) {
                        assert(ERROR_OCCURRED());

                        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                        exception_lineno = 3550;
                        type_description_2 = "o";
                        goto frame_exception_exit_3;
                    }
                    Py_INCREF(tmp_expression_value_153);
                } else {
                    goto frame_exception_exit_3;
                }
            }

            tmp_called_value_40 = LOOKUP_ATTRIBUTE(tmp_expression_value_153, mod_consts[457]);
            Py_DECREF(tmp_expression_value_153);
            if (tmp_called_value_40 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 3550;
                type_description_2 = "o";
                goto frame_exception_exit_3;
            }
            tmp_dict_key_22 = mod_consts[595];
            tmp_expression_value_154 = PyObject_GetItem(locals_hikari$api$rest$$$class__2_RESTClient_110, mod_consts[440]);

            if (tmp_expression_value_154 == NULL) {
                if (CHECK_AND_CLEAR_KEY_ERROR_OCCURRED()) {
                    tmp_expression_value_154 = GET_STRING_DICT_VALUE(moduledict_hikari$api$rest, (Nuitka_StringObject *)mod_consts[440]);

                    if (unlikely(tmp_expression_value_154 == NULL)) {
                        tmp_expression_value_154 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[440]);
                    }

                    if (tmp_expression_value_154 == NULL) {
                        assert(ERROR_OCCURRED());

                        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
                        Py_DECREF(tmp_called_value_40);

                        exception_lineno = 3557;
                        type_description_2 = "o";
                        goto frame_exception_exit_3;
                    }
                    Py_INCREF(tmp_expression_value_154);
                } else {
                    goto frame_exception_exit_3;
                }
            }

            tmp_dict_value_22 = LOOKUP_ATTRIBUTE(tmp_expression_value_154, mod_consts[485]);
            Py_DECREF(tmp_expression_value_154);
            if (tmp_dict_value_22 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
                Py_DECREF(tmp_called_value_40);

                exception_lineno = 3557;
                type_description_2 = "o";
                goto frame_exception_exit_3;
            }
            tmp_kw_defaults_22 = _PyDict_NewPresized( 2 );
            {
                PyObject *tmp_expression_value_155;
                tmp_res = PyDict_SetItem(tmp_kw_defaults_22, tmp_dict_key_22, tmp_dict_value_22);
                Py_DECREF(tmp_dict_value_22);
                assert(!(tmp_res != 0));
                tmp_dict_key_22 = mod_consts[496];
                tmp_expression_value_155 = PyObject_GetItem(locals_hikari$api$rest$$$class__2_RESTClient_110, mod_consts[440]);

                if (tmp_expression_value_155 == NULL) {
                    if (CHECK_AND_CLEAR_KEY_ERROR_OCCURRED()) {
                        tmp_expression_value_155 = GET_STRING_DICT_VALUE(moduledict_hikari$api$rest, (Nuitka_StringObject *)mod_consts[440]);

                        if (unlikely(tmp_expression_value_155 == NULL)) {
                            tmp_expression_value_155 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[440]);
                        }

                        if (tmp_expression_value_155 == NULL) {
                            assert(ERROR_OCCURRED());

                            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                            exception_lineno = 3558;
                            type_description_2 = "o";
                            goto dict_build_exception_18;
                        }
                        Py_INCREF(tmp_expression_value_155);
                    } else {
                        goto dict_build_exception_18;
                    }
                }

                tmp_dict_value_22 = LOOKUP_ATTRIBUTE(tmp_expression_value_155, mod_consts[485]);
                Py_DECREF(tmp_expression_value_155);
                if (tmp_dict_value_22 == NULL) {
                    assert(ERROR_OCCURRED());

                    FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                    exception_lineno = 3558;
                    type_description_2 = "o";
                    goto dict_build_exception_18;
                }
                tmp_res = PyDict_SetItem(tmp_kw_defaults_22, tmp_dict_key_22, tmp_dict_value_22);
                Py_DECREF(tmp_dict_value_22);
                assert(!(tmp_res != 0));
            }
            goto dict_build_noexception_18;
            // Exception handling pass through code for dict_build:
            dict_build_exception_18:;
            Py_DECREF(tmp_called_value_40);
            Py_DECREF(tmp_kw_defaults_22);
            goto frame_exception_exit_3;
            // Finished with no exception for dict_build:
            dict_build_noexception_18:;
            tmp_annotations_73 = PyDict_Copy(mod_consts[609]);


            tmp_args_element_value_83 = MAKE_FUNCTION_hikari$api$rest$$$function__69_create_emoji(tmp_kw_defaults_22, tmp_annotations_73);

            frame_862833cacd6e5ba73c351f8d132a7b6b_3->m_frame.f_lineno = 3550;
            tmp_dictset_value = CALL_FUNCTION_WITH_SINGLE_ARG(tmp_called_value_40, tmp_args_element_value_83);
            Py_DECREF(tmp_called_value_40);
            Py_DECREF(tmp_args_element_value_83);
            if (tmp_dictset_value == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 3550;
                type_description_2 = "o";
                goto frame_exception_exit_3;
            }
            tmp_res = PyObject_SetItem(locals_hikari$api$rest$$$class__2_RESTClient_110, mod_consts[171], tmp_dictset_value);
            Py_DECREF(tmp_dictset_value);
            if (tmp_res != 0) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 3551;
                type_description_2 = "o";
                goto frame_exception_exit_3;
            }
        }
        {
            PyObject *tmp_called_value_41;
            PyObject *tmp_expression_value_156;
            PyObject *tmp_args_element_value_84;
            PyObject *tmp_kw_defaults_23;
            PyObject *tmp_dict_key_23;
            PyObject *tmp_dict_value_23;
            PyObject *tmp_expression_value_157;
            PyObject *tmp_annotations_74;
            tmp_expression_value_156 = PyObject_GetItem(locals_hikari$api$rest$$$class__2_RESTClient_110, mod_consts[431]);

            if (tmp_expression_value_156 == NULL) {
                if (CHECK_AND_CLEAR_KEY_ERROR_OCCURRED()) {
                    tmp_expression_value_156 = GET_STRING_DICT_VALUE(moduledict_hikari$api$rest, (Nuitka_StringObject *)mod_consts[431]);

                    if (unlikely(tmp_expression_value_156 == NULL)) {
                        tmp_expression_value_156 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[431]);
                    }

                    if (tmp_expression_value_156 == NULL) {
                        assert(ERROR_OCCURRED());

                        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                        exception_lineno = 3614;
                        type_description_2 = "o";
                        goto frame_exception_exit_3;
                    }
                    Py_INCREF(tmp_expression_value_156);
                } else {
                    goto frame_exception_exit_3;
                }
            }

            tmp_called_value_41 = LOOKUP_ATTRIBUTE(tmp_expression_value_156, mod_consts[457]);
            Py_DECREF(tmp_expression_value_156);
            if (tmp_called_value_41 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 3614;
                type_description_2 = "o";
                goto frame_exception_exit_3;
            }
            tmp_dict_key_23 = mod_consts[484];
            tmp_expression_value_157 = PyObject_GetItem(locals_hikari$api$rest$$$class__2_RESTClient_110, mod_consts[440]);

            if (tmp_expression_value_157 == NULL) {
                if (CHECK_AND_CLEAR_KEY_ERROR_OCCURRED()) {
                    tmp_expression_value_157 = GET_STRING_DICT_VALUE(moduledict_hikari$api$rest, (Nuitka_StringObject *)mod_consts[440]);

                    if (unlikely(tmp_expression_value_157 == NULL)) {
                        tmp_expression_value_157 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[440]);
                    }

                    if (tmp_expression_value_157 == NULL) {
                        assert(ERROR_OCCURRED());

                        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
                        Py_DECREF(tmp_called_value_41);

                        exception_lineno = 3620;
                        type_description_2 = "o";
                        goto frame_exception_exit_3;
                    }
                    Py_INCREF(tmp_expression_value_157);
                } else {
                    goto frame_exception_exit_3;
                }
            }

            tmp_dict_value_23 = LOOKUP_ATTRIBUTE(tmp_expression_value_157, mod_consts[485]);
            Py_DECREF(tmp_expression_value_157);
            if (tmp_dict_value_23 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
                Py_DECREF(tmp_called_value_41);

                exception_lineno = 3620;
                type_description_2 = "o";
                goto frame_exception_exit_3;
            }
            tmp_kw_defaults_23 = _PyDict_NewPresized( 3 );
            {
                PyObject *tmp_expression_value_158;
                PyObject *tmp_expression_value_159;
                tmp_res = PyDict_SetItem(tmp_kw_defaults_23, tmp_dict_key_23, tmp_dict_value_23);
                Py_DECREF(tmp_dict_value_23);
                assert(!(tmp_res != 0));
                tmp_dict_key_23 = mod_consts[595];
                tmp_expression_value_158 = PyObject_GetItem(locals_hikari$api$rest$$$class__2_RESTClient_110, mod_consts[440]);

                if (tmp_expression_value_158 == NULL) {
                    if (CHECK_AND_CLEAR_KEY_ERROR_OCCURRED()) {
                        tmp_expression_value_158 = GET_STRING_DICT_VALUE(moduledict_hikari$api$rest, (Nuitka_StringObject *)mod_consts[440]);

                        if (unlikely(tmp_expression_value_158 == NULL)) {
                            tmp_expression_value_158 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[440]);
                        }

                        if (tmp_expression_value_158 == NULL) {
                            assert(ERROR_OCCURRED());

                            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                            exception_lineno = 3621;
                            type_description_2 = "o";
                            goto dict_build_exception_19;
                        }
                        Py_INCREF(tmp_expression_value_158);
                    } else {
                        goto dict_build_exception_19;
                    }
                }

                tmp_dict_value_23 = LOOKUP_ATTRIBUTE(tmp_expression_value_158, mod_consts[485]);
                Py_DECREF(tmp_expression_value_158);
                if (tmp_dict_value_23 == NULL) {
                    assert(ERROR_OCCURRED());

                    FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                    exception_lineno = 3621;
                    type_description_2 = "o";
                    goto dict_build_exception_19;
                }
                tmp_res = PyDict_SetItem(tmp_kw_defaults_23, tmp_dict_key_23, tmp_dict_value_23);
                Py_DECREF(tmp_dict_value_23);
                assert(!(tmp_res != 0));
                tmp_dict_key_23 = mod_consts[496];
                tmp_expression_value_159 = PyObject_GetItem(locals_hikari$api$rest$$$class__2_RESTClient_110, mod_consts[440]);

                if (tmp_expression_value_159 == NULL) {
                    if (CHECK_AND_CLEAR_KEY_ERROR_OCCURRED()) {
                        tmp_expression_value_159 = GET_STRING_DICT_VALUE(moduledict_hikari$api$rest, (Nuitka_StringObject *)mod_consts[440]);

                        if (unlikely(tmp_expression_value_159 == NULL)) {
                            tmp_expression_value_159 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[440]);
                        }

                        if (tmp_expression_value_159 == NULL) {
                            assert(ERROR_OCCURRED());

                            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                            exception_lineno = 3622;
                            type_description_2 = "o";
                            goto dict_build_exception_19;
                        }
                        Py_INCREF(tmp_expression_value_159);
                    } else {
                        goto dict_build_exception_19;
                    }
                }

                tmp_dict_value_23 = LOOKUP_ATTRIBUTE(tmp_expression_value_159, mod_consts[485]);
                Py_DECREF(tmp_expression_value_159);
                if (tmp_dict_value_23 == NULL) {
                    assert(ERROR_OCCURRED());

                    FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                    exception_lineno = 3622;
                    type_description_2 = "o";
                    goto dict_build_exception_19;
                }
                tmp_res = PyDict_SetItem(tmp_kw_defaults_23, tmp_dict_key_23, tmp_dict_value_23);
                Py_DECREF(tmp_dict_value_23);
                assert(!(tmp_res != 0));
            }
            goto dict_build_noexception_19;
            // Exception handling pass through code for dict_build:
            dict_build_exception_19:;
            Py_DECREF(tmp_called_value_41);
            Py_DECREF(tmp_kw_defaults_23);
            goto frame_exception_exit_3;
            // Finished with no exception for dict_build:
            dict_build_noexception_19:;
            tmp_annotations_74 = PyDict_Copy(mod_consts[610]);


            tmp_args_element_value_84 = MAKE_FUNCTION_hikari$api$rest$$$function__70_edit_emoji(tmp_kw_defaults_23, tmp_annotations_74);

            frame_862833cacd6e5ba73c351f8d132a7b6b_3->m_frame.f_lineno = 3614;
            tmp_dictset_value = CALL_FUNCTION_WITH_SINGLE_ARG(tmp_called_value_41, tmp_args_element_value_84);
            Py_DECREF(tmp_called_value_41);
            Py_DECREF(tmp_args_element_value_84);
            if (tmp_dictset_value == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 3614;
                type_description_2 = "o";
                goto frame_exception_exit_3;
            }
            tmp_res = PyObject_SetItem(locals_hikari$api$rest$$$class__2_RESTClient_110, mod_consts[174], tmp_dictset_value);
            Py_DECREF(tmp_dictset_value);
            if (tmp_res != 0) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 3615;
                type_description_2 = "o";
                goto frame_exception_exit_3;
            }
        }
        {
            PyObject *tmp_called_value_42;
            PyObject *tmp_expression_value_160;
            PyObject *tmp_args_element_value_85;
            PyObject *tmp_kw_defaults_24;
            PyObject *tmp_dict_key_24;
            PyObject *tmp_dict_value_24;
            PyObject *tmp_expression_value_161;
            PyObject *tmp_annotations_75;
            tmp_expression_value_160 = PyObject_GetItem(locals_hikari$api$rest$$$class__2_RESTClient_110, mod_consts[431]);

            if (tmp_expression_value_160 == NULL) {
                if (CHECK_AND_CLEAR_KEY_ERROR_OCCURRED()) {
                    tmp_expression_value_160 = GET_STRING_DICT_VALUE(moduledict_hikari$api$rest, (Nuitka_StringObject *)mod_consts[431]);

                    if (unlikely(tmp_expression_value_160 == NULL)) {
                        tmp_expression_value_160 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[431]);
                    }

                    if (tmp_expression_value_160 == NULL) {
                        assert(ERROR_OCCURRED());

                        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                        exception_lineno = 3677;
                        type_description_2 = "o";
                        goto frame_exception_exit_3;
                    }
                    Py_INCREF(tmp_expression_value_160);
                } else {
                    goto frame_exception_exit_3;
                }
            }

            tmp_called_value_42 = LOOKUP_ATTRIBUTE(tmp_expression_value_160, mod_consts[457]);
            Py_DECREF(tmp_expression_value_160);
            if (tmp_called_value_42 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 3677;
                type_description_2 = "o";
                goto frame_exception_exit_3;
            }
            tmp_dict_key_24 = mod_consts[496];
            tmp_expression_value_161 = PyObject_GetItem(locals_hikari$api$rest$$$class__2_RESTClient_110, mod_consts[440]);

            if (tmp_expression_value_161 == NULL) {
                if (CHECK_AND_CLEAR_KEY_ERROR_OCCURRED()) {
                    tmp_expression_value_161 = GET_STRING_DICT_VALUE(moduledict_hikari$api$rest, (Nuitka_StringObject *)mod_consts[440]);

                    if (unlikely(tmp_expression_value_161 == NULL)) {
                        tmp_expression_value_161 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[440]);
                    }

                    if (tmp_expression_value_161 == NULL) {
                        assert(ERROR_OCCURRED());

                        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
                        Py_DECREF(tmp_called_value_42);

                        exception_lineno = 3683;
                        type_description_2 = "o";
                        goto frame_exception_exit_3;
                    }
                    Py_INCREF(tmp_expression_value_161);
                } else {
                    goto frame_exception_exit_3;
                }
            }

            tmp_dict_value_24 = LOOKUP_ATTRIBUTE(tmp_expression_value_161, mod_consts[485]);
            Py_DECREF(tmp_expression_value_161);
            if (tmp_dict_value_24 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
                Py_DECREF(tmp_called_value_42);

                exception_lineno = 3683;
                type_description_2 = "o";
                goto frame_exception_exit_3;
            }
            tmp_kw_defaults_24 = _PyDict_NewPresized( 1 );
            tmp_res = PyDict_SetItem(tmp_kw_defaults_24, tmp_dict_key_24, tmp_dict_value_24);
            Py_DECREF(tmp_dict_value_24);
            assert(!(tmp_res != 0));
            tmp_annotations_75 = PyDict_Copy(mod_consts[611]);


            tmp_args_element_value_85 = MAKE_FUNCTION_hikari$api$rest$$$function__71_delete_emoji(tmp_kw_defaults_24, tmp_annotations_75);

            frame_862833cacd6e5ba73c351f8d132a7b6b_3->m_frame.f_lineno = 3677;
            tmp_dictset_value = CALL_FUNCTION_WITH_SINGLE_ARG(tmp_called_value_42, tmp_args_element_value_85);
            Py_DECREF(tmp_called_value_42);
            Py_DECREF(tmp_args_element_value_85);
            if (tmp_dictset_value == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 3677;
                type_description_2 = "o";
                goto frame_exception_exit_3;
            }
            tmp_res = PyObject_SetItem(locals_hikari$api$rest$$$class__2_RESTClient_110, mod_consts[177], tmp_dictset_value);
            Py_DECREF(tmp_dictset_value);
            if (tmp_res != 0) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 3678;
                type_description_2 = "o";
                goto frame_exception_exit_3;
            }
        }
        {
            PyObject *tmp_called_instance_47;
            PyObject *tmp_args_element_value_86;
            PyObject *tmp_annotations_76;
            tmp_called_instance_47 = PyObject_GetItem(locals_hikari$api$rest$$$class__2_RESTClient_110, mod_consts[431]);

            if (tmp_called_instance_47 == NULL) {
                if (CHECK_AND_CLEAR_KEY_ERROR_OCCURRED()) {
                    tmp_called_instance_47 = GET_STRING_DICT_VALUE(moduledict_hikari$api$rest, (Nuitka_StringObject *)mod_consts[431]);

                    if (unlikely(tmp_called_instance_47 == NULL)) {
                        tmp_called_instance_47 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[431]);
                    }

                    if (tmp_called_instance_47 == NULL) {
                        assert(ERROR_OCCURRED());

                        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                        exception_lineno = 3725;
                        type_description_2 = "o";
                        goto frame_exception_exit_3;
                    }
                    Py_INCREF(tmp_called_instance_47);
                } else {
                    goto frame_exception_exit_3;
                }
            }

            tmp_annotations_76 = PyDict_Copy(mod_consts[612]);


            tmp_args_element_value_86 = MAKE_FUNCTION_hikari$api$rest$$$function__72_fetch_available_sticker_packs(tmp_annotations_76);

            frame_862833cacd6e5ba73c351f8d132a7b6b_3->m_frame.f_lineno = 3725;
            tmp_dictset_value = CALL_METHOD_WITH_SINGLE_ARG(tmp_called_instance_47, mod_consts[457], tmp_args_element_value_86);
            Py_DECREF(tmp_called_instance_47);
            Py_DECREF(tmp_args_element_value_86);
            if (tmp_dictset_value == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 3725;
                type_description_2 = "o";
                goto frame_exception_exit_3;
            }
            tmp_res = PyObject_SetItem(locals_hikari$api$rest$$$class__2_RESTClient_110, mod_consts[180], tmp_dictset_value);
            Py_DECREF(tmp_dictset_value);
            if (tmp_res != 0) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 3726;
                type_description_2 = "o";
                goto frame_exception_exit_3;
            }
        }
        {
            PyObject *tmp_called_instance_48;
            PyObject *tmp_args_element_value_87;
            PyObject *tmp_annotations_77;
            tmp_called_instance_48 = PyObject_GetItem(locals_hikari$api$rest$$$class__2_RESTClient_110, mod_consts[431]);

            if (tmp_called_instance_48 == NULL) {
                if (CHECK_AND_CLEAR_KEY_ERROR_OCCURRED()) {
                    tmp_called_instance_48 = GET_STRING_DICT_VALUE(moduledict_hikari$api$rest, (Nuitka_StringObject *)mod_consts[431]);

                    if (unlikely(tmp_called_instance_48 == NULL)) {
                        tmp_called_instance_48 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[431]);
                    }

                    if (tmp_called_instance_48 == NULL) {
                        assert(ERROR_OCCURRED());

                        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                        exception_lineno = 3751;
                        type_description_2 = "o";
                        goto frame_exception_exit_3;
                    }
                    Py_INCREF(tmp_called_instance_48);
                } else {
                    goto frame_exception_exit_3;
                }
            }

            tmp_annotations_77 = PyDict_Copy(mod_consts[613]);


            tmp_args_element_value_87 = MAKE_FUNCTION_hikari$api$rest$$$function__73_fetch_sticker(tmp_annotations_77);

            frame_862833cacd6e5ba73c351f8d132a7b6b_3->m_frame.f_lineno = 3751;
            tmp_dictset_value = CALL_METHOD_WITH_SINGLE_ARG(tmp_called_instance_48, mod_consts[457], tmp_args_element_value_87);
            Py_DECREF(tmp_called_instance_48);
            Py_DECREF(tmp_args_element_value_87);
            if (tmp_dictset_value == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 3751;
                type_description_2 = "o";
                goto frame_exception_exit_3;
            }
            tmp_res = PyObject_SetItem(locals_hikari$api$rest$$$class__2_RESTClient_110, mod_consts[183], tmp_dictset_value);
            Py_DECREF(tmp_dictset_value);
            if (tmp_res != 0) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 3752;
                type_description_2 = "o";
                goto frame_exception_exit_3;
            }
        }
        {
            PyObject *tmp_called_instance_49;
            PyObject *tmp_args_element_value_88;
            PyObject *tmp_annotations_78;
            tmp_called_instance_49 = PyObject_GetItem(locals_hikari$api$rest$$$class__2_RESTClient_110, mod_consts[431]);

            if (tmp_called_instance_49 == NULL) {
                if (CHECK_AND_CLEAR_KEY_ERROR_OCCURRED()) {
                    tmp_called_instance_49 = GET_STRING_DICT_VALUE(moduledict_hikari$api$rest, (Nuitka_StringObject *)mod_consts[431]);

                    if (unlikely(tmp_called_instance_49 == NULL)) {
                        tmp_called_instance_49 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[431]);
                    }

                    if (tmp_called_instance_49 == NULL) {
                        assert(ERROR_OCCURRED());

                        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                        exception_lineno = 3790;
                        type_description_2 = "o";
                        goto frame_exception_exit_3;
                    }
                    Py_INCREF(tmp_called_instance_49);
                } else {
                    goto frame_exception_exit_3;
                }
            }

            tmp_annotations_78 = PyDict_Copy(mod_consts[614]);


            tmp_args_element_value_88 = MAKE_FUNCTION_hikari$api$rest$$$function__74_fetch_guild_stickers(tmp_annotations_78);

            frame_862833cacd6e5ba73c351f8d132a7b6b_3->m_frame.f_lineno = 3790;
            tmp_dictset_value = CALL_METHOD_WITH_SINGLE_ARG(tmp_called_instance_49, mod_consts[457], tmp_args_element_value_88);
            Py_DECREF(tmp_called_instance_49);
            Py_DECREF(tmp_args_element_value_88);
            if (tmp_dictset_value == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 3790;
                type_description_2 = "o";
                goto frame_exception_exit_3;
            }
            tmp_res = PyObject_SetItem(locals_hikari$api$rest$$$class__2_RESTClient_110, mod_consts[186], tmp_dictset_value);
            Py_DECREF(tmp_dictset_value);
            if (tmp_res != 0) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 3791;
                type_description_2 = "o";
                goto frame_exception_exit_3;
            }
        }
        {
            PyObject *tmp_called_instance_50;
            PyObject *tmp_args_element_value_89;
            PyObject *tmp_annotations_79;
            tmp_called_instance_50 = PyObject_GetItem(locals_hikari$api$rest$$$class__2_RESTClient_110, mod_consts[431]);

            if (tmp_called_instance_50 == NULL) {
                if (CHECK_AND_CLEAR_KEY_ERROR_OCCURRED()) {
                    tmp_called_instance_50 = GET_STRING_DICT_VALUE(moduledict_hikari$api$rest, (Nuitka_StringObject *)mod_consts[431]);

                    if (unlikely(tmp_called_instance_50 == NULL)) {
                        tmp_called_instance_50 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[431]);
                    }

                    if (tmp_called_instance_50 == NULL) {
                        assert(ERROR_OCCURRED());

                        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                        exception_lineno = 3830;
                        type_description_2 = "o";
                        goto frame_exception_exit_3;
                    }
                    Py_INCREF(tmp_called_instance_50);
                } else {
                    goto frame_exception_exit_3;
                }
            }

            tmp_annotations_79 = PyDict_Copy(mod_consts[615]);


            tmp_args_element_value_89 = MAKE_FUNCTION_hikari$api$rest$$$function__75_fetch_guild_sticker(tmp_annotations_79);

            frame_862833cacd6e5ba73c351f8d132a7b6b_3->m_frame.f_lineno = 3830;
            tmp_dictset_value = CALL_METHOD_WITH_SINGLE_ARG(tmp_called_instance_50, mod_consts[457], tmp_args_element_value_89);
            Py_DECREF(tmp_called_instance_50);
            Py_DECREF(tmp_args_element_value_89);
            if (tmp_dictset_value == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 3830;
                type_description_2 = "o";
                goto frame_exception_exit_3;
            }
            tmp_res = PyObject_SetItem(locals_hikari$api$rest$$$class__2_RESTClient_110, mod_consts[189], tmp_dictset_value);
            Py_DECREF(tmp_dictset_value);
            if (tmp_res != 0) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 3831;
                type_description_2 = "o";
                goto frame_exception_exit_3;
            }
        }
        {
            PyObject *tmp_called_value_43;
            PyObject *tmp_expression_value_162;
            PyObject *tmp_args_element_value_90;
            PyObject *tmp_kw_defaults_25;
            PyObject *tmp_dict_key_25;
            PyObject *tmp_dict_value_25;
            PyObject *tmp_expression_value_163;
            PyObject *tmp_annotations_80;
            tmp_expression_value_162 = PyObject_GetItem(locals_hikari$api$rest$$$class__2_RESTClient_110, mod_consts[431]);

            if (tmp_expression_value_162 == NULL) {
                if (CHECK_AND_CLEAR_KEY_ERROR_OCCURRED()) {
                    tmp_expression_value_162 = GET_STRING_DICT_VALUE(moduledict_hikari$api$rest, (Nuitka_StringObject *)mod_consts[431]);

                    if (unlikely(tmp_expression_value_162 == NULL)) {
                        tmp_expression_value_162 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[431]);
                    }

                    if (tmp_expression_value_162 == NULL) {
                        assert(ERROR_OCCURRED());

                        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                        exception_lineno = 3875;
                        type_description_2 = "o";
                        goto frame_exception_exit_3;
                    }
                    Py_INCREF(tmp_expression_value_162);
                } else {
                    goto frame_exception_exit_3;
                }
            }

            tmp_called_value_43 = LOOKUP_ATTRIBUTE(tmp_expression_value_162, mod_consts[457]);
            Py_DECREF(tmp_expression_value_162);
            if (tmp_called_value_43 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 3875;
                type_description_2 = "o";
                goto frame_exception_exit_3;
            }
            tmp_dict_key_25 = mod_consts[616];
            tmp_expression_value_163 = PyObject_GetItem(locals_hikari$api$rest$$$class__2_RESTClient_110, mod_consts[440]);

            if (tmp_expression_value_163 == NULL) {
                if (CHECK_AND_CLEAR_KEY_ERROR_OCCURRED()) {
                    tmp_expression_value_163 = GET_STRING_DICT_VALUE(moduledict_hikari$api$rest, (Nuitka_StringObject *)mod_consts[440]);

                    if (unlikely(tmp_expression_value_163 == NULL)) {
                        tmp_expression_value_163 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[440]);
                    }

                    if (tmp_expression_value_163 == NULL) {
                        assert(ERROR_OCCURRED());

                        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
                        Py_DECREF(tmp_called_value_43);

                        exception_lineno = 3883;
                        type_description_2 = "o";
                        goto frame_exception_exit_3;
                    }
                    Py_INCREF(tmp_expression_value_163);
                } else {
                    goto frame_exception_exit_3;
                }
            }

            tmp_dict_value_25 = LOOKUP_ATTRIBUTE(tmp_expression_value_163, mod_consts[485]);
            Py_DECREF(tmp_expression_value_163);
            if (tmp_dict_value_25 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
                Py_DECREF(tmp_called_value_43);

                exception_lineno = 3883;
                type_description_2 = "o";
                goto frame_exception_exit_3;
            }
            tmp_kw_defaults_25 = _PyDict_NewPresized( 2 );
            {
                PyObject *tmp_expression_value_164;
                tmp_res = PyDict_SetItem(tmp_kw_defaults_25, tmp_dict_key_25, tmp_dict_value_25);
                Py_DECREF(tmp_dict_value_25);
                assert(!(tmp_res != 0));
                tmp_dict_key_25 = mod_consts[496];
                tmp_expression_value_164 = PyObject_GetItem(locals_hikari$api$rest$$$class__2_RESTClient_110, mod_consts[440]);

                if (tmp_expression_value_164 == NULL) {
                    if (CHECK_AND_CLEAR_KEY_ERROR_OCCURRED()) {
                        tmp_expression_value_164 = GET_STRING_DICT_VALUE(moduledict_hikari$api$rest, (Nuitka_StringObject *)mod_consts[440]);

                        if (unlikely(tmp_expression_value_164 == NULL)) {
                            tmp_expression_value_164 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[440]);
                        }

                        if (tmp_expression_value_164 == NULL) {
                            assert(ERROR_OCCURRED());

                            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                            exception_lineno = 3884;
                            type_description_2 = "o";
                            goto dict_build_exception_20;
                        }
                        Py_INCREF(tmp_expression_value_164);
                    } else {
                        goto dict_build_exception_20;
                    }
                }

                tmp_dict_value_25 = LOOKUP_ATTRIBUTE(tmp_expression_value_164, mod_consts[485]);
                Py_DECREF(tmp_expression_value_164);
                if (tmp_dict_value_25 == NULL) {
                    assert(ERROR_OCCURRED());

                    FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                    exception_lineno = 3884;
                    type_description_2 = "o";
                    goto dict_build_exception_20;
                }
                tmp_res = PyDict_SetItem(tmp_kw_defaults_25, tmp_dict_key_25, tmp_dict_value_25);
                Py_DECREF(tmp_dict_value_25);
                assert(!(tmp_res != 0));
            }
            goto dict_build_noexception_20;
            // Exception handling pass through code for dict_build:
            dict_build_exception_20:;
            Py_DECREF(tmp_called_value_43);
            Py_DECREF(tmp_kw_defaults_25);
            goto frame_exception_exit_3;
            // Finished with no exception for dict_build:
            dict_build_noexception_20:;
            tmp_annotations_80 = PyDict_Copy(mod_consts[617]);


            tmp_args_element_value_90 = MAKE_FUNCTION_hikari$api$rest$$$function__76_create_sticker(tmp_kw_defaults_25, tmp_annotations_80);

            frame_862833cacd6e5ba73c351f8d132a7b6b_3->m_frame.f_lineno = 3875;
            tmp_dictset_value = CALL_FUNCTION_WITH_SINGLE_ARG(tmp_called_value_43, tmp_args_element_value_90);
            Py_DECREF(tmp_called_value_43);
            Py_DECREF(tmp_args_element_value_90);
            if (tmp_dictset_value == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 3875;
                type_description_2 = "o";
                goto frame_exception_exit_3;
            }
            tmp_res = PyObject_SetItem(locals_hikari$api$rest$$$class__2_RESTClient_110, mod_consts[192], tmp_dictset_value);
            Py_DECREF(tmp_dictset_value);
            if (tmp_res != 0) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 3876;
                type_description_2 = "o";
                goto frame_exception_exit_3;
            }
        }
        {
            PyObject *tmp_called_value_44;
            PyObject *tmp_expression_value_165;
            PyObject *tmp_args_element_value_91;
            PyObject *tmp_kw_defaults_26;
            PyObject *tmp_dict_key_26;
            PyObject *tmp_dict_value_26;
            PyObject *tmp_expression_value_166;
            PyObject *tmp_annotations_81;
            tmp_expression_value_165 = PyObject_GetItem(locals_hikari$api$rest$$$class__2_RESTClient_110, mod_consts[431]);

            if (tmp_expression_value_165 == NULL) {
                if (CHECK_AND_CLEAR_KEY_ERROR_OCCURRED()) {
                    tmp_expression_value_165 = GET_STRING_DICT_VALUE(moduledict_hikari$api$rest, (Nuitka_StringObject *)mod_consts[431]);

                    if (unlikely(tmp_expression_value_165 == NULL)) {
                        tmp_expression_value_165 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[431]);
                    }

                    if (tmp_expression_value_165 == NULL) {
                        assert(ERROR_OCCURRED());

                        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                        exception_lineno = 3944;
                        type_description_2 = "o";
                        goto frame_exception_exit_3;
                    }
                    Py_INCREF(tmp_expression_value_165);
                } else {
                    goto frame_exception_exit_3;
                }
            }

            tmp_called_value_44 = LOOKUP_ATTRIBUTE(tmp_expression_value_165, mod_consts[457]);
            Py_DECREF(tmp_expression_value_165);
            if (tmp_called_value_44 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 3944;
                type_description_2 = "o";
                goto frame_exception_exit_3;
            }
            tmp_dict_key_26 = mod_consts[484];
            tmp_expression_value_166 = PyObject_GetItem(locals_hikari$api$rest$$$class__2_RESTClient_110, mod_consts[440]);

            if (tmp_expression_value_166 == NULL) {
                if (CHECK_AND_CLEAR_KEY_ERROR_OCCURRED()) {
                    tmp_expression_value_166 = GET_STRING_DICT_VALUE(moduledict_hikari$api$rest, (Nuitka_StringObject *)mod_consts[440]);

                    if (unlikely(tmp_expression_value_166 == NULL)) {
                        tmp_expression_value_166 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[440]);
                    }

                    if (tmp_expression_value_166 == NULL) {
                        assert(ERROR_OCCURRED());

                        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
                        Py_DECREF(tmp_called_value_44);

                        exception_lineno = 3950;
                        type_description_2 = "o";
                        goto frame_exception_exit_3;
                    }
                    Py_INCREF(tmp_expression_value_166);
                } else {
                    goto frame_exception_exit_3;
                }
            }

            tmp_dict_value_26 = LOOKUP_ATTRIBUTE(tmp_expression_value_166, mod_consts[485]);
            Py_DECREF(tmp_expression_value_166);
            if (tmp_dict_value_26 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
                Py_DECREF(tmp_called_value_44);

                exception_lineno = 3950;
                type_description_2 = "o";
                goto frame_exception_exit_3;
            }
            tmp_kw_defaults_26 = _PyDict_NewPresized( 4 );
            {
                PyObject *tmp_expression_value_167;
                PyObject *tmp_expression_value_168;
                PyObject *tmp_expression_value_169;
                tmp_res = PyDict_SetItem(tmp_kw_defaults_26, tmp_dict_key_26, tmp_dict_value_26);
                Py_DECREF(tmp_dict_value_26);
                assert(!(tmp_res != 0));
                tmp_dict_key_26 = mod_consts[616];
                tmp_expression_value_167 = PyObject_GetItem(locals_hikari$api$rest$$$class__2_RESTClient_110, mod_consts[440]);

                if (tmp_expression_value_167 == NULL) {
                    if (CHECK_AND_CLEAR_KEY_ERROR_OCCURRED()) {
                        tmp_expression_value_167 = GET_STRING_DICT_VALUE(moduledict_hikari$api$rest, (Nuitka_StringObject *)mod_consts[440]);

                        if (unlikely(tmp_expression_value_167 == NULL)) {
                            tmp_expression_value_167 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[440]);
                        }

                        if (tmp_expression_value_167 == NULL) {
                            assert(ERROR_OCCURRED());

                            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                            exception_lineno = 3951;
                            type_description_2 = "o";
                            goto dict_build_exception_21;
                        }
                        Py_INCREF(tmp_expression_value_167);
                    } else {
                        goto dict_build_exception_21;
                    }
                }

                tmp_dict_value_26 = LOOKUP_ATTRIBUTE(tmp_expression_value_167, mod_consts[485]);
                Py_DECREF(tmp_expression_value_167);
                if (tmp_dict_value_26 == NULL) {
                    assert(ERROR_OCCURRED());

                    FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                    exception_lineno = 3951;
                    type_description_2 = "o";
                    goto dict_build_exception_21;
                }
                tmp_res = PyDict_SetItem(tmp_kw_defaults_26, tmp_dict_key_26, tmp_dict_value_26);
                Py_DECREF(tmp_dict_value_26);
                assert(!(tmp_res != 0));
                tmp_dict_key_26 = mod_consts[618];
                tmp_expression_value_168 = PyObject_GetItem(locals_hikari$api$rest$$$class__2_RESTClient_110, mod_consts[440]);

                if (tmp_expression_value_168 == NULL) {
                    if (CHECK_AND_CLEAR_KEY_ERROR_OCCURRED()) {
                        tmp_expression_value_168 = GET_STRING_DICT_VALUE(moduledict_hikari$api$rest, (Nuitka_StringObject *)mod_consts[440]);

                        if (unlikely(tmp_expression_value_168 == NULL)) {
                            tmp_expression_value_168 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[440]);
                        }

                        if (tmp_expression_value_168 == NULL) {
                            assert(ERROR_OCCURRED());

                            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                            exception_lineno = 3952;
                            type_description_2 = "o";
                            goto dict_build_exception_21;
                        }
                        Py_INCREF(tmp_expression_value_168);
                    } else {
                        goto dict_build_exception_21;
                    }
                }

                tmp_dict_value_26 = LOOKUP_ATTRIBUTE(tmp_expression_value_168, mod_consts[485]);
                Py_DECREF(tmp_expression_value_168);
                if (tmp_dict_value_26 == NULL) {
                    assert(ERROR_OCCURRED());

                    FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                    exception_lineno = 3952;
                    type_description_2 = "o";
                    goto dict_build_exception_21;
                }
                tmp_res = PyDict_SetItem(tmp_kw_defaults_26, tmp_dict_key_26, tmp_dict_value_26);
                Py_DECREF(tmp_dict_value_26);
                assert(!(tmp_res != 0));
                tmp_dict_key_26 = mod_consts[496];
                tmp_expression_value_169 = PyObject_GetItem(locals_hikari$api$rest$$$class__2_RESTClient_110, mod_consts[440]);

                if (tmp_expression_value_169 == NULL) {
                    if (CHECK_AND_CLEAR_KEY_ERROR_OCCURRED()) {
                        tmp_expression_value_169 = GET_STRING_DICT_VALUE(moduledict_hikari$api$rest, (Nuitka_StringObject *)mod_consts[440]);

                        if (unlikely(tmp_expression_value_169 == NULL)) {
                            tmp_expression_value_169 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[440]);
                        }

                        if (tmp_expression_value_169 == NULL) {
                            assert(ERROR_OCCURRED());

                            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                            exception_lineno = 3953;
                            type_description_2 = "o";
                            goto dict_build_exception_21;
                        }
                        Py_INCREF(tmp_expression_value_169);
                    } else {
                        goto dict_build_exception_21;
                    }
                }

                tmp_dict_value_26 = LOOKUP_ATTRIBUTE(tmp_expression_value_169, mod_consts[485]);
                Py_DECREF(tmp_expression_value_169);
                if (tmp_dict_value_26 == NULL) {
                    assert(ERROR_OCCURRED());

                    FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                    exception_lineno = 3953;
                    type_description_2 = "o";
                    goto dict_build_exception_21;
                }
                tmp_res = PyDict_SetItem(tmp_kw_defaults_26, tmp_dict_key_26, tmp_dict_value_26);
                Py_DECREF(tmp_dict_value_26);
                assert(!(tmp_res != 0));
            }
            goto dict_build_noexception_21;
            // Exception handling pass through code for dict_build:
            dict_build_exception_21:;
            Py_DECREF(tmp_called_value_44);
            Py_DECREF(tmp_kw_defaults_26);
            goto frame_exception_exit_3;
            // Finished with no exception for dict_build:
            dict_build_noexception_21:;
            tmp_annotations_81 = PyDict_Copy(mod_consts[619]);


            tmp_args_element_value_91 = MAKE_FUNCTION_hikari$api$rest$$$function__77_edit_sticker(tmp_kw_defaults_26, tmp_annotations_81);

            frame_862833cacd6e5ba73c351f8d132a7b6b_3->m_frame.f_lineno = 3944;
            tmp_dictset_value = CALL_FUNCTION_WITH_SINGLE_ARG(tmp_called_value_44, tmp_args_element_value_91);
            Py_DECREF(tmp_called_value_44);
            Py_DECREF(tmp_args_element_value_91);
            if (tmp_dictset_value == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 3944;
                type_description_2 = "o";
                goto frame_exception_exit_3;
            }
            tmp_res = PyObject_SetItem(locals_hikari$api$rest$$$class__2_RESTClient_110, mod_consts[195], tmp_dictset_value);
            Py_DECREF(tmp_dictset_value);
            if (tmp_res != 0) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 3945;
                type_description_2 = "o";
                goto frame_exception_exit_3;
            }
        }
        {
            PyObject *tmp_called_value_45;
            PyObject *tmp_expression_value_170;
            PyObject *tmp_args_element_value_92;
            PyObject *tmp_kw_defaults_27;
            PyObject *tmp_dict_key_27;
            PyObject *tmp_dict_value_27;
            PyObject *tmp_expression_value_171;
            PyObject *tmp_annotations_82;
            tmp_expression_value_170 = PyObject_GetItem(locals_hikari$api$rest$$$class__2_RESTClient_110, mod_consts[431]);

            if (tmp_expression_value_170 == NULL) {
                if (CHECK_AND_CLEAR_KEY_ERROR_OCCURRED()) {
                    tmp_expression_value_170 = GET_STRING_DICT_VALUE(moduledict_hikari$api$rest, (Nuitka_StringObject *)mod_consts[431]);

                    if (unlikely(tmp_expression_value_170 == NULL)) {
                        tmp_expression_value_170 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[431]);
                    }

                    if (tmp_expression_value_170 == NULL) {
                        assert(ERROR_OCCURRED());

                        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                        exception_lineno = 4008;
                        type_description_2 = "o";
                        goto frame_exception_exit_3;
                    }
                    Py_INCREF(tmp_expression_value_170);
                } else {
                    goto frame_exception_exit_3;
                }
            }

            tmp_called_value_45 = LOOKUP_ATTRIBUTE(tmp_expression_value_170, mod_consts[457]);
            Py_DECREF(tmp_expression_value_170);
            if (tmp_called_value_45 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 4008;
                type_description_2 = "o";
                goto frame_exception_exit_3;
            }
            tmp_dict_key_27 = mod_consts[496];
            tmp_expression_value_171 = PyObject_GetItem(locals_hikari$api$rest$$$class__2_RESTClient_110, mod_consts[440]);

            if (tmp_expression_value_171 == NULL) {
                if (CHECK_AND_CLEAR_KEY_ERROR_OCCURRED()) {
                    tmp_expression_value_171 = GET_STRING_DICT_VALUE(moduledict_hikari$api$rest, (Nuitka_StringObject *)mod_consts[440]);

                    if (unlikely(tmp_expression_value_171 == NULL)) {
                        tmp_expression_value_171 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[440]);
                    }

                    if (tmp_expression_value_171 == NULL) {
                        assert(ERROR_OCCURRED());

                        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
                        Py_DECREF(tmp_called_value_45);

                        exception_lineno = 4014;
                        type_description_2 = "o";
                        goto frame_exception_exit_3;
                    }
                    Py_INCREF(tmp_expression_value_171);
                } else {
                    goto frame_exception_exit_3;
                }
            }

            tmp_dict_value_27 = LOOKUP_ATTRIBUTE(tmp_expression_value_171, mod_consts[485]);
            Py_DECREF(tmp_expression_value_171);
            if (tmp_dict_value_27 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
                Py_DECREF(tmp_called_value_45);

                exception_lineno = 4014;
                type_description_2 = "o";
                goto frame_exception_exit_3;
            }
            tmp_kw_defaults_27 = _PyDict_NewPresized( 1 );
            tmp_res = PyDict_SetItem(tmp_kw_defaults_27, tmp_dict_key_27, tmp_dict_value_27);
            Py_DECREF(tmp_dict_value_27);
            assert(!(tmp_res != 0));
            tmp_annotations_82 = PyDict_Copy(mod_consts[620]);


            tmp_args_element_value_92 = MAKE_FUNCTION_hikari$api$rest$$$function__78_delete_sticker(tmp_kw_defaults_27, tmp_annotations_82);

            frame_862833cacd6e5ba73c351f8d132a7b6b_3->m_frame.f_lineno = 4008;
            tmp_dictset_value = CALL_FUNCTION_WITH_SINGLE_ARG(tmp_called_value_45, tmp_args_element_value_92);
            Py_DECREF(tmp_called_value_45);
            Py_DECREF(tmp_args_element_value_92);
            if (tmp_dictset_value == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 4008;
                type_description_2 = "o";
                goto frame_exception_exit_3;
            }
            tmp_res = PyObject_SetItem(locals_hikari$api$rest$$$class__2_RESTClient_110, mod_consts[198], tmp_dictset_value);
            Py_DECREF(tmp_dictset_value);
            if (tmp_res != 0) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 4009;
                type_description_2 = "o";
                goto frame_exception_exit_3;
            }
        }
        {
            PyObject *tmp_called_instance_51;
            PyObject *tmp_args_element_value_93;
            PyObject *tmp_annotations_83;
            tmp_called_instance_51 = PyObject_GetItem(locals_hikari$api$rest$$$class__2_RESTClient_110, mod_consts[431]);

            if (tmp_called_instance_51 == NULL) {
                if (CHECK_AND_CLEAR_KEY_ERROR_OCCURRED()) {
                    tmp_called_instance_51 = GET_STRING_DICT_VALUE(moduledict_hikari$api$rest, (Nuitka_StringObject *)mod_consts[431]);

                    if (unlikely(tmp_called_instance_51 == NULL)) {
                        tmp_called_instance_51 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[431]);
                    }

                    if (tmp_called_instance_51 == NULL) {
                        assert(ERROR_OCCURRED());

                        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                        exception_lineno = 4056;
                        type_description_2 = "o";
                        goto frame_exception_exit_3;
                    }
                    Py_INCREF(tmp_called_instance_51);
                } else {
                    goto frame_exception_exit_3;
                }
            }

            tmp_annotations_83 = PyDict_Copy(mod_consts[621]);


            tmp_args_element_value_93 = MAKE_FUNCTION_hikari$api$rest$$$function__79_guild_builder(tmp_annotations_83);

            frame_862833cacd6e5ba73c351f8d132a7b6b_3->m_frame.f_lineno = 4056;
            tmp_dictset_value = CALL_METHOD_WITH_SINGLE_ARG(tmp_called_instance_51, mod_consts[457], tmp_args_element_value_93);
            Py_DECREF(tmp_called_instance_51);
            Py_DECREF(tmp_args_element_value_93);
            if (tmp_dictset_value == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 4056;
                type_description_2 = "o";
                goto frame_exception_exit_3;
            }
            tmp_res = PyObject_SetItem(locals_hikari$api$rest$$$class__2_RESTClient_110, mod_consts[623], tmp_dictset_value);
            Py_DECREF(tmp_dictset_value);
            if (tmp_res != 0) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 4057;
                type_description_2 = "o";
                goto frame_exception_exit_3;
            }
        }
        {
            PyObject *tmp_called_instance_52;
            PyObject *tmp_args_element_value_94;
            PyObject *tmp_annotations_84;
            tmp_called_instance_52 = PyObject_GetItem(locals_hikari$api$rest$$$class__2_RESTClient_110, mod_consts[431]);

            if (tmp_called_instance_52 == NULL) {
                if (CHECK_AND_CLEAR_KEY_ERROR_OCCURRED()) {
                    tmp_called_instance_52 = GET_STRING_DICT_VALUE(moduledict_hikari$api$rest, (Nuitka_StringObject *)mod_consts[431]);

                    if (unlikely(tmp_called_instance_52 == NULL)) {
                        tmp_called_instance_52 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[431]);
                    }

                    if (tmp_called_instance_52 == NULL) {
                        assert(ERROR_OCCURRED());

                        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                        exception_lineno = 4106;
                        type_description_2 = "o";
                        goto frame_exception_exit_3;
                    }
                    Py_INCREF(tmp_called_instance_52);
                } else {
                    goto frame_exception_exit_3;
                }
            }

            tmp_annotations_84 = PyDict_Copy(mod_consts[625]);


            tmp_args_element_value_94 = MAKE_FUNCTION_hikari$api$rest$$$function__80_fetch_guild(tmp_annotations_84);

            frame_862833cacd6e5ba73c351f8d132a7b6b_3->m_frame.f_lineno = 4106;
            tmp_dictset_value = CALL_METHOD_WITH_SINGLE_ARG(tmp_called_instance_52, mod_consts[457], tmp_args_element_value_94);
            Py_DECREF(tmp_called_instance_52);
            Py_DECREF(tmp_args_element_value_94);
            if (tmp_dictset_value == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 4106;
                type_description_2 = "o";
                goto frame_exception_exit_3;
            }
            tmp_res = PyObject_SetItem(locals_hikari$api$rest$$$class__2_RESTClient_110, mod_consts[201], tmp_dictset_value);
            Py_DECREF(tmp_dictset_value);
            if (tmp_res != 0) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 4107;
                type_description_2 = "o";
                goto frame_exception_exit_3;
            }
        }
        {
            PyObject *tmp_called_instance_53;
            PyObject *tmp_args_element_value_95;
            PyObject *tmp_annotations_85;
            tmp_called_instance_53 = PyObject_GetItem(locals_hikari$api$rest$$$class__2_RESTClient_110, mod_consts[431]);

            if (tmp_called_instance_53 == NULL) {
                if (CHECK_AND_CLEAR_KEY_ERROR_OCCURRED()) {
                    tmp_called_instance_53 = GET_STRING_DICT_VALUE(moduledict_hikari$api$rest, (Nuitka_StringObject *)mod_consts[431]);

                    if (unlikely(tmp_called_instance_53 == NULL)) {
                        tmp_called_instance_53 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[431]);
                    }

                    if (tmp_called_instance_53 == NULL) {
                        assert(ERROR_OCCURRED());

                        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                        exception_lineno = 4144;
                        type_description_2 = "o";
                        goto frame_exception_exit_3;
                    }
                    Py_INCREF(tmp_called_instance_53);
                } else {
                    goto frame_exception_exit_3;
                }
            }

            tmp_annotations_85 = PyDict_Copy(mod_consts[626]);


            tmp_args_element_value_95 = MAKE_FUNCTION_hikari$api$rest$$$function__81_fetch_guild_preview(tmp_annotations_85);

            frame_862833cacd6e5ba73c351f8d132a7b6b_3->m_frame.f_lineno = 4144;
            tmp_dictset_value = CALL_METHOD_WITH_SINGLE_ARG(tmp_called_instance_53, mod_consts[457], tmp_args_element_value_95);
            Py_DECREF(tmp_called_instance_53);
            Py_DECREF(tmp_args_element_value_95);
            if (tmp_dictset_value == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 4144;
                type_description_2 = "o";
                goto frame_exception_exit_3;
            }
            tmp_res = PyObject_SetItem(locals_hikari$api$rest$$$class__2_RESTClient_110, mod_consts[204], tmp_dictset_value);
            Py_DECREF(tmp_dictset_value);
            if (tmp_res != 0) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 4145;
                type_description_2 = "o";
                goto frame_exception_exit_3;
            }
        }
        {
            PyObject *tmp_called_value_46;
            PyObject *tmp_expression_value_172;
            PyObject *tmp_args_element_value_96;
            PyObject *tmp_kw_defaults_28;
            PyObject *tmp_dict_key_28;
            PyObject *tmp_dict_value_28;
            PyObject *tmp_expression_value_173;
            PyObject *tmp_annotations_86;
            tmp_expression_value_172 = PyObject_GetItem(locals_hikari$api$rest$$$class__2_RESTClient_110, mod_consts[431]);

            if (tmp_expression_value_172 == NULL) {
                if (CHECK_AND_CLEAR_KEY_ERROR_OCCURRED()) {
                    tmp_expression_value_172 = GET_STRING_DICT_VALUE(moduledict_hikari$api$rest, (Nuitka_StringObject *)mod_consts[431]);

                    if (unlikely(tmp_expression_value_172 == NULL)) {
                        tmp_expression_value_172 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[431]);
                    }

                    if (tmp_expression_value_172 == NULL) {
                        assert(ERROR_OCCURRED());

                        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                        exception_lineno = 4183;
                        type_description_2 = "o";
                        goto frame_exception_exit_3;
                    }
                    Py_INCREF(tmp_expression_value_172);
                } else {
                    goto frame_exception_exit_3;
                }
            }

            tmp_called_value_46 = LOOKUP_ATTRIBUTE(tmp_expression_value_172, mod_consts[457]);
            Py_DECREF(tmp_expression_value_172);
            if (tmp_called_value_46 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 4183;
                type_description_2 = "o";
                goto frame_exception_exit_3;
            }
            tmp_dict_key_28 = mod_consts[484];
            tmp_expression_value_173 = PyObject_GetItem(locals_hikari$api$rest$$$class__2_RESTClient_110, mod_consts[440]);

            if (tmp_expression_value_173 == NULL) {
                if (CHECK_AND_CLEAR_KEY_ERROR_OCCURRED()) {
                    tmp_expression_value_173 = GET_STRING_DICT_VALUE(moduledict_hikari$api$rest, (Nuitka_StringObject *)mod_consts[440]);

                    if (unlikely(tmp_expression_value_173 == NULL)) {
                        tmp_expression_value_173 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[440]);
                    }

                    if (tmp_expression_value_173 == NULL) {
                        assert(ERROR_OCCURRED());

                        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
                        Py_DECREF(tmp_called_value_46);

                        exception_lineno = 4188;
                        type_description_2 = "o";
                        goto frame_exception_exit_3;
                    }
                    Py_INCREF(tmp_expression_value_173);
                } else {
                    goto frame_exception_exit_3;
                }
            }

            tmp_dict_value_28 = LOOKUP_ATTRIBUTE(tmp_expression_value_173, mod_consts[485]);
            Py_DECREF(tmp_expression_value_173);
            if (tmp_dict_value_28 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
                Py_DECREF(tmp_called_value_46);

                exception_lineno = 4188;
                type_description_2 = "o";
                goto frame_exception_exit_3;
            }
            tmp_kw_defaults_28 = _PyDict_NewPresized( 15 );
            {
                PyObject *tmp_expression_value_174;
                PyObject *tmp_expression_value_175;
                PyObject *tmp_expression_value_176;
                PyObject *tmp_expression_value_177;
                PyObject *tmp_expression_value_178;
                PyObject *tmp_expression_value_179;
                PyObject *tmp_expression_value_180;
                PyObject *tmp_expression_value_181;
                PyObject *tmp_expression_value_182;
                PyObject *tmp_expression_value_183;
                PyObject *tmp_expression_value_184;
                PyObject *tmp_expression_value_185;
                PyObject *tmp_expression_value_186;
                PyObject *tmp_expression_value_187;
                tmp_res = PyDict_SetItem(tmp_kw_defaults_28, tmp_dict_key_28, tmp_dict_value_28);
                Py_DECREF(tmp_dict_value_28);
                assert(!(tmp_res != 0));
                tmp_dict_key_28 = mod_consts[627];
                tmp_expression_value_174 = PyObject_GetItem(locals_hikari$api$rest$$$class__2_RESTClient_110, mod_consts[440]);

                if (tmp_expression_value_174 == NULL) {
                    if (CHECK_AND_CLEAR_KEY_ERROR_OCCURRED()) {
                        tmp_expression_value_174 = GET_STRING_DICT_VALUE(moduledict_hikari$api$rest, (Nuitka_StringObject *)mod_consts[440]);

                        if (unlikely(tmp_expression_value_174 == NULL)) {
                            tmp_expression_value_174 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[440]);
                        }

                        if (tmp_expression_value_174 == NULL) {
                            assert(ERROR_OCCURRED());

                            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                            exception_lineno = 4189;
                            type_description_2 = "o";
                            goto dict_build_exception_22;
                        }
                        Py_INCREF(tmp_expression_value_174);
                    } else {
                        goto dict_build_exception_22;
                    }
                }

                tmp_dict_value_28 = LOOKUP_ATTRIBUTE(tmp_expression_value_174, mod_consts[485]);
                Py_DECREF(tmp_expression_value_174);
                if (tmp_dict_value_28 == NULL) {
                    assert(ERROR_OCCURRED());

                    FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                    exception_lineno = 4189;
                    type_description_2 = "o";
                    goto dict_build_exception_22;
                }
                tmp_res = PyDict_SetItem(tmp_kw_defaults_28, tmp_dict_key_28, tmp_dict_value_28);
                Py_DECREF(tmp_dict_value_28);
                assert(!(tmp_res != 0));
                tmp_dict_key_28 = mod_consts[628];
                tmp_expression_value_175 = PyObject_GetItem(locals_hikari$api$rest$$$class__2_RESTClient_110, mod_consts[440]);

                if (tmp_expression_value_175 == NULL) {
                    if (CHECK_AND_CLEAR_KEY_ERROR_OCCURRED()) {
                        tmp_expression_value_175 = GET_STRING_DICT_VALUE(moduledict_hikari$api$rest, (Nuitka_StringObject *)mod_consts[440]);

                        if (unlikely(tmp_expression_value_175 == NULL)) {
                            tmp_expression_value_175 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[440]);
                        }

                        if (tmp_expression_value_175 == NULL) {
                            assert(ERROR_OCCURRED());

                            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                            exception_lineno = 4192;
                            type_description_2 = "o";
                            goto dict_build_exception_22;
                        }
                        Py_INCREF(tmp_expression_value_175);
                    } else {
                        goto dict_build_exception_22;
                    }
                }

                tmp_dict_value_28 = LOOKUP_ATTRIBUTE(tmp_expression_value_175, mod_consts[485]);
                Py_DECREF(tmp_expression_value_175);
                if (tmp_dict_value_28 == NULL) {
                    assert(ERROR_OCCURRED());

                    FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                    exception_lineno = 4192;
                    type_description_2 = "o";
                    goto dict_build_exception_22;
                }
                tmp_res = PyDict_SetItem(tmp_kw_defaults_28, tmp_dict_key_28, tmp_dict_value_28);
                Py_DECREF(tmp_dict_value_28);
                assert(!(tmp_res != 0));
                tmp_dict_key_28 = mod_consts[629];
                tmp_expression_value_176 = PyObject_GetItem(locals_hikari$api$rest$$$class__2_RESTClient_110, mod_consts[440]);

                if (tmp_expression_value_176 == NULL) {
                    if (CHECK_AND_CLEAR_KEY_ERROR_OCCURRED()) {
                        tmp_expression_value_176 = GET_STRING_DICT_VALUE(moduledict_hikari$api$rest, (Nuitka_StringObject *)mod_consts[440]);

                        if (unlikely(tmp_expression_value_176 == NULL)) {
                            tmp_expression_value_176 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[440]);
                        }

                        if (tmp_expression_value_176 == NULL) {
                            assert(ERROR_OCCURRED());

                            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                            exception_lineno = 4195;
                            type_description_2 = "o";
                            goto dict_build_exception_22;
                        }
                        Py_INCREF(tmp_expression_value_176);
                    } else {
                        goto dict_build_exception_22;
                    }
                }

                tmp_dict_value_28 = LOOKUP_ATTRIBUTE(tmp_expression_value_176, mod_consts[485]);
                Py_DECREF(tmp_expression_value_176);
                if (tmp_dict_value_28 == NULL) {
                    assert(ERROR_OCCURRED());

                    FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                    exception_lineno = 4195;
                    type_description_2 = "o";
                    goto dict_build_exception_22;
                }
                tmp_res = PyDict_SetItem(tmp_kw_defaults_28, tmp_dict_key_28, tmp_dict_value_28);
                Py_DECREF(tmp_dict_value_28);
                assert(!(tmp_res != 0));
                tmp_dict_key_28 = mod_consts[630];
                tmp_expression_value_177 = PyObject_GetItem(locals_hikari$api$rest$$$class__2_RESTClient_110, mod_consts[440]);

                if (tmp_expression_value_177 == NULL) {
                    if (CHECK_AND_CLEAR_KEY_ERROR_OCCURRED()) {
                        tmp_expression_value_177 = GET_STRING_DICT_VALUE(moduledict_hikari$api$rest, (Nuitka_StringObject *)mod_consts[440]);

                        if (unlikely(tmp_expression_value_177 == NULL)) {
                            tmp_expression_value_177 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[440]);
                        }

                        if (tmp_expression_value_177 == NULL) {
                            assert(ERROR_OCCURRED());

                            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                            exception_lineno = 4198;
                            type_description_2 = "o";
                            goto dict_build_exception_22;
                        }
                        Py_INCREF(tmp_expression_value_177);
                    } else {
                        goto dict_build_exception_22;
                    }
                }

                tmp_dict_value_28 = LOOKUP_ATTRIBUTE(tmp_expression_value_177, mod_consts[485]);
                Py_DECREF(tmp_expression_value_177);
                if (tmp_dict_value_28 == NULL) {
                    assert(ERROR_OCCURRED());

                    FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                    exception_lineno = 4198;
                    type_description_2 = "o";
                    goto dict_build_exception_22;
                }
                tmp_res = PyDict_SetItem(tmp_kw_defaults_28, tmp_dict_key_28, tmp_dict_value_28);
                Py_DECREF(tmp_dict_value_28);
                assert(!(tmp_res != 0));
                tmp_dict_key_28 = mod_consts[631];
                tmp_expression_value_178 = PyObject_GetItem(locals_hikari$api$rest$$$class__2_RESTClient_110, mod_consts[440]);

                if (tmp_expression_value_178 == NULL) {
                    if (CHECK_AND_CLEAR_KEY_ERROR_OCCURRED()) {
                        tmp_expression_value_178 = GET_STRING_DICT_VALUE(moduledict_hikari$api$rest, (Nuitka_StringObject *)mod_consts[440]);

                        if (unlikely(tmp_expression_value_178 == NULL)) {
                            tmp_expression_value_178 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[440]);
                        }

                        if (tmp_expression_value_178 == NULL) {
                            assert(ERROR_OCCURRED());

                            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                            exception_lineno = 4199;
                            type_description_2 = "o";
                            goto dict_build_exception_22;
                        }
                        Py_INCREF(tmp_expression_value_178);
                    } else {
                        goto dict_build_exception_22;
                    }
                }

                tmp_dict_value_28 = LOOKUP_ATTRIBUTE(tmp_expression_value_178, mod_consts[485]);
                Py_DECREF(tmp_expression_value_178);
                if (tmp_dict_value_28 == NULL) {
                    assert(ERROR_OCCURRED());

                    FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                    exception_lineno = 4199;
                    type_description_2 = "o";
                    goto dict_build_exception_22;
                }
                tmp_res = PyDict_SetItem(tmp_kw_defaults_28, tmp_dict_key_28, tmp_dict_value_28);
                Py_DECREF(tmp_dict_value_28);
                assert(!(tmp_res != 0));
                tmp_dict_key_28 = mod_consts[632];
                tmp_expression_value_179 = PyObject_GetItem(locals_hikari$api$rest$$$class__2_RESTClient_110, mod_consts[440]);

                if (tmp_expression_value_179 == NULL) {
                    if (CHECK_AND_CLEAR_KEY_ERROR_OCCURRED()) {
                        tmp_expression_value_179 = GET_STRING_DICT_VALUE(moduledict_hikari$api$rest, (Nuitka_StringObject *)mod_consts[440]);

                        if (unlikely(tmp_expression_value_179 == NULL)) {
                            tmp_expression_value_179 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[440]);
                        }

                        if (tmp_expression_value_179 == NULL) {
                            assert(ERROR_OCCURRED());

                            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                            exception_lineno = 4200;
                            type_description_2 = "o";
                            goto dict_build_exception_22;
                        }
                        Py_INCREF(tmp_expression_value_179);
                    } else {
                        goto dict_build_exception_22;
                    }
                }

                tmp_dict_value_28 = LOOKUP_ATTRIBUTE(tmp_expression_value_179, mod_consts[485]);
                Py_DECREF(tmp_expression_value_179);
                if (tmp_dict_value_28 == NULL) {
                    assert(ERROR_OCCURRED());

                    FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                    exception_lineno = 4200;
                    type_description_2 = "o";
                    goto dict_build_exception_22;
                }
                tmp_res = PyDict_SetItem(tmp_kw_defaults_28, tmp_dict_key_28, tmp_dict_value_28);
                Py_DECREF(tmp_dict_value_28);
                assert(!(tmp_res != 0));
                tmp_dict_key_28 = mod_consts[633];
                tmp_expression_value_180 = PyObject_GetItem(locals_hikari$api$rest$$$class__2_RESTClient_110, mod_consts[440]);

                if (tmp_expression_value_180 == NULL) {
                    if (CHECK_AND_CLEAR_KEY_ERROR_OCCURRED()) {
                        tmp_expression_value_180 = GET_STRING_DICT_VALUE(moduledict_hikari$api$rest, (Nuitka_StringObject *)mod_consts[440]);

                        if (unlikely(tmp_expression_value_180 == NULL)) {
                            tmp_expression_value_180 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[440]);
                        }

                        if (tmp_expression_value_180 == NULL) {
                            assert(ERROR_OCCURRED());

                            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                            exception_lineno = 4201;
                            type_description_2 = "o";
                            goto dict_build_exception_22;
                        }
                        Py_INCREF(tmp_expression_value_180);
                    } else {
                        goto dict_build_exception_22;
                    }
                }

                tmp_dict_value_28 = LOOKUP_ATTRIBUTE(tmp_expression_value_180, mod_consts[485]);
                Py_DECREF(tmp_expression_value_180);
                if (tmp_dict_value_28 == NULL) {
                    assert(ERROR_OCCURRED());

                    FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                    exception_lineno = 4201;
                    type_description_2 = "o";
                    goto dict_build_exception_22;
                }
                tmp_res = PyDict_SetItem(tmp_kw_defaults_28, tmp_dict_key_28, tmp_dict_value_28);
                Py_DECREF(tmp_dict_value_28);
                assert(!(tmp_res != 0));
                tmp_dict_key_28 = mod_consts[634];
                tmp_expression_value_181 = PyObject_GetItem(locals_hikari$api$rest$$$class__2_RESTClient_110, mod_consts[440]);

                if (tmp_expression_value_181 == NULL) {
                    if (CHECK_AND_CLEAR_KEY_ERROR_OCCURRED()) {
                        tmp_expression_value_181 = GET_STRING_DICT_VALUE(moduledict_hikari$api$rest, (Nuitka_StringObject *)mod_consts[440]);

                        if (unlikely(tmp_expression_value_181 == NULL)) {
                            tmp_expression_value_181 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[440]);
                        }

                        if (tmp_expression_value_181 == NULL) {
                            assert(ERROR_OCCURRED());

                            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                            exception_lineno = 4202;
                            type_description_2 = "o";
                            goto dict_build_exception_22;
                        }
                        Py_INCREF(tmp_expression_value_181);
                    } else {
                        goto dict_build_exception_22;
                    }
                }

                tmp_dict_value_28 = LOOKUP_ATTRIBUTE(tmp_expression_value_181, mod_consts[485]);
                Py_DECREF(tmp_expression_value_181);
                if (tmp_dict_value_28 == NULL) {
                    assert(ERROR_OCCURRED());

                    FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                    exception_lineno = 4202;
                    type_description_2 = "o";
                    goto dict_build_exception_22;
                }
                tmp_res = PyDict_SetItem(tmp_kw_defaults_28, tmp_dict_key_28, tmp_dict_value_28);
                Py_DECREF(tmp_dict_value_28);
                assert(!(tmp_res != 0));
                tmp_dict_key_28 = mod_consts[635];
                tmp_expression_value_182 = PyObject_GetItem(locals_hikari$api$rest$$$class__2_RESTClient_110, mod_consts[440]);

                if (tmp_expression_value_182 == NULL) {
                    if (CHECK_AND_CLEAR_KEY_ERROR_OCCURRED()) {
                        tmp_expression_value_182 = GET_STRING_DICT_VALUE(moduledict_hikari$api$rest, (Nuitka_StringObject *)mod_consts[440]);

                        if (unlikely(tmp_expression_value_182 == NULL)) {
                            tmp_expression_value_182 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[440]);
                        }

                        if (tmp_expression_value_182 == NULL) {
                            assert(ERROR_OCCURRED());

                            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                            exception_lineno = 4203;
                            type_description_2 = "o";
                            goto dict_build_exception_22;
                        }
                        Py_INCREF(tmp_expression_value_182);
                    } else {
                        goto dict_build_exception_22;
                    }
                }

                tmp_dict_value_28 = LOOKUP_ATTRIBUTE(tmp_expression_value_182, mod_consts[485]);
                Py_DECREF(tmp_expression_value_182);
                if (tmp_dict_value_28 == NULL) {
                    assert(ERROR_OCCURRED());

                    FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                    exception_lineno = 4203;
                    type_description_2 = "o";
                    goto dict_build_exception_22;
                }
                tmp_res = PyDict_SetItem(tmp_kw_defaults_28, tmp_dict_key_28, tmp_dict_value_28);
                Py_DECREF(tmp_dict_value_28);
                assert(!(tmp_res != 0));
                tmp_dict_key_28 = mod_consts[636];
                tmp_expression_value_183 = PyObject_GetItem(locals_hikari$api$rest$$$class__2_RESTClient_110, mod_consts[440]);

                if (tmp_expression_value_183 == NULL) {
                    if (CHECK_AND_CLEAR_KEY_ERROR_OCCURRED()) {
                        tmp_expression_value_183 = GET_STRING_DICT_VALUE(moduledict_hikari$api$rest, (Nuitka_StringObject *)mod_consts[440]);

                        if (unlikely(tmp_expression_value_183 == NULL)) {
                            tmp_expression_value_183 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[440]);
                        }

                        if (tmp_expression_value_183 == NULL) {
                            assert(ERROR_OCCURRED());

                            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                            exception_lineno = 4206;
                            type_description_2 = "o";
                            goto dict_build_exception_22;
                        }
                        Py_INCREF(tmp_expression_value_183);
                    } else {
                        goto dict_build_exception_22;
                    }
                }

                tmp_dict_value_28 = LOOKUP_ATTRIBUTE(tmp_expression_value_183, mod_consts[485]);
                Py_DECREF(tmp_expression_value_183);
                if (tmp_dict_value_28 == NULL) {
                    assert(ERROR_OCCURRED());

                    FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                    exception_lineno = 4206;
                    type_description_2 = "o";
                    goto dict_build_exception_22;
                }
                tmp_res = PyDict_SetItem(tmp_kw_defaults_28, tmp_dict_key_28, tmp_dict_value_28);
                Py_DECREF(tmp_dict_value_28);
                assert(!(tmp_res != 0));
                tmp_dict_key_28 = mod_consts[637];
                tmp_expression_value_184 = PyObject_GetItem(locals_hikari$api$rest$$$class__2_RESTClient_110, mod_consts[440]);

                if (tmp_expression_value_184 == NULL) {
                    if (CHECK_AND_CLEAR_KEY_ERROR_OCCURRED()) {
                        tmp_expression_value_184 = GET_STRING_DICT_VALUE(moduledict_hikari$api$rest, (Nuitka_StringObject *)mod_consts[440]);

                        if (unlikely(tmp_expression_value_184 == NULL)) {
                            tmp_expression_value_184 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[440]);
                        }

                        if (tmp_expression_value_184 == NULL) {
                            assert(ERROR_OCCURRED());

                            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                            exception_lineno = 4209;
                            type_description_2 = "o";
                            goto dict_build_exception_22;
                        }
                        Py_INCREF(tmp_expression_value_184);
                    } else {
                        goto dict_build_exception_22;
                    }
                }

                tmp_dict_value_28 = LOOKUP_ATTRIBUTE(tmp_expression_value_184, mod_consts[485]);
                Py_DECREF(tmp_expression_value_184);
                if (tmp_dict_value_28 == NULL) {
                    assert(ERROR_OCCURRED());

                    FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                    exception_lineno = 4209;
                    type_description_2 = "o";
                    goto dict_build_exception_22;
                }
                tmp_res = PyDict_SetItem(tmp_kw_defaults_28, tmp_dict_key_28, tmp_dict_value_28);
                Py_DECREF(tmp_dict_value_28);
                assert(!(tmp_res != 0));
                tmp_dict_key_28 = mod_consts[638];
                tmp_expression_value_185 = PyObject_GetItem(locals_hikari$api$rest$$$class__2_RESTClient_110, mod_consts[440]);

                if (tmp_expression_value_185 == NULL) {
                    if (CHECK_AND_CLEAR_KEY_ERROR_OCCURRED()) {
                        tmp_expression_value_185 = GET_STRING_DICT_VALUE(moduledict_hikari$api$rest, (Nuitka_StringObject *)mod_consts[440]);

                        if (unlikely(tmp_expression_value_185 == NULL)) {
                            tmp_expression_value_185 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[440]);
                        }

                        if (tmp_expression_value_185 == NULL) {
                            assert(ERROR_OCCURRED());

                            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                            exception_lineno = 4212;
                            type_description_2 = "o";
                            goto dict_build_exception_22;
                        }
                        Py_INCREF(tmp_expression_value_185);
                    } else {
                        goto dict_build_exception_22;
                    }
                }

                tmp_dict_value_28 = LOOKUP_ATTRIBUTE(tmp_expression_value_185, mod_consts[485]);
                Py_DECREF(tmp_expression_value_185);
                if (tmp_dict_value_28 == NULL) {
                    assert(ERROR_OCCURRED());

                    FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                    exception_lineno = 4212;
                    type_description_2 = "o";
                    goto dict_build_exception_22;
                }
                tmp_res = PyDict_SetItem(tmp_kw_defaults_28, tmp_dict_key_28, tmp_dict_value_28);
                Py_DECREF(tmp_dict_value_28);
                assert(!(tmp_res != 0));
                tmp_dict_key_28 = mod_consts[639];
                tmp_expression_value_186 = PyObject_GetItem(locals_hikari$api$rest$$$class__2_RESTClient_110, mod_consts[440]);

                if (tmp_expression_value_186 == NULL) {
                    if (CHECK_AND_CLEAR_KEY_ERROR_OCCURRED()) {
                        tmp_expression_value_186 = GET_STRING_DICT_VALUE(moduledict_hikari$api$rest, (Nuitka_StringObject *)mod_consts[440]);

                        if (unlikely(tmp_expression_value_186 == NULL)) {
                            tmp_expression_value_186 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[440]);
                        }

                        if (tmp_expression_value_186 == NULL) {
                            assert(ERROR_OCCURRED());

                            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                            exception_lineno = 4213;
                            type_description_2 = "o";
                            goto dict_build_exception_22;
                        }
                        Py_INCREF(tmp_expression_value_186);
                    } else {
                        goto dict_build_exception_22;
                    }
                }

                tmp_dict_value_28 = LOOKUP_ATTRIBUTE(tmp_expression_value_186, mod_consts[485]);
                Py_DECREF(tmp_expression_value_186);
                if (tmp_dict_value_28 == NULL) {
                    assert(ERROR_OCCURRED());

                    FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                    exception_lineno = 4213;
                    type_description_2 = "o";
                    goto dict_build_exception_22;
                }
                tmp_res = PyDict_SetItem(tmp_kw_defaults_28, tmp_dict_key_28, tmp_dict_value_28);
                Py_DECREF(tmp_dict_value_28);
                assert(!(tmp_res != 0));
                tmp_dict_key_28 = mod_consts[496];
                tmp_expression_value_187 = PyObject_GetItem(locals_hikari$api$rest$$$class__2_RESTClient_110, mod_consts[440]);

                if (tmp_expression_value_187 == NULL) {
                    if (CHECK_AND_CLEAR_KEY_ERROR_OCCURRED()) {
                        tmp_expression_value_187 = GET_STRING_DICT_VALUE(moduledict_hikari$api$rest, (Nuitka_StringObject *)mod_consts[440]);

                        if (unlikely(tmp_expression_value_187 == NULL)) {
                            tmp_expression_value_187 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[440]);
                        }

                        if (tmp_expression_value_187 == NULL) {
                            assert(ERROR_OCCURRED());

                            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                            exception_lineno = 4214;
                            type_description_2 = "o";
                            goto dict_build_exception_22;
                        }
                        Py_INCREF(tmp_expression_value_187);
                    } else {
                        goto dict_build_exception_22;
                    }
                }

                tmp_dict_value_28 = LOOKUP_ATTRIBUTE(tmp_expression_value_187, mod_consts[485]);
                Py_DECREF(tmp_expression_value_187);
                if (tmp_dict_value_28 == NULL) {
                    assert(ERROR_OCCURRED());

                    FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                    exception_lineno = 4214;
                    type_description_2 = "o";
                    goto dict_build_exception_22;
                }
                tmp_res = PyDict_SetItem(tmp_kw_defaults_28, tmp_dict_key_28, tmp_dict_value_28);
                Py_DECREF(tmp_dict_value_28);
                assert(!(tmp_res != 0));
            }
            goto dict_build_noexception_22;
            // Exception handling pass through code for dict_build:
            dict_build_exception_22:;
            Py_DECREF(tmp_called_value_46);
            Py_DECREF(tmp_kw_defaults_28);
            goto frame_exception_exit_3;
            // Finished with no exception for dict_build:
            dict_build_noexception_22:;
            tmp_annotations_86 = PyDict_Copy(mod_consts[640]);


            tmp_args_element_value_96 = MAKE_FUNCTION_hikari$api$rest$$$function__82_edit_guild(tmp_kw_defaults_28, tmp_annotations_86);

            frame_862833cacd6e5ba73c351f8d132a7b6b_3->m_frame.f_lineno = 4183;
            tmp_dictset_value = CALL_FUNCTION_WITH_SINGLE_ARG(tmp_called_value_46, tmp_args_element_value_96);
            Py_DECREF(tmp_called_value_46);
            Py_DECREF(tmp_args_element_value_96);
            if (tmp_dictset_value == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 4183;
                type_description_2 = "o";
                goto frame_exception_exit_3;
            }
            tmp_res = PyObject_SetItem(locals_hikari$api$rest$$$class__2_RESTClient_110, mod_consts[207], tmp_dictset_value);
            Py_DECREF(tmp_dictset_value);
            if (tmp_res != 0) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 4184;
                type_description_2 = "o";
                goto frame_exception_exit_3;
            }
        }
        {
            PyObject *tmp_called_instance_54;
            PyObject *tmp_args_element_value_97;
            PyObject *tmp_annotations_87;
            tmp_called_instance_54 = PyObject_GetItem(locals_hikari$api$rest$$$class__2_RESTClient_110, mod_consts[431]);

            if (tmp_called_instance_54 == NULL) {
                if (CHECK_AND_CLEAR_KEY_ERROR_OCCURRED()) {
                    tmp_called_instance_54 = GET_STRING_DICT_VALUE(moduledict_hikari$api$rest, (Nuitka_StringObject *)mod_consts[431]);

                    if (unlikely(tmp_called_instance_54 == NULL)) {
                        tmp_called_instance_54 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[431]);
                    }

                    if (tmp_called_instance_54 == NULL) {
                        assert(ERROR_OCCURRED());

                        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                        exception_lineno = 4297;
                        type_description_2 = "o";
                        goto frame_exception_exit_3;
                    }
                    Py_INCREF(tmp_called_instance_54);
                } else {
                    goto frame_exception_exit_3;
                }
            }

            tmp_annotations_87 = PyDict_Copy(mod_consts[584]);


            tmp_args_element_value_97 = MAKE_FUNCTION_hikari$api$rest$$$function__83_delete_guild(tmp_annotations_87);

            frame_862833cacd6e5ba73c351f8d132a7b6b_3->m_frame.f_lineno = 4297;
            tmp_dictset_value = CALL_METHOD_WITH_SINGLE_ARG(tmp_called_instance_54, mod_consts[457], tmp_args_element_value_97);
            Py_DECREF(tmp_called_instance_54);
            Py_DECREF(tmp_args_element_value_97);
            if (tmp_dictset_value == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 4297;
                type_description_2 = "o";
                goto frame_exception_exit_3;
            }
            tmp_res = PyObject_SetItem(locals_hikari$api$rest$$$class__2_RESTClient_110, mod_consts[210], tmp_dictset_value);
            Py_DECREF(tmp_dictset_value);
            if (tmp_res != 0) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 4298;
                type_description_2 = "o";
                goto frame_exception_exit_3;
            }
        }
        {
            PyObject *tmp_called_instance_55;
            PyObject *tmp_args_element_value_98;
            PyObject *tmp_annotations_88;
            tmp_called_instance_55 = PyObject_GetItem(locals_hikari$api$rest$$$class__2_RESTClient_110, mod_consts[431]);

            if (tmp_called_instance_55 == NULL) {
                if (CHECK_AND_CLEAR_KEY_ERROR_OCCURRED()) {
                    tmp_called_instance_55 = GET_STRING_DICT_VALUE(moduledict_hikari$api$rest, (Nuitka_StringObject *)mod_consts[431]);

                    if (unlikely(tmp_called_instance_55 == NULL)) {
                        tmp_called_instance_55 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[431]);
                    }

                    if (tmp_called_instance_55 == NULL) {
                        assert(ERROR_OCCURRED());

                        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                        exception_lineno = 4330;
                        type_description_2 = "o";
                        goto frame_exception_exit_3;
                    }
                    Py_INCREF(tmp_called_instance_55);
                } else {
                    goto frame_exception_exit_3;
                }
            }

            tmp_annotations_88 = PyDict_Copy(mod_consts[641]);


            tmp_args_element_value_98 = MAKE_FUNCTION_hikari$api$rest$$$function__84_fetch_guild_channels(tmp_annotations_88);

            frame_862833cacd6e5ba73c351f8d132a7b6b_3->m_frame.f_lineno = 4330;
            tmp_dictset_value = CALL_METHOD_WITH_SINGLE_ARG(tmp_called_instance_55, mod_consts[457], tmp_args_element_value_98);
            Py_DECREF(tmp_called_instance_55);
            Py_DECREF(tmp_args_element_value_98);
            if (tmp_dictset_value == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 4330;
                type_description_2 = "o";
                goto frame_exception_exit_3;
            }
            tmp_res = PyObject_SetItem(locals_hikari$api$rest$$$class__2_RESTClient_110, mod_consts[213], tmp_dictset_value);
            Py_DECREF(tmp_dictset_value);
            if (tmp_res != 0) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 4331;
                type_description_2 = "o";
                goto frame_exception_exit_3;
            }
        }
        {
            PyObject *tmp_called_value_47;
            PyObject *tmp_expression_value_188;
            PyObject *tmp_args_element_value_99;
            PyObject *tmp_kw_defaults_29;
            PyObject *tmp_dict_key_29;
            PyObject *tmp_dict_value_29;
            PyObject *tmp_expression_value_189;
            PyObject *tmp_annotations_89;
            tmp_expression_value_188 = PyObject_GetItem(locals_hikari$api$rest$$$class__2_RESTClient_110, mod_consts[431]);

            if (tmp_expression_value_188 == NULL) {
                if (CHECK_AND_CLEAR_KEY_ERROR_OCCURRED()) {
                    tmp_expression_value_188 = GET_STRING_DICT_VALUE(moduledict_hikari$api$rest, (Nuitka_StringObject *)mod_consts[431]);

                    if (unlikely(tmp_expression_value_188 == NULL)) {
                        tmp_expression_value_188 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[431]);
                    }

                    if (tmp_expression_value_188 == NULL) {
                        assert(ERROR_OCCURRED());

                        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                        exception_lineno = 4368;
                        type_description_2 = "o";
                        goto frame_exception_exit_3;
                    }
                    Py_INCREF(tmp_expression_value_188);
                } else {
                    goto frame_exception_exit_3;
                }
            }

            tmp_called_value_47 = LOOKUP_ATTRIBUTE(tmp_expression_value_188, mod_consts[457]);
            Py_DECREF(tmp_expression_value_188);
            if (tmp_called_value_47 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 4368;
                type_description_2 = "o";
                goto frame_exception_exit_3;
            }
            tmp_dict_key_29 = mod_consts[486];
            tmp_expression_value_189 = PyObject_GetItem(locals_hikari$api$rest$$$class__2_RESTClient_110, mod_consts[440]);

            if (tmp_expression_value_189 == NULL) {
                if (CHECK_AND_CLEAR_KEY_ERROR_OCCURRED()) {
                    tmp_expression_value_189 = GET_STRING_DICT_VALUE(moduledict_hikari$api$rest, (Nuitka_StringObject *)mod_consts[440]);

                    if (unlikely(tmp_expression_value_189 == NULL)) {
                        tmp_expression_value_189 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[440]);
                    }

                    if (tmp_expression_value_189 == NULL) {
                        assert(ERROR_OCCURRED());

                        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
                        Py_DECREF(tmp_called_value_47);

                        exception_lineno = 4374;
                        type_description_2 = "o";
                        goto frame_exception_exit_3;
                    }
                    Py_INCREF(tmp_expression_value_189);
                } else {
                    goto frame_exception_exit_3;
                }
            }

            tmp_dict_value_29 = LOOKUP_ATTRIBUTE(tmp_expression_value_189, mod_consts[485]);
            Py_DECREF(tmp_expression_value_189);
            if (tmp_dict_value_29 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
                Py_DECREF(tmp_called_value_47);

                exception_lineno = 4374;
                type_description_2 = "o";
                goto frame_exception_exit_3;
            }
            tmp_kw_defaults_29 = _PyDict_NewPresized( 7 );
            {
                PyObject *tmp_expression_value_190;
                PyObject *tmp_expression_value_191;
                PyObject *tmp_expression_value_192;
                PyObject *tmp_expression_value_193;
                PyObject *tmp_expression_value_194;
                PyObject *tmp_expression_value_195;
                tmp_res = PyDict_SetItem(tmp_kw_defaults_29, tmp_dict_key_29, tmp_dict_value_29);
                Py_DECREF(tmp_dict_value_29);
                assert(!(tmp_res != 0));
                tmp_dict_key_29 = mod_consts[487];
                tmp_expression_value_190 = PyObject_GetItem(locals_hikari$api$rest$$$class__2_RESTClient_110, mod_consts[440]);

                if (tmp_expression_value_190 == NULL) {
                    if (CHECK_AND_CLEAR_KEY_ERROR_OCCURRED()) {
                        tmp_expression_value_190 = GET_STRING_DICT_VALUE(moduledict_hikari$api$rest, (Nuitka_StringObject *)mod_consts[440]);

                        if (unlikely(tmp_expression_value_190 == NULL)) {
                            tmp_expression_value_190 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[440]);
                        }

                        if (tmp_expression_value_190 == NULL) {
                            assert(ERROR_OCCURRED());

                            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                            exception_lineno = 4375;
                            type_description_2 = "o";
                            goto dict_build_exception_23;
                        }
                        Py_INCREF(tmp_expression_value_190);
                    } else {
                        goto dict_build_exception_23;
                    }
                }

                tmp_dict_value_29 = LOOKUP_ATTRIBUTE(tmp_expression_value_190, mod_consts[485]);
                Py_DECREF(tmp_expression_value_190);
                if (tmp_dict_value_29 == NULL) {
                    assert(ERROR_OCCURRED());

                    FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                    exception_lineno = 4375;
                    type_description_2 = "o";
                    goto dict_build_exception_23;
                }
                tmp_res = PyDict_SetItem(tmp_kw_defaults_29, tmp_dict_key_29, tmp_dict_value_29);
                Py_DECREF(tmp_dict_value_29);
                assert(!(tmp_res != 0));
                tmp_dict_key_29 = mod_consts[488];
                tmp_expression_value_191 = PyObject_GetItem(locals_hikari$api$rest$$$class__2_RESTClient_110, mod_consts[440]);

                if (tmp_expression_value_191 == NULL) {
                    if (CHECK_AND_CLEAR_KEY_ERROR_OCCURRED()) {
                        tmp_expression_value_191 = GET_STRING_DICT_VALUE(moduledict_hikari$api$rest, (Nuitka_StringObject *)mod_consts[440]);

                        if (unlikely(tmp_expression_value_191 == NULL)) {
                            tmp_expression_value_191 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[440]);
                        }

                        if (tmp_expression_value_191 == NULL) {
                            assert(ERROR_OCCURRED());

                            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                            exception_lineno = 4376;
                            type_description_2 = "o";
                            goto dict_build_exception_23;
                        }
                        Py_INCREF(tmp_expression_value_191);
                    } else {
                        goto dict_build_exception_23;
                    }
                }

                tmp_dict_value_29 = LOOKUP_ATTRIBUTE(tmp_expression_value_191, mod_consts[485]);
                Py_DECREF(tmp_expression_value_191);
                if (tmp_dict_value_29 == NULL) {
                    assert(ERROR_OCCURRED());

                    FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                    exception_lineno = 4376;
                    type_description_2 = "o";
                    goto dict_build_exception_23;
                }
                tmp_res = PyDict_SetItem(tmp_kw_defaults_29, tmp_dict_key_29, tmp_dict_value_29);
                Py_DECREF(tmp_dict_value_29);
                assert(!(tmp_res != 0));
                tmp_dict_key_29 = mod_consts[492];
                tmp_expression_value_192 = PyObject_GetItem(locals_hikari$api$rest$$$class__2_RESTClient_110, mod_consts[440]);

                if (tmp_expression_value_192 == NULL) {
                    if (CHECK_AND_CLEAR_KEY_ERROR_OCCURRED()) {
                        tmp_expression_value_192 = GET_STRING_DICT_VALUE(moduledict_hikari$api$rest, (Nuitka_StringObject *)mod_consts[440]);

                        if (unlikely(tmp_expression_value_192 == NULL)) {
                            tmp_expression_value_192 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[440]);
                        }

                        if (tmp_expression_value_192 == NULL) {
                            assert(ERROR_OCCURRED());

                            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                            exception_lineno = 4377;
                            type_description_2 = "o";
                            goto dict_build_exception_23;
                        }
                        Py_INCREF(tmp_expression_value_192);
                    } else {
                        goto dict_build_exception_23;
                    }
                }

                tmp_dict_value_29 = LOOKUP_ATTRIBUTE(tmp_expression_value_192, mod_consts[485]);
                Py_DECREF(tmp_expression_value_192);
                if (tmp_dict_value_29 == NULL) {
                    assert(ERROR_OCCURRED());

                    FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                    exception_lineno = 4377;
                    type_description_2 = "o";
                    goto dict_build_exception_23;
                }
                tmp_res = PyDict_SetItem(tmp_kw_defaults_29, tmp_dict_key_29, tmp_dict_value_29);
                Py_DECREF(tmp_dict_value_29);
                assert(!(tmp_res != 0));
                tmp_dict_key_29 = mod_consts[494];
                tmp_expression_value_193 = PyObject_GetItem(locals_hikari$api$rest$$$class__2_RESTClient_110, mod_consts[440]);

                if (tmp_expression_value_193 == NULL) {
                    if (CHECK_AND_CLEAR_KEY_ERROR_OCCURRED()) {
                        tmp_expression_value_193 = GET_STRING_DICT_VALUE(moduledict_hikari$api$rest, (Nuitka_StringObject *)mod_consts[440]);

                        if (unlikely(tmp_expression_value_193 == NULL)) {
                            tmp_expression_value_193 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[440]);
                        }

                        if (tmp_expression_value_193 == NULL) {
                            assert(ERROR_OCCURRED());

                            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                            exception_lineno = 4380;
                            type_description_2 = "o";
                            goto dict_build_exception_23;
                        }
                        Py_INCREF(tmp_expression_value_193);
                    } else {
                        goto dict_build_exception_23;
                    }
                }

                tmp_dict_value_29 = LOOKUP_ATTRIBUTE(tmp_expression_value_193, mod_consts[485]);
                Py_DECREF(tmp_expression_value_193);
                if (tmp_dict_value_29 == NULL) {
                    assert(ERROR_OCCURRED());

                    FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                    exception_lineno = 4380;
                    type_description_2 = "o";
                    goto dict_build_exception_23;
                }
                tmp_res = PyDict_SetItem(tmp_kw_defaults_29, tmp_dict_key_29, tmp_dict_value_29);
                Py_DECREF(tmp_dict_value_29);
                assert(!(tmp_res != 0));
                tmp_dict_key_29 = mod_consts[642];
                tmp_expression_value_194 = PyObject_GetItem(locals_hikari$api$rest$$$class__2_RESTClient_110, mod_consts[440]);

                if (tmp_expression_value_194 == NULL) {
                    if (CHECK_AND_CLEAR_KEY_ERROR_OCCURRED()) {
                        tmp_expression_value_194 = GET_STRING_DICT_VALUE(moduledict_hikari$api$rest, (Nuitka_StringObject *)mod_consts[440]);

                        if (unlikely(tmp_expression_value_194 == NULL)) {
                            tmp_expression_value_194 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[440]);
                        }

                        if (tmp_expression_value_194 == NULL) {
                            assert(ERROR_OCCURRED());

                            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                            exception_lineno = 4381;
                            type_description_2 = "o";
                            goto dict_build_exception_23;
                        }
                        Py_INCREF(tmp_expression_value_194);
                    } else {
                        goto dict_build_exception_23;
                    }
                }

                tmp_dict_value_29 = LOOKUP_ATTRIBUTE(tmp_expression_value_194, mod_consts[485]);
                Py_DECREF(tmp_expression_value_194);
                if (tmp_dict_value_29 == NULL) {
                    assert(ERROR_OCCURRED());

                    FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                    exception_lineno = 4381;
                    type_description_2 = "o";
                    goto dict_build_exception_23;
                }
                tmp_res = PyDict_SetItem(tmp_kw_defaults_29, tmp_dict_key_29, tmp_dict_value_29);
                Py_DECREF(tmp_dict_value_29);
                assert(!(tmp_res != 0));
                tmp_dict_key_29 = mod_consts[496];
                tmp_expression_value_195 = PyObject_GetItem(locals_hikari$api$rest$$$class__2_RESTClient_110, mod_consts[440]);

                if (tmp_expression_value_195 == NULL) {
                    if (CHECK_AND_CLEAR_KEY_ERROR_OCCURRED()) {
                        tmp_expression_value_195 = GET_STRING_DICT_VALUE(moduledict_hikari$api$rest, (Nuitka_StringObject *)mod_consts[440]);

                        if (unlikely(tmp_expression_value_195 == NULL)) {
                            tmp_expression_value_195 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[440]);
                        }

                        if (tmp_expression_value_195 == NULL) {
                            assert(ERROR_OCCURRED());

                            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                            exception_lineno = 4382;
                            type_description_2 = "o";
                            goto dict_build_exception_23;
                        }
                        Py_INCREF(tmp_expression_value_195);
                    } else {
                        goto dict_build_exception_23;
                    }
                }

                tmp_dict_value_29 = LOOKUP_ATTRIBUTE(tmp_expression_value_195, mod_consts[485]);
                Py_DECREF(tmp_expression_value_195);
                if (tmp_dict_value_29 == NULL) {
                    assert(ERROR_OCCURRED());

                    FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                    exception_lineno = 4382;
                    type_description_2 = "o";
                    goto dict_build_exception_23;
                }
                tmp_res = PyDict_SetItem(tmp_kw_defaults_29, tmp_dict_key_29, tmp_dict_value_29);
                Py_DECREF(tmp_dict_value_29);
                assert(!(tmp_res != 0));
            }
            goto dict_build_noexception_23;
            // Exception handling pass through code for dict_build:
            dict_build_exception_23:;
            Py_DECREF(tmp_called_value_47);
            Py_DECREF(tmp_kw_defaults_29);
            goto frame_exception_exit_3;
            // Finished with no exception for dict_build:
            dict_build_noexception_23:;
            tmp_annotations_89 = PyDict_Copy(mod_consts[643]);


            tmp_args_element_value_99 = MAKE_FUNCTION_hikari$api$rest$$$function__85_create_guild_text_channel(tmp_kw_defaults_29, tmp_annotations_89);

            frame_862833cacd6e5ba73c351f8d132a7b6b_3->m_frame.f_lineno = 4368;
            tmp_dictset_value = CALL_FUNCTION_WITH_SINGLE_ARG(tmp_called_value_47, tmp_args_element_value_99);
            Py_DECREF(tmp_called_value_47);
            Py_DECREF(tmp_args_element_value_99);
            if (tmp_dictset_value == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 4368;
                type_description_2 = "o";
                goto frame_exception_exit_3;
            }
            tmp_res = PyObject_SetItem(locals_hikari$api$rest$$$class__2_RESTClient_110, mod_consts[216], tmp_dictset_value);
            Py_DECREF(tmp_dictset_value);
            if (tmp_res != 0) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 4369;
                type_description_2 = "o";
                goto frame_exception_exit_3;
            }
        }
        {
            PyObject *tmp_called_value_48;
            PyObject *tmp_expression_value_196;
            PyObject *tmp_args_element_value_100;
            PyObject *tmp_kw_defaults_30;
            PyObject *tmp_dict_key_30;
            PyObject *tmp_dict_value_30;
            PyObject *tmp_expression_value_197;
            PyObject *tmp_annotations_90;
            tmp_expression_value_196 = PyObject_GetItem(locals_hikari$api$rest$$$class__2_RESTClient_110, mod_consts[431]);

            if (tmp_expression_value_196 == NULL) {
                if (CHECK_AND_CLEAR_KEY_ERROR_OCCURRED()) {
                    tmp_expression_value_196 = GET_STRING_DICT_VALUE(moduledict_hikari$api$rest, (Nuitka_StringObject *)mod_consts[431]);

                    if (unlikely(tmp_expression_value_196 == NULL)) {
                        tmp_expression_value_196 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[431]);
                    }

                    if (tmp_expression_value_196 == NULL) {
                        assert(ERROR_OCCURRED());

                        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                        exception_lineno = 4446;
                        type_description_2 = "o";
                        goto frame_exception_exit_3;
                    }
                    Py_INCREF(tmp_expression_value_196);
                } else {
                    goto frame_exception_exit_3;
                }
            }

            tmp_called_value_48 = LOOKUP_ATTRIBUTE(tmp_expression_value_196, mod_consts[457]);
            Py_DECREF(tmp_expression_value_196);
            if (tmp_called_value_48 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 4446;
                type_description_2 = "o";
                goto frame_exception_exit_3;
            }
            tmp_dict_key_30 = mod_consts[486];
            tmp_expression_value_197 = PyObject_GetItem(locals_hikari$api$rest$$$class__2_RESTClient_110, mod_consts[440]);

            if (tmp_expression_value_197 == NULL) {
                if (CHECK_AND_CLEAR_KEY_ERROR_OCCURRED()) {
                    tmp_expression_value_197 = GET_STRING_DICT_VALUE(moduledict_hikari$api$rest, (Nuitka_StringObject *)mod_consts[440]);

                    if (unlikely(tmp_expression_value_197 == NULL)) {
                        tmp_expression_value_197 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[440]);
                    }

                    if (tmp_expression_value_197 == NULL) {
                        assert(ERROR_OCCURRED());

                        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
                        Py_DECREF(tmp_called_value_48);

                        exception_lineno = 4452;
                        type_description_2 = "o";
                        goto frame_exception_exit_3;
                    }
                    Py_INCREF(tmp_expression_value_197);
                } else {
                    goto frame_exception_exit_3;
                }
            }

            tmp_dict_value_30 = LOOKUP_ATTRIBUTE(tmp_expression_value_197, mod_consts[485]);
            Py_DECREF(tmp_expression_value_197);
            if (tmp_dict_value_30 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
                Py_DECREF(tmp_called_value_48);

                exception_lineno = 4452;
                type_description_2 = "o";
                goto frame_exception_exit_3;
            }
            tmp_kw_defaults_30 = _PyDict_NewPresized( 7 );
            {
                PyObject *tmp_expression_value_198;
                PyObject *tmp_expression_value_199;
                PyObject *tmp_expression_value_200;
                PyObject *tmp_expression_value_201;
                PyObject *tmp_expression_value_202;
                PyObject *tmp_expression_value_203;
                tmp_res = PyDict_SetItem(tmp_kw_defaults_30, tmp_dict_key_30, tmp_dict_value_30);
                Py_DECREF(tmp_dict_value_30);
                assert(!(tmp_res != 0));
                tmp_dict_key_30 = mod_consts[487];
                tmp_expression_value_198 = PyObject_GetItem(locals_hikari$api$rest$$$class__2_RESTClient_110, mod_consts[440]);

                if (tmp_expression_value_198 == NULL) {
                    if (CHECK_AND_CLEAR_KEY_ERROR_OCCURRED()) {
                        tmp_expression_value_198 = GET_STRING_DICT_VALUE(moduledict_hikari$api$rest, (Nuitka_StringObject *)mod_consts[440]);

                        if (unlikely(tmp_expression_value_198 == NULL)) {
                            tmp_expression_value_198 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[440]);
                        }

                        if (tmp_expression_value_198 == NULL) {
                            assert(ERROR_OCCURRED());

                            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                            exception_lineno = 4453;
                            type_description_2 = "o";
                            goto dict_build_exception_24;
                        }
                        Py_INCREF(tmp_expression_value_198);
                    } else {
                        goto dict_build_exception_24;
                    }
                }

                tmp_dict_value_30 = LOOKUP_ATTRIBUTE(tmp_expression_value_198, mod_consts[485]);
                Py_DECREF(tmp_expression_value_198);
                if (tmp_dict_value_30 == NULL) {
                    assert(ERROR_OCCURRED());

                    FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                    exception_lineno = 4453;
                    type_description_2 = "o";
                    goto dict_build_exception_24;
                }
                tmp_res = PyDict_SetItem(tmp_kw_defaults_30, tmp_dict_key_30, tmp_dict_value_30);
                Py_DECREF(tmp_dict_value_30);
                assert(!(tmp_res != 0));
                tmp_dict_key_30 = mod_consts[488];
                tmp_expression_value_199 = PyObject_GetItem(locals_hikari$api$rest$$$class__2_RESTClient_110, mod_consts[440]);

                if (tmp_expression_value_199 == NULL) {
                    if (CHECK_AND_CLEAR_KEY_ERROR_OCCURRED()) {
                        tmp_expression_value_199 = GET_STRING_DICT_VALUE(moduledict_hikari$api$rest, (Nuitka_StringObject *)mod_consts[440]);

                        if (unlikely(tmp_expression_value_199 == NULL)) {
                            tmp_expression_value_199 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[440]);
                        }

                        if (tmp_expression_value_199 == NULL) {
                            assert(ERROR_OCCURRED());

                            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                            exception_lineno = 4454;
                            type_description_2 = "o";
                            goto dict_build_exception_24;
                        }
                        Py_INCREF(tmp_expression_value_199);
                    } else {
                        goto dict_build_exception_24;
                    }
                }

                tmp_dict_value_30 = LOOKUP_ATTRIBUTE(tmp_expression_value_199, mod_consts[485]);
                Py_DECREF(tmp_expression_value_199);
                if (tmp_dict_value_30 == NULL) {
                    assert(ERROR_OCCURRED());

                    FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                    exception_lineno = 4454;
                    type_description_2 = "o";
                    goto dict_build_exception_24;
                }
                tmp_res = PyDict_SetItem(tmp_kw_defaults_30, tmp_dict_key_30, tmp_dict_value_30);
                Py_DECREF(tmp_dict_value_30);
                assert(!(tmp_res != 0));
                tmp_dict_key_30 = mod_consts[492];
                tmp_expression_value_200 = PyObject_GetItem(locals_hikari$api$rest$$$class__2_RESTClient_110, mod_consts[440]);

                if (tmp_expression_value_200 == NULL) {
                    if (CHECK_AND_CLEAR_KEY_ERROR_OCCURRED()) {
                        tmp_expression_value_200 = GET_STRING_DICT_VALUE(moduledict_hikari$api$rest, (Nuitka_StringObject *)mod_consts[440]);

                        if (unlikely(tmp_expression_value_200 == NULL)) {
                            tmp_expression_value_200 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[440]);
                        }

                        if (tmp_expression_value_200 == NULL) {
                            assert(ERROR_OCCURRED());

                            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                            exception_lineno = 4455;
                            type_description_2 = "o";
                            goto dict_build_exception_24;
                        }
                        Py_INCREF(tmp_expression_value_200);
                    } else {
                        goto dict_build_exception_24;
                    }
                }

                tmp_dict_value_30 = LOOKUP_ATTRIBUTE(tmp_expression_value_200, mod_consts[485]);
                Py_DECREF(tmp_expression_value_200);
                if (tmp_dict_value_30 == NULL) {
                    assert(ERROR_OCCURRED());

                    FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                    exception_lineno = 4455;
                    type_description_2 = "o";
                    goto dict_build_exception_24;
                }
                tmp_res = PyDict_SetItem(tmp_kw_defaults_30, tmp_dict_key_30, tmp_dict_value_30);
                Py_DECREF(tmp_dict_value_30);
                assert(!(tmp_res != 0));
                tmp_dict_key_30 = mod_consts[494];
                tmp_expression_value_201 = PyObject_GetItem(locals_hikari$api$rest$$$class__2_RESTClient_110, mod_consts[440]);

                if (tmp_expression_value_201 == NULL) {
                    if (CHECK_AND_CLEAR_KEY_ERROR_OCCURRED()) {
                        tmp_expression_value_201 = GET_STRING_DICT_VALUE(moduledict_hikari$api$rest, (Nuitka_StringObject *)mod_consts[440]);

                        if (unlikely(tmp_expression_value_201 == NULL)) {
                            tmp_expression_value_201 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[440]);
                        }

                        if (tmp_expression_value_201 == NULL) {
                            assert(ERROR_OCCURRED());

                            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                            exception_lineno = 4458;
                            type_description_2 = "o";
                            goto dict_build_exception_24;
                        }
                        Py_INCREF(tmp_expression_value_201);
                    } else {
                        goto dict_build_exception_24;
                    }
                }

                tmp_dict_value_30 = LOOKUP_ATTRIBUTE(tmp_expression_value_201, mod_consts[485]);
                Py_DECREF(tmp_expression_value_201);
                if (tmp_dict_value_30 == NULL) {
                    assert(ERROR_OCCURRED());

                    FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                    exception_lineno = 4458;
                    type_description_2 = "o";
                    goto dict_build_exception_24;
                }
                tmp_res = PyDict_SetItem(tmp_kw_defaults_30, tmp_dict_key_30, tmp_dict_value_30);
                Py_DECREF(tmp_dict_value_30);
                assert(!(tmp_res != 0));
                tmp_dict_key_30 = mod_consts[642];
                tmp_expression_value_202 = PyObject_GetItem(locals_hikari$api$rest$$$class__2_RESTClient_110, mod_consts[440]);

                if (tmp_expression_value_202 == NULL) {
                    if (CHECK_AND_CLEAR_KEY_ERROR_OCCURRED()) {
                        tmp_expression_value_202 = GET_STRING_DICT_VALUE(moduledict_hikari$api$rest, (Nuitka_StringObject *)mod_consts[440]);

                        if (unlikely(tmp_expression_value_202 == NULL)) {
                            tmp_expression_value_202 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[440]);
                        }

                        if (tmp_expression_value_202 == NULL) {
                            assert(ERROR_OCCURRED());

                            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                            exception_lineno = 4459;
                            type_description_2 = "o";
                            goto dict_build_exception_24;
                        }
                        Py_INCREF(tmp_expression_value_202);
                    } else {
                        goto dict_build_exception_24;
                    }
                }

                tmp_dict_value_30 = LOOKUP_ATTRIBUTE(tmp_expression_value_202, mod_consts[485]);
                Py_DECREF(tmp_expression_value_202);
                if (tmp_dict_value_30 == NULL) {
                    assert(ERROR_OCCURRED());

                    FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                    exception_lineno = 4459;
                    type_description_2 = "o";
                    goto dict_build_exception_24;
                }
                tmp_res = PyDict_SetItem(tmp_kw_defaults_30, tmp_dict_key_30, tmp_dict_value_30);
                Py_DECREF(tmp_dict_value_30);
                assert(!(tmp_res != 0));
                tmp_dict_key_30 = mod_consts[496];
                tmp_expression_value_203 = PyObject_GetItem(locals_hikari$api$rest$$$class__2_RESTClient_110, mod_consts[440]);

                if (tmp_expression_value_203 == NULL) {
                    if (CHECK_AND_CLEAR_KEY_ERROR_OCCURRED()) {
                        tmp_expression_value_203 = GET_STRING_DICT_VALUE(moduledict_hikari$api$rest, (Nuitka_StringObject *)mod_consts[440]);

                        if (unlikely(tmp_expression_value_203 == NULL)) {
                            tmp_expression_value_203 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[440]);
                        }

                        if (tmp_expression_value_203 == NULL) {
                            assert(ERROR_OCCURRED());

                            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                            exception_lineno = 4460;
                            type_description_2 = "o";
                            goto dict_build_exception_24;
                        }
                        Py_INCREF(tmp_expression_value_203);
                    } else {
                        goto dict_build_exception_24;
                    }
                }

                tmp_dict_value_30 = LOOKUP_ATTRIBUTE(tmp_expression_value_203, mod_consts[485]);
                Py_DECREF(tmp_expression_value_203);
                if (tmp_dict_value_30 == NULL) {
                    assert(ERROR_OCCURRED());

                    FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                    exception_lineno = 4460;
                    type_description_2 = "o";
                    goto dict_build_exception_24;
                }
                tmp_res = PyDict_SetItem(tmp_kw_defaults_30, tmp_dict_key_30, tmp_dict_value_30);
                Py_DECREF(tmp_dict_value_30);
                assert(!(tmp_res != 0));
            }
            goto dict_build_noexception_24;
            // Exception handling pass through code for dict_build:
            dict_build_exception_24:;
            Py_DECREF(tmp_called_value_48);
            Py_DECREF(tmp_kw_defaults_30);
            goto frame_exception_exit_3;
            // Finished with no exception for dict_build:
            dict_build_noexception_24:;
            tmp_annotations_90 = PyDict_Copy(mod_consts[644]);


            tmp_args_element_value_100 = MAKE_FUNCTION_hikari$api$rest$$$function__86_create_guild_news_channel(tmp_kw_defaults_30, tmp_annotations_90);

            frame_862833cacd6e5ba73c351f8d132a7b6b_3->m_frame.f_lineno = 4446;
            tmp_dictset_value = CALL_FUNCTION_WITH_SINGLE_ARG(tmp_called_value_48, tmp_args_element_value_100);
            Py_DECREF(tmp_called_value_48);
            Py_DECREF(tmp_args_element_value_100);
            if (tmp_dictset_value == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 4446;
                type_description_2 = "o";
                goto frame_exception_exit_3;
            }
            tmp_res = PyObject_SetItem(locals_hikari$api$rest$$$class__2_RESTClient_110, mod_consts[219], tmp_dictset_value);
            Py_DECREF(tmp_dictset_value);
            if (tmp_res != 0) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 4447;
                type_description_2 = "o";
                goto frame_exception_exit_3;
            }
        }
        {
            PyObject *tmp_called_value_49;
            PyObject *tmp_expression_value_204;
            PyObject *tmp_args_element_value_101;
            PyObject *tmp_kw_defaults_31;
            PyObject *tmp_dict_key_31;
            PyObject *tmp_dict_value_31;
            PyObject *tmp_expression_value_205;
            PyObject *tmp_annotations_91;
            tmp_expression_value_204 = PyObject_GetItem(locals_hikari$api$rest$$$class__2_RESTClient_110, mod_consts[431]);

            if (tmp_expression_value_204 == NULL) {
                if (CHECK_AND_CLEAR_KEY_ERROR_OCCURRED()) {
                    tmp_expression_value_204 = GET_STRING_DICT_VALUE(moduledict_hikari$api$rest, (Nuitka_StringObject *)mod_consts[431]);

                    if (unlikely(tmp_expression_value_204 == NULL)) {
                        tmp_expression_value_204 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[431]);
                    }

                    if (tmp_expression_value_204 == NULL) {
                        assert(ERROR_OCCURRED());

                        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                        exception_lineno = 4524;
                        type_description_2 = "o";
                        goto frame_exception_exit_3;
                    }
                    Py_INCREF(tmp_expression_value_204);
                } else {
                    goto frame_exception_exit_3;
                }
            }

            tmp_called_value_49 = LOOKUP_ATTRIBUTE(tmp_expression_value_204, mod_consts[457]);
            Py_DECREF(tmp_expression_value_204);
            if (tmp_called_value_49 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 4524;
                type_description_2 = "o";
                goto frame_exception_exit_3;
            }
            tmp_dict_key_31 = mod_consts[486];
            tmp_expression_value_205 = PyObject_GetItem(locals_hikari$api$rest$$$class__2_RESTClient_110, mod_consts[440]);

            if (tmp_expression_value_205 == NULL) {
                if (CHECK_AND_CLEAR_KEY_ERROR_OCCURRED()) {
                    tmp_expression_value_205 = GET_STRING_DICT_VALUE(moduledict_hikari$api$rest, (Nuitka_StringObject *)mod_consts[440]);

                    if (unlikely(tmp_expression_value_205 == NULL)) {
                        tmp_expression_value_205 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[440]);
                    }

                    if (tmp_expression_value_205 == NULL) {
                        assert(ERROR_OCCURRED());

                        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
                        Py_DECREF(tmp_called_value_49);

                        exception_lineno = 4530;
                        type_description_2 = "o";
                        goto frame_exception_exit_3;
                    }
                    Py_INCREF(tmp_expression_value_205);
                } else {
                    goto frame_exception_exit_3;
                }
            }

            tmp_dict_value_31 = LOOKUP_ATTRIBUTE(tmp_expression_value_205, mod_consts[485]);
            Py_DECREF(tmp_expression_value_205);
            if (tmp_dict_value_31 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
                Py_DECREF(tmp_called_value_49);

                exception_lineno = 4530;
                type_description_2 = "o";
                goto frame_exception_exit_3;
            }
            tmp_kw_defaults_31 = _PyDict_NewPresized( 8 );
            {
                PyObject *tmp_expression_value_206;
                PyObject *tmp_expression_value_207;
                PyObject *tmp_expression_value_208;
                PyObject *tmp_expression_value_209;
                PyObject *tmp_expression_value_210;
                PyObject *tmp_expression_value_211;
                PyObject *tmp_expression_value_212;
                tmp_res = PyDict_SetItem(tmp_kw_defaults_31, tmp_dict_key_31, tmp_dict_value_31);
                Py_DECREF(tmp_dict_value_31);
                assert(!(tmp_res != 0));
                tmp_dict_key_31 = mod_consts[491];
                tmp_expression_value_206 = PyObject_GetItem(locals_hikari$api$rest$$$class__2_RESTClient_110, mod_consts[440]);

                if (tmp_expression_value_206 == NULL) {
                    if (CHECK_AND_CLEAR_KEY_ERROR_OCCURRED()) {
                        tmp_expression_value_206 = GET_STRING_DICT_VALUE(moduledict_hikari$api$rest, (Nuitka_StringObject *)mod_consts[440]);

                        if (unlikely(tmp_expression_value_206 == NULL)) {
                            tmp_expression_value_206 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[440]);
                        }

                        if (tmp_expression_value_206 == NULL) {
                            assert(ERROR_OCCURRED());

                            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                            exception_lineno = 4531;
                            type_description_2 = "o";
                            goto dict_build_exception_25;
                        }
                        Py_INCREF(tmp_expression_value_206);
                    } else {
                        goto dict_build_exception_25;
                    }
                }

                tmp_dict_value_31 = LOOKUP_ATTRIBUTE(tmp_expression_value_206, mod_consts[485]);
                Py_DECREF(tmp_expression_value_206);
                if (tmp_dict_value_31 == NULL) {
                    assert(ERROR_OCCURRED());

                    FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                    exception_lineno = 4531;
                    type_description_2 = "o";
                    goto dict_build_exception_25;
                }
                tmp_res = PyDict_SetItem(tmp_kw_defaults_31, tmp_dict_key_31, tmp_dict_value_31);
                Py_DECREF(tmp_dict_value_31);
                assert(!(tmp_res != 0));
                tmp_dict_key_31 = mod_consts[489];
                tmp_expression_value_207 = PyObject_GetItem(locals_hikari$api$rest$$$class__2_RESTClient_110, mod_consts[440]);

                if (tmp_expression_value_207 == NULL) {
                    if (CHECK_AND_CLEAR_KEY_ERROR_OCCURRED()) {
                        tmp_expression_value_207 = GET_STRING_DICT_VALUE(moduledict_hikari$api$rest, (Nuitka_StringObject *)mod_consts[440]);

                        if (unlikely(tmp_expression_value_207 == NULL)) {
                            tmp_expression_value_207 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[440]);
                        }

                        if (tmp_expression_value_207 == NULL) {
                            assert(ERROR_OCCURRED());

                            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                            exception_lineno = 4532;
                            type_description_2 = "o";
                            goto dict_build_exception_25;
                        }
                        Py_INCREF(tmp_expression_value_207);
                    } else {
                        goto dict_build_exception_25;
                    }
                }

                tmp_dict_value_31 = LOOKUP_ATTRIBUTE(tmp_expression_value_207, mod_consts[485]);
                Py_DECREF(tmp_expression_value_207);
                if (tmp_dict_value_31 == NULL) {
                    assert(ERROR_OCCURRED());

                    FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                    exception_lineno = 4532;
                    type_description_2 = "o";
                    goto dict_build_exception_25;
                }
                tmp_res = PyDict_SetItem(tmp_kw_defaults_31, tmp_dict_key_31, tmp_dict_value_31);
                Py_DECREF(tmp_dict_value_31);
                assert(!(tmp_res != 0));
                tmp_dict_key_31 = mod_consts[490];
                tmp_expression_value_208 = PyObject_GetItem(locals_hikari$api$rest$$$class__2_RESTClient_110, mod_consts[440]);

                if (tmp_expression_value_208 == NULL) {
                    if (CHECK_AND_CLEAR_KEY_ERROR_OCCURRED()) {
                        tmp_expression_value_208 = GET_STRING_DICT_VALUE(moduledict_hikari$api$rest, (Nuitka_StringObject *)mod_consts[440]);

                        if (unlikely(tmp_expression_value_208 == NULL)) {
                            tmp_expression_value_208 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[440]);
                        }

                        if (tmp_expression_value_208 == NULL) {
                            assert(ERROR_OCCURRED());

                            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                            exception_lineno = 4533;
                            type_description_2 = "o";
                            goto dict_build_exception_25;
                        }
                        Py_INCREF(tmp_expression_value_208);
                    } else {
                        goto dict_build_exception_25;
                    }
                }

                tmp_dict_value_31 = LOOKUP_ATTRIBUTE(tmp_expression_value_208, mod_consts[485]);
                Py_DECREF(tmp_expression_value_208);
                if (tmp_dict_value_31 == NULL) {
                    assert(ERROR_OCCURRED());

                    FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                    exception_lineno = 4533;
                    type_description_2 = "o";
                    goto dict_build_exception_25;
                }
                tmp_res = PyDict_SetItem(tmp_kw_defaults_31, tmp_dict_key_31, tmp_dict_value_31);
                Py_DECREF(tmp_dict_value_31);
                assert(!(tmp_res != 0));
                tmp_dict_key_31 = mod_consts[494];
                tmp_expression_value_209 = PyObject_GetItem(locals_hikari$api$rest$$$class__2_RESTClient_110, mod_consts[440]);

                if (tmp_expression_value_209 == NULL) {
                    if (CHECK_AND_CLEAR_KEY_ERROR_OCCURRED()) {
                        tmp_expression_value_209 = GET_STRING_DICT_VALUE(moduledict_hikari$api$rest, (Nuitka_StringObject *)mod_consts[440]);

                        if (unlikely(tmp_expression_value_209 == NULL)) {
                            tmp_expression_value_209 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[440]);
                        }

                        if (tmp_expression_value_209 == NULL) {
                            assert(ERROR_OCCURRED());

                            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                            exception_lineno = 4536;
                            type_description_2 = "o";
                            goto dict_build_exception_25;
                        }
                        Py_INCREF(tmp_expression_value_209);
                    } else {
                        goto dict_build_exception_25;
                    }
                }

                tmp_dict_value_31 = LOOKUP_ATTRIBUTE(tmp_expression_value_209, mod_consts[485]);
                Py_DECREF(tmp_expression_value_209);
                if (tmp_dict_value_31 == NULL) {
                    assert(ERROR_OCCURRED());

                    FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                    exception_lineno = 4536;
                    type_description_2 = "o";
                    goto dict_build_exception_25;
                }
                tmp_res = PyDict_SetItem(tmp_kw_defaults_31, tmp_dict_key_31, tmp_dict_value_31);
                Py_DECREF(tmp_dict_value_31);
                assert(!(tmp_res != 0));
                tmp_dict_key_31 = mod_consts[493];
                tmp_expression_value_210 = PyObject_GetItem(locals_hikari$api$rest$$$class__2_RESTClient_110, mod_consts[440]);

                if (tmp_expression_value_210 == NULL) {
                    if (CHECK_AND_CLEAR_KEY_ERROR_OCCURRED()) {
                        tmp_expression_value_210 = GET_STRING_DICT_VALUE(moduledict_hikari$api$rest, (Nuitka_StringObject *)mod_consts[440]);

                        if (unlikely(tmp_expression_value_210 == NULL)) {
                            tmp_expression_value_210 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[440]);
                        }

                        if (tmp_expression_value_210 == NULL) {
                            assert(ERROR_OCCURRED());

                            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                            exception_lineno = 4537;
                            type_description_2 = "o";
                            goto dict_build_exception_25;
                        }
                        Py_INCREF(tmp_expression_value_210);
                    } else {
                        goto dict_build_exception_25;
                    }
                }

                tmp_dict_value_31 = LOOKUP_ATTRIBUTE(tmp_expression_value_210, mod_consts[485]);
                Py_DECREF(tmp_expression_value_210);
                if (tmp_dict_value_31 == NULL) {
                    assert(ERROR_OCCURRED());

                    FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                    exception_lineno = 4537;
                    type_description_2 = "o";
                    goto dict_build_exception_25;
                }
                tmp_res = PyDict_SetItem(tmp_kw_defaults_31, tmp_dict_key_31, tmp_dict_value_31);
                Py_DECREF(tmp_dict_value_31);
                assert(!(tmp_res != 0));
                tmp_dict_key_31 = mod_consts[642];
                tmp_expression_value_211 = PyObject_GetItem(locals_hikari$api$rest$$$class__2_RESTClient_110, mod_consts[440]);

                if (tmp_expression_value_211 == NULL) {
                    if (CHECK_AND_CLEAR_KEY_ERROR_OCCURRED()) {
                        tmp_expression_value_211 = GET_STRING_DICT_VALUE(moduledict_hikari$api$rest, (Nuitka_StringObject *)mod_consts[440]);

                        if (unlikely(tmp_expression_value_211 == NULL)) {
                            tmp_expression_value_211 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[440]);
                        }

                        if (tmp_expression_value_211 == NULL) {
                            assert(ERROR_OCCURRED());

                            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                            exception_lineno = 4538;
                            type_description_2 = "o";
                            goto dict_build_exception_25;
                        }
                        Py_INCREF(tmp_expression_value_211);
                    } else {
                        goto dict_build_exception_25;
                    }
                }

                tmp_dict_value_31 = LOOKUP_ATTRIBUTE(tmp_expression_value_211, mod_consts[485]);
                Py_DECREF(tmp_expression_value_211);
                if (tmp_dict_value_31 == NULL) {
                    assert(ERROR_OCCURRED());

                    FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                    exception_lineno = 4538;
                    type_description_2 = "o";
                    goto dict_build_exception_25;
                }
                tmp_res = PyDict_SetItem(tmp_kw_defaults_31, tmp_dict_key_31, tmp_dict_value_31);
                Py_DECREF(tmp_dict_value_31);
                assert(!(tmp_res != 0));
                tmp_dict_key_31 = mod_consts[496];
                tmp_expression_value_212 = PyObject_GetItem(locals_hikari$api$rest$$$class__2_RESTClient_110, mod_consts[440]);

                if (tmp_expression_value_212 == NULL) {
                    if (CHECK_AND_CLEAR_KEY_ERROR_OCCURRED()) {
                        tmp_expression_value_212 = GET_STRING_DICT_VALUE(moduledict_hikari$api$rest, (Nuitka_StringObject *)mod_consts[440]);

                        if (unlikely(tmp_expression_value_212 == NULL)) {
                            tmp_expression_value_212 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[440]);
                        }

                        if (tmp_expression_value_212 == NULL) {
                            assert(ERROR_OCCURRED());

                            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                            exception_lineno = 4539;
                            type_description_2 = "o";
                            goto dict_build_exception_25;
                        }
                        Py_INCREF(tmp_expression_value_212);
                    } else {
                        goto dict_build_exception_25;
                    }
                }

                tmp_dict_value_31 = LOOKUP_ATTRIBUTE(tmp_expression_value_212, mod_consts[485]);
                Py_DECREF(tmp_expression_value_212);
                if (tmp_dict_value_31 == NULL) {
                    assert(ERROR_OCCURRED());

                    FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                    exception_lineno = 4539;
                    type_description_2 = "o";
                    goto dict_build_exception_25;
                }
                tmp_res = PyDict_SetItem(tmp_kw_defaults_31, tmp_dict_key_31, tmp_dict_value_31);
                Py_DECREF(tmp_dict_value_31);
                assert(!(tmp_res != 0));
            }
            goto dict_build_noexception_25;
            // Exception handling pass through code for dict_build:
            dict_build_exception_25:;
            Py_DECREF(tmp_called_value_49);
            Py_DECREF(tmp_kw_defaults_31);
            goto frame_exception_exit_3;
            // Finished with no exception for dict_build:
            dict_build_noexception_25:;
            tmp_annotations_91 = PyDict_Copy(mod_consts[645]);


            tmp_args_element_value_101 = MAKE_FUNCTION_hikari$api$rest$$$function__87_create_guild_voice_channel(tmp_kw_defaults_31, tmp_annotations_91);

            frame_862833cacd6e5ba73c351f8d132a7b6b_3->m_frame.f_lineno = 4524;
            tmp_dictset_value = CALL_FUNCTION_WITH_SINGLE_ARG(tmp_called_value_49, tmp_args_element_value_101);
            Py_DECREF(tmp_called_value_49);
            Py_DECREF(tmp_args_element_value_101);
            if (tmp_dictset_value == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 4524;
                type_description_2 = "o";
                goto frame_exception_exit_3;
            }
            tmp_res = PyObject_SetItem(locals_hikari$api$rest$$$class__2_RESTClient_110, mod_consts[222], tmp_dictset_value);
            Py_DECREF(tmp_dictset_value);
            if (tmp_res != 0) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 4525;
                type_description_2 = "o";
                goto frame_exception_exit_3;
            }
        }
        {
            PyObject *tmp_called_value_50;
            PyObject *tmp_expression_value_213;
            PyObject *tmp_args_element_value_102;
            PyObject *tmp_kw_defaults_32;
            PyObject *tmp_dict_key_32;
            PyObject *tmp_dict_value_32;
            PyObject *tmp_expression_value_214;
            PyObject *tmp_annotations_92;
            tmp_expression_value_213 = PyObject_GetItem(locals_hikari$api$rest$$$class__2_RESTClient_110, mod_consts[431]);

            if (tmp_expression_value_213 == NULL) {
                if (CHECK_AND_CLEAR_KEY_ERROR_OCCURRED()) {
                    tmp_expression_value_213 = GET_STRING_DICT_VALUE(moduledict_hikari$api$rest, (Nuitka_StringObject *)mod_consts[431]);

                    if (unlikely(tmp_expression_value_213 == NULL)) {
                        tmp_expression_value_213 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[431]);
                    }

                    if (tmp_expression_value_213 == NULL) {
                        assert(ERROR_OCCURRED());

                        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                        exception_lineno = 4609;
                        type_description_2 = "o";
                        goto frame_exception_exit_3;
                    }
                    Py_INCREF(tmp_expression_value_213);
                } else {
                    goto frame_exception_exit_3;
                }
            }

            tmp_called_value_50 = LOOKUP_ATTRIBUTE(tmp_expression_value_213, mod_consts[457]);
            Py_DECREF(tmp_expression_value_213);
            if (tmp_called_value_50 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 4609;
                type_description_2 = "o";
                goto frame_exception_exit_3;
            }
            tmp_dict_key_32 = mod_consts[486];
            tmp_expression_value_214 = PyObject_GetItem(locals_hikari$api$rest$$$class__2_RESTClient_110, mod_consts[440]);

            if (tmp_expression_value_214 == NULL) {
                if (CHECK_AND_CLEAR_KEY_ERROR_OCCURRED()) {
                    tmp_expression_value_214 = GET_STRING_DICT_VALUE(moduledict_hikari$api$rest, (Nuitka_StringObject *)mod_consts[440]);

                    if (unlikely(tmp_expression_value_214 == NULL)) {
                        tmp_expression_value_214 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[440]);
                    }

                    if (tmp_expression_value_214 == NULL) {
                        assert(ERROR_OCCURRED());

                        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
                        Py_DECREF(tmp_called_value_50);

                        exception_lineno = 4615;
                        type_description_2 = "o";
                        goto frame_exception_exit_3;
                    }
                    Py_INCREF(tmp_expression_value_214);
                } else {
                    goto frame_exception_exit_3;
                }
            }

            tmp_dict_value_32 = LOOKUP_ATTRIBUTE(tmp_expression_value_214, mod_consts[485]);
            Py_DECREF(tmp_expression_value_214);
            if (tmp_dict_value_32 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
                Py_DECREF(tmp_called_value_50);

                exception_lineno = 4615;
                type_description_2 = "o";
                goto frame_exception_exit_3;
            }
            tmp_kw_defaults_32 = _PyDict_NewPresized( 7 );
            {
                PyObject *tmp_expression_value_215;
                PyObject *tmp_expression_value_216;
                PyObject *tmp_expression_value_217;
                PyObject *tmp_expression_value_218;
                PyObject *tmp_expression_value_219;
                PyObject *tmp_expression_value_220;
                tmp_res = PyDict_SetItem(tmp_kw_defaults_32, tmp_dict_key_32, tmp_dict_value_32);
                Py_DECREF(tmp_dict_value_32);
                assert(!(tmp_res != 0));
                tmp_dict_key_32 = mod_consts[491];
                tmp_expression_value_215 = PyObject_GetItem(locals_hikari$api$rest$$$class__2_RESTClient_110, mod_consts[440]);

                if (tmp_expression_value_215 == NULL) {
                    if (CHECK_AND_CLEAR_KEY_ERROR_OCCURRED()) {
                        tmp_expression_value_215 = GET_STRING_DICT_VALUE(moduledict_hikari$api$rest, (Nuitka_StringObject *)mod_consts[440]);

                        if (unlikely(tmp_expression_value_215 == NULL)) {
                            tmp_expression_value_215 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[440]);
                        }

                        if (tmp_expression_value_215 == NULL) {
                            assert(ERROR_OCCURRED());

                            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                            exception_lineno = 4616;
                            type_description_2 = "o";
                            goto dict_build_exception_26;
                        }
                        Py_INCREF(tmp_expression_value_215);
                    } else {
                        goto dict_build_exception_26;
                    }
                }

                tmp_dict_value_32 = LOOKUP_ATTRIBUTE(tmp_expression_value_215, mod_consts[485]);
                Py_DECREF(tmp_expression_value_215);
                if (tmp_dict_value_32 == NULL) {
                    assert(ERROR_OCCURRED());

                    FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                    exception_lineno = 4616;
                    type_description_2 = "o";
                    goto dict_build_exception_26;
                }
                tmp_res = PyDict_SetItem(tmp_kw_defaults_32, tmp_dict_key_32, tmp_dict_value_32);
                Py_DECREF(tmp_dict_value_32);
                assert(!(tmp_res != 0));
                tmp_dict_key_32 = mod_consts[489];
                tmp_expression_value_216 = PyObject_GetItem(locals_hikari$api$rest$$$class__2_RESTClient_110, mod_consts[440]);

                if (tmp_expression_value_216 == NULL) {
                    if (CHECK_AND_CLEAR_KEY_ERROR_OCCURRED()) {
                        tmp_expression_value_216 = GET_STRING_DICT_VALUE(moduledict_hikari$api$rest, (Nuitka_StringObject *)mod_consts[440]);

                        if (unlikely(tmp_expression_value_216 == NULL)) {
                            tmp_expression_value_216 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[440]);
                        }

                        if (tmp_expression_value_216 == NULL) {
                            assert(ERROR_OCCURRED());

                            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                            exception_lineno = 4617;
                            type_description_2 = "o";
                            goto dict_build_exception_26;
                        }
                        Py_INCREF(tmp_expression_value_216);
                    } else {
                        goto dict_build_exception_26;
                    }
                }

                tmp_dict_value_32 = LOOKUP_ATTRIBUTE(tmp_expression_value_216, mod_consts[485]);
                Py_DECREF(tmp_expression_value_216);
                if (tmp_dict_value_32 == NULL) {
                    assert(ERROR_OCCURRED());

                    FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                    exception_lineno = 4617;
                    type_description_2 = "o";
                    goto dict_build_exception_26;
                }
                tmp_res = PyDict_SetItem(tmp_kw_defaults_32, tmp_dict_key_32, tmp_dict_value_32);
                Py_DECREF(tmp_dict_value_32);
                assert(!(tmp_res != 0));
                tmp_dict_key_32 = mod_consts[494];
                tmp_expression_value_217 = PyObject_GetItem(locals_hikari$api$rest$$$class__2_RESTClient_110, mod_consts[440]);

                if (tmp_expression_value_217 == NULL) {
                    if (CHECK_AND_CLEAR_KEY_ERROR_OCCURRED()) {
                        tmp_expression_value_217 = GET_STRING_DICT_VALUE(moduledict_hikari$api$rest, (Nuitka_StringObject *)mod_consts[440]);

                        if (unlikely(tmp_expression_value_217 == NULL)) {
                            tmp_expression_value_217 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[440]);
                        }

                        if (tmp_expression_value_217 == NULL) {
                            assert(ERROR_OCCURRED());

                            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                            exception_lineno = 4620;
                            type_description_2 = "o";
                            goto dict_build_exception_26;
                        }
                        Py_INCREF(tmp_expression_value_217);
                    } else {
                        goto dict_build_exception_26;
                    }
                }

                tmp_dict_value_32 = LOOKUP_ATTRIBUTE(tmp_expression_value_217, mod_consts[485]);
                Py_DECREF(tmp_expression_value_217);
                if (tmp_dict_value_32 == NULL) {
                    assert(ERROR_OCCURRED());

                    FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                    exception_lineno = 4620;
                    type_description_2 = "o";
                    goto dict_build_exception_26;
                }
                tmp_res = PyDict_SetItem(tmp_kw_defaults_32, tmp_dict_key_32, tmp_dict_value_32);
                Py_DECREF(tmp_dict_value_32);
                assert(!(tmp_res != 0));
                tmp_dict_key_32 = mod_consts[493];
                tmp_expression_value_218 = PyObject_GetItem(locals_hikari$api$rest$$$class__2_RESTClient_110, mod_consts[440]);

                if (tmp_expression_value_218 == NULL) {
                    if (CHECK_AND_CLEAR_KEY_ERROR_OCCURRED()) {
                        tmp_expression_value_218 = GET_STRING_DICT_VALUE(moduledict_hikari$api$rest, (Nuitka_StringObject *)mod_consts[440]);

                        if (unlikely(tmp_expression_value_218 == NULL)) {
                            tmp_expression_value_218 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[440]);
                        }

                        if (tmp_expression_value_218 == NULL) {
                            assert(ERROR_OCCURRED());

                            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                            exception_lineno = 4621;
                            type_description_2 = "o";
                            goto dict_build_exception_26;
                        }
                        Py_INCREF(tmp_expression_value_218);
                    } else {
                        goto dict_build_exception_26;
                    }
                }

                tmp_dict_value_32 = LOOKUP_ATTRIBUTE(tmp_expression_value_218, mod_consts[485]);
                Py_DECREF(tmp_expression_value_218);
                if (tmp_dict_value_32 == NULL) {
                    assert(ERROR_OCCURRED());

                    FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                    exception_lineno = 4621;
                    type_description_2 = "o";
                    goto dict_build_exception_26;
                }
                tmp_res = PyDict_SetItem(tmp_kw_defaults_32, tmp_dict_key_32, tmp_dict_value_32);
                Py_DECREF(tmp_dict_value_32);
                assert(!(tmp_res != 0));
                tmp_dict_key_32 = mod_consts[642];
                tmp_expression_value_219 = PyObject_GetItem(locals_hikari$api$rest$$$class__2_RESTClient_110, mod_consts[440]);

                if (tmp_expression_value_219 == NULL) {
                    if (CHECK_AND_CLEAR_KEY_ERROR_OCCURRED()) {
                        tmp_expression_value_219 = GET_STRING_DICT_VALUE(moduledict_hikari$api$rest, (Nuitka_StringObject *)mod_consts[440]);

                        if (unlikely(tmp_expression_value_219 == NULL)) {
                            tmp_expression_value_219 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[440]);
                        }

                        if (tmp_expression_value_219 == NULL) {
                            assert(ERROR_OCCURRED());

                            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                            exception_lineno = 4622;
                            type_description_2 = "o";
                            goto dict_build_exception_26;
                        }
                        Py_INCREF(tmp_expression_value_219);
                    } else {
                        goto dict_build_exception_26;
                    }
                }

                tmp_dict_value_32 = LOOKUP_ATTRIBUTE(tmp_expression_value_219, mod_consts[485]);
                Py_DECREF(tmp_expression_value_219);
                if (tmp_dict_value_32 == NULL) {
                    assert(ERROR_OCCURRED());

                    FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                    exception_lineno = 4622;
                    type_description_2 = "o";
                    goto dict_build_exception_26;
                }
                tmp_res = PyDict_SetItem(tmp_kw_defaults_32, tmp_dict_key_32, tmp_dict_value_32);
                Py_DECREF(tmp_dict_value_32);
                assert(!(tmp_res != 0));
                tmp_dict_key_32 = mod_consts[496];
                tmp_expression_value_220 = PyObject_GetItem(locals_hikari$api$rest$$$class__2_RESTClient_110, mod_consts[440]);

                if (tmp_expression_value_220 == NULL) {
                    if (CHECK_AND_CLEAR_KEY_ERROR_OCCURRED()) {
                        tmp_expression_value_220 = GET_STRING_DICT_VALUE(moduledict_hikari$api$rest, (Nuitka_StringObject *)mod_consts[440]);

                        if (unlikely(tmp_expression_value_220 == NULL)) {
                            tmp_expression_value_220 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[440]);
                        }

                        if (tmp_expression_value_220 == NULL) {
                            assert(ERROR_OCCURRED());

                            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                            exception_lineno = 4623;
                            type_description_2 = "o";
                            goto dict_build_exception_26;
                        }
                        Py_INCREF(tmp_expression_value_220);
                    } else {
                        goto dict_build_exception_26;
                    }
                }

                tmp_dict_value_32 = LOOKUP_ATTRIBUTE(tmp_expression_value_220, mod_consts[485]);
                Py_DECREF(tmp_expression_value_220);
                if (tmp_dict_value_32 == NULL) {
                    assert(ERROR_OCCURRED());

                    FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                    exception_lineno = 4623;
                    type_description_2 = "o";
                    goto dict_build_exception_26;
                }
                tmp_res = PyDict_SetItem(tmp_kw_defaults_32, tmp_dict_key_32, tmp_dict_value_32);
                Py_DECREF(tmp_dict_value_32);
                assert(!(tmp_res != 0));
            }
            goto dict_build_noexception_26;
            // Exception handling pass through code for dict_build:
            dict_build_exception_26:;
            Py_DECREF(tmp_called_value_50);
            Py_DECREF(tmp_kw_defaults_32);
            goto frame_exception_exit_3;
            // Finished with no exception for dict_build:
            dict_build_noexception_26:;
            tmp_annotations_92 = PyDict_Copy(mod_consts[646]);


            tmp_args_element_value_102 = MAKE_FUNCTION_hikari$api$rest$$$function__88_create_guild_stage_channel(tmp_kw_defaults_32, tmp_annotations_92);

            frame_862833cacd6e5ba73c351f8d132a7b6b_3->m_frame.f_lineno = 4609;
            tmp_dictset_value = CALL_FUNCTION_WITH_SINGLE_ARG(tmp_called_value_50, tmp_args_element_value_102);
            Py_DECREF(tmp_called_value_50);
            Py_DECREF(tmp_args_element_value_102);
            if (tmp_dictset_value == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 4609;
                type_description_2 = "o";
                goto frame_exception_exit_3;
            }
            tmp_res = PyObject_SetItem(locals_hikari$api$rest$$$class__2_RESTClient_110, mod_consts[225], tmp_dictset_value);
            Py_DECREF(tmp_dictset_value);
            if (tmp_res != 0) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 4610;
                type_description_2 = "o";
                goto frame_exception_exit_3;
            }
        }
        {
            PyObject *tmp_called_value_51;
            PyObject *tmp_expression_value_221;
            PyObject *tmp_args_element_value_103;
            PyObject *tmp_kw_defaults_33;
            PyObject *tmp_dict_key_33;
            PyObject *tmp_dict_value_33;
            PyObject *tmp_expression_value_222;
            PyObject *tmp_annotations_93;
            tmp_expression_value_221 = PyObject_GetItem(locals_hikari$api$rest$$$class__2_RESTClient_110, mod_consts[431]);

            if (tmp_expression_value_221 == NULL) {
                if (CHECK_AND_CLEAR_KEY_ERROR_OCCURRED()) {
                    tmp_expression_value_221 = GET_STRING_DICT_VALUE(moduledict_hikari$api$rest, (Nuitka_StringObject *)mod_consts[431]);

                    if (unlikely(tmp_expression_value_221 == NULL)) {
                        tmp_expression_value_221 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[431]);
                    }

                    if (tmp_expression_value_221 == NULL) {
                        assert(ERROR_OCCURRED());

                        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                        exception_lineno = 4691;
                        type_description_2 = "o";
                        goto frame_exception_exit_3;
                    }
                    Py_INCREF(tmp_expression_value_221);
                } else {
                    goto frame_exception_exit_3;
                }
            }

            tmp_called_value_51 = LOOKUP_ATTRIBUTE(tmp_expression_value_221, mod_consts[457]);
            Py_DECREF(tmp_expression_value_221);
            if (tmp_called_value_51 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 4691;
                type_description_2 = "o";
                goto frame_exception_exit_3;
            }
            tmp_dict_key_33 = mod_consts[486];
            tmp_expression_value_222 = PyObject_GetItem(locals_hikari$api$rest$$$class__2_RESTClient_110, mod_consts[440]);

            if (tmp_expression_value_222 == NULL) {
                if (CHECK_AND_CLEAR_KEY_ERROR_OCCURRED()) {
                    tmp_expression_value_222 = GET_STRING_DICT_VALUE(moduledict_hikari$api$rest, (Nuitka_StringObject *)mod_consts[440]);

                    if (unlikely(tmp_expression_value_222 == NULL)) {
                        tmp_expression_value_222 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[440]);
                    }

                    if (tmp_expression_value_222 == NULL) {
                        assert(ERROR_OCCURRED());

                        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
                        Py_DECREF(tmp_called_value_51);

                        exception_lineno = 4697;
                        type_description_2 = "o";
                        goto frame_exception_exit_3;
                    }
                    Py_INCREF(tmp_expression_value_222);
                } else {
                    goto frame_exception_exit_3;
                }
            }

            tmp_dict_value_33 = LOOKUP_ATTRIBUTE(tmp_expression_value_222, mod_consts[485]);
            Py_DECREF(tmp_expression_value_222);
            if (tmp_dict_value_33 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
                Py_DECREF(tmp_called_value_51);

                exception_lineno = 4697;
                type_description_2 = "o";
                goto frame_exception_exit_3;
            }
            tmp_kw_defaults_33 = _PyDict_NewPresized( 3 );
            {
                PyObject *tmp_expression_value_223;
                PyObject *tmp_expression_value_224;
                tmp_res = PyDict_SetItem(tmp_kw_defaults_33, tmp_dict_key_33, tmp_dict_value_33);
                Py_DECREF(tmp_dict_value_33);
                assert(!(tmp_res != 0));
                tmp_dict_key_33 = mod_consts[494];
                tmp_expression_value_223 = PyObject_GetItem(locals_hikari$api$rest$$$class__2_RESTClient_110, mod_consts[440]);

                if (tmp_expression_value_223 == NULL) {
                    if (CHECK_AND_CLEAR_KEY_ERROR_OCCURRED()) {
                        tmp_expression_value_223 = GET_STRING_DICT_VALUE(moduledict_hikari$api$rest, (Nuitka_StringObject *)mod_consts[440]);

                        if (unlikely(tmp_expression_value_223 == NULL)) {
                            tmp_expression_value_223 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[440]);
                        }

                        if (tmp_expression_value_223 == NULL) {
                            assert(ERROR_OCCURRED());

                            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                            exception_lineno = 4700;
                            type_description_2 = "o";
                            goto dict_build_exception_27;
                        }
                        Py_INCREF(tmp_expression_value_223);
                    } else {
                        goto dict_build_exception_27;
                    }
                }

                tmp_dict_value_33 = LOOKUP_ATTRIBUTE(tmp_expression_value_223, mod_consts[485]);
                Py_DECREF(tmp_expression_value_223);
                if (tmp_dict_value_33 == NULL) {
                    assert(ERROR_OCCURRED());

                    FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                    exception_lineno = 4700;
                    type_description_2 = "o";
                    goto dict_build_exception_27;
                }
                tmp_res = PyDict_SetItem(tmp_kw_defaults_33, tmp_dict_key_33, tmp_dict_value_33);
                Py_DECREF(tmp_dict_value_33);
                assert(!(tmp_res != 0));
                tmp_dict_key_33 = mod_consts[496];
                tmp_expression_value_224 = PyObject_GetItem(locals_hikari$api$rest$$$class__2_RESTClient_110, mod_consts[440]);

                if (tmp_expression_value_224 == NULL) {
                    if (CHECK_AND_CLEAR_KEY_ERROR_OCCURRED()) {
                        tmp_expression_value_224 = GET_STRING_DICT_VALUE(moduledict_hikari$api$rest, (Nuitka_StringObject *)mod_consts[440]);

                        if (unlikely(tmp_expression_value_224 == NULL)) {
                            tmp_expression_value_224 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[440]);
                        }

                        if (tmp_expression_value_224 == NULL) {
                            assert(ERROR_OCCURRED());

                            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                            exception_lineno = 4701;
                            type_description_2 = "o";
                            goto dict_build_exception_27;
                        }
                        Py_INCREF(tmp_expression_value_224);
                    } else {
                        goto dict_build_exception_27;
                    }
                }

                tmp_dict_value_33 = LOOKUP_ATTRIBUTE(tmp_expression_value_224, mod_consts[485]);
                Py_DECREF(tmp_expression_value_224);
                if (tmp_dict_value_33 == NULL) {
                    assert(ERROR_OCCURRED());

                    FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                    exception_lineno = 4701;
                    type_description_2 = "o";
                    goto dict_build_exception_27;
                }
                tmp_res = PyDict_SetItem(tmp_kw_defaults_33, tmp_dict_key_33, tmp_dict_value_33);
                Py_DECREF(tmp_dict_value_33);
                assert(!(tmp_res != 0));
            }
            goto dict_build_noexception_27;
            // Exception handling pass through code for dict_build:
            dict_build_exception_27:;
            Py_DECREF(tmp_called_value_51);
            Py_DECREF(tmp_kw_defaults_33);
            goto frame_exception_exit_3;
            // Finished with no exception for dict_build:
            dict_build_noexception_27:;
            tmp_annotations_93 = PyDict_Copy(mod_consts[647]);


            tmp_args_element_value_103 = MAKE_FUNCTION_hikari$api$rest$$$function__89_create_guild_category(tmp_kw_defaults_33, tmp_annotations_93);

            frame_862833cacd6e5ba73c351f8d132a7b6b_3->m_frame.f_lineno = 4691;
            tmp_dictset_value = CALL_FUNCTION_WITH_SINGLE_ARG(tmp_called_value_51, tmp_args_element_value_103);
            Py_DECREF(tmp_called_value_51);
            Py_DECREF(tmp_args_element_value_103);
            if (tmp_dictset_value == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 4691;
                type_description_2 = "o";
                goto frame_exception_exit_3;
            }
            tmp_res = PyObject_SetItem(locals_hikari$api$rest$$$class__2_RESTClient_110, mod_consts[228], tmp_dictset_value);
            Py_DECREF(tmp_dictset_value);
            if (tmp_res != 0) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 4692;
                type_description_2 = "o";
                goto frame_exception_exit_3;
            }
        }
        {
            PyObject *tmp_called_instance_56;
            PyObject *tmp_args_element_value_104;
            PyObject *tmp_annotations_94;
            tmp_called_instance_56 = PyObject_GetItem(locals_hikari$api$rest$$$class__2_RESTClient_110, mod_consts[431]);

            if (tmp_called_instance_56 == NULL) {
                if (CHECK_AND_CLEAR_KEY_ERROR_OCCURRED()) {
                    tmp_called_instance_56 = GET_STRING_DICT_VALUE(moduledict_hikari$api$rest, (Nuitka_StringObject *)mod_consts[431]);

                    if (unlikely(tmp_called_instance_56 == NULL)) {
                        tmp_called_instance_56 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[431]);
                    }

                    if (tmp_called_instance_56 == NULL) {
                        assert(ERROR_OCCURRED());

                        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                        exception_lineno = 4753;
                        type_description_2 = "o";
                        goto frame_exception_exit_3;
                    }
                    Py_INCREF(tmp_called_instance_56);
                } else {
                    goto frame_exception_exit_3;
                }
            }

            tmp_annotations_94 = PyDict_Copy(mod_consts[648]);


            tmp_args_element_value_104 = MAKE_FUNCTION_hikari$api$rest$$$function__90_reposition_channels(tmp_annotations_94);

            frame_862833cacd6e5ba73c351f8d132a7b6b_3->m_frame.f_lineno = 4753;
            tmp_dictset_value = CALL_METHOD_WITH_SINGLE_ARG(tmp_called_instance_56, mod_consts[457], tmp_args_element_value_104);
            Py_DECREF(tmp_called_instance_56);
            Py_DECREF(tmp_args_element_value_104);
            if (tmp_dictset_value == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 4753;
                type_description_2 = "o";
                goto frame_exception_exit_3;
            }
            tmp_res = PyObject_SetItem(locals_hikari$api$rest$$$class__2_RESTClient_110, mod_consts[231], tmp_dictset_value);
            Py_DECREF(tmp_dictset_value);
            if (tmp_res != 0) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 4754;
                type_description_2 = "o";
                goto frame_exception_exit_3;
            }
        }
        {
            PyObject *tmp_called_instance_57;
            PyObject *tmp_args_element_value_105;
            PyObject *tmp_annotations_95;
            tmp_called_instance_57 = PyObject_GetItem(locals_hikari$api$rest$$$class__2_RESTClient_110, mod_consts[431]);

            if (tmp_called_instance_57 == NULL) {
                if (CHECK_AND_CLEAR_KEY_ERROR_OCCURRED()) {
                    tmp_called_instance_57 = GET_STRING_DICT_VALUE(moduledict_hikari$api$rest, (Nuitka_StringObject *)mod_consts[431]);

                    if (unlikely(tmp_called_instance_57 == NULL)) {
                        tmp_called_instance_57 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[431]);
                    }

                    if (tmp_called_instance_57 == NULL) {
                        assert(ERROR_OCCURRED());

                        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                        exception_lineno = 4793;
                        type_description_2 = "o";
                        goto frame_exception_exit_3;
                    }
                    Py_INCREF(tmp_called_instance_57);
                } else {
                    goto frame_exception_exit_3;
                }
            }

            tmp_annotations_95 = PyDict_Copy(mod_consts[649]);


            tmp_args_element_value_105 = MAKE_FUNCTION_hikari$api$rest$$$function__91_fetch_member(tmp_annotations_95);

            frame_862833cacd6e5ba73c351f8d132a7b6b_3->m_frame.f_lineno = 4793;
            tmp_dictset_value = CALL_METHOD_WITH_SINGLE_ARG(tmp_called_instance_57, mod_consts[457], tmp_args_element_value_105);
            Py_DECREF(tmp_called_instance_57);
            Py_DECREF(tmp_args_element_value_105);
            if (tmp_dictset_value == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 4793;
                type_description_2 = "o";
                goto frame_exception_exit_3;
            }
            tmp_res = PyObject_SetItem(locals_hikari$api$rest$$$class__2_RESTClient_110, mod_consts[234], tmp_dictset_value);
            Py_DECREF(tmp_dictset_value);
            if (tmp_res != 0) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 4794;
                type_description_2 = "o";
                goto frame_exception_exit_3;
            }
        }
        {
            PyObject *tmp_called_instance_58;
            PyObject *tmp_args_element_value_106;
            PyObject *tmp_annotations_96;
            tmp_called_instance_58 = PyObject_GetItem(locals_hikari$api$rest$$$class__2_RESTClient_110, mod_consts[431]);

            if (tmp_called_instance_58 == NULL) {
                if (CHECK_AND_CLEAR_KEY_ERROR_OCCURRED()) {
                    tmp_called_instance_58 = GET_STRING_DICT_VALUE(moduledict_hikari$api$rest, (Nuitka_StringObject *)mod_consts[431]);

                    if (unlikely(tmp_called_instance_58 == NULL)) {
                        tmp_called_instance_58 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[431]);
                    }

                    if (tmp_called_instance_58 == NULL) {
                        assert(ERROR_OCCURRED());

                        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                        exception_lineno = 4836;
                        type_description_2 = "o";
                        goto frame_exception_exit_3;
                    }
                    Py_INCREF(tmp_called_instance_58);
                } else {
                    goto frame_exception_exit_3;
                }
            }

            tmp_annotations_96 = PyDict_Copy(mod_consts[650]);


            tmp_args_element_value_106 = MAKE_FUNCTION_hikari$api$rest$$$function__92_fetch_members(tmp_annotations_96);

            frame_862833cacd6e5ba73c351f8d132a7b6b_3->m_frame.f_lineno = 4836;
            tmp_dictset_value = CALL_METHOD_WITH_SINGLE_ARG(tmp_called_instance_58, mod_consts[457], tmp_args_element_value_106);
            Py_DECREF(tmp_called_instance_58);
            Py_DECREF(tmp_args_element_value_106);
            if (tmp_dictset_value == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 4836;
                type_description_2 = "o";
                goto frame_exception_exit_3;
            }
            tmp_res = PyObject_SetItem(locals_hikari$api$rest$$$class__2_RESTClient_110, mod_consts[652], tmp_dictset_value);
            Py_DECREF(tmp_dictset_value);
            if (tmp_res != 0) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 4837;
                type_description_2 = "o";
                goto frame_exception_exit_3;
            }
        }
        {
            PyObject *tmp_called_instance_59;
            PyObject *tmp_args_element_value_107;
            PyObject *tmp_annotations_97;
            tmp_called_instance_59 = PyObject_GetItem(locals_hikari$api$rest$$$class__2_RESTClient_110, mod_consts[431]);

            if (tmp_called_instance_59 == NULL) {
                if (CHECK_AND_CLEAR_KEY_ERROR_OCCURRED()) {
                    tmp_called_instance_59 = GET_STRING_DICT_VALUE(moduledict_hikari$api$rest, (Nuitka_StringObject *)mod_consts[431]);

                    if (unlikely(tmp_called_instance_59 == NULL)) {
                        tmp_called_instance_59 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[431]);
                    }

                    if (tmp_called_instance_59 == NULL) {
                        assert(ERROR_OCCURRED());

                        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                        exception_lineno = 4892;
                        type_description_2 = "o";
                        goto frame_exception_exit_3;
                    }
                    Py_INCREF(tmp_called_instance_59);
                } else {
                    goto frame_exception_exit_3;
                }
            }

            tmp_annotations_97 = PyDict_Copy(mod_consts[654]);


            tmp_args_element_value_107 = MAKE_FUNCTION_hikari$api$rest$$$function__93_fetch_my_member(tmp_annotations_97);

            frame_862833cacd6e5ba73c351f8d132a7b6b_3->m_frame.f_lineno = 4892;
            tmp_dictset_value = CALL_METHOD_WITH_SINGLE_ARG(tmp_called_instance_59, mod_consts[457], tmp_args_element_value_107);
            Py_DECREF(tmp_called_instance_59);
            Py_DECREF(tmp_args_element_value_107);
            if (tmp_dictset_value == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 4892;
                type_description_2 = "o";
                goto frame_exception_exit_3;
            }
            tmp_res = PyObject_SetItem(locals_hikari$api$rest$$$class__2_RESTClient_110, mod_consts[237], tmp_dictset_value);
            Py_DECREF(tmp_dictset_value);
            if (tmp_res != 0) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 4893;
                type_description_2 = "o";
                goto frame_exception_exit_3;
            }
        }
        {
            PyObject *tmp_called_instance_60;
            PyObject *tmp_args_element_value_108;
            PyObject *tmp_annotations_98;
            tmp_called_instance_60 = PyObject_GetItem(locals_hikari$api$rest$$$class__2_RESTClient_110, mod_consts[431]);

            if (tmp_called_instance_60 == NULL) {
                if (CHECK_AND_CLEAR_KEY_ERROR_OCCURRED()) {
                    tmp_called_instance_60 = GET_STRING_DICT_VALUE(moduledict_hikari$api$rest, (Nuitka_StringObject *)mod_consts[431]);

                    if (unlikely(tmp_called_instance_60 == NULL)) {
                        tmp_called_instance_60 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[431]);
                    }

                    if (tmp_called_instance_60 == NULL) {
                        assert(ERROR_OCCURRED());

                        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                        exception_lineno = 4926;
                        type_description_2 = "o";
                        goto frame_exception_exit_3;
                    }
                    Py_INCREF(tmp_called_instance_60);
                } else {
                    goto frame_exception_exit_3;
                }
            }

            tmp_annotations_98 = PyDict_Copy(mod_consts[655]);


            tmp_args_element_value_108 = MAKE_FUNCTION_hikari$api$rest$$$function__94_search_members(tmp_annotations_98);

            frame_862833cacd6e5ba73c351f8d132a7b6b_3->m_frame.f_lineno = 4926;
            tmp_dictset_value = CALL_METHOD_WITH_SINGLE_ARG(tmp_called_instance_60, mod_consts[457], tmp_args_element_value_108);
            Py_DECREF(tmp_called_instance_60);
            Py_DECREF(tmp_args_element_value_108);
            if (tmp_dictset_value == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 4926;
                type_description_2 = "o";
                goto frame_exception_exit_3;
            }
            tmp_res = PyObject_SetItem(locals_hikari$api$rest$$$class__2_RESTClient_110, mod_consts[240], tmp_dictset_value);
            Py_DECREF(tmp_dictset_value);
            if (tmp_res != 0) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 4927;
                type_description_2 = "o";
                goto frame_exception_exit_3;
            }
        }
        {
            PyObject *tmp_called_value_52;
            PyObject *tmp_expression_value_225;
            PyObject *tmp_args_element_value_109;
            PyObject *tmp_kw_defaults_34;
            PyObject *tmp_dict_key_34;
            PyObject *tmp_dict_value_34;
            PyObject *tmp_expression_value_226;
            PyObject *tmp_annotations_99;
            tmp_expression_value_225 = PyObject_GetItem(locals_hikari$api$rest$$$class__2_RESTClient_110, mod_consts[431]);

            if (tmp_expression_value_225 == NULL) {
                if (CHECK_AND_CLEAR_KEY_ERROR_OCCURRED()) {
                    tmp_expression_value_225 = GET_STRING_DICT_VALUE(moduledict_hikari$api$rest, (Nuitka_StringObject *)mod_consts[431]);

                    if (unlikely(tmp_expression_value_225 == NULL)) {
                        tmp_expression_value_225 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[431]);
                    }

                    if (tmp_expression_value_225 == NULL) {
                        assert(ERROR_OCCURRED());

                        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                        exception_lineno = 4972;
                        type_description_2 = "o";
                        goto frame_exception_exit_3;
                    }
                    Py_INCREF(tmp_expression_value_225);
                } else {
                    goto frame_exception_exit_3;
                }
            }

            tmp_called_value_52 = LOOKUP_ATTRIBUTE(tmp_expression_value_225, mod_consts[457]);
            Py_DECREF(tmp_expression_value_225);
            if (tmp_called_value_52 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 4972;
                type_description_2 = "o";
                goto frame_exception_exit_3;
            }
            tmp_dict_key_34 = mod_consts[593];
            tmp_expression_value_226 = PyObject_GetItem(locals_hikari$api$rest$$$class__2_RESTClient_110, mod_consts[440]);

            if (tmp_expression_value_226 == NULL) {
                if (CHECK_AND_CLEAR_KEY_ERROR_OCCURRED()) {
                    tmp_expression_value_226 = GET_STRING_DICT_VALUE(moduledict_hikari$api$rest, (Nuitka_StringObject *)mod_consts[440]);

                    if (unlikely(tmp_expression_value_226 == NULL)) {
                        tmp_expression_value_226 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[440]);
                    }

                    if (tmp_expression_value_226 == NULL) {
                        assert(ERROR_OCCURRED());

                        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
                        Py_DECREF(tmp_called_value_52);

                        exception_lineno = 4978;
                        type_description_2 = "o";
                        goto frame_exception_exit_3;
                    }
                    Py_INCREF(tmp_expression_value_226);
                } else {
                    goto frame_exception_exit_3;
                }
            }

            tmp_dict_value_34 = LOOKUP_ATTRIBUTE(tmp_expression_value_226, mod_consts[485]);
            Py_DECREF(tmp_expression_value_226);
            if (tmp_dict_value_34 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
                Py_DECREF(tmp_called_value_52);

                exception_lineno = 4978;
                type_description_2 = "o";
                goto frame_exception_exit_3;
            }
            tmp_kw_defaults_34 = _PyDict_NewPresized( 8 );
            {
                PyObject *tmp_expression_value_227;
                PyObject *tmp_expression_value_228;
                PyObject *tmp_expression_value_229;
                PyObject *tmp_expression_value_230;
                PyObject *tmp_expression_value_231;
                PyObject *tmp_expression_value_232;
                PyObject *tmp_expression_value_233;
                tmp_res = PyDict_SetItem(tmp_kw_defaults_34, tmp_dict_key_34, tmp_dict_value_34);
                Py_DECREF(tmp_dict_value_34);
                assert(!(tmp_res != 0));
                tmp_dict_key_34 = mod_consts[594];
                tmp_expression_value_227 = PyObject_GetItem(locals_hikari$api$rest$$$class__2_RESTClient_110, mod_consts[440]);

                if (tmp_expression_value_227 == NULL) {
                    if (CHECK_AND_CLEAR_KEY_ERROR_OCCURRED()) {
                        tmp_expression_value_227 = GET_STRING_DICT_VALUE(moduledict_hikari$api$rest, (Nuitka_StringObject *)mod_consts[440]);

                        if (unlikely(tmp_expression_value_227 == NULL)) {
                            tmp_expression_value_227 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[440]);
                        }

                        if (tmp_expression_value_227 == NULL) {
                            assert(ERROR_OCCURRED());

                            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                            exception_lineno = 4979;
                            type_description_2 = "o";
                            goto dict_build_exception_28;
                        }
                        Py_INCREF(tmp_expression_value_227);
                    } else {
                        goto dict_build_exception_28;
                    }
                }

                tmp_dict_value_34 = LOOKUP_ATTRIBUTE(tmp_expression_value_227, mod_consts[485]);
                Py_DECREF(tmp_expression_value_227);
                if (tmp_dict_value_34 == NULL) {
                    assert(ERROR_OCCURRED());

                    FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                    exception_lineno = 4979;
                    type_description_2 = "o";
                    goto dict_build_exception_28;
                }
                tmp_res = PyDict_SetItem(tmp_kw_defaults_34, tmp_dict_key_34, tmp_dict_value_34);
                Py_DECREF(tmp_dict_value_34);
                assert(!(tmp_res != 0));
                tmp_dict_key_34 = mod_consts[595];
                tmp_expression_value_228 = PyObject_GetItem(locals_hikari$api$rest$$$class__2_RESTClient_110, mod_consts[440]);

                if (tmp_expression_value_228 == NULL) {
                    if (CHECK_AND_CLEAR_KEY_ERROR_OCCURRED()) {
                        tmp_expression_value_228 = GET_STRING_DICT_VALUE(moduledict_hikari$api$rest, (Nuitka_StringObject *)mod_consts[440]);

                        if (unlikely(tmp_expression_value_228 == NULL)) {
                            tmp_expression_value_228 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[440]);
                        }

                        if (tmp_expression_value_228 == NULL) {
                            assert(ERROR_OCCURRED());

                            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                            exception_lineno = 4980;
                            type_description_2 = "o";
                            goto dict_build_exception_28;
                        }
                        Py_INCREF(tmp_expression_value_228);
                    } else {
                        goto dict_build_exception_28;
                    }
                }

                tmp_dict_value_34 = LOOKUP_ATTRIBUTE(tmp_expression_value_228, mod_consts[485]);
                Py_DECREF(tmp_expression_value_228);
                if (tmp_dict_value_34 == NULL) {
                    assert(ERROR_OCCURRED());

                    FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                    exception_lineno = 4980;
                    type_description_2 = "o";
                    goto dict_build_exception_28;
                }
                tmp_res = PyDict_SetItem(tmp_kw_defaults_34, tmp_dict_key_34, tmp_dict_value_34);
                Py_DECREF(tmp_dict_value_34);
                assert(!(tmp_res != 0));
                tmp_dict_key_34 = mod_consts[596];
                tmp_expression_value_229 = PyObject_GetItem(locals_hikari$api$rest$$$class__2_RESTClient_110, mod_consts[440]);

                if (tmp_expression_value_229 == NULL) {
                    if (CHECK_AND_CLEAR_KEY_ERROR_OCCURRED()) {
                        tmp_expression_value_229 = GET_STRING_DICT_VALUE(moduledict_hikari$api$rest, (Nuitka_StringObject *)mod_consts[440]);

                        if (unlikely(tmp_expression_value_229 == NULL)) {
                            tmp_expression_value_229 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[440]);
                        }

                        if (tmp_expression_value_229 == NULL) {
                            assert(ERROR_OCCURRED());

                            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                            exception_lineno = 4981;
                            type_description_2 = "o";
                            goto dict_build_exception_28;
                        }
                        Py_INCREF(tmp_expression_value_229);
                    } else {
                        goto dict_build_exception_28;
                    }
                }

                tmp_dict_value_34 = LOOKUP_ATTRIBUTE(tmp_expression_value_229, mod_consts[485]);
                Py_DECREF(tmp_expression_value_229);
                if (tmp_dict_value_34 == NULL) {
                    assert(ERROR_OCCURRED());

                    FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                    exception_lineno = 4981;
                    type_description_2 = "o";
                    goto dict_build_exception_28;
                }
                tmp_res = PyDict_SetItem(tmp_kw_defaults_34, tmp_dict_key_34, tmp_dict_value_34);
                Py_DECREF(tmp_dict_value_34);
                assert(!(tmp_res != 0));
                tmp_dict_key_34 = mod_consts[597];
                tmp_expression_value_230 = PyObject_GetItem(locals_hikari$api$rest$$$class__2_RESTClient_110, mod_consts[440]);

                if (tmp_expression_value_230 == NULL) {
                    if (CHECK_AND_CLEAR_KEY_ERROR_OCCURRED()) {
                        tmp_expression_value_230 = GET_STRING_DICT_VALUE(moduledict_hikari$api$rest, (Nuitka_StringObject *)mod_consts[440]);

                        if (unlikely(tmp_expression_value_230 == NULL)) {
                            tmp_expression_value_230 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[440]);
                        }

                        if (tmp_expression_value_230 == NULL) {
                            assert(ERROR_OCCURRED());

                            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                            exception_lineno = 4982;
                            type_description_2 = "o";
                            goto dict_build_exception_28;
                        }
                        Py_INCREF(tmp_expression_value_230);
                    } else {
                        goto dict_build_exception_28;
                    }
                }

                tmp_dict_value_34 = LOOKUP_ATTRIBUTE(tmp_expression_value_230, mod_consts[485]);
                Py_DECREF(tmp_expression_value_230);
                if (tmp_dict_value_34 == NULL) {
                    assert(ERROR_OCCURRED());

                    FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                    exception_lineno = 4982;
                    type_description_2 = "o";
                    goto dict_build_exception_28;
                }
                tmp_res = PyDict_SetItem(tmp_kw_defaults_34, tmp_dict_key_34, tmp_dict_value_34);
                Py_DECREF(tmp_dict_value_34);
                assert(!(tmp_res != 0));
                tmp_dict_key_34 = mod_consts[656];
                tmp_expression_value_231 = PyObject_GetItem(locals_hikari$api$rest$$$class__2_RESTClient_110, mod_consts[440]);

                if (tmp_expression_value_231 == NULL) {
                    if (CHECK_AND_CLEAR_KEY_ERROR_OCCURRED()) {
                        tmp_expression_value_231 = GET_STRING_DICT_VALUE(moduledict_hikari$api$rest, (Nuitka_StringObject *)mod_consts[440]);

                        if (unlikely(tmp_expression_value_231 == NULL)) {
                            tmp_expression_value_231 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[440]);
                        }

                        if (tmp_expression_value_231 == NULL) {
                            assert(ERROR_OCCURRED());

                            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                            exception_lineno = 4985;
                            type_description_2 = "o";
                            goto dict_build_exception_28;
                        }
                        Py_INCREF(tmp_expression_value_231);
                    } else {
                        goto dict_build_exception_28;
                    }
                }

                tmp_dict_value_34 = LOOKUP_ATTRIBUTE(tmp_expression_value_231, mod_consts[485]);
                Py_DECREF(tmp_expression_value_231);
                if (tmp_dict_value_34 == NULL) {
                    assert(ERROR_OCCURRED());

                    FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                    exception_lineno = 4985;
                    type_description_2 = "o";
                    goto dict_build_exception_28;
                }
                tmp_res = PyDict_SetItem(tmp_kw_defaults_34, tmp_dict_key_34, tmp_dict_value_34);
                Py_DECREF(tmp_dict_value_34);
                assert(!(tmp_res != 0));
                tmp_dict_key_34 = mod_consts[657];
                tmp_expression_value_232 = PyObject_GetItem(locals_hikari$api$rest$$$class__2_RESTClient_110, mod_consts[440]);

                if (tmp_expression_value_232 == NULL) {
                    if (CHECK_AND_CLEAR_KEY_ERROR_OCCURRED()) {
                        tmp_expression_value_232 = GET_STRING_DICT_VALUE(moduledict_hikari$api$rest, (Nuitka_StringObject *)mod_consts[440]);

                        if (unlikely(tmp_expression_value_232 == NULL)) {
                            tmp_expression_value_232 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[440]);
                        }

                        if (tmp_expression_value_232 == NULL) {
                            assert(ERROR_OCCURRED());

                            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                            exception_lineno = 4986;
                            type_description_2 = "o";
                            goto dict_build_exception_28;
                        }
                        Py_INCREF(tmp_expression_value_232);
                    } else {
                        goto dict_build_exception_28;
                    }
                }

                tmp_dict_value_34 = LOOKUP_ATTRIBUTE(tmp_expression_value_232, mod_consts[485]);
                Py_DECREF(tmp_expression_value_232);
                if (tmp_dict_value_34 == NULL) {
                    assert(ERROR_OCCURRED());

                    FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                    exception_lineno = 4986;
                    type_description_2 = "o";
                    goto dict_build_exception_28;
                }
                tmp_res = PyDict_SetItem(tmp_kw_defaults_34, tmp_dict_key_34, tmp_dict_value_34);
                Py_DECREF(tmp_dict_value_34);
                assert(!(tmp_res != 0));
                tmp_dict_key_34 = mod_consts[496];
                tmp_expression_value_233 = PyObject_GetItem(locals_hikari$api$rest$$$class__2_RESTClient_110, mod_consts[440]);

                if (tmp_expression_value_233 == NULL) {
                    if (CHECK_AND_CLEAR_KEY_ERROR_OCCURRED()) {
                        tmp_expression_value_233 = GET_STRING_DICT_VALUE(moduledict_hikari$api$rest, (Nuitka_StringObject *)mod_consts[440]);

                        if (unlikely(tmp_expression_value_233 == NULL)) {
                            tmp_expression_value_233 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[440]);
                        }

                        if (tmp_expression_value_233 == NULL) {
                            assert(ERROR_OCCURRED());

                            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                            exception_lineno = 4987;
                            type_description_2 = "o";
                            goto dict_build_exception_28;
                        }
                        Py_INCREF(tmp_expression_value_233);
                    } else {
                        goto dict_build_exception_28;
                    }
                }

                tmp_dict_value_34 = LOOKUP_ATTRIBUTE(tmp_expression_value_233, mod_consts[485]);
                Py_DECREF(tmp_expression_value_233);
                if (tmp_dict_value_34 == NULL) {
                    assert(ERROR_OCCURRED());

                    FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                    exception_lineno = 4987;
                    type_description_2 = "o";
                    goto dict_build_exception_28;
                }
                tmp_res = PyDict_SetItem(tmp_kw_defaults_34, tmp_dict_key_34, tmp_dict_value_34);
                Py_DECREF(tmp_dict_value_34);
                assert(!(tmp_res != 0));
            }
            goto dict_build_noexception_28;
            // Exception handling pass through code for dict_build:
            dict_build_exception_28:;
            Py_DECREF(tmp_called_value_52);
            Py_DECREF(tmp_kw_defaults_34);
            goto frame_exception_exit_3;
            // Finished with no exception for dict_build:
            dict_build_noexception_28:;
            tmp_annotations_99 = PyDict_Copy(mod_consts[658]);


            tmp_args_element_value_109 = MAKE_FUNCTION_hikari$api$rest$$$function__95_edit_member(tmp_kw_defaults_34, tmp_annotations_99);

            frame_862833cacd6e5ba73c351f8d132a7b6b_3->m_frame.f_lineno = 4972;
            tmp_dictset_value = CALL_FUNCTION_WITH_SINGLE_ARG(tmp_called_value_52, tmp_args_element_value_109);
            Py_DECREF(tmp_called_value_52);
            Py_DECREF(tmp_args_element_value_109);
            if (tmp_dictset_value == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 4972;
                type_description_2 = "o";
                goto frame_exception_exit_3;
            }
            tmp_res = PyObject_SetItem(locals_hikari$api$rest$$$class__2_RESTClient_110, mod_consts[243], tmp_dictset_value);
            Py_DECREF(tmp_dictset_value);
            if (tmp_res != 0) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 4973;
                type_description_2 = "o";
                goto frame_exception_exit_3;
            }
        }
        {
            PyObject *tmp_called_value_53;
            PyObject *tmp_expression_value_234;
            PyObject *tmp_args_element_value_110;
            PyObject *tmp_kw_defaults_35;
            PyObject *tmp_dict_key_35;
            PyObject *tmp_dict_value_35;
            PyObject *tmp_expression_value_235;
            PyObject *tmp_annotations_100;
            tmp_expression_value_234 = PyObject_GetItem(locals_hikari$api$rest$$$class__2_RESTClient_110, mod_consts[431]);

            if (tmp_expression_value_234 == NULL) {
                if (CHECK_AND_CLEAR_KEY_ERROR_OCCURRED()) {
                    tmp_expression_value_234 = GET_STRING_DICT_VALUE(moduledict_hikari$api$rest, (Nuitka_StringObject *)mod_consts[431]);

                    if (unlikely(tmp_expression_value_234 == NULL)) {
                        tmp_expression_value_234 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[431]);
                    }

                    if (tmp_expression_value_234 == NULL) {
                        assert(ERROR_OCCURRED());

                        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                        exception_lineno = 5073;
                        type_description_2 = "o";
                        goto frame_exception_exit_3;
                    }
                    Py_INCREF(tmp_expression_value_234);
                } else {
                    goto frame_exception_exit_3;
                }
            }

            tmp_called_value_53 = LOOKUP_ATTRIBUTE(tmp_expression_value_234, mod_consts[457]);
            Py_DECREF(tmp_expression_value_234);
            if (tmp_called_value_53 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 5073;
                type_description_2 = "o";
                goto frame_exception_exit_3;
            }
            tmp_dict_key_35 = mod_consts[593];
            tmp_expression_value_235 = PyObject_GetItem(locals_hikari$api$rest$$$class__2_RESTClient_110, mod_consts[440]);

            if (tmp_expression_value_235 == NULL) {
                if (CHECK_AND_CLEAR_KEY_ERROR_OCCURRED()) {
                    tmp_expression_value_235 = GET_STRING_DICT_VALUE(moduledict_hikari$api$rest, (Nuitka_StringObject *)mod_consts[440]);

                    if (unlikely(tmp_expression_value_235 == NULL)) {
                        tmp_expression_value_235 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[440]);
                    }

                    if (tmp_expression_value_235 == NULL) {
                        assert(ERROR_OCCURRED());

                        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
                        Py_DECREF(tmp_called_value_53);

                        exception_lineno = 5078;
                        type_description_2 = "o";
                        goto frame_exception_exit_3;
                    }
                    Py_INCREF(tmp_expression_value_235);
                } else {
                    goto frame_exception_exit_3;
                }
            }

            tmp_dict_value_35 = LOOKUP_ATTRIBUTE(tmp_expression_value_235, mod_consts[485]);
            Py_DECREF(tmp_expression_value_235);
            if (tmp_dict_value_35 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
                Py_DECREF(tmp_called_value_53);

                exception_lineno = 5078;
                type_description_2 = "o";
                goto frame_exception_exit_3;
            }
            tmp_kw_defaults_35 = _PyDict_NewPresized( 2 );
            {
                PyObject *tmp_expression_value_236;
                tmp_res = PyDict_SetItem(tmp_kw_defaults_35, tmp_dict_key_35, tmp_dict_value_35);
                Py_DECREF(tmp_dict_value_35);
                assert(!(tmp_res != 0));
                tmp_dict_key_35 = mod_consts[496];
                tmp_expression_value_236 = PyObject_GetItem(locals_hikari$api$rest$$$class__2_RESTClient_110, mod_consts[440]);

                if (tmp_expression_value_236 == NULL) {
                    if (CHECK_AND_CLEAR_KEY_ERROR_OCCURRED()) {
                        tmp_expression_value_236 = GET_STRING_DICT_VALUE(moduledict_hikari$api$rest, (Nuitka_StringObject *)mod_consts[440]);

                        if (unlikely(tmp_expression_value_236 == NULL)) {
                            tmp_expression_value_236 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[440]);
                        }

                        if (tmp_expression_value_236 == NULL) {
                            assert(ERROR_OCCURRED());

                            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                            exception_lineno = 5079;
                            type_description_2 = "o";
                            goto dict_build_exception_29;
                        }
                        Py_INCREF(tmp_expression_value_236);
                    } else {
                        goto dict_build_exception_29;
                    }
                }

                tmp_dict_value_35 = LOOKUP_ATTRIBUTE(tmp_expression_value_236, mod_consts[485]);
                Py_DECREF(tmp_expression_value_236);
                if (tmp_dict_value_35 == NULL) {
                    assert(ERROR_OCCURRED());

                    FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                    exception_lineno = 5079;
                    type_description_2 = "o";
                    goto dict_build_exception_29;
                }
                tmp_res = PyDict_SetItem(tmp_kw_defaults_35, tmp_dict_key_35, tmp_dict_value_35);
                Py_DECREF(tmp_dict_value_35);
                assert(!(tmp_res != 0));
            }
            goto dict_build_noexception_29;
            // Exception handling pass through code for dict_build:
            dict_build_exception_29:;
            Py_DECREF(tmp_called_value_53);
            Py_DECREF(tmp_kw_defaults_35);
            goto frame_exception_exit_3;
            // Finished with no exception for dict_build:
            dict_build_noexception_29:;
            tmp_annotations_100 = PyDict_Copy(mod_consts[659]);


            tmp_args_element_value_110 = MAKE_FUNCTION_hikari$api$rest$$$function__96_edit_my_member(tmp_kw_defaults_35, tmp_annotations_100);

            frame_862833cacd6e5ba73c351f8d132a7b6b_3->m_frame.f_lineno = 5073;
            tmp_dictset_value = CALL_FUNCTION_WITH_SINGLE_ARG(tmp_called_value_53, tmp_args_element_value_110);
            Py_DECREF(tmp_called_value_53);
            Py_DECREF(tmp_args_element_value_110);
            if (tmp_dictset_value == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 5073;
                type_description_2 = "o";
                goto frame_exception_exit_3;
            }
            tmp_res = PyObject_SetItem(locals_hikari$api$rest$$$class__2_RESTClient_110, mod_consts[246], tmp_dictset_value);
            Py_DECREF(tmp_dictset_value);
            if (tmp_res != 0) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 5074;
                type_description_2 = "o";
                goto frame_exception_exit_3;
            }
        }
        {
            PyObject *tmp_called_value_54;
            PyObject *tmp_expression_value_237;
            PyObject *tmp_args_element_value_111;
            PyObject *tmp_kw_defaults_36;
            PyObject *tmp_dict_key_36;
            PyObject *tmp_dict_value_36;
            PyObject *tmp_expression_value_238;
            PyObject *tmp_annotations_101;
            tmp_expression_value_237 = PyObject_GetItem(locals_hikari$api$rest$$$class__2_RESTClient_110, mod_consts[431]);

            if (tmp_expression_value_237 == NULL) {
                if (CHECK_AND_CLEAR_KEY_ERROR_OCCURRED()) {
                    tmp_expression_value_237 = GET_STRING_DICT_VALUE(moduledict_hikari$api$rest, (Nuitka_StringObject *)mod_consts[431]);

                    if (unlikely(tmp_expression_value_237 == NULL)) {
                        tmp_expression_value_237 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[431]);
                    }

                    if (tmp_expression_value_237 == NULL) {
                        assert(ERROR_OCCURRED());

                        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                        exception_lineno = 5129;
                        type_description_2 = "o";
                        goto frame_exception_exit_3;
                    }
                    Py_INCREF(tmp_expression_value_237);
                } else {
                    goto frame_exception_exit_3;
                }
            }

            tmp_called_value_54 = LOOKUP_ATTRIBUTE(tmp_expression_value_237, mod_consts[457]);
            Py_DECREF(tmp_expression_value_237);
            if (tmp_called_value_54 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 5129;
                type_description_2 = "o";
                goto frame_exception_exit_3;
            }
            tmp_dict_key_36 = mod_consts[496];
            tmp_expression_value_238 = PyObject_GetItem(locals_hikari$api$rest$$$class__2_RESTClient_110, mod_consts[440]);

            if (tmp_expression_value_238 == NULL) {
                if (CHECK_AND_CLEAR_KEY_ERROR_OCCURRED()) {
                    tmp_expression_value_238 = GET_STRING_DICT_VALUE(moduledict_hikari$api$rest, (Nuitka_StringObject *)mod_consts[440]);

                    if (unlikely(tmp_expression_value_238 == NULL)) {
                        tmp_expression_value_238 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[440]);
                    }

                    if (tmp_expression_value_238 == NULL) {
                        assert(ERROR_OCCURRED());

                        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
                        Py_DECREF(tmp_called_value_54);

                        exception_lineno = 5135;
                        type_description_2 = "o";
                        goto frame_exception_exit_3;
                    }
                    Py_INCREF(tmp_expression_value_238);
                } else {
                    goto frame_exception_exit_3;
                }
            }

            tmp_dict_value_36 = LOOKUP_ATTRIBUTE(tmp_expression_value_238, mod_consts[485]);
            Py_DECREF(tmp_expression_value_238);
            if (tmp_dict_value_36 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
                Py_DECREF(tmp_called_value_54);

                exception_lineno = 5135;
                type_description_2 = "o";
                goto frame_exception_exit_3;
            }
            tmp_kw_defaults_36 = _PyDict_NewPresized( 1 );
            tmp_res = PyDict_SetItem(tmp_kw_defaults_36, tmp_dict_key_36, tmp_dict_value_36);
            Py_DECREF(tmp_dict_value_36);
            assert(!(tmp_res != 0));
            tmp_annotations_101 = PyDict_Copy(mod_consts[660]);


            tmp_args_element_value_111 = MAKE_FUNCTION_hikari$api$rest$$$function__97_edit_my_nick(tmp_kw_defaults_36, tmp_annotations_101);

            frame_862833cacd6e5ba73c351f8d132a7b6b_3->m_frame.f_lineno = 5129;
            tmp_dictset_value = CALL_FUNCTION_WITH_SINGLE_ARG(tmp_called_value_54, tmp_args_element_value_111);
            Py_DECREF(tmp_called_value_54);
            Py_DECREF(tmp_args_element_value_111);
            if (tmp_dictset_value == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 5129;
                type_description_2 = "o";
                goto frame_exception_exit_3;
            }
            tmp_res = PyObject_SetItem(locals_hikari$api$rest$$$class__2_RESTClient_110, mod_consts[249], tmp_dictset_value);
            Py_DECREF(tmp_dictset_value);
            if (tmp_res != 0) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 5130;
                type_description_2 = "o";
                goto frame_exception_exit_3;
            }
        }
        {
            PyObject *tmp_called_value_55;
            PyObject *tmp_expression_value_239;
            PyObject *tmp_args_element_value_112;
            PyObject *tmp_kw_defaults_37;
            PyObject *tmp_dict_key_37;
            PyObject *tmp_dict_value_37;
            PyObject *tmp_expression_value_240;
            PyObject *tmp_annotations_102;
            tmp_expression_value_239 = PyObject_GetItem(locals_hikari$api$rest$$$class__2_RESTClient_110, mod_consts[431]);

            if (tmp_expression_value_239 == NULL) {
                if (CHECK_AND_CLEAR_KEY_ERROR_OCCURRED()) {
                    tmp_expression_value_239 = GET_STRING_DICT_VALUE(moduledict_hikari$api$rest, (Nuitka_StringObject *)mod_consts[431]);

                    if (unlikely(tmp_expression_value_239 == NULL)) {
                        tmp_expression_value_239 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[431]);
                    }

                    if (tmp_expression_value_239 == NULL) {
                        assert(ERROR_OCCURRED());

                        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                        exception_lineno = 5180;
                        type_description_2 = "o";
                        goto frame_exception_exit_3;
                    }
                    Py_INCREF(tmp_expression_value_239);
                } else {
                    goto frame_exception_exit_3;
                }
            }

            tmp_called_value_55 = LOOKUP_ATTRIBUTE(tmp_expression_value_239, mod_consts[457]);
            Py_DECREF(tmp_expression_value_239);
            if (tmp_called_value_55 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 5180;
                type_description_2 = "o";
                goto frame_exception_exit_3;
            }
            tmp_dict_key_37 = mod_consts[496];
            tmp_expression_value_240 = PyObject_GetItem(locals_hikari$api$rest$$$class__2_RESTClient_110, mod_consts[440]);

            if (tmp_expression_value_240 == NULL) {
                if (CHECK_AND_CLEAR_KEY_ERROR_OCCURRED()) {
                    tmp_expression_value_240 = GET_STRING_DICT_VALUE(moduledict_hikari$api$rest, (Nuitka_StringObject *)mod_consts[440]);

                    if (unlikely(tmp_expression_value_240 == NULL)) {
                        tmp_expression_value_240 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[440]);
                    }

                    if (tmp_expression_value_240 == NULL) {
                        assert(ERROR_OCCURRED());

                        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
                        Py_DECREF(tmp_called_value_55);

                        exception_lineno = 5187;
                        type_description_2 = "o";
                        goto frame_exception_exit_3;
                    }
                    Py_INCREF(tmp_expression_value_240);
                } else {
                    goto frame_exception_exit_3;
                }
            }

            tmp_dict_value_37 = LOOKUP_ATTRIBUTE(tmp_expression_value_240, mod_consts[485]);
            Py_DECREF(tmp_expression_value_240);
            if (tmp_dict_value_37 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
                Py_DECREF(tmp_called_value_55);

                exception_lineno = 5187;
                type_description_2 = "o";
                goto frame_exception_exit_3;
            }
            tmp_kw_defaults_37 = _PyDict_NewPresized( 1 );
            tmp_res = PyDict_SetItem(tmp_kw_defaults_37, tmp_dict_key_37, tmp_dict_value_37);
            Py_DECREF(tmp_dict_value_37);
            assert(!(tmp_res != 0));
            tmp_annotations_102 = PyDict_Copy(mod_consts[661]);


            tmp_args_element_value_112 = MAKE_FUNCTION_hikari$api$rest$$$function__98_add_role_to_member(tmp_kw_defaults_37, tmp_annotations_102);

            frame_862833cacd6e5ba73c351f8d132a7b6b_3->m_frame.f_lineno = 5180;
            tmp_dictset_value = CALL_FUNCTION_WITH_SINGLE_ARG(tmp_called_value_55, tmp_args_element_value_112);
            Py_DECREF(tmp_called_value_55);
            Py_DECREF(tmp_args_element_value_112);
            if (tmp_dictset_value == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 5180;
                type_description_2 = "o";
                goto frame_exception_exit_3;
            }
            tmp_res = PyObject_SetItem(locals_hikari$api$rest$$$class__2_RESTClient_110, mod_consts[252], tmp_dictset_value);
            Py_DECREF(tmp_dictset_value);
            if (tmp_res != 0) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 5181;
                type_description_2 = "o";
                goto frame_exception_exit_3;
            }
        }
        {
            PyObject *tmp_called_value_56;
            PyObject *tmp_expression_value_241;
            PyObject *tmp_args_element_value_113;
            PyObject *tmp_kw_defaults_38;
            PyObject *tmp_dict_key_38;
            PyObject *tmp_dict_value_38;
            PyObject *tmp_expression_value_242;
            PyObject *tmp_annotations_103;
            tmp_expression_value_241 = PyObject_GetItem(locals_hikari$api$rest$$$class__2_RESTClient_110, mod_consts[431]);

            if (tmp_expression_value_241 == NULL) {
                if (CHECK_AND_CLEAR_KEY_ERROR_OCCURRED()) {
                    tmp_expression_value_241 = GET_STRING_DICT_VALUE(moduledict_hikari$api$rest, (Nuitka_StringObject *)mod_consts[431]);

                    if (unlikely(tmp_expression_value_241 == NULL)) {
                        tmp_expression_value_241 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[431]);
                    }

                    if (tmp_expression_value_241 == NULL) {
                        assert(ERROR_OCCURRED());

                        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                        exception_lineno = 5232;
                        type_description_2 = "o";
                        goto frame_exception_exit_3;
                    }
                    Py_INCREF(tmp_expression_value_241);
                } else {
                    goto frame_exception_exit_3;
                }
            }

            tmp_called_value_56 = LOOKUP_ATTRIBUTE(tmp_expression_value_241, mod_consts[457]);
            Py_DECREF(tmp_expression_value_241);
            if (tmp_called_value_56 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 5232;
                type_description_2 = "o";
                goto frame_exception_exit_3;
            }
            tmp_dict_key_38 = mod_consts[496];
            tmp_expression_value_242 = PyObject_GetItem(locals_hikari$api$rest$$$class__2_RESTClient_110, mod_consts[440]);

            if (tmp_expression_value_242 == NULL) {
                if (CHECK_AND_CLEAR_KEY_ERROR_OCCURRED()) {
                    tmp_expression_value_242 = GET_STRING_DICT_VALUE(moduledict_hikari$api$rest, (Nuitka_StringObject *)mod_consts[440]);

                    if (unlikely(tmp_expression_value_242 == NULL)) {
                        tmp_expression_value_242 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[440]);
                    }

                    if (tmp_expression_value_242 == NULL) {
                        assert(ERROR_OCCURRED());

                        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
                        Py_DECREF(tmp_called_value_56);

                        exception_lineno = 5239;
                        type_description_2 = "o";
                        goto frame_exception_exit_3;
                    }
                    Py_INCREF(tmp_expression_value_242);
                } else {
                    goto frame_exception_exit_3;
                }
            }

            tmp_dict_value_38 = LOOKUP_ATTRIBUTE(tmp_expression_value_242, mod_consts[485]);
            Py_DECREF(tmp_expression_value_242);
            if (tmp_dict_value_38 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
                Py_DECREF(tmp_called_value_56);

                exception_lineno = 5239;
                type_description_2 = "o";
                goto frame_exception_exit_3;
            }
            tmp_kw_defaults_38 = _PyDict_NewPresized( 1 );
            tmp_res = PyDict_SetItem(tmp_kw_defaults_38, tmp_dict_key_38, tmp_dict_value_38);
            Py_DECREF(tmp_dict_value_38);
            assert(!(tmp_res != 0));
            tmp_annotations_103 = PyDict_Copy(mod_consts[661]);


            tmp_args_element_value_113 = MAKE_FUNCTION_hikari$api$rest$$$function__99_remove_role_from_member(tmp_kw_defaults_38, tmp_annotations_103);

            frame_862833cacd6e5ba73c351f8d132a7b6b_3->m_frame.f_lineno = 5232;
            tmp_dictset_value = CALL_FUNCTION_WITH_SINGLE_ARG(tmp_called_value_56, tmp_args_element_value_113);
            Py_DECREF(tmp_called_value_56);
            Py_DECREF(tmp_args_element_value_113);
            if (tmp_dictset_value == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 5232;
                type_description_2 = "o";
                goto frame_exception_exit_3;
            }
            tmp_res = PyObject_SetItem(locals_hikari$api$rest$$$class__2_RESTClient_110, mod_consts[255], tmp_dictset_value);
            Py_DECREF(tmp_dictset_value);
            if (tmp_res != 0) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 5233;
                type_description_2 = "o";
                goto frame_exception_exit_3;
            }
        }
        {
            PyObject *tmp_called_value_57;
            PyObject *tmp_expression_value_243;
            PyObject *tmp_args_element_value_114;
            PyObject *tmp_kw_defaults_39;
            PyObject *tmp_dict_key_39;
            PyObject *tmp_dict_value_39;
            PyObject *tmp_expression_value_244;
            PyObject *tmp_annotations_104;
            tmp_expression_value_243 = PyObject_GetItem(locals_hikari$api$rest$$$class__2_RESTClient_110, mod_consts[431]);

            if (tmp_expression_value_243 == NULL) {
                if (CHECK_AND_CLEAR_KEY_ERROR_OCCURRED()) {
                    tmp_expression_value_243 = GET_STRING_DICT_VALUE(moduledict_hikari$api$rest, (Nuitka_StringObject *)mod_consts[431]);

                    if (unlikely(tmp_expression_value_243 == NULL)) {
                        tmp_expression_value_243 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[431]);
                    }

                    if (tmp_expression_value_243 == NULL) {
                        assert(ERROR_OCCURRED());

                        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                        exception_lineno = 5284;
                        type_description_2 = "o";
                        goto frame_exception_exit_3;
                    }
                    Py_INCREF(tmp_expression_value_243);
                } else {
                    goto frame_exception_exit_3;
                }
            }

            tmp_called_value_57 = LOOKUP_ATTRIBUTE(tmp_expression_value_243, mod_consts[457]);
            Py_DECREF(tmp_expression_value_243);
            if (tmp_called_value_57 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 5284;
                type_description_2 = "o";
                goto frame_exception_exit_3;
            }
            tmp_dict_key_39 = mod_consts[496];
            tmp_expression_value_244 = PyObject_GetItem(locals_hikari$api$rest$$$class__2_RESTClient_110, mod_consts[440]);

            if (tmp_expression_value_244 == NULL) {
                if (CHECK_AND_CLEAR_KEY_ERROR_OCCURRED()) {
                    tmp_expression_value_244 = GET_STRING_DICT_VALUE(moduledict_hikari$api$rest, (Nuitka_StringObject *)mod_consts[440]);

                    if (unlikely(tmp_expression_value_244 == NULL)) {
                        tmp_expression_value_244 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[440]);
                    }

                    if (tmp_expression_value_244 == NULL) {
                        assert(ERROR_OCCURRED());

                        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
                        Py_DECREF(tmp_called_value_57);

                        exception_lineno = 5290;
                        type_description_2 = "o";
                        goto frame_exception_exit_3;
                    }
                    Py_INCREF(tmp_expression_value_244);
                } else {
                    goto frame_exception_exit_3;
                }
            }

            tmp_dict_value_39 = LOOKUP_ATTRIBUTE(tmp_expression_value_244, mod_consts[485]);
            Py_DECREF(tmp_expression_value_244);
            if (tmp_dict_value_39 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
                Py_DECREF(tmp_called_value_57);

                exception_lineno = 5290;
                type_description_2 = "o";
                goto frame_exception_exit_3;
            }
            tmp_kw_defaults_39 = _PyDict_NewPresized( 1 );
            tmp_res = PyDict_SetItem(tmp_kw_defaults_39, tmp_dict_key_39, tmp_dict_value_39);
            Py_DECREF(tmp_dict_value_39);
            assert(!(tmp_res != 0));
            tmp_annotations_104 = PyDict_Copy(mod_consts[662]);


            tmp_args_element_value_114 = MAKE_FUNCTION_hikari$api$rest$$$function__100_kick_user(tmp_kw_defaults_39, tmp_annotations_104);

            frame_862833cacd6e5ba73c351f8d132a7b6b_3->m_frame.f_lineno = 5284;
            tmp_dictset_value = CALL_FUNCTION_WITH_SINGLE_ARG(tmp_called_value_57, tmp_args_element_value_114);
            Py_DECREF(tmp_called_value_57);
            Py_DECREF(tmp_args_element_value_114);
            if (tmp_dictset_value == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 5284;
                type_description_2 = "o";
                goto frame_exception_exit_3;
            }
            tmp_res = PyObject_SetItem(locals_hikari$api$rest$$$class__2_RESTClient_110, mod_consts[258], tmp_dictset_value);
            Py_DECREF(tmp_dictset_value);
            if (tmp_res != 0) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 5285;
                type_description_2 = "o";
                goto frame_exception_exit_3;
            }
        }
        {
            PyObject *tmp_called_value_58;
            PyObject *tmp_expression_value_245;
            PyObject *tmp_args_element_value_115;
            PyObject *tmp_kw_defaults_40;
            PyObject *tmp_dict_key_40;
            PyObject *tmp_dict_value_40;
            PyObject *tmp_expression_value_246;
            PyObject *tmp_annotations_105;
            tmp_expression_value_245 = PyObject_GetItem(locals_hikari$api$rest$$$class__2_RESTClient_110, mod_consts[431]);

            if (tmp_expression_value_245 == NULL) {
                if (CHECK_AND_CLEAR_KEY_ERROR_OCCURRED()) {
                    tmp_expression_value_245 = GET_STRING_DICT_VALUE(moduledict_hikari$api$rest, (Nuitka_StringObject *)mod_consts[431]);

                    if (unlikely(tmp_expression_value_245 == NULL)) {
                        tmp_expression_value_245 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[431]);
                    }

                    if (tmp_expression_value_245 == NULL) {
                        assert(ERROR_OCCURRED());

                        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                        exception_lineno = 5332;
                        type_description_2 = "o";
                        goto frame_exception_exit_3;
                    }
                    Py_INCREF(tmp_expression_value_245);
                } else {
                    goto frame_exception_exit_3;
                }
            }

            tmp_called_value_58 = LOOKUP_ATTRIBUTE(tmp_expression_value_245, mod_consts[457]);
            Py_DECREF(tmp_expression_value_245);
            if (tmp_called_value_58 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 5332;
                type_description_2 = "o";
                goto frame_exception_exit_3;
            }
            tmp_dict_key_40 = mod_consts[496];
            tmp_expression_value_246 = PyObject_GetItem(locals_hikari$api$rest$$$class__2_RESTClient_110, mod_consts[440]);

            if (tmp_expression_value_246 == NULL) {
                if (CHECK_AND_CLEAR_KEY_ERROR_OCCURRED()) {
                    tmp_expression_value_246 = GET_STRING_DICT_VALUE(moduledict_hikari$api$rest, (Nuitka_StringObject *)mod_consts[440]);

                    if (unlikely(tmp_expression_value_246 == NULL)) {
                        tmp_expression_value_246 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[440]);
                    }

                    if (tmp_expression_value_246 == NULL) {
                        assert(ERROR_OCCURRED());

                        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
                        Py_DECREF(tmp_called_value_58);

                        exception_lineno = 5338;
                        type_description_2 = "o";
                        goto frame_exception_exit_3;
                    }
                    Py_INCREF(tmp_expression_value_246);
                } else {
                    goto frame_exception_exit_3;
                }
            }

            tmp_dict_value_40 = LOOKUP_ATTRIBUTE(tmp_expression_value_246, mod_consts[485]);
            Py_DECREF(tmp_expression_value_246);
            if (tmp_dict_value_40 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
                Py_DECREF(tmp_called_value_58);

                exception_lineno = 5338;
                type_description_2 = "o";
                goto frame_exception_exit_3;
            }
            tmp_kw_defaults_40 = _PyDict_NewPresized( 1 );
            tmp_res = PyDict_SetItem(tmp_kw_defaults_40, tmp_dict_key_40, tmp_dict_value_40);
            Py_DECREF(tmp_dict_value_40);
            assert(!(tmp_res != 0));
            tmp_annotations_105 = PyDict_Copy(mod_consts[662]);


            tmp_args_element_value_115 = MAKE_FUNCTION_hikari$api$rest$$$function__101_kick_member(tmp_kw_defaults_40, tmp_annotations_105);

            frame_862833cacd6e5ba73c351f8d132a7b6b_3->m_frame.f_lineno = 5332;
            tmp_dictset_value = CALL_FUNCTION_WITH_SINGLE_ARG(tmp_called_value_58, tmp_args_element_value_115);
            Py_DECREF(tmp_called_value_58);
            Py_DECREF(tmp_args_element_value_115);
            if (tmp_dictset_value == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 5332;
                type_description_2 = "o";
                goto frame_exception_exit_3;
            }
            tmp_res = PyObject_SetItem(locals_hikari$api$rest$$$class__2_RESTClient_110, mod_consts[261], tmp_dictset_value);
            Py_DECREF(tmp_dictset_value);
            if (tmp_res != 0) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 5333;
                type_description_2 = "o";
                goto frame_exception_exit_3;
            }
        }
        {
            PyObject *tmp_called_value_59;
            PyObject *tmp_expression_value_247;
            PyObject *tmp_args_element_value_116;
            PyObject *tmp_kw_defaults_41;
            PyObject *tmp_dict_key_41;
            PyObject *tmp_dict_value_41;
            PyObject *tmp_expression_value_248;
            PyObject *tmp_annotations_106;
            tmp_expression_value_247 = PyObject_GetItem(locals_hikari$api$rest$$$class__2_RESTClient_110, mod_consts[431]);

            if (tmp_expression_value_247 == NULL) {
                if (CHECK_AND_CLEAR_KEY_ERROR_OCCURRED()) {
                    tmp_expression_value_247 = GET_STRING_DICT_VALUE(moduledict_hikari$api$rest, (Nuitka_StringObject *)mod_consts[431]);

                    if (unlikely(tmp_expression_value_247 == NULL)) {
                        tmp_expression_value_247 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[431]);
                    }

                    if (tmp_expression_value_247 == NULL) {
                        assert(ERROR_OCCURRED());

                        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                        exception_lineno = 5342;
                        type_description_2 = "o";
                        goto frame_exception_exit_3;
                    }
                    Py_INCREF(tmp_expression_value_247);
                } else {
                    goto frame_exception_exit_3;
                }
            }

            tmp_called_value_59 = LOOKUP_ATTRIBUTE(tmp_expression_value_247, mod_consts[457]);
            Py_DECREF(tmp_expression_value_247);
            if (tmp_called_value_59 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 5342;
                type_description_2 = "o";
                goto frame_exception_exit_3;
            }
            tmp_dict_key_41 = mod_consts[663];
            tmp_expression_value_248 = PyObject_GetItem(locals_hikari$api$rest$$$class__2_RESTClient_110, mod_consts[440]);

            if (tmp_expression_value_248 == NULL) {
                if (CHECK_AND_CLEAR_KEY_ERROR_OCCURRED()) {
                    tmp_expression_value_248 = GET_STRING_DICT_VALUE(moduledict_hikari$api$rest, (Nuitka_StringObject *)mod_consts[440]);

                    if (unlikely(tmp_expression_value_248 == NULL)) {
                        tmp_expression_value_248 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[440]);
                    }

                    if (tmp_expression_value_248 == NULL) {
                        assert(ERROR_OCCURRED());

                        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
                        Py_DECREF(tmp_called_value_59);

                        exception_lineno = 5348;
                        type_description_2 = "o";
                        goto frame_exception_exit_3;
                    }
                    Py_INCREF(tmp_expression_value_248);
                } else {
                    goto frame_exception_exit_3;
                }
            }

            tmp_dict_value_41 = LOOKUP_ATTRIBUTE(tmp_expression_value_248, mod_consts[485]);
            Py_DECREF(tmp_expression_value_248);
            if (tmp_dict_value_41 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
                Py_DECREF(tmp_called_value_59);

                exception_lineno = 5348;
                type_description_2 = "o";
                goto frame_exception_exit_3;
            }
            tmp_kw_defaults_41 = _PyDict_NewPresized( 2 );
            {
                PyObject *tmp_expression_value_249;
                tmp_res = PyDict_SetItem(tmp_kw_defaults_41, tmp_dict_key_41, tmp_dict_value_41);
                Py_DECREF(tmp_dict_value_41);
                assert(!(tmp_res != 0));
                tmp_dict_key_41 = mod_consts[496];
                tmp_expression_value_249 = PyObject_GetItem(locals_hikari$api$rest$$$class__2_RESTClient_110, mod_consts[440]);

                if (tmp_expression_value_249 == NULL) {
                    if (CHECK_AND_CLEAR_KEY_ERROR_OCCURRED()) {
                        tmp_expression_value_249 = GET_STRING_DICT_VALUE(moduledict_hikari$api$rest, (Nuitka_StringObject *)mod_consts[440]);

                        if (unlikely(tmp_expression_value_249 == NULL)) {
                            tmp_expression_value_249 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[440]);
                        }

                        if (tmp_expression_value_249 == NULL) {
                            assert(ERROR_OCCURRED());

                            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                            exception_lineno = 5349;
                            type_description_2 = "o";
                            goto dict_build_exception_30;
                        }
                        Py_INCREF(tmp_expression_value_249);
                    } else {
                        goto dict_build_exception_30;
                    }
                }

                tmp_dict_value_41 = LOOKUP_ATTRIBUTE(tmp_expression_value_249, mod_consts[485]);
                Py_DECREF(tmp_expression_value_249);
                if (tmp_dict_value_41 == NULL) {
                    assert(ERROR_OCCURRED());

                    FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                    exception_lineno = 5349;
                    type_description_2 = "o";
                    goto dict_build_exception_30;
                }
                tmp_res = PyDict_SetItem(tmp_kw_defaults_41, tmp_dict_key_41, tmp_dict_value_41);
                Py_DECREF(tmp_dict_value_41);
                assert(!(tmp_res != 0));
            }
            goto dict_build_noexception_30;
            // Exception handling pass through code for dict_build:
            dict_build_exception_30:;
            Py_DECREF(tmp_called_value_59);
            Py_DECREF(tmp_kw_defaults_41);
            goto frame_exception_exit_3;
            // Finished with no exception for dict_build:
            dict_build_noexception_30:;
            tmp_annotations_106 = PyDict_Copy(mod_consts[664]);


            tmp_args_element_value_116 = MAKE_FUNCTION_hikari$api$rest$$$function__102_ban_user(tmp_kw_defaults_41, tmp_annotations_106);

            frame_862833cacd6e5ba73c351f8d132a7b6b_3->m_frame.f_lineno = 5342;
            tmp_dictset_value = CALL_FUNCTION_WITH_SINGLE_ARG(tmp_called_value_59, tmp_args_element_value_116);
            Py_DECREF(tmp_called_value_59);
            Py_DECREF(tmp_args_element_value_116);
            if (tmp_dictset_value == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 5342;
                type_description_2 = "o";
                goto frame_exception_exit_3;
            }
            tmp_res = PyObject_SetItem(locals_hikari$api$rest$$$class__2_RESTClient_110, mod_consts[264], tmp_dictset_value);
            Py_DECREF(tmp_dictset_value);
            if (tmp_res != 0) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 5343;
                type_description_2 = "o";
                goto frame_exception_exit_3;
            }
        }
        {
            PyObject *tmp_called_value_60;
            PyObject *tmp_expression_value_250;
            PyObject *tmp_args_element_value_117;
            PyObject *tmp_kw_defaults_42;
            PyObject *tmp_dict_key_42;
            PyObject *tmp_dict_value_42;
            PyObject *tmp_expression_value_251;
            PyObject *tmp_annotations_107;
            tmp_expression_value_250 = PyObject_GetItem(locals_hikari$api$rest$$$class__2_RESTClient_110, mod_consts[431]);

            if (tmp_expression_value_250 == NULL) {
                if (CHECK_AND_CLEAR_KEY_ERROR_OCCURRED()) {
                    tmp_expression_value_250 = GET_STRING_DICT_VALUE(moduledict_hikari$api$rest, (Nuitka_StringObject *)mod_consts[431]);

                    if (unlikely(tmp_expression_value_250 == NULL)) {
                        tmp_expression_value_250 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[431]);
                    }

                    if (tmp_expression_value_250 == NULL) {
                        assert(ERROR_OCCURRED());

                        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                        exception_lineno = 5396;
                        type_description_2 = "o";
                        goto frame_exception_exit_3;
                    }
                    Py_INCREF(tmp_expression_value_250);
                } else {
                    goto frame_exception_exit_3;
                }
            }

            tmp_called_value_60 = LOOKUP_ATTRIBUTE(tmp_expression_value_250, mod_consts[457]);
            Py_DECREF(tmp_expression_value_250);
            if (tmp_called_value_60 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 5396;
                type_description_2 = "o";
                goto frame_exception_exit_3;
            }
            tmp_dict_key_42 = mod_consts[663];
            tmp_expression_value_251 = PyObject_GetItem(locals_hikari$api$rest$$$class__2_RESTClient_110, mod_consts[440]);

            if (tmp_expression_value_251 == NULL) {
                if (CHECK_AND_CLEAR_KEY_ERROR_OCCURRED()) {
                    tmp_expression_value_251 = GET_STRING_DICT_VALUE(moduledict_hikari$api$rest, (Nuitka_StringObject *)mod_consts[440]);

                    if (unlikely(tmp_expression_value_251 == NULL)) {
                        tmp_expression_value_251 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[440]);
                    }

                    if (tmp_expression_value_251 == NULL) {
                        assert(ERROR_OCCURRED());

                        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
                        Py_DECREF(tmp_called_value_60);

                        exception_lineno = 5402;
                        type_description_2 = "o";
                        goto frame_exception_exit_3;
                    }
                    Py_INCREF(tmp_expression_value_251);
                } else {
                    goto frame_exception_exit_3;
                }
            }

            tmp_dict_value_42 = LOOKUP_ATTRIBUTE(tmp_expression_value_251, mod_consts[485]);
            Py_DECREF(tmp_expression_value_251);
            if (tmp_dict_value_42 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
                Py_DECREF(tmp_called_value_60);

                exception_lineno = 5402;
                type_description_2 = "o";
                goto frame_exception_exit_3;
            }
            tmp_kw_defaults_42 = _PyDict_NewPresized( 2 );
            {
                PyObject *tmp_expression_value_252;
                tmp_res = PyDict_SetItem(tmp_kw_defaults_42, tmp_dict_key_42, tmp_dict_value_42);
                Py_DECREF(tmp_dict_value_42);
                assert(!(tmp_res != 0));
                tmp_dict_key_42 = mod_consts[496];
                tmp_expression_value_252 = PyObject_GetItem(locals_hikari$api$rest$$$class__2_RESTClient_110, mod_consts[440]);

                if (tmp_expression_value_252 == NULL) {
                    if (CHECK_AND_CLEAR_KEY_ERROR_OCCURRED()) {
                        tmp_expression_value_252 = GET_STRING_DICT_VALUE(moduledict_hikari$api$rest, (Nuitka_StringObject *)mod_consts[440]);

                        if (unlikely(tmp_expression_value_252 == NULL)) {
                            tmp_expression_value_252 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[440]);
                        }

                        if (tmp_expression_value_252 == NULL) {
                            assert(ERROR_OCCURRED());

                            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                            exception_lineno = 5403;
                            type_description_2 = "o";
                            goto dict_build_exception_31;
                        }
                        Py_INCREF(tmp_expression_value_252);
                    } else {
                        goto dict_build_exception_31;
                    }
                }

                tmp_dict_value_42 = LOOKUP_ATTRIBUTE(tmp_expression_value_252, mod_consts[485]);
                Py_DECREF(tmp_expression_value_252);
                if (tmp_dict_value_42 == NULL) {
                    assert(ERROR_OCCURRED());

                    FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                    exception_lineno = 5403;
                    type_description_2 = "o";
                    goto dict_build_exception_31;
                }
                tmp_res = PyDict_SetItem(tmp_kw_defaults_42, tmp_dict_key_42, tmp_dict_value_42);
                Py_DECREF(tmp_dict_value_42);
                assert(!(tmp_res != 0));
            }
            goto dict_build_noexception_31;
            // Exception handling pass through code for dict_build:
            dict_build_exception_31:;
            Py_DECREF(tmp_called_value_60);
            Py_DECREF(tmp_kw_defaults_42);
            goto frame_exception_exit_3;
            // Finished with no exception for dict_build:
            dict_build_noexception_31:;
            tmp_annotations_107 = PyDict_Copy(mod_consts[664]);


            tmp_args_element_value_117 = MAKE_FUNCTION_hikari$api$rest$$$function__103_ban_member(tmp_kw_defaults_42, tmp_annotations_107);

            frame_862833cacd6e5ba73c351f8d132a7b6b_3->m_frame.f_lineno = 5396;
            tmp_dictset_value = CALL_FUNCTION_WITH_SINGLE_ARG(tmp_called_value_60, tmp_args_element_value_117);
            Py_DECREF(tmp_called_value_60);
            Py_DECREF(tmp_args_element_value_117);
            if (tmp_dictset_value == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 5396;
                type_description_2 = "o";
                goto frame_exception_exit_3;
            }
            tmp_res = PyObject_SetItem(locals_hikari$api$rest$$$class__2_RESTClient_110, mod_consts[267], tmp_dictset_value);
            Py_DECREF(tmp_dictset_value);
            if (tmp_res != 0) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 5397;
                type_description_2 = "o";
                goto frame_exception_exit_3;
            }
        }
        {
            PyObject *tmp_called_value_61;
            PyObject *tmp_expression_value_253;
            PyObject *tmp_args_element_value_118;
            PyObject *tmp_kw_defaults_43;
            PyObject *tmp_dict_key_43;
            PyObject *tmp_dict_value_43;
            PyObject *tmp_expression_value_254;
            PyObject *tmp_annotations_108;
            tmp_expression_value_253 = PyObject_GetItem(locals_hikari$api$rest$$$class__2_RESTClient_110, mod_consts[431]);

            if (tmp_expression_value_253 == NULL) {
                if (CHECK_AND_CLEAR_KEY_ERROR_OCCURRED()) {
                    tmp_expression_value_253 = GET_STRING_DICT_VALUE(moduledict_hikari$api$rest, (Nuitka_StringObject *)mod_consts[431]);

                    if (unlikely(tmp_expression_value_253 == NULL)) {
                        tmp_expression_value_253 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[431]);
                    }

                    if (tmp_expression_value_253 == NULL) {
                        assert(ERROR_OCCURRED());

                        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                        exception_lineno = 5407;
                        type_description_2 = "o";
                        goto frame_exception_exit_3;
                    }
                    Py_INCREF(tmp_expression_value_253);
                } else {
                    goto frame_exception_exit_3;
                }
            }

            tmp_called_value_61 = LOOKUP_ATTRIBUTE(tmp_expression_value_253, mod_consts[457]);
            Py_DECREF(tmp_expression_value_253);
            if (tmp_called_value_61 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 5407;
                type_description_2 = "o";
                goto frame_exception_exit_3;
            }
            tmp_dict_key_43 = mod_consts[496];
            tmp_expression_value_254 = PyObject_GetItem(locals_hikari$api$rest$$$class__2_RESTClient_110, mod_consts[440]);

            if (tmp_expression_value_254 == NULL) {
                if (CHECK_AND_CLEAR_KEY_ERROR_OCCURRED()) {
                    tmp_expression_value_254 = GET_STRING_DICT_VALUE(moduledict_hikari$api$rest, (Nuitka_StringObject *)mod_consts[440]);

                    if (unlikely(tmp_expression_value_254 == NULL)) {
                        tmp_expression_value_254 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[440]);
                    }

                    if (tmp_expression_value_254 == NULL) {
                        assert(ERROR_OCCURRED());

                        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
                        Py_DECREF(tmp_called_value_61);

                        exception_lineno = 5413;
                        type_description_2 = "o";
                        goto frame_exception_exit_3;
                    }
                    Py_INCREF(tmp_expression_value_254);
                } else {
                    goto frame_exception_exit_3;
                }
            }

            tmp_dict_value_43 = LOOKUP_ATTRIBUTE(tmp_expression_value_254, mod_consts[485]);
            Py_DECREF(tmp_expression_value_254);
            if (tmp_dict_value_43 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
                Py_DECREF(tmp_called_value_61);

                exception_lineno = 5413;
                type_description_2 = "o";
                goto frame_exception_exit_3;
            }
            tmp_kw_defaults_43 = _PyDict_NewPresized( 1 );
            tmp_res = PyDict_SetItem(tmp_kw_defaults_43, tmp_dict_key_43, tmp_dict_value_43);
            Py_DECREF(tmp_dict_value_43);
            assert(!(tmp_res != 0));
            tmp_annotations_108 = PyDict_Copy(mod_consts[662]);


            tmp_args_element_value_118 = MAKE_FUNCTION_hikari$api$rest$$$function__104_unban_user(tmp_kw_defaults_43, tmp_annotations_108);

            frame_862833cacd6e5ba73c351f8d132a7b6b_3->m_frame.f_lineno = 5407;
            tmp_dictset_value = CALL_FUNCTION_WITH_SINGLE_ARG(tmp_called_value_61, tmp_args_element_value_118);
            Py_DECREF(tmp_called_value_61);
            Py_DECREF(tmp_args_element_value_118);
            if (tmp_dictset_value == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 5407;
                type_description_2 = "o";
                goto frame_exception_exit_3;
            }
            tmp_res = PyObject_SetItem(locals_hikari$api$rest$$$class__2_RESTClient_110, mod_consts[270], tmp_dictset_value);
            Py_DECREF(tmp_dictset_value);
            if (tmp_res != 0) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 5408;
                type_description_2 = "o";
                goto frame_exception_exit_3;
            }
        }
        {
            PyObject *tmp_called_value_62;
            PyObject *tmp_expression_value_255;
            PyObject *tmp_args_element_value_119;
            PyObject *tmp_kw_defaults_44;
            PyObject *tmp_dict_key_44;
            PyObject *tmp_dict_value_44;
            PyObject *tmp_expression_value_256;
            PyObject *tmp_annotations_109;
            tmp_expression_value_255 = PyObject_GetItem(locals_hikari$api$rest$$$class__2_RESTClient_110, mod_consts[431]);

            if (tmp_expression_value_255 == NULL) {
                if (CHECK_AND_CLEAR_KEY_ERROR_OCCURRED()) {
                    tmp_expression_value_255 = GET_STRING_DICT_VALUE(moduledict_hikari$api$rest, (Nuitka_StringObject *)mod_consts[431]);

                    if (unlikely(tmp_expression_value_255 == NULL)) {
                        tmp_expression_value_255 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[431]);
                    }

                    if (tmp_expression_value_255 == NULL) {
                        assert(ERROR_OCCURRED());

                        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                        exception_lineno = 5455;
                        type_description_2 = "o";
                        goto frame_exception_exit_3;
                    }
                    Py_INCREF(tmp_expression_value_255);
                } else {
                    goto frame_exception_exit_3;
                }
            }

            tmp_called_value_62 = LOOKUP_ATTRIBUTE(tmp_expression_value_255, mod_consts[457]);
            Py_DECREF(tmp_expression_value_255);
            if (tmp_called_value_62 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 5455;
                type_description_2 = "o";
                goto frame_exception_exit_3;
            }
            tmp_dict_key_44 = mod_consts[496];
            tmp_expression_value_256 = PyObject_GetItem(locals_hikari$api$rest$$$class__2_RESTClient_110, mod_consts[440]);

            if (tmp_expression_value_256 == NULL) {
                if (CHECK_AND_CLEAR_KEY_ERROR_OCCURRED()) {
                    tmp_expression_value_256 = GET_STRING_DICT_VALUE(moduledict_hikari$api$rest, (Nuitka_StringObject *)mod_consts[440]);

                    if (unlikely(tmp_expression_value_256 == NULL)) {
                        tmp_expression_value_256 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[440]);
                    }

                    if (tmp_expression_value_256 == NULL) {
                        assert(ERROR_OCCURRED());

                        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
                        Py_DECREF(tmp_called_value_62);

                        exception_lineno = 5461;
                        type_description_2 = "o";
                        goto frame_exception_exit_3;
                    }
                    Py_INCREF(tmp_expression_value_256);
                } else {
                    goto frame_exception_exit_3;
                }
            }

            tmp_dict_value_44 = LOOKUP_ATTRIBUTE(tmp_expression_value_256, mod_consts[485]);
            Py_DECREF(tmp_expression_value_256);
            if (tmp_dict_value_44 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
                Py_DECREF(tmp_called_value_62);

                exception_lineno = 5461;
                type_description_2 = "o";
                goto frame_exception_exit_3;
            }
            tmp_kw_defaults_44 = _PyDict_NewPresized( 1 );
            tmp_res = PyDict_SetItem(tmp_kw_defaults_44, tmp_dict_key_44, tmp_dict_value_44);
            Py_DECREF(tmp_dict_value_44);
            assert(!(tmp_res != 0));
            tmp_annotations_109 = PyDict_Copy(mod_consts[662]);


            tmp_args_element_value_119 = MAKE_FUNCTION_hikari$api$rest$$$function__105_unban_member(tmp_kw_defaults_44, tmp_annotations_109);

            frame_862833cacd6e5ba73c351f8d132a7b6b_3->m_frame.f_lineno = 5455;
            tmp_dictset_value = CALL_FUNCTION_WITH_SINGLE_ARG(tmp_called_value_62, tmp_args_element_value_119);
            Py_DECREF(tmp_called_value_62);
            Py_DECREF(tmp_args_element_value_119);
            if (tmp_dictset_value == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 5455;
                type_description_2 = "o";
                goto frame_exception_exit_3;
            }
            tmp_res = PyObject_SetItem(locals_hikari$api$rest$$$class__2_RESTClient_110, mod_consts[273], tmp_dictset_value);
            Py_DECREF(tmp_dictset_value);
            if (tmp_res != 0) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 5456;
                type_description_2 = "o";
                goto frame_exception_exit_3;
            }
        }
        {
            PyObject *tmp_called_instance_61;
            PyObject *tmp_args_element_value_120;
            PyObject *tmp_annotations_110;
            tmp_called_instance_61 = PyObject_GetItem(locals_hikari$api$rest$$$class__2_RESTClient_110, mod_consts[431]);

            if (tmp_called_instance_61 == NULL) {
                if (CHECK_AND_CLEAR_KEY_ERROR_OCCURRED()) {
                    tmp_called_instance_61 = GET_STRING_DICT_VALUE(moduledict_hikari$api$rest, (Nuitka_StringObject *)mod_consts[431]);

                    if (unlikely(tmp_called_instance_61 == NULL)) {
                        tmp_called_instance_61 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[431]);
                    }

                    if (tmp_called_instance_61 == NULL) {
                        assert(ERROR_OCCURRED());

                        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                        exception_lineno = 5465;
                        type_description_2 = "o";
                        goto frame_exception_exit_3;
                    }
                    Py_INCREF(tmp_called_instance_61);
                } else {
                    goto frame_exception_exit_3;
                }
            }

            tmp_annotations_110 = PyDict_Copy(mod_consts[665]);


            tmp_args_element_value_120 = MAKE_FUNCTION_hikari$api$rest$$$function__106_fetch_ban(tmp_annotations_110);

            frame_862833cacd6e5ba73c351f8d132a7b6b_3->m_frame.f_lineno = 5465;
            tmp_dictset_value = CALL_METHOD_WITH_SINGLE_ARG(tmp_called_instance_61, mod_consts[457], tmp_args_element_value_120);
            Py_DECREF(tmp_called_instance_61);
            Py_DECREF(tmp_args_element_value_120);
            if (tmp_dictset_value == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 5465;
                type_description_2 = "o";
                goto frame_exception_exit_3;
            }
            tmp_res = PyObject_SetItem(locals_hikari$api$rest$$$class__2_RESTClient_110, mod_consts[276], tmp_dictset_value);
            Py_DECREF(tmp_dictset_value);
            if (tmp_res != 0) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 5466;
                type_description_2 = "o";
                goto frame_exception_exit_3;
            }
        }
        {
            PyObject *tmp_called_instance_62;
            PyObject *tmp_args_element_value_121;
            PyObject *tmp_annotations_111;
            tmp_called_instance_62 = PyObject_GetItem(locals_hikari$api$rest$$$class__2_RESTClient_110, mod_consts[431]);

            if (tmp_called_instance_62 == NULL) {
                if (CHECK_AND_CLEAR_KEY_ERROR_OCCURRED()) {
                    tmp_called_instance_62 = GET_STRING_DICT_VALUE(moduledict_hikari$api$rest, (Nuitka_StringObject *)mod_consts[431]);

                    if (unlikely(tmp_called_instance_62 == NULL)) {
                        tmp_called_instance_62 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[431]);
                    }

                    if (tmp_called_instance_62 == NULL) {
                        assert(ERROR_OCCURRED());

                        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                        exception_lineno = 5511;
                        type_description_2 = "o";
                        goto frame_exception_exit_3;
                    }
                    Py_INCREF(tmp_called_instance_62);
                } else {
                    goto frame_exception_exit_3;
                }
            }

            tmp_annotations_111 = PyDict_Copy(mod_consts[666]);


            tmp_args_element_value_121 = MAKE_FUNCTION_hikari$api$rest$$$function__107_fetch_bans(tmp_annotations_111);

            frame_862833cacd6e5ba73c351f8d132a7b6b_3->m_frame.f_lineno = 5511;
            tmp_dictset_value = CALL_METHOD_WITH_SINGLE_ARG(tmp_called_instance_62, mod_consts[457], tmp_args_element_value_121);
            Py_DECREF(tmp_called_instance_62);
            Py_DECREF(tmp_args_element_value_121);
            if (tmp_dictset_value == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 5511;
                type_description_2 = "o";
                goto frame_exception_exit_3;
            }
            tmp_res = PyObject_SetItem(locals_hikari$api$rest$$$class__2_RESTClient_110, mod_consts[279], tmp_dictset_value);
            Py_DECREF(tmp_dictset_value);
            if (tmp_res != 0) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 5512;
                type_description_2 = "o";
                goto frame_exception_exit_3;
            }
        }
        {
            PyObject *tmp_called_instance_63;
            PyObject *tmp_args_element_value_122;
            PyObject *tmp_annotations_112;
            tmp_called_instance_63 = PyObject_GetItem(locals_hikari$api$rest$$$class__2_RESTClient_110, mod_consts[431]);

            if (tmp_called_instance_63 == NULL) {
                if (CHECK_AND_CLEAR_KEY_ERROR_OCCURRED()) {
                    tmp_called_instance_63 = GET_STRING_DICT_VALUE(moduledict_hikari$api$rest, (Nuitka_StringObject *)mod_consts[431]);

                    if (unlikely(tmp_called_instance_63 == NULL)) {
                        tmp_called_instance_63 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[431]);
                    }

                    if (tmp_called_instance_63 == NULL) {
                        assert(ERROR_OCCURRED());

                        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                        exception_lineno = 5552;
                        type_description_2 = "o";
                        goto frame_exception_exit_3;
                    }
                    Py_INCREF(tmp_called_instance_63);
                } else {
                    goto frame_exception_exit_3;
                }
            }

            tmp_annotations_112 = PyDict_Copy(mod_consts[667]);


            tmp_args_element_value_122 = MAKE_FUNCTION_hikari$api$rest$$$function__108_fetch_roles(tmp_annotations_112);

            frame_862833cacd6e5ba73c351f8d132a7b6b_3->m_frame.f_lineno = 5552;
            tmp_dictset_value = CALL_METHOD_WITH_SINGLE_ARG(tmp_called_instance_63, mod_consts[457], tmp_args_element_value_122);
            Py_DECREF(tmp_called_instance_63);
            Py_DECREF(tmp_args_element_value_122);
            if (tmp_dictset_value == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 5552;
                type_description_2 = "o";
                goto frame_exception_exit_3;
            }
            tmp_res = PyObject_SetItem(locals_hikari$api$rest$$$class__2_RESTClient_110, mod_consts[282], tmp_dictset_value);
            Py_DECREF(tmp_dictset_value);
            if (tmp_res != 0) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 5553;
                type_description_2 = "o";
                goto frame_exception_exit_3;
            }
        }
        {
            PyObject *tmp_called_value_63;
            PyObject *tmp_expression_value_257;
            PyObject *tmp_args_element_value_123;
            PyObject *tmp_kw_defaults_45;
            PyObject *tmp_dict_key_45;
            PyObject *tmp_dict_value_45;
            PyObject *tmp_expression_value_258;
            PyObject *tmp_annotations_113;
            tmp_expression_value_257 = PyObject_GetItem(locals_hikari$api$rest$$$class__2_RESTClient_110, mod_consts[431]);

            if (tmp_expression_value_257 == NULL) {
                if (CHECK_AND_CLEAR_KEY_ERROR_OCCURRED()) {
                    tmp_expression_value_257 = GET_STRING_DICT_VALUE(moduledict_hikari$api$rest, (Nuitka_StringObject *)mod_consts[431]);

                    if (unlikely(tmp_expression_value_257 == NULL)) {
                        tmp_expression_value_257 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[431]);
                    }

                    if (tmp_expression_value_257 == NULL) {
                        assert(ERROR_OCCURRED());

                        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                        exception_lineno = 5591;
                        type_description_2 = "o";
                        goto frame_exception_exit_3;
                    }
                    Py_INCREF(tmp_expression_value_257);
                } else {
                    goto frame_exception_exit_3;
                }
            }

            tmp_called_value_63 = LOOKUP_ATTRIBUTE(tmp_expression_value_257, mod_consts[457]);
            Py_DECREF(tmp_expression_value_257);
            if (tmp_called_value_63 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 5591;
                type_description_2 = "o";
                goto frame_exception_exit_3;
            }
            tmp_dict_key_45 = mod_consts[484];
            tmp_expression_value_258 = PyObject_GetItem(locals_hikari$api$rest$$$class__2_RESTClient_110, mod_consts[440]);

            if (tmp_expression_value_258 == NULL) {
                if (CHECK_AND_CLEAR_KEY_ERROR_OCCURRED()) {
                    tmp_expression_value_258 = GET_STRING_DICT_VALUE(moduledict_hikari$api$rest, (Nuitka_StringObject *)mod_consts[440]);

                    if (unlikely(tmp_expression_value_258 == NULL)) {
                        tmp_expression_value_258 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[440]);
                    }

                    if (tmp_expression_value_258 == NULL) {
                        assert(ERROR_OCCURRED());

                        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
                        Py_DECREF(tmp_called_value_63);

                        exception_lineno = 5596;
                        type_description_2 = "o";
                        goto frame_exception_exit_3;
                    }
                    Py_INCREF(tmp_expression_value_258);
                } else {
                    goto frame_exception_exit_3;
                }
            }

            tmp_dict_value_45 = LOOKUP_ATTRIBUTE(tmp_expression_value_258, mod_consts[485]);
            Py_DECREF(tmp_expression_value_258);
            if (tmp_dict_value_45 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
                Py_DECREF(tmp_called_value_63);

                exception_lineno = 5596;
                type_description_2 = "o";
                goto frame_exception_exit_3;
            }
            tmp_kw_defaults_45 = _PyDict_NewPresized( 9 );
            {
                PyObject *tmp_expression_value_259;
                PyObject *tmp_expression_value_260;
                PyObject *tmp_expression_value_261;
                PyObject *tmp_expression_value_262;
                PyObject *tmp_expression_value_263;
                PyObject *tmp_expression_value_264;
                PyObject *tmp_expression_value_265;
                PyObject *tmp_expression_value_266;
                tmp_res = PyDict_SetItem(tmp_kw_defaults_45, tmp_dict_key_45, tmp_dict_value_45);
                Py_DECREF(tmp_dict_value_45);
                assert(!(tmp_res != 0));
                tmp_dict_key_45 = mod_consts[668];
                tmp_expression_value_259 = PyObject_GetItem(locals_hikari$api$rest$$$class__2_RESTClient_110, mod_consts[440]);

                if (tmp_expression_value_259 == NULL) {
                    if (CHECK_AND_CLEAR_KEY_ERROR_OCCURRED()) {
                        tmp_expression_value_259 = GET_STRING_DICT_VALUE(moduledict_hikari$api$rest, (Nuitka_StringObject *)mod_consts[440]);

                        if (unlikely(tmp_expression_value_259 == NULL)) {
                            tmp_expression_value_259 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[440]);
                        }

                        if (tmp_expression_value_259 == NULL) {
                            assert(ERROR_OCCURRED());

                            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                            exception_lineno = 5597;
                            type_description_2 = "o";
                            goto dict_build_exception_32;
                        }
                        Py_INCREF(tmp_expression_value_259);
                    } else {
                        goto dict_build_exception_32;
                    }
                }

                tmp_dict_value_45 = LOOKUP_ATTRIBUTE(tmp_expression_value_259, mod_consts[485]);
                Py_DECREF(tmp_expression_value_259);
                if (tmp_dict_value_45 == NULL) {
                    assert(ERROR_OCCURRED());

                    FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                    exception_lineno = 5597;
                    type_description_2 = "o";
                    goto dict_build_exception_32;
                }
                tmp_res = PyDict_SetItem(tmp_kw_defaults_45, tmp_dict_key_45, tmp_dict_value_45);
                Py_DECREF(tmp_dict_value_45);
                assert(!(tmp_res != 0));
                tmp_dict_key_45 = mod_consts[669];
                tmp_expression_value_260 = PyObject_GetItem(locals_hikari$api$rest$$$class__2_RESTClient_110, mod_consts[440]);

                if (tmp_expression_value_260 == NULL) {
                    if (CHECK_AND_CLEAR_KEY_ERROR_OCCURRED()) {
                        tmp_expression_value_260 = GET_STRING_DICT_VALUE(moduledict_hikari$api$rest, (Nuitka_StringObject *)mod_consts[440]);

                        if (unlikely(tmp_expression_value_260 == NULL)) {
                            tmp_expression_value_260 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[440]);
                        }

                        if (tmp_expression_value_260 == NULL) {
                            assert(ERROR_OCCURRED());

                            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                            exception_lineno = 5598;
                            type_description_2 = "o";
                            goto dict_build_exception_32;
                        }
                        Py_INCREF(tmp_expression_value_260);
                    } else {
                        goto dict_build_exception_32;
                    }
                }

                tmp_dict_value_45 = LOOKUP_ATTRIBUTE(tmp_expression_value_260, mod_consts[485]);
                Py_DECREF(tmp_expression_value_260);
                if (tmp_dict_value_45 == NULL) {
                    assert(ERROR_OCCURRED());

                    FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                    exception_lineno = 5598;
                    type_description_2 = "o";
                    goto dict_build_exception_32;
                }
                tmp_res = PyDict_SetItem(tmp_kw_defaults_45, tmp_dict_key_45, tmp_dict_value_45);
                Py_DECREF(tmp_dict_value_45);
                assert(!(tmp_res != 0));
                tmp_dict_key_45 = mod_consts[670];
                tmp_expression_value_261 = PyObject_GetItem(locals_hikari$api$rest$$$class__2_RESTClient_110, mod_consts[440]);

                if (tmp_expression_value_261 == NULL) {
                    if (CHECK_AND_CLEAR_KEY_ERROR_OCCURRED()) {
                        tmp_expression_value_261 = GET_STRING_DICT_VALUE(moduledict_hikari$api$rest, (Nuitka_StringObject *)mod_consts[440]);

                        if (unlikely(tmp_expression_value_261 == NULL)) {
                            tmp_expression_value_261 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[440]);
                        }

                        if (tmp_expression_value_261 == NULL) {
                            assert(ERROR_OCCURRED());

                            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                            exception_lineno = 5599;
                            type_description_2 = "o";
                            goto dict_build_exception_32;
                        }
                        Py_INCREF(tmp_expression_value_261);
                    } else {
                        goto dict_build_exception_32;
                    }
                }

                tmp_dict_value_45 = LOOKUP_ATTRIBUTE(tmp_expression_value_261, mod_consts[485]);
                Py_DECREF(tmp_expression_value_261);
                if (tmp_dict_value_45 == NULL) {
                    assert(ERROR_OCCURRED());

                    FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                    exception_lineno = 5599;
                    type_description_2 = "o";
                    goto dict_build_exception_32;
                }
                tmp_res = PyDict_SetItem(tmp_kw_defaults_45, tmp_dict_key_45, tmp_dict_value_45);
                Py_DECREF(tmp_dict_value_45);
                assert(!(tmp_res != 0));
                tmp_dict_key_45 = mod_consts[671];
                tmp_expression_value_262 = PyObject_GetItem(locals_hikari$api$rest$$$class__2_RESTClient_110, mod_consts[440]);

                if (tmp_expression_value_262 == NULL) {
                    if (CHECK_AND_CLEAR_KEY_ERROR_OCCURRED()) {
                        tmp_expression_value_262 = GET_STRING_DICT_VALUE(moduledict_hikari$api$rest, (Nuitka_StringObject *)mod_consts[440]);

                        if (unlikely(tmp_expression_value_262 == NULL)) {
                            tmp_expression_value_262 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[440]);
                        }

                        if (tmp_expression_value_262 == NULL) {
                            assert(ERROR_OCCURRED());

                            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                            exception_lineno = 5600;
                            type_description_2 = "o";
                            goto dict_build_exception_32;
                        }
                        Py_INCREF(tmp_expression_value_262);
                    } else {
                        goto dict_build_exception_32;
                    }
                }

                tmp_dict_value_45 = LOOKUP_ATTRIBUTE(tmp_expression_value_262, mod_consts[485]);
                Py_DECREF(tmp_expression_value_262);
                if (tmp_dict_value_45 == NULL) {
                    assert(ERROR_OCCURRED());

                    FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                    exception_lineno = 5600;
                    type_description_2 = "o";
                    goto dict_build_exception_32;
                }
                tmp_res = PyDict_SetItem(tmp_kw_defaults_45, tmp_dict_key_45, tmp_dict_value_45);
                Py_DECREF(tmp_dict_value_45);
                assert(!(tmp_res != 0));
                tmp_dict_key_45 = mod_consts[632];
                tmp_expression_value_263 = PyObject_GetItem(locals_hikari$api$rest$$$class__2_RESTClient_110, mod_consts[440]);

                if (tmp_expression_value_263 == NULL) {
                    if (CHECK_AND_CLEAR_KEY_ERROR_OCCURRED()) {
                        tmp_expression_value_263 = GET_STRING_DICT_VALUE(moduledict_hikari$api$rest, (Nuitka_StringObject *)mod_consts[440]);

                        if (unlikely(tmp_expression_value_263 == NULL)) {
                            tmp_expression_value_263 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[440]);
                        }

                        if (tmp_expression_value_263 == NULL) {
                            assert(ERROR_OCCURRED());

                            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                            exception_lineno = 5601;
                            type_description_2 = "o";
                            goto dict_build_exception_32;
                        }
                        Py_INCREF(tmp_expression_value_263);
                    } else {
                        goto dict_build_exception_32;
                    }
                }

                tmp_dict_value_45 = LOOKUP_ATTRIBUTE(tmp_expression_value_263, mod_consts[485]);
                Py_DECREF(tmp_expression_value_263);
                if (tmp_dict_value_45 == NULL) {
                    assert(ERROR_OCCURRED());

                    FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                    exception_lineno = 5601;
                    type_description_2 = "o";
                    goto dict_build_exception_32;
                }
                tmp_res = PyDict_SetItem(tmp_kw_defaults_45, tmp_dict_key_45, tmp_dict_value_45);
                Py_DECREF(tmp_dict_value_45);
                assert(!(tmp_res != 0));
                tmp_dict_key_45 = mod_consts[672];
                tmp_expression_value_264 = PyObject_GetItem(locals_hikari$api$rest$$$class__2_RESTClient_110, mod_consts[440]);

                if (tmp_expression_value_264 == NULL) {
                    if (CHECK_AND_CLEAR_KEY_ERROR_OCCURRED()) {
                        tmp_expression_value_264 = GET_STRING_DICT_VALUE(moduledict_hikari$api$rest, (Nuitka_StringObject *)mod_consts[440]);

                        if (unlikely(tmp_expression_value_264 == NULL)) {
                            tmp_expression_value_264 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[440]);
                        }

                        if (tmp_expression_value_264 == NULL) {
                            assert(ERROR_OCCURRED());

                            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                            exception_lineno = 5602;
                            type_description_2 = "o";
                            goto dict_build_exception_32;
                        }
                        Py_INCREF(tmp_expression_value_264);
                    } else {
                        goto dict_build_exception_32;
                    }
                }

                tmp_dict_value_45 = LOOKUP_ATTRIBUTE(tmp_expression_value_264, mod_consts[485]);
                Py_DECREF(tmp_expression_value_264);
                if (tmp_dict_value_45 == NULL) {
                    assert(ERROR_OCCURRED());

                    FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                    exception_lineno = 5602;
                    type_description_2 = "o";
                    goto dict_build_exception_32;
                }
                tmp_res = PyDict_SetItem(tmp_kw_defaults_45, tmp_dict_key_45, tmp_dict_value_45);
                Py_DECREF(tmp_dict_value_45);
                assert(!(tmp_res != 0));
                tmp_dict_key_45 = mod_consts[673];
                tmp_expression_value_265 = PyObject_GetItem(locals_hikari$api$rest$$$class__2_RESTClient_110, mod_consts[440]);

                if (tmp_expression_value_265 == NULL) {
                    if (CHECK_AND_CLEAR_KEY_ERROR_OCCURRED()) {
                        tmp_expression_value_265 = GET_STRING_DICT_VALUE(moduledict_hikari$api$rest, (Nuitka_StringObject *)mod_consts[440]);

                        if (unlikely(tmp_expression_value_265 == NULL)) {
                            tmp_expression_value_265 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[440]);
                        }

                        if (tmp_expression_value_265 == NULL) {
                            assert(ERROR_OCCURRED());

                            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                            exception_lineno = 5603;
                            type_description_2 = "o";
                            goto dict_build_exception_32;
                        }
                        Py_INCREF(tmp_expression_value_265);
                    } else {
                        goto dict_build_exception_32;
                    }
                }

                tmp_dict_value_45 = LOOKUP_ATTRIBUTE(tmp_expression_value_265, mod_consts[485]);
                Py_DECREF(tmp_expression_value_265);
                if (tmp_dict_value_45 == NULL) {
                    assert(ERROR_OCCURRED());

                    FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                    exception_lineno = 5603;
                    type_description_2 = "o";
                    goto dict_build_exception_32;
                }
                tmp_res = PyDict_SetItem(tmp_kw_defaults_45, tmp_dict_key_45, tmp_dict_value_45);
                Py_DECREF(tmp_dict_value_45);
                assert(!(tmp_res != 0));
                tmp_dict_key_45 = mod_consts[496];
                tmp_expression_value_266 = PyObject_GetItem(locals_hikari$api$rest$$$class__2_RESTClient_110, mod_consts[440]);

                if (tmp_expression_value_266 == NULL) {
                    if (CHECK_AND_CLEAR_KEY_ERROR_OCCURRED()) {
                        tmp_expression_value_266 = GET_STRING_DICT_VALUE(moduledict_hikari$api$rest, (Nuitka_StringObject *)mod_consts[440]);

                        if (unlikely(tmp_expression_value_266 == NULL)) {
                            tmp_expression_value_266 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[440]);
                        }

                        if (tmp_expression_value_266 == NULL) {
                            assert(ERROR_OCCURRED());

                            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                            exception_lineno = 5604;
                            type_description_2 = "o";
                            goto dict_build_exception_32;
                        }
                        Py_INCREF(tmp_expression_value_266);
                    } else {
                        goto dict_build_exception_32;
                    }
                }

                tmp_dict_value_45 = LOOKUP_ATTRIBUTE(tmp_expression_value_266, mod_consts[485]);
                Py_DECREF(tmp_expression_value_266);
                if (tmp_dict_value_45 == NULL) {
                    assert(ERROR_OCCURRED());

                    FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                    exception_lineno = 5604;
                    type_description_2 = "o";
                    goto dict_build_exception_32;
                }
                tmp_res = PyDict_SetItem(tmp_kw_defaults_45, tmp_dict_key_45, tmp_dict_value_45);
                Py_DECREF(tmp_dict_value_45);
                assert(!(tmp_res != 0));
            }
            goto dict_build_noexception_32;
            // Exception handling pass through code for dict_build:
            dict_build_exception_32:;
            Py_DECREF(tmp_called_value_63);
            Py_DECREF(tmp_kw_defaults_45);
            goto frame_exception_exit_3;
            // Finished with no exception for dict_build:
            dict_build_noexception_32:;
            tmp_annotations_113 = PyDict_Copy(mod_consts[674]);


            tmp_args_element_value_123 = MAKE_FUNCTION_hikari$api$rest$$$function__109_create_role(tmp_kw_defaults_45, tmp_annotations_113);

            frame_862833cacd6e5ba73c351f8d132a7b6b_3->m_frame.f_lineno = 5591;
            tmp_dictset_value = CALL_FUNCTION_WITH_SINGLE_ARG(tmp_called_value_63, tmp_args_element_value_123);
            Py_DECREF(tmp_called_value_63);
            Py_DECREF(tmp_args_element_value_123);
            if (tmp_dictset_value == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 5591;
                type_description_2 = "o";
                goto frame_exception_exit_3;
            }
            tmp_res = PyObject_SetItem(locals_hikari$api$rest$$$class__2_RESTClient_110, mod_consts[285], tmp_dictset_value);
            Py_DECREF(tmp_dictset_value);
            if (tmp_res != 0) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 5592;
                type_description_2 = "o";
                goto frame_exception_exit_3;
            }
        }
        {
            PyObject *tmp_called_instance_64;
            PyObject *tmp_args_element_value_124;
            PyObject *tmp_annotations_114;
            tmp_called_instance_64 = PyObject_GetItem(locals_hikari$api$rest$$$class__2_RESTClient_110, mod_consts[431]);

            if (tmp_called_instance_64 == NULL) {
                if (CHECK_AND_CLEAR_KEY_ERROR_OCCURRED()) {
                    tmp_called_instance_64 = GET_STRING_DICT_VALUE(moduledict_hikari$api$rest, (Nuitka_StringObject *)mod_consts[431]);

                    if (unlikely(tmp_called_instance_64 == NULL)) {
                        tmp_called_instance_64 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[431]);
                    }

                    if (tmp_called_instance_64 == NULL) {
                        assert(ERROR_OCCURRED());

                        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                        exception_lineno = 5672;
                        type_description_2 = "o";
                        goto frame_exception_exit_3;
                    }
                    Py_INCREF(tmp_called_instance_64);
                } else {
                    goto frame_exception_exit_3;
                }
            }

            tmp_annotations_114 = PyDict_Copy(mod_consts[675]);


            tmp_args_element_value_124 = MAKE_FUNCTION_hikari$api$rest$$$function__110_reposition_roles(tmp_annotations_114);

            frame_862833cacd6e5ba73c351f8d132a7b6b_3->m_frame.f_lineno = 5672;
            tmp_dictset_value = CALL_METHOD_WITH_SINGLE_ARG(tmp_called_instance_64, mod_consts[457], tmp_args_element_value_124);
            Py_DECREF(tmp_called_instance_64);
            Py_DECREF(tmp_args_element_value_124);
            if (tmp_dictset_value == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 5672;
                type_description_2 = "o";
                goto frame_exception_exit_3;
            }
            tmp_res = PyObject_SetItem(locals_hikari$api$rest$$$class__2_RESTClient_110, mod_consts[288], tmp_dictset_value);
            Py_DECREF(tmp_dictset_value);
            if (tmp_res != 0) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 5673;
                type_description_2 = "o";
                goto frame_exception_exit_3;
            }
        }
        {
            PyObject *tmp_called_value_64;
            PyObject *tmp_expression_value_267;
            PyObject *tmp_args_element_value_125;
            PyObject *tmp_kw_defaults_46;
            PyObject *tmp_dict_key_46;
            PyObject *tmp_dict_value_46;
            PyObject *tmp_expression_value_268;
            PyObject *tmp_annotations_115;
            tmp_expression_value_267 = PyObject_GetItem(locals_hikari$api$rest$$$class__2_RESTClient_110, mod_consts[431]);

            if (tmp_expression_value_267 == NULL) {
                if (CHECK_AND_CLEAR_KEY_ERROR_OCCURRED()) {
                    tmp_expression_value_267 = GET_STRING_DICT_VALUE(moduledict_hikari$api$rest, (Nuitka_StringObject *)mod_consts[431]);

                    if (unlikely(tmp_expression_value_267 == NULL)) {
                        tmp_expression_value_267 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[431]);
                    }

                    if (tmp_expression_value_267 == NULL) {
                        assert(ERROR_OCCURRED());

                        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                        exception_lineno = 5711;
                        type_description_2 = "o";
                        goto frame_exception_exit_3;
                    }
                    Py_INCREF(tmp_expression_value_267);
                } else {
                    goto frame_exception_exit_3;
                }
            }

            tmp_called_value_64 = LOOKUP_ATTRIBUTE(tmp_expression_value_267, mod_consts[457]);
            Py_DECREF(tmp_expression_value_267);
            if (tmp_called_value_64 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 5711;
                type_description_2 = "o";
                goto frame_exception_exit_3;
            }
            tmp_dict_key_46 = mod_consts[484];
            tmp_expression_value_268 = PyObject_GetItem(locals_hikari$api$rest$$$class__2_RESTClient_110, mod_consts[440]);

            if (tmp_expression_value_268 == NULL) {
                if (CHECK_AND_CLEAR_KEY_ERROR_OCCURRED()) {
                    tmp_expression_value_268 = GET_STRING_DICT_VALUE(moduledict_hikari$api$rest, (Nuitka_StringObject *)mod_consts[440]);

                    if (unlikely(tmp_expression_value_268 == NULL)) {
                        tmp_expression_value_268 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[440]);
                    }

                    if (tmp_expression_value_268 == NULL) {
                        assert(ERROR_OCCURRED());

                        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
                        Py_DECREF(tmp_called_value_64);

                        exception_lineno = 5717;
                        type_description_2 = "o";
                        goto frame_exception_exit_3;
                    }
                    Py_INCREF(tmp_expression_value_268);
                } else {
                    goto frame_exception_exit_3;
                }
            }

            tmp_dict_value_46 = LOOKUP_ATTRIBUTE(tmp_expression_value_268, mod_consts[485]);
            Py_DECREF(tmp_expression_value_268);
            if (tmp_dict_value_46 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
                Py_DECREF(tmp_called_value_64);

                exception_lineno = 5717;
                type_description_2 = "o";
                goto frame_exception_exit_3;
            }
            tmp_kw_defaults_46 = _PyDict_NewPresized( 9 );
            {
                PyObject *tmp_expression_value_269;
                PyObject *tmp_expression_value_270;
                PyObject *tmp_expression_value_271;
                PyObject *tmp_expression_value_272;
                PyObject *tmp_expression_value_273;
                PyObject *tmp_expression_value_274;
                PyObject *tmp_expression_value_275;
                PyObject *tmp_expression_value_276;
                tmp_res = PyDict_SetItem(tmp_kw_defaults_46, tmp_dict_key_46, tmp_dict_value_46);
                Py_DECREF(tmp_dict_value_46);
                assert(!(tmp_res != 0));
                tmp_dict_key_46 = mod_consts[668];
                tmp_expression_value_269 = PyObject_GetItem(locals_hikari$api$rest$$$class__2_RESTClient_110, mod_consts[440]);

                if (tmp_expression_value_269 == NULL) {
                    if (CHECK_AND_CLEAR_KEY_ERROR_OCCURRED()) {
                        tmp_expression_value_269 = GET_STRING_DICT_VALUE(moduledict_hikari$api$rest, (Nuitka_StringObject *)mod_consts[440]);

                        if (unlikely(tmp_expression_value_269 == NULL)) {
                            tmp_expression_value_269 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[440]);
                        }

                        if (tmp_expression_value_269 == NULL) {
                            assert(ERROR_OCCURRED());

                            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                            exception_lineno = 5718;
                            type_description_2 = "o";
                            goto dict_build_exception_33;
                        }
                        Py_INCREF(tmp_expression_value_269);
                    } else {
                        goto dict_build_exception_33;
                    }
                }

                tmp_dict_value_46 = LOOKUP_ATTRIBUTE(tmp_expression_value_269, mod_consts[485]);
                Py_DECREF(tmp_expression_value_269);
                if (tmp_dict_value_46 == NULL) {
                    assert(ERROR_OCCURRED());

                    FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                    exception_lineno = 5718;
                    type_description_2 = "o";
                    goto dict_build_exception_33;
                }
                tmp_res = PyDict_SetItem(tmp_kw_defaults_46, tmp_dict_key_46, tmp_dict_value_46);
                Py_DECREF(tmp_dict_value_46);
                assert(!(tmp_res != 0));
                tmp_dict_key_46 = mod_consts[669];
                tmp_expression_value_270 = PyObject_GetItem(locals_hikari$api$rest$$$class__2_RESTClient_110, mod_consts[440]);

                if (tmp_expression_value_270 == NULL) {
                    if (CHECK_AND_CLEAR_KEY_ERROR_OCCURRED()) {
                        tmp_expression_value_270 = GET_STRING_DICT_VALUE(moduledict_hikari$api$rest, (Nuitka_StringObject *)mod_consts[440]);

                        if (unlikely(tmp_expression_value_270 == NULL)) {
                            tmp_expression_value_270 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[440]);
                        }

                        if (tmp_expression_value_270 == NULL) {
                            assert(ERROR_OCCURRED());

                            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                            exception_lineno = 5719;
                            type_description_2 = "o";
                            goto dict_build_exception_33;
                        }
                        Py_INCREF(tmp_expression_value_270);
                    } else {
                        goto dict_build_exception_33;
                    }
                }

                tmp_dict_value_46 = LOOKUP_ATTRIBUTE(tmp_expression_value_270, mod_consts[485]);
                Py_DECREF(tmp_expression_value_270);
                if (tmp_dict_value_46 == NULL) {
                    assert(ERROR_OCCURRED());

                    FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                    exception_lineno = 5719;
                    type_description_2 = "o";
                    goto dict_build_exception_33;
                }
                tmp_res = PyDict_SetItem(tmp_kw_defaults_46, tmp_dict_key_46, tmp_dict_value_46);
                Py_DECREF(tmp_dict_value_46);
                assert(!(tmp_res != 0));
                tmp_dict_key_46 = mod_consts[670];
                tmp_expression_value_271 = PyObject_GetItem(locals_hikari$api$rest$$$class__2_RESTClient_110, mod_consts[440]);

                if (tmp_expression_value_271 == NULL) {
                    if (CHECK_AND_CLEAR_KEY_ERROR_OCCURRED()) {
                        tmp_expression_value_271 = GET_STRING_DICT_VALUE(moduledict_hikari$api$rest, (Nuitka_StringObject *)mod_consts[440]);

                        if (unlikely(tmp_expression_value_271 == NULL)) {
                            tmp_expression_value_271 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[440]);
                        }

                        if (tmp_expression_value_271 == NULL) {
                            assert(ERROR_OCCURRED());

                            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                            exception_lineno = 5720;
                            type_description_2 = "o";
                            goto dict_build_exception_33;
                        }
                        Py_INCREF(tmp_expression_value_271);
                    } else {
                        goto dict_build_exception_33;
                    }
                }

                tmp_dict_value_46 = LOOKUP_ATTRIBUTE(tmp_expression_value_271, mod_consts[485]);
                Py_DECREF(tmp_expression_value_271);
                if (tmp_dict_value_46 == NULL) {
                    assert(ERROR_OCCURRED());

                    FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                    exception_lineno = 5720;
                    type_description_2 = "o";
                    goto dict_build_exception_33;
                }
                tmp_res = PyDict_SetItem(tmp_kw_defaults_46, tmp_dict_key_46, tmp_dict_value_46);
                Py_DECREF(tmp_dict_value_46);
                assert(!(tmp_res != 0));
                tmp_dict_key_46 = mod_consts[671];
                tmp_expression_value_272 = PyObject_GetItem(locals_hikari$api$rest$$$class__2_RESTClient_110, mod_consts[440]);

                if (tmp_expression_value_272 == NULL) {
                    if (CHECK_AND_CLEAR_KEY_ERROR_OCCURRED()) {
                        tmp_expression_value_272 = GET_STRING_DICT_VALUE(moduledict_hikari$api$rest, (Nuitka_StringObject *)mod_consts[440]);

                        if (unlikely(tmp_expression_value_272 == NULL)) {
                            tmp_expression_value_272 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[440]);
                        }

                        if (tmp_expression_value_272 == NULL) {
                            assert(ERROR_OCCURRED());

                            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                            exception_lineno = 5721;
                            type_description_2 = "o";
                            goto dict_build_exception_33;
                        }
                        Py_INCREF(tmp_expression_value_272);
                    } else {
                        goto dict_build_exception_33;
                    }
                }

                tmp_dict_value_46 = LOOKUP_ATTRIBUTE(tmp_expression_value_272, mod_consts[485]);
                Py_DECREF(tmp_expression_value_272);
                if (tmp_dict_value_46 == NULL) {
                    assert(ERROR_OCCURRED());

                    FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                    exception_lineno = 5721;
                    type_description_2 = "o";
                    goto dict_build_exception_33;
                }
                tmp_res = PyDict_SetItem(tmp_kw_defaults_46, tmp_dict_key_46, tmp_dict_value_46);
                Py_DECREF(tmp_dict_value_46);
                assert(!(tmp_res != 0));
                tmp_dict_key_46 = mod_consts[632];
                tmp_expression_value_273 = PyObject_GetItem(locals_hikari$api$rest$$$class__2_RESTClient_110, mod_consts[440]);

                if (tmp_expression_value_273 == NULL) {
                    if (CHECK_AND_CLEAR_KEY_ERROR_OCCURRED()) {
                        tmp_expression_value_273 = GET_STRING_DICT_VALUE(moduledict_hikari$api$rest, (Nuitka_StringObject *)mod_consts[440]);

                        if (unlikely(tmp_expression_value_273 == NULL)) {
                            tmp_expression_value_273 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[440]);
                        }

                        if (tmp_expression_value_273 == NULL) {
                            assert(ERROR_OCCURRED());

                            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                            exception_lineno = 5722;
                            type_description_2 = "o";
                            goto dict_build_exception_33;
                        }
                        Py_INCREF(tmp_expression_value_273);
                    } else {
                        goto dict_build_exception_33;
                    }
                }

                tmp_dict_value_46 = LOOKUP_ATTRIBUTE(tmp_expression_value_273, mod_consts[485]);
                Py_DECREF(tmp_expression_value_273);
                if (tmp_dict_value_46 == NULL) {
                    assert(ERROR_OCCURRED());

                    FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                    exception_lineno = 5722;
                    type_description_2 = "o";
                    goto dict_build_exception_33;
                }
                tmp_res = PyDict_SetItem(tmp_kw_defaults_46, tmp_dict_key_46, tmp_dict_value_46);
                Py_DECREF(tmp_dict_value_46);
                assert(!(tmp_res != 0));
                tmp_dict_key_46 = mod_consts[672];
                tmp_expression_value_274 = PyObject_GetItem(locals_hikari$api$rest$$$class__2_RESTClient_110, mod_consts[440]);

                if (tmp_expression_value_274 == NULL) {
                    if (CHECK_AND_CLEAR_KEY_ERROR_OCCURRED()) {
                        tmp_expression_value_274 = GET_STRING_DICT_VALUE(moduledict_hikari$api$rest, (Nuitka_StringObject *)mod_consts[440]);

                        if (unlikely(tmp_expression_value_274 == NULL)) {
                            tmp_expression_value_274 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[440]);
                        }

                        if (tmp_expression_value_274 == NULL) {
                            assert(ERROR_OCCURRED());

                            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                            exception_lineno = 5723;
                            type_description_2 = "o";
                            goto dict_build_exception_33;
                        }
                        Py_INCREF(tmp_expression_value_274);
                    } else {
                        goto dict_build_exception_33;
                    }
                }

                tmp_dict_value_46 = LOOKUP_ATTRIBUTE(tmp_expression_value_274, mod_consts[485]);
                Py_DECREF(tmp_expression_value_274);
                if (tmp_dict_value_46 == NULL) {
                    assert(ERROR_OCCURRED());

                    FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                    exception_lineno = 5723;
                    type_description_2 = "o";
                    goto dict_build_exception_33;
                }
                tmp_res = PyDict_SetItem(tmp_kw_defaults_46, tmp_dict_key_46, tmp_dict_value_46);
                Py_DECREF(tmp_dict_value_46);
                assert(!(tmp_res != 0));
                tmp_dict_key_46 = mod_consts[673];
                tmp_expression_value_275 = PyObject_GetItem(locals_hikari$api$rest$$$class__2_RESTClient_110, mod_consts[440]);

                if (tmp_expression_value_275 == NULL) {
                    if (CHECK_AND_CLEAR_KEY_ERROR_OCCURRED()) {
                        tmp_expression_value_275 = GET_STRING_DICT_VALUE(moduledict_hikari$api$rest, (Nuitka_StringObject *)mod_consts[440]);

                        if (unlikely(tmp_expression_value_275 == NULL)) {
                            tmp_expression_value_275 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[440]);
                        }

                        if (tmp_expression_value_275 == NULL) {
                            assert(ERROR_OCCURRED());

                            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                            exception_lineno = 5724;
                            type_description_2 = "o";
                            goto dict_build_exception_33;
                        }
                        Py_INCREF(tmp_expression_value_275);
                    } else {
                        goto dict_build_exception_33;
                    }
                }

                tmp_dict_value_46 = LOOKUP_ATTRIBUTE(tmp_expression_value_275, mod_consts[485]);
                Py_DECREF(tmp_expression_value_275);
                if (tmp_dict_value_46 == NULL) {
                    assert(ERROR_OCCURRED());

                    FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                    exception_lineno = 5724;
                    type_description_2 = "o";
                    goto dict_build_exception_33;
                }
                tmp_res = PyDict_SetItem(tmp_kw_defaults_46, tmp_dict_key_46, tmp_dict_value_46);
                Py_DECREF(tmp_dict_value_46);
                assert(!(tmp_res != 0));
                tmp_dict_key_46 = mod_consts[496];
                tmp_expression_value_276 = PyObject_GetItem(locals_hikari$api$rest$$$class__2_RESTClient_110, mod_consts[440]);

                if (tmp_expression_value_276 == NULL) {
                    if (CHECK_AND_CLEAR_KEY_ERROR_OCCURRED()) {
                        tmp_expression_value_276 = GET_STRING_DICT_VALUE(moduledict_hikari$api$rest, (Nuitka_StringObject *)mod_consts[440]);

                        if (unlikely(tmp_expression_value_276 == NULL)) {
                            tmp_expression_value_276 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[440]);
                        }

                        if (tmp_expression_value_276 == NULL) {
                            assert(ERROR_OCCURRED());

                            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                            exception_lineno = 5725;
                            type_description_2 = "o";
                            goto dict_build_exception_33;
                        }
                        Py_INCREF(tmp_expression_value_276);
                    } else {
                        goto dict_build_exception_33;
                    }
                }

                tmp_dict_value_46 = LOOKUP_ATTRIBUTE(tmp_expression_value_276, mod_consts[485]);
                Py_DECREF(tmp_expression_value_276);
                if (tmp_dict_value_46 == NULL) {
                    assert(ERROR_OCCURRED());

                    FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                    exception_lineno = 5725;
                    type_description_2 = "o";
                    goto dict_build_exception_33;
                }
                tmp_res = PyDict_SetItem(tmp_kw_defaults_46, tmp_dict_key_46, tmp_dict_value_46);
                Py_DECREF(tmp_dict_value_46);
                assert(!(tmp_res != 0));
            }
            goto dict_build_noexception_33;
            // Exception handling pass through code for dict_build:
            dict_build_exception_33:;
            Py_DECREF(tmp_called_value_64);
            Py_DECREF(tmp_kw_defaults_46);
            goto frame_exception_exit_3;
            // Finished with no exception for dict_build:
            dict_build_noexception_33:;
            tmp_annotations_115 = PyDict_Copy(mod_consts[676]);


            tmp_args_element_value_125 = MAKE_FUNCTION_hikari$api$rest$$$function__111_edit_role(tmp_kw_defaults_46, tmp_annotations_115);

            frame_862833cacd6e5ba73c351f8d132a7b6b_3->m_frame.f_lineno = 5711;
            tmp_dictset_value = CALL_FUNCTION_WITH_SINGLE_ARG(tmp_called_value_64, tmp_args_element_value_125);
            Py_DECREF(tmp_called_value_64);
            Py_DECREF(tmp_args_element_value_125);
            if (tmp_dictset_value == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 5711;
                type_description_2 = "o";
                goto frame_exception_exit_3;
            }
            tmp_res = PyObject_SetItem(locals_hikari$api$rest$$$class__2_RESTClient_110, mod_consts[291], tmp_dictset_value);
            Py_DECREF(tmp_dictset_value);
            if (tmp_res != 0) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 5712;
                type_description_2 = "o";
                goto frame_exception_exit_3;
            }
        }
        {
            PyObject *tmp_called_instance_65;
            PyObject *tmp_args_element_value_126;
            PyObject *tmp_annotations_116;
            tmp_called_instance_65 = PyObject_GetItem(locals_hikari$api$rest$$$class__2_RESTClient_110, mod_consts[431]);

            if (tmp_called_instance_65 == NULL) {
                if (CHECK_AND_CLEAR_KEY_ERROR_OCCURRED()) {
                    tmp_called_instance_65 = GET_STRING_DICT_VALUE(moduledict_hikari$api$rest, (Nuitka_StringObject *)mod_consts[431]);

                    if (unlikely(tmp_called_instance_65 == NULL)) {
                        tmp_called_instance_65 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[431]);
                    }

                    if (tmp_called_instance_65 == NULL) {
                        assert(ERROR_OCCURRED());

                        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                        exception_lineno = 5794;
                        type_description_2 = "o";
                        goto frame_exception_exit_3;
                    }
                    Py_INCREF(tmp_called_instance_65);
                } else {
                    goto frame_exception_exit_3;
                }
            }

            tmp_annotations_116 = PyDict_Copy(mod_consts[677]);


            tmp_args_element_value_126 = MAKE_FUNCTION_hikari$api$rest$$$function__112_delete_role(tmp_annotations_116);

            frame_862833cacd6e5ba73c351f8d132a7b6b_3->m_frame.f_lineno = 5794;
            tmp_dictset_value = CALL_METHOD_WITH_SINGLE_ARG(tmp_called_instance_65, mod_consts[457], tmp_args_element_value_126);
            Py_DECREF(tmp_called_instance_65);
            Py_DECREF(tmp_args_element_value_126);
            if (tmp_dictset_value == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 5794;
                type_description_2 = "o";
                goto frame_exception_exit_3;
            }
            tmp_res = PyObject_SetItem(locals_hikari$api$rest$$$class__2_RESTClient_110, mod_consts[294], tmp_dictset_value);
            Py_DECREF(tmp_dictset_value);
            if (tmp_res != 0) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 5795;
                type_description_2 = "o";
                goto frame_exception_exit_3;
            }
        }
        {
            PyObject *tmp_called_value_65;
            PyObject *tmp_expression_value_277;
            PyObject *tmp_args_element_value_127;
            PyObject *tmp_kw_defaults_47;
            PyObject *tmp_dict_key_47;
            PyObject *tmp_dict_value_47;
            PyObject *tmp_expression_value_278;
            PyObject *tmp_annotations_117;
            tmp_expression_value_277 = PyObject_GetItem(locals_hikari$api$rest$$$class__2_RESTClient_110, mod_consts[431]);

            if (tmp_expression_value_277 == NULL) {
                if (CHECK_AND_CLEAR_KEY_ERROR_OCCURRED()) {
                    tmp_expression_value_277 = GET_STRING_DICT_VALUE(moduledict_hikari$api$rest, (Nuitka_StringObject *)mod_consts[431]);

                    if (unlikely(tmp_expression_value_277 == NULL)) {
                        tmp_expression_value_277 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[431]);
                    }

                    if (tmp_expression_value_277 == NULL) {
                        assert(ERROR_OCCURRED());

                        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                        exception_lineno = 5834;
                        type_description_2 = "o";
                        goto frame_exception_exit_3;
                    }
                    Py_INCREF(tmp_expression_value_277);
                } else {
                    goto frame_exception_exit_3;
                }
            }

            tmp_called_value_65 = LOOKUP_ATTRIBUTE(tmp_expression_value_277, mod_consts[457]);
            Py_DECREF(tmp_expression_value_277);
            if (tmp_called_value_65 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 5834;
                type_description_2 = "o";
                goto frame_exception_exit_3;
            }
            tmp_dict_key_47 = mod_consts[678];
            tmp_expression_value_278 = PyObject_GetItem(locals_hikari$api$rest$$$class__2_RESTClient_110, mod_consts[440]);

            if (tmp_expression_value_278 == NULL) {
                if (CHECK_AND_CLEAR_KEY_ERROR_OCCURRED()) {
                    tmp_expression_value_278 = GET_STRING_DICT_VALUE(moduledict_hikari$api$rest, (Nuitka_StringObject *)mod_consts[440]);

                    if (unlikely(tmp_expression_value_278 == NULL)) {
                        tmp_expression_value_278 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[440]);
                    }

                    if (tmp_expression_value_278 == NULL) {
                        assert(ERROR_OCCURRED());

                        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
                        Py_DECREF(tmp_called_value_65);

                        exception_lineno = 5839;
                        type_description_2 = "o";
                        goto frame_exception_exit_3;
                    }
                    Py_INCREF(tmp_expression_value_278);
                } else {
                    goto frame_exception_exit_3;
                }
            }

            tmp_dict_value_47 = LOOKUP_ATTRIBUTE(tmp_expression_value_278, mod_consts[485]);
            Py_DECREF(tmp_expression_value_278);
            if (tmp_dict_value_47 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
                Py_DECREF(tmp_called_value_65);

                exception_lineno = 5839;
                type_description_2 = "o";
                goto frame_exception_exit_3;
            }
            tmp_kw_defaults_47 = _PyDict_NewPresized( 2 );
            {
                PyObject *tmp_expression_value_279;
                tmp_res = PyDict_SetItem(tmp_kw_defaults_47, tmp_dict_key_47, tmp_dict_value_47);
                Py_DECREF(tmp_dict_value_47);
                assert(!(tmp_res != 0));
                tmp_dict_key_47 = mod_consts[679];
                tmp_expression_value_279 = PyObject_GetItem(locals_hikari$api$rest$$$class__2_RESTClient_110, mod_consts[440]);

                if (tmp_expression_value_279 == NULL) {
                    if (CHECK_AND_CLEAR_KEY_ERROR_OCCURRED()) {
                        tmp_expression_value_279 = GET_STRING_DICT_VALUE(moduledict_hikari$api$rest, (Nuitka_StringObject *)mod_consts[440]);

                        if (unlikely(tmp_expression_value_279 == NULL)) {
                            tmp_expression_value_279 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[440]);
                        }

                        if (tmp_expression_value_279 == NULL) {
                            assert(ERROR_OCCURRED());

                            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                            exception_lineno = 5840;
                            type_description_2 = "o";
                            goto dict_build_exception_34;
                        }
                        Py_INCREF(tmp_expression_value_279);
                    } else {
                        goto dict_build_exception_34;
                    }
                }

                tmp_dict_value_47 = LOOKUP_ATTRIBUTE(tmp_expression_value_279, mod_consts[485]);
                Py_DECREF(tmp_expression_value_279);
                if (tmp_dict_value_47 == NULL) {
                    assert(ERROR_OCCURRED());

                    FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                    exception_lineno = 5840;
                    type_description_2 = "o";
                    goto dict_build_exception_34;
                }
                tmp_res = PyDict_SetItem(tmp_kw_defaults_47, tmp_dict_key_47, tmp_dict_value_47);
                Py_DECREF(tmp_dict_value_47);
                assert(!(tmp_res != 0));
            }
            goto dict_build_noexception_34;
            // Exception handling pass through code for dict_build:
            dict_build_exception_34:;
            Py_DECREF(tmp_called_value_65);
            Py_DECREF(tmp_kw_defaults_47);
            goto frame_exception_exit_3;
            // Finished with no exception for dict_build:
            dict_build_noexception_34:;
            tmp_annotations_117 = PyDict_Copy(mod_consts[680]);


            tmp_args_element_value_127 = MAKE_FUNCTION_hikari$api$rest$$$function__113_estimate_guild_prune_count(tmp_kw_defaults_47, tmp_annotations_117);

            frame_862833cacd6e5ba73c351f8d132a7b6b_3->m_frame.f_lineno = 5834;
            tmp_dictset_value = CALL_FUNCTION_WITH_SINGLE_ARG(tmp_called_value_65, tmp_args_element_value_127);
            Py_DECREF(tmp_called_value_65);
            Py_DECREF(tmp_args_element_value_127);
            if (tmp_dictset_value == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 5834;
                type_description_2 = "o";
                goto frame_exception_exit_3;
            }
            tmp_res = PyObject_SetItem(locals_hikari$api$rest$$$class__2_RESTClient_110, mod_consts[297], tmp_dictset_value);
            Py_DECREF(tmp_dictset_value);
            if (tmp_res != 0) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 5835;
                type_description_2 = "o";
                goto frame_exception_exit_3;
            }
        }
        {
            PyObject *tmp_called_value_66;
            PyObject *tmp_expression_value_280;
            PyObject *tmp_args_element_value_128;
            PyObject *tmp_kw_defaults_48;
            PyObject *tmp_dict_key_48;
            PyObject *tmp_dict_value_48;
            PyObject *tmp_expression_value_281;
            PyObject *tmp_annotations_118;
            tmp_expression_value_280 = PyObject_GetItem(locals_hikari$api$rest$$$class__2_RESTClient_110, mod_consts[431]);

            if (tmp_expression_value_280 == NULL) {
                if (CHECK_AND_CLEAR_KEY_ERROR_OCCURRED()) {
                    tmp_expression_value_280 = GET_STRING_DICT_VALUE(moduledict_hikari$api$rest, (Nuitka_StringObject *)mod_consts[431]);

                    if (unlikely(tmp_expression_value_280 == NULL)) {
                        tmp_expression_value_280 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[431]);
                    }

                    if (tmp_expression_value_280 == NULL) {
                        assert(ERROR_OCCURRED());

                        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                        exception_lineno = 5890;
                        type_description_2 = "o";
                        goto frame_exception_exit_3;
                    }
                    Py_INCREF(tmp_expression_value_280);
                } else {
                    goto frame_exception_exit_3;
                }
            }

            tmp_called_value_66 = LOOKUP_ATTRIBUTE(tmp_expression_value_280, mod_consts[457]);
            Py_DECREF(tmp_expression_value_280);
            if (tmp_called_value_66 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 5890;
                type_description_2 = "o";
                goto frame_exception_exit_3;
            }
            tmp_dict_key_48 = mod_consts[678];
            tmp_expression_value_281 = PyObject_GetItem(locals_hikari$api$rest$$$class__2_RESTClient_110, mod_consts[440]);

            if (tmp_expression_value_281 == NULL) {
                if (CHECK_AND_CLEAR_KEY_ERROR_OCCURRED()) {
                    tmp_expression_value_281 = GET_STRING_DICT_VALUE(moduledict_hikari$api$rest, (Nuitka_StringObject *)mod_consts[440]);

                    if (unlikely(tmp_expression_value_281 == NULL)) {
                        tmp_expression_value_281 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[440]);
                    }

                    if (tmp_expression_value_281 == NULL) {
                        assert(ERROR_OCCURRED());

                        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
                        Py_DECREF(tmp_called_value_66);

                        exception_lineno = 5895;
                        type_description_2 = "o";
                        goto frame_exception_exit_3;
                    }
                    Py_INCREF(tmp_expression_value_281);
                } else {
                    goto frame_exception_exit_3;
                }
            }

            tmp_dict_value_48 = LOOKUP_ATTRIBUTE(tmp_expression_value_281, mod_consts[485]);
            Py_DECREF(tmp_expression_value_281);
            if (tmp_dict_value_48 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
                Py_DECREF(tmp_called_value_66);

                exception_lineno = 5895;
                type_description_2 = "o";
                goto frame_exception_exit_3;
            }
            tmp_kw_defaults_48 = _PyDict_NewPresized( 4 );
            {
                PyObject *tmp_expression_value_282;
                PyObject *tmp_expression_value_283;
                PyObject *tmp_expression_value_284;
                tmp_res = PyDict_SetItem(tmp_kw_defaults_48, tmp_dict_key_48, tmp_dict_value_48);
                Py_DECREF(tmp_dict_value_48);
                assert(!(tmp_res != 0));
                tmp_dict_key_48 = mod_consts[681];
                tmp_expression_value_282 = PyObject_GetItem(locals_hikari$api$rest$$$class__2_RESTClient_110, mod_consts[440]);

                if (tmp_expression_value_282 == NULL) {
                    if (CHECK_AND_CLEAR_KEY_ERROR_OCCURRED()) {
                        tmp_expression_value_282 = GET_STRING_DICT_VALUE(moduledict_hikari$api$rest, (Nuitka_StringObject *)mod_consts[440]);

                        if (unlikely(tmp_expression_value_282 == NULL)) {
                            tmp_expression_value_282 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[440]);
                        }

                        if (tmp_expression_value_282 == NULL) {
                            assert(ERROR_OCCURRED());

                            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                            exception_lineno = 5896;
                            type_description_2 = "o";
                            goto dict_build_exception_35;
                        }
                        Py_INCREF(tmp_expression_value_282);
                    } else {
                        goto dict_build_exception_35;
                    }
                }

                tmp_dict_value_48 = LOOKUP_ATTRIBUTE(tmp_expression_value_282, mod_consts[485]);
                Py_DECREF(tmp_expression_value_282);
                if (tmp_dict_value_48 == NULL) {
                    assert(ERROR_OCCURRED());

                    FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                    exception_lineno = 5896;
                    type_description_2 = "o";
                    goto dict_build_exception_35;
                }
                tmp_res = PyDict_SetItem(tmp_kw_defaults_48, tmp_dict_key_48, tmp_dict_value_48);
                Py_DECREF(tmp_dict_value_48);
                assert(!(tmp_res != 0));
                tmp_dict_key_48 = mod_consts[679];
                tmp_expression_value_283 = PyObject_GetItem(locals_hikari$api$rest$$$class__2_RESTClient_110, mod_consts[440]);

                if (tmp_expression_value_283 == NULL) {
                    if (CHECK_AND_CLEAR_KEY_ERROR_OCCURRED()) {
                        tmp_expression_value_283 = GET_STRING_DICT_VALUE(moduledict_hikari$api$rest, (Nuitka_StringObject *)mod_consts[440]);

                        if (unlikely(tmp_expression_value_283 == NULL)) {
                            tmp_expression_value_283 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[440]);
                        }

                        if (tmp_expression_value_283 == NULL) {
                            assert(ERROR_OCCURRED());

                            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                            exception_lineno = 5897;
                            type_description_2 = "o";
                            goto dict_build_exception_35;
                        }
                        Py_INCREF(tmp_expression_value_283);
                    } else {
                        goto dict_build_exception_35;
                    }
                }

                tmp_dict_value_48 = LOOKUP_ATTRIBUTE(tmp_expression_value_283, mod_consts[485]);
                Py_DECREF(tmp_expression_value_283);
                if (tmp_dict_value_48 == NULL) {
                    assert(ERROR_OCCURRED());

                    FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                    exception_lineno = 5897;
                    type_description_2 = "o";
                    goto dict_build_exception_35;
                }
                tmp_res = PyDict_SetItem(tmp_kw_defaults_48, tmp_dict_key_48, tmp_dict_value_48);
                Py_DECREF(tmp_dict_value_48);
                assert(!(tmp_res != 0));
                tmp_dict_key_48 = mod_consts[496];
                tmp_expression_value_284 = PyObject_GetItem(locals_hikari$api$rest$$$class__2_RESTClient_110, mod_consts[440]);

                if (tmp_expression_value_284 == NULL) {
                    if (CHECK_AND_CLEAR_KEY_ERROR_OCCURRED()) {
                        tmp_expression_value_284 = GET_STRING_DICT_VALUE(moduledict_hikari$api$rest, (Nuitka_StringObject *)mod_consts[440]);

                        if (unlikely(tmp_expression_value_284 == NULL)) {
                            tmp_expression_value_284 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[440]);
                        }

                        if (tmp_expression_value_284 == NULL) {
                            assert(ERROR_OCCURRED());

                            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                            exception_lineno = 5898;
                            type_description_2 = "o";
                            goto dict_build_exception_35;
                        }
                        Py_INCREF(tmp_expression_value_284);
                    } else {
                        goto dict_build_exception_35;
                    }
                }

                tmp_dict_value_48 = LOOKUP_ATTRIBUTE(tmp_expression_value_284, mod_consts[485]);
                Py_DECREF(tmp_expression_value_284);
                if (tmp_dict_value_48 == NULL) {
                    assert(ERROR_OCCURRED());

                    FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                    exception_lineno = 5898;
                    type_description_2 = "o";
                    goto dict_build_exception_35;
                }
                tmp_res = PyDict_SetItem(tmp_kw_defaults_48, tmp_dict_key_48, tmp_dict_value_48);
                Py_DECREF(tmp_dict_value_48);
                assert(!(tmp_res != 0));
            }
            goto dict_build_noexception_35;
            // Exception handling pass through code for dict_build:
            dict_build_exception_35:;
            Py_DECREF(tmp_called_value_66);
            Py_DECREF(tmp_kw_defaults_48);
            goto frame_exception_exit_3;
            // Finished with no exception for dict_build:
            dict_build_noexception_35:;
            tmp_annotations_118 = PyDict_Copy(mod_consts[682]);


            tmp_args_element_value_128 = MAKE_FUNCTION_hikari$api$rest$$$function__114_begin_guild_prune(tmp_kw_defaults_48, tmp_annotations_118);

            frame_862833cacd6e5ba73c351f8d132a7b6b_3->m_frame.f_lineno = 5890;
            tmp_dictset_value = CALL_FUNCTION_WITH_SINGLE_ARG(tmp_called_value_66, tmp_args_element_value_128);
            Py_DECREF(tmp_called_value_66);
            Py_DECREF(tmp_args_element_value_128);
            if (tmp_dictset_value == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 5890;
                type_description_2 = "o";
                goto frame_exception_exit_3;
            }
            tmp_res = PyObject_SetItem(locals_hikari$api$rest$$$class__2_RESTClient_110, mod_consts[300], tmp_dictset_value);
            Py_DECREF(tmp_dictset_value);
            if (tmp_res != 0) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 5891;
                type_description_2 = "o";
                goto frame_exception_exit_3;
            }
        }
        {
            PyObject *tmp_called_instance_66;
            PyObject *tmp_args_element_value_129;
            PyObject *tmp_annotations_119;
            tmp_called_instance_66 = PyObject_GetItem(locals_hikari$api$rest$$$class__2_RESTClient_110, mod_consts[431]);

            if (tmp_called_instance_66 == NULL) {
                if (CHECK_AND_CLEAR_KEY_ERROR_OCCURRED()) {
                    tmp_called_instance_66 = GET_STRING_DICT_VALUE(moduledict_hikari$api$rest, (Nuitka_StringObject *)mod_consts[431]);

                    if (unlikely(tmp_called_instance_66 == NULL)) {
                        tmp_called_instance_66 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[431]);
                    }

                    if (tmp_called_instance_66 == NULL) {
                        assert(ERROR_OCCURRED());

                        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                        exception_lineno = 5955;
                        type_description_2 = "o";
                        goto frame_exception_exit_3;
                    }
                    Py_INCREF(tmp_called_instance_66);
                } else {
                    goto frame_exception_exit_3;
                }
            }

            tmp_annotations_119 = PyDict_Copy(mod_consts[683]);


            tmp_args_element_value_129 = MAKE_FUNCTION_hikari$api$rest$$$function__115_fetch_guild_voice_regions(tmp_annotations_119);

            frame_862833cacd6e5ba73c351f8d132a7b6b_3->m_frame.f_lineno = 5955;
            tmp_dictset_value = CALL_METHOD_WITH_SINGLE_ARG(tmp_called_instance_66, mod_consts[457], tmp_args_element_value_129);
            Py_DECREF(tmp_called_instance_66);
            Py_DECREF(tmp_args_element_value_129);
            if (tmp_dictset_value == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 5955;
                type_description_2 = "o";
                goto frame_exception_exit_3;
            }
            tmp_res = PyObject_SetItem(locals_hikari$api$rest$$$class__2_RESTClient_110, mod_consts[303], tmp_dictset_value);
            Py_DECREF(tmp_dictset_value);
            if (tmp_res != 0) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 5956;
                type_description_2 = "o";
                goto frame_exception_exit_3;
            }
        }
        {
            PyObject *tmp_called_instance_67;
            PyObject *tmp_args_element_value_130;
            PyObject *tmp_annotations_120;
            tmp_called_instance_67 = PyObject_GetItem(locals_hikari$api$rest$$$class__2_RESTClient_110, mod_consts[431]);

            if (tmp_called_instance_67 == NULL) {
                if (CHECK_AND_CLEAR_KEY_ERROR_OCCURRED()) {
                    tmp_called_instance_67 = GET_STRING_DICT_VALUE(moduledict_hikari$api$rest, (Nuitka_StringObject *)mod_consts[431]);

                    if (unlikely(tmp_called_instance_67 == NULL)) {
                        tmp_called_instance_67 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[431]);
                    }

                    if (tmp_called_instance_67 == NULL) {
                        assert(ERROR_OCCURRED());

                        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                        exception_lineno = 5994;
                        type_description_2 = "o";
                        goto frame_exception_exit_3;
                    }
                    Py_INCREF(tmp_called_instance_67);
                } else {
                    goto frame_exception_exit_3;
                }
            }

            tmp_annotations_120 = PyDict_Copy(mod_consts[684]);


            tmp_args_element_value_130 = MAKE_FUNCTION_hikari$api$rest$$$function__116_fetch_guild_invites(tmp_annotations_120);

            frame_862833cacd6e5ba73c351f8d132a7b6b_3->m_frame.f_lineno = 5994;
            tmp_dictset_value = CALL_METHOD_WITH_SINGLE_ARG(tmp_called_instance_67, mod_consts[457], tmp_args_element_value_130);
            Py_DECREF(tmp_called_instance_67);
            Py_DECREF(tmp_args_element_value_130);
            if (tmp_dictset_value == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 5994;
                type_description_2 = "o";
                goto frame_exception_exit_3;
            }
            tmp_res = PyObject_SetItem(locals_hikari$api$rest$$$class__2_RESTClient_110, mod_consts[306], tmp_dictset_value);
            Py_DECREF(tmp_dictset_value);
            if (tmp_res != 0) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 5995;
                type_description_2 = "o";
                goto frame_exception_exit_3;
            }
        }
        {
            PyObject *tmp_called_instance_68;
            PyObject *tmp_args_element_value_131;
            PyObject *tmp_annotations_121;
            tmp_called_instance_68 = PyObject_GetItem(locals_hikari$api$rest$$$class__2_RESTClient_110, mod_consts[431]);

            if (tmp_called_instance_68 == NULL) {
                if (CHECK_AND_CLEAR_KEY_ERROR_OCCURRED()) {
                    tmp_called_instance_68 = GET_STRING_DICT_VALUE(moduledict_hikari$api$rest, (Nuitka_StringObject *)mod_consts[431]);

                    if (unlikely(tmp_called_instance_68 == NULL)) {
                        tmp_called_instance_68 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[431]);
                    }

                    if (tmp_called_instance_68 == NULL) {
                        assert(ERROR_OCCURRED());

                        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                        exception_lineno = 6035;
                        type_description_2 = "o";
                        goto frame_exception_exit_3;
                    }
                    Py_INCREF(tmp_called_instance_68);
                } else {
                    goto frame_exception_exit_3;
                }
            }

            tmp_annotations_121 = PyDict_Copy(mod_consts[685]);


            tmp_args_element_value_131 = MAKE_FUNCTION_hikari$api$rest$$$function__117_fetch_integrations(tmp_annotations_121);

            frame_862833cacd6e5ba73c351f8d132a7b6b_3->m_frame.f_lineno = 6035;
            tmp_dictset_value = CALL_METHOD_WITH_SINGLE_ARG(tmp_called_instance_68, mod_consts[457], tmp_args_element_value_131);
            Py_DECREF(tmp_called_instance_68);
            Py_DECREF(tmp_args_element_value_131);
            if (tmp_dictset_value == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 6035;
                type_description_2 = "o";
                goto frame_exception_exit_3;
            }
            tmp_res = PyObject_SetItem(locals_hikari$api$rest$$$class__2_RESTClient_110, mod_consts[309], tmp_dictset_value);
            Py_DECREF(tmp_dictset_value);
            if (tmp_res != 0) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 6036;
                type_description_2 = "o";
                goto frame_exception_exit_3;
            }
        }
        {
            PyObject *tmp_called_instance_69;
            PyObject *tmp_args_element_value_132;
            PyObject *tmp_annotations_122;
            tmp_called_instance_69 = PyObject_GetItem(locals_hikari$api$rest$$$class__2_RESTClient_110, mod_consts[431]);

            if (tmp_called_instance_69 == NULL) {
                if (CHECK_AND_CLEAR_KEY_ERROR_OCCURRED()) {
                    tmp_called_instance_69 = GET_STRING_DICT_VALUE(moduledict_hikari$api$rest, (Nuitka_StringObject *)mod_consts[431]);

                    if (unlikely(tmp_called_instance_69 == NULL)) {
                        tmp_called_instance_69 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[431]);
                    }

                    if (tmp_called_instance_69 == NULL) {
                        assert(ERROR_OCCURRED());

                        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                        exception_lineno = 6076;
                        type_description_2 = "o";
                        goto frame_exception_exit_3;
                    }
                    Py_INCREF(tmp_called_instance_69);
                } else {
                    goto frame_exception_exit_3;
                }
            }

            tmp_annotations_122 = PyDict_Copy(mod_consts[686]);


            tmp_args_element_value_132 = MAKE_FUNCTION_hikari$api$rest$$$function__118_fetch_widget(tmp_annotations_122);

            frame_862833cacd6e5ba73c351f8d132a7b6b_3->m_frame.f_lineno = 6076;
            tmp_dictset_value = CALL_METHOD_WITH_SINGLE_ARG(tmp_called_instance_69, mod_consts[457], tmp_args_element_value_132);
            Py_DECREF(tmp_called_instance_69);
            Py_DECREF(tmp_args_element_value_132);
            if (tmp_dictset_value == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 6076;
                type_description_2 = "o";
                goto frame_exception_exit_3;
            }
            tmp_res = PyObject_SetItem(locals_hikari$api$rest$$$class__2_RESTClient_110, mod_consts[312], tmp_dictset_value);
            Py_DECREF(tmp_dictset_value);
            if (tmp_res != 0) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 6077;
                type_description_2 = "o";
                goto frame_exception_exit_3;
            }
        }
        {
            PyObject *tmp_called_value_67;
            PyObject *tmp_expression_value_285;
            PyObject *tmp_args_element_value_133;
            PyObject *tmp_kw_defaults_49;
            PyObject *tmp_dict_key_49;
            PyObject *tmp_dict_value_49;
            PyObject *tmp_expression_value_286;
            PyObject *tmp_annotations_123;
            tmp_expression_value_285 = PyObject_GetItem(locals_hikari$api$rest$$$class__2_RESTClient_110, mod_consts[431]);

            if (tmp_expression_value_285 == NULL) {
                if (CHECK_AND_CLEAR_KEY_ERROR_OCCURRED()) {
                    tmp_expression_value_285 = GET_STRING_DICT_VALUE(moduledict_hikari$api$rest, (Nuitka_StringObject *)mod_consts[431]);

                    if (unlikely(tmp_expression_value_285 == NULL)) {
                        tmp_expression_value_285 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[431]);
                    }

                    if (tmp_expression_value_285 == NULL) {
                        assert(ERROR_OCCURRED());

                        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                        exception_lineno = 6114;
                        type_description_2 = "o";
                        goto frame_exception_exit_3;
                    }
                    Py_INCREF(tmp_expression_value_285);
                } else {
                    goto frame_exception_exit_3;
                }
            }

            tmp_called_value_67 = LOOKUP_ATTRIBUTE(tmp_expression_value_285, mod_consts[457]);
            Py_DECREF(tmp_expression_value_285);
            if (tmp_called_value_67 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 6114;
                type_description_2 = "o";
                goto frame_exception_exit_3;
            }
            tmp_dict_key_49 = mod_consts[563];
            tmp_expression_value_286 = PyObject_GetItem(locals_hikari$api$rest$$$class__2_RESTClient_110, mod_consts[440]);

            if (tmp_expression_value_286 == NULL) {
                if (CHECK_AND_CLEAR_KEY_ERROR_OCCURRED()) {
                    tmp_expression_value_286 = GET_STRING_DICT_VALUE(moduledict_hikari$api$rest, (Nuitka_StringObject *)mod_consts[440]);

                    if (unlikely(tmp_expression_value_286 == NULL)) {
                        tmp_expression_value_286 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[440]);
                    }

                    if (tmp_expression_value_286 == NULL) {
                        assert(ERROR_OCCURRED());

                        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
                        Py_DECREF(tmp_called_value_67);

                        exception_lineno = 6119;
                        type_description_2 = "o";
                        goto frame_exception_exit_3;
                    }
                    Py_INCREF(tmp_expression_value_286);
                } else {
                    goto frame_exception_exit_3;
                }
            }

            tmp_dict_value_49 = LOOKUP_ATTRIBUTE(tmp_expression_value_286, mod_consts[485]);
            Py_DECREF(tmp_expression_value_286);
            if (tmp_dict_value_49 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
                Py_DECREF(tmp_called_value_67);

                exception_lineno = 6119;
                type_description_2 = "o";
                goto frame_exception_exit_3;
            }
            tmp_kw_defaults_49 = _PyDict_NewPresized( 3 );
            {
                PyObject *tmp_expression_value_287;
                PyObject *tmp_expression_value_288;
                tmp_res = PyDict_SetItem(tmp_kw_defaults_49, tmp_dict_key_49, tmp_dict_value_49);
                Py_DECREF(tmp_dict_value_49);
                assert(!(tmp_res != 0));
                tmp_dict_key_49 = mod_consts[687];
                tmp_expression_value_287 = PyObject_GetItem(locals_hikari$api$rest$$$class__2_RESTClient_110, mod_consts[440]);

                if (tmp_expression_value_287 == NULL) {
                    if (CHECK_AND_CLEAR_KEY_ERROR_OCCURRED()) {
                        tmp_expression_value_287 = GET_STRING_DICT_VALUE(moduledict_hikari$api$rest, (Nuitka_StringObject *)mod_consts[440]);

                        if (unlikely(tmp_expression_value_287 == NULL)) {
                            tmp_expression_value_287 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[440]);
                        }

                        if (tmp_expression_value_287 == NULL) {
                            assert(ERROR_OCCURRED());

                            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                            exception_lineno = 6120;
                            type_description_2 = "o";
                            goto dict_build_exception_36;
                        }
                        Py_INCREF(tmp_expression_value_287);
                    } else {
                        goto dict_build_exception_36;
                    }
                }

                tmp_dict_value_49 = LOOKUP_ATTRIBUTE(tmp_expression_value_287, mod_consts[485]);
                Py_DECREF(tmp_expression_value_287);
                if (tmp_dict_value_49 == NULL) {
                    assert(ERROR_OCCURRED());

                    FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                    exception_lineno = 6120;
                    type_description_2 = "o";
                    goto dict_build_exception_36;
                }
                tmp_res = PyDict_SetItem(tmp_kw_defaults_49, tmp_dict_key_49, tmp_dict_value_49);
                Py_DECREF(tmp_dict_value_49);
                assert(!(tmp_res != 0));
                tmp_dict_key_49 = mod_consts[496];
                tmp_expression_value_288 = PyObject_GetItem(locals_hikari$api$rest$$$class__2_RESTClient_110, mod_consts[440]);

                if (tmp_expression_value_288 == NULL) {
                    if (CHECK_AND_CLEAR_KEY_ERROR_OCCURRED()) {
                        tmp_expression_value_288 = GET_STRING_DICT_VALUE(moduledict_hikari$api$rest, (Nuitka_StringObject *)mod_consts[440]);

                        if (unlikely(tmp_expression_value_288 == NULL)) {
                            tmp_expression_value_288 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[440]);
                        }

                        if (tmp_expression_value_288 == NULL) {
                            assert(ERROR_OCCURRED());

                            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                            exception_lineno = 6121;
                            type_description_2 = "o";
                            goto dict_build_exception_36;
                        }
                        Py_INCREF(tmp_expression_value_288);
                    } else {
                        goto dict_build_exception_36;
                    }
                }

                tmp_dict_value_49 = LOOKUP_ATTRIBUTE(tmp_expression_value_288, mod_consts[485]);
                Py_DECREF(tmp_expression_value_288);
                if (tmp_dict_value_49 == NULL) {
                    assert(ERROR_OCCURRED());

                    FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                    exception_lineno = 6121;
                    type_description_2 = "o";
                    goto dict_build_exception_36;
                }
                tmp_res = PyDict_SetItem(tmp_kw_defaults_49, tmp_dict_key_49, tmp_dict_value_49);
                Py_DECREF(tmp_dict_value_49);
                assert(!(tmp_res != 0));
            }
            goto dict_build_noexception_36;
            // Exception handling pass through code for dict_build:
            dict_build_exception_36:;
            Py_DECREF(tmp_called_value_67);
            Py_DECREF(tmp_kw_defaults_49);
            goto frame_exception_exit_3;
            // Finished with no exception for dict_build:
            dict_build_noexception_36:;
            tmp_annotations_123 = PyDict_Copy(mod_consts[688]);


            tmp_args_element_value_133 = MAKE_FUNCTION_hikari$api$rest$$$function__119_edit_widget(tmp_kw_defaults_49, tmp_annotations_123);

            frame_862833cacd6e5ba73c351f8d132a7b6b_3->m_frame.f_lineno = 6114;
            tmp_dictset_value = CALL_FUNCTION_WITH_SINGLE_ARG(tmp_called_value_67, tmp_args_element_value_133);
            Py_DECREF(tmp_called_value_67);
            Py_DECREF(tmp_args_element_value_133);
            if (tmp_dictset_value == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 6114;
                type_description_2 = "o";
                goto frame_exception_exit_3;
            }
            tmp_res = PyObject_SetItem(locals_hikari$api$rest$$$class__2_RESTClient_110, mod_consts[315], tmp_dictset_value);
            Py_DECREF(tmp_dictset_value);
            if (tmp_res != 0) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 6115;
                type_description_2 = "o";
                goto frame_exception_exit_3;
            }
        }
        {
            PyObject *tmp_called_instance_70;
            PyObject *tmp_args_element_value_134;
            PyObject *tmp_annotations_124;
            tmp_called_instance_70 = PyObject_GetItem(locals_hikari$api$rest$$$class__2_RESTClient_110, mod_consts[431]);

            if (tmp_called_instance_70 == NULL) {
                if (CHECK_AND_CLEAR_KEY_ERROR_OCCURRED()) {
                    tmp_called_instance_70 = GET_STRING_DICT_VALUE(moduledict_hikari$api$rest, (Nuitka_StringObject *)mod_consts[431]);

                    if (unlikely(tmp_called_instance_70 == NULL)) {
                        tmp_called_instance_70 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[431]);
                    }

                    if (tmp_called_instance_70 == NULL) {
                        assert(ERROR_OCCURRED());

                        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                        exception_lineno = 6170;
                        type_description_2 = "o";
                        goto frame_exception_exit_3;
                    }
                    Py_INCREF(tmp_called_instance_70);
                } else {
                    goto frame_exception_exit_3;
                }
            }

            tmp_annotations_124 = PyDict_Copy(mod_consts[689]);


            tmp_args_element_value_134 = MAKE_FUNCTION_hikari$api$rest$$$function__120_fetch_welcome_screen(tmp_annotations_124);

            frame_862833cacd6e5ba73c351f8d132a7b6b_3->m_frame.f_lineno = 6170;
            tmp_dictset_value = CALL_METHOD_WITH_SINGLE_ARG(tmp_called_instance_70, mod_consts[457], tmp_args_element_value_134);
            Py_DECREF(tmp_called_instance_70);
            Py_DECREF(tmp_args_element_value_134);
            if (tmp_dictset_value == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 6170;
                type_description_2 = "o";
                goto frame_exception_exit_3;
            }
            tmp_res = PyObject_SetItem(locals_hikari$api$rest$$$class__2_RESTClient_110, mod_consts[318], tmp_dictset_value);
            Py_DECREF(tmp_dictset_value);
            if (tmp_res != 0) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 6171;
                type_description_2 = "o";
                goto frame_exception_exit_3;
            }
        }
        {
            PyObject *tmp_called_value_68;
            PyObject *tmp_expression_value_289;
            PyObject *tmp_args_element_value_135;
            PyObject *tmp_kw_defaults_50;
            PyObject *tmp_dict_key_50;
            PyObject *tmp_dict_value_50;
            PyObject *tmp_expression_value_290;
            PyObject *tmp_annotations_125;
            tmp_expression_value_289 = PyObject_GetItem(locals_hikari$api$rest$$$class__2_RESTClient_110, mod_consts[431]);

            if (tmp_expression_value_289 == NULL) {
                if (CHECK_AND_CLEAR_KEY_ERROR_OCCURRED()) {
                    tmp_expression_value_289 = GET_STRING_DICT_VALUE(moduledict_hikari$api$rest, (Nuitka_StringObject *)mod_consts[431]);

                    if (unlikely(tmp_expression_value_289 == NULL)) {
                        tmp_expression_value_289 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[431]);
                    }

                    if (tmp_expression_value_289 == NULL) {
                        assert(ERROR_OCCURRED());

                        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                        exception_lineno = 6207;
                        type_description_2 = "o";
                        goto frame_exception_exit_3;
                    }
                    Py_INCREF(tmp_expression_value_289);
                } else {
                    goto frame_exception_exit_3;
                }
            }

            tmp_called_value_68 = LOOKUP_ATTRIBUTE(tmp_expression_value_289, mod_consts[457]);
            Py_DECREF(tmp_expression_value_289);
            if (tmp_called_value_68 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 6207;
                type_description_2 = "o";
                goto frame_exception_exit_3;
            }
            tmp_dict_key_50 = mod_consts[616];
            tmp_expression_value_290 = PyObject_GetItem(locals_hikari$api$rest$$$class__2_RESTClient_110, mod_consts[440]);

            if (tmp_expression_value_290 == NULL) {
                if (CHECK_AND_CLEAR_KEY_ERROR_OCCURRED()) {
                    tmp_expression_value_290 = GET_STRING_DICT_VALUE(moduledict_hikari$api$rest, (Nuitka_StringObject *)mod_consts[440]);

                    if (unlikely(tmp_expression_value_290 == NULL)) {
                        tmp_expression_value_290 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[440]);
                    }

                    if (tmp_expression_value_290 == NULL) {
                        assert(ERROR_OCCURRED());

                        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
                        Py_DECREF(tmp_called_value_68);

                        exception_lineno = 6212;
                        type_description_2 = "o";
                        goto frame_exception_exit_3;
                    }
                    Py_INCREF(tmp_expression_value_290);
                } else {
                    goto frame_exception_exit_3;
                }
            }

            tmp_dict_value_50 = LOOKUP_ATTRIBUTE(tmp_expression_value_290, mod_consts[485]);
            Py_DECREF(tmp_expression_value_290);
            if (tmp_dict_value_50 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
                Py_DECREF(tmp_called_value_68);

                exception_lineno = 6212;
                type_description_2 = "o";
                goto frame_exception_exit_3;
            }
            tmp_kw_defaults_50 = _PyDict_NewPresized( 3 );
            {
                PyObject *tmp_expression_value_291;
                PyObject *tmp_expression_value_292;
                tmp_res = PyDict_SetItem(tmp_kw_defaults_50, tmp_dict_key_50, tmp_dict_value_50);
                Py_DECREF(tmp_dict_value_50);
                assert(!(tmp_res != 0));
                tmp_dict_key_50 = mod_consts[687];
                tmp_expression_value_291 = PyObject_GetItem(locals_hikari$api$rest$$$class__2_RESTClient_110, mod_consts[440]);

                if (tmp_expression_value_291 == NULL) {
                    if (CHECK_AND_CLEAR_KEY_ERROR_OCCURRED()) {
                        tmp_expression_value_291 = GET_STRING_DICT_VALUE(moduledict_hikari$api$rest, (Nuitka_StringObject *)mod_consts[440]);

                        if (unlikely(tmp_expression_value_291 == NULL)) {
                            tmp_expression_value_291 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[440]);
                        }

                        if (tmp_expression_value_291 == NULL) {
                            assert(ERROR_OCCURRED());

                            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                            exception_lineno = 6213;
                            type_description_2 = "o";
                            goto dict_build_exception_37;
                        }
                        Py_INCREF(tmp_expression_value_291);
                    } else {
                        goto dict_build_exception_37;
                    }
                }

                tmp_dict_value_50 = LOOKUP_ATTRIBUTE(tmp_expression_value_291, mod_consts[485]);
                Py_DECREF(tmp_expression_value_291);
                if (tmp_dict_value_50 == NULL) {
                    assert(ERROR_OCCURRED());

                    FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                    exception_lineno = 6213;
                    type_description_2 = "o";
                    goto dict_build_exception_37;
                }
                tmp_res = PyDict_SetItem(tmp_kw_defaults_50, tmp_dict_key_50, tmp_dict_value_50);
                Py_DECREF(tmp_dict_value_50);
                assert(!(tmp_res != 0));
                tmp_dict_key_50 = mod_consts[690];
                tmp_expression_value_292 = PyObject_GetItem(locals_hikari$api$rest$$$class__2_RESTClient_110, mod_consts[440]);

                if (tmp_expression_value_292 == NULL) {
                    if (CHECK_AND_CLEAR_KEY_ERROR_OCCURRED()) {
                        tmp_expression_value_292 = GET_STRING_DICT_VALUE(moduledict_hikari$api$rest, (Nuitka_StringObject *)mod_consts[440]);

                        if (unlikely(tmp_expression_value_292 == NULL)) {
                            tmp_expression_value_292 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[440]);
                        }

                        if (tmp_expression_value_292 == NULL) {
                            assert(ERROR_OCCURRED());

                            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                            exception_lineno = 6214;
                            type_description_2 = "o";
                            goto dict_build_exception_37;
                        }
                        Py_INCREF(tmp_expression_value_292);
                    } else {
                        goto dict_build_exception_37;
                    }
                }

                tmp_dict_value_50 = LOOKUP_ATTRIBUTE(tmp_expression_value_292, mod_consts[485]);
                Py_DECREF(tmp_expression_value_292);
                if (tmp_dict_value_50 == NULL) {
                    assert(ERROR_OCCURRED());

                    FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                    exception_lineno = 6214;
                    type_description_2 = "o";
                    goto dict_build_exception_37;
                }
                tmp_res = PyDict_SetItem(tmp_kw_defaults_50, tmp_dict_key_50, tmp_dict_value_50);
                Py_DECREF(tmp_dict_value_50);
                assert(!(tmp_res != 0));
            }
            goto dict_build_noexception_37;
            // Exception handling pass through code for dict_build:
            dict_build_exception_37:;
            Py_DECREF(tmp_called_value_68);
            Py_DECREF(tmp_kw_defaults_50);
            goto frame_exception_exit_3;
            // Finished with no exception for dict_build:
            dict_build_noexception_37:;
            tmp_annotations_125 = PyDict_Copy(mod_consts[691]);


            tmp_args_element_value_135 = MAKE_FUNCTION_hikari$api$rest$$$function__121_edit_welcome_screen(tmp_kw_defaults_50, tmp_annotations_125);

            frame_862833cacd6e5ba73c351f8d132a7b6b_3->m_frame.f_lineno = 6207;
            tmp_dictset_value = CALL_FUNCTION_WITH_SINGLE_ARG(tmp_called_value_68, tmp_args_element_value_135);
            Py_DECREF(tmp_called_value_68);
            Py_DECREF(tmp_args_element_value_135);
            if (tmp_dictset_value == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 6207;
                type_description_2 = "o";
                goto frame_exception_exit_3;
            }
            tmp_res = PyObject_SetItem(locals_hikari$api$rest$$$class__2_RESTClient_110, mod_consts[321], tmp_dictset_value);
            Py_DECREF(tmp_dictset_value);
            if (tmp_res != 0) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 6208;
                type_description_2 = "o";
                goto frame_exception_exit_3;
            }
        }
        {
            PyObject *tmp_called_instance_71;
            PyObject *tmp_args_element_value_136;
            PyObject *tmp_annotations_126;
            tmp_called_instance_71 = PyObject_GetItem(locals_hikari$api$rest$$$class__2_RESTClient_110, mod_consts[431]);

            if (tmp_called_instance_71 == NULL) {
                if (CHECK_AND_CLEAR_KEY_ERROR_OCCURRED()) {
                    tmp_called_instance_71 = GET_STRING_DICT_VALUE(moduledict_hikari$api$rest, (Nuitka_StringObject *)mod_consts[431]);

                    if (unlikely(tmp_called_instance_71 == NULL)) {
                        tmp_called_instance_71 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[431]);
                    }

                    if (tmp_called_instance_71 == NULL) {
                        assert(ERROR_OCCURRED());

                        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                        exception_lineno = 6274;
                        type_description_2 = "o";
                        goto frame_exception_exit_3;
                    }
                    Py_INCREF(tmp_called_instance_71);
                } else {
                    goto frame_exception_exit_3;
                }
            }

            tmp_annotations_126 = PyDict_Copy(mod_consts[692]);


            tmp_args_element_value_136 = MAKE_FUNCTION_hikari$api$rest$$$function__122_fetch_vanity_url(tmp_annotations_126);

            frame_862833cacd6e5ba73c351f8d132a7b6b_3->m_frame.f_lineno = 6274;
            tmp_dictset_value = CALL_METHOD_WITH_SINGLE_ARG(tmp_called_instance_71, mod_consts[457], tmp_args_element_value_136);
            Py_DECREF(tmp_called_instance_71);
            Py_DECREF(tmp_args_element_value_136);
            if (tmp_dictset_value == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 6274;
                type_description_2 = "o";
                goto frame_exception_exit_3;
            }
            tmp_res = PyObject_SetItem(locals_hikari$api$rest$$$class__2_RESTClient_110, mod_consts[324], tmp_dictset_value);
            Py_DECREF(tmp_dictset_value);
            if (tmp_res != 0) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 6275;
                type_description_2 = "o";
                goto frame_exception_exit_3;
            }
        }
        {
            PyObject *tmp_called_value_69;
            PyObject *tmp_expression_value_293;
            PyObject *tmp_args_element_value_137;
            PyObject *tmp_kw_defaults_51;
            PyObject *tmp_dict_key_51;
            PyObject *tmp_dict_value_51;
            PyObject *tmp_expression_value_294;
            PyObject *tmp_annotations_127;
            tmp_expression_value_293 = PyObject_GetItem(locals_hikari$api$rest$$$class__2_RESTClient_110, mod_consts[431]);

            if (tmp_expression_value_293 == NULL) {
                if (CHECK_AND_CLEAR_KEY_ERROR_OCCURRED()) {
                    tmp_expression_value_293 = GET_STRING_DICT_VALUE(moduledict_hikari$api$rest, (Nuitka_StringObject *)mod_consts[431]);

                    if (unlikely(tmp_expression_value_293 == NULL)) {
                        tmp_expression_value_293 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[431]);
                    }

                    if (tmp_expression_value_293 == NULL) {
                        assert(ERROR_OCCURRED());

                        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                        exception_lineno = 6312;
                        type_description_2 = "o";
                        goto frame_exception_exit_3;
                    }
                    Py_INCREF(tmp_expression_value_293);
                } else {
                    goto frame_exception_exit_3;
                }
            }

            tmp_called_value_69 = LOOKUP_ATTRIBUTE(tmp_expression_value_293, mod_consts[457]);
            Py_DECREF(tmp_expression_value_293);
            if (tmp_called_value_69 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 6312;
                type_description_2 = "o";
                goto frame_exception_exit_3;
            }
            tmp_dict_key_51 = mod_consts[616];
            tmp_expression_value_294 = PyObject_GetItem(locals_hikari$api$rest$$$class__2_RESTClient_110, mod_consts[440]);

            if (tmp_expression_value_294 == NULL) {
                if (CHECK_AND_CLEAR_KEY_ERROR_OCCURRED()) {
                    tmp_expression_value_294 = GET_STRING_DICT_VALUE(moduledict_hikari$api$rest, (Nuitka_StringObject *)mod_consts[440]);

                    if (unlikely(tmp_expression_value_294 == NULL)) {
                        tmp_expression_value_294 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[440]);
                    }

                    if (tmp_expression_value_294 == NULL) {
                        assert(ERROR_OCCURRED());

                        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
                        Py_DECREF(tmp_called_value_69);

                        exception_lineno = 6318;
                        type_description_2 = "o";
                        goto frame_exception_exit_3;
                    }
                    Py_INCREF(tmp_expression_value_294);
                } else {
                    goto frame_exception_exit_3;
                }
            }

            tmp_dict_value_51 = LOOKUP_ATTRIBUTE(tmp_expression_value_294, mod_consts[485]);
            Py_DECREF(tmp_expression_value_294);
            if (tmp_dict_value_51 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
                Py_DECREF(tmp_called_value_69);

                exception_lineno = 6318;
                type_description_2 = "o";
                goto frame_exception_exit_3;
            }
            tmp_kw_defaults_51 = _PyDict_NewPresized( 1 );
            tmp_res = PyDict_SetItem(tmp_kw_defaults_51, tmp_dict_key_51, tmp_dict_value_51);
            Py_DECREF(tmp_dict_value_51);
            assert(!(tmp_res != 0));
            tmp_annotations_127 = PyDict_Copy(mod_consts[693]);


            tmp_args_element_value_137 = MAKE_FUNCTION_hikari$api$rest$$$function__123_create_template(tmp_kw_defaults_51, tmp_annotations_127);

            frame_862833cacd6e5ba73c351f8d132a7b6b_3->m_frame.f_lineno = 6312;
            tmp_dictset_value = CALL_FUNCTION_WITH_SINGLE_ARG(tmp_called_value_69, tmp_args_element_value_137);
            Py_DECREF(tmp_called_value_69);
            Py_DECREF(tmp_args_element_value_137);
            if (tmp_dictset_value == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 6312;
                type_description_2 = "o";
                goto frame_exception_exit_3;
            }
            tmp_res = PyObject_SetItem(locals_hikari$api$rest$$$class__2_RESTClient_110, mod_consts[327], tmp_dictset_value);
            Py_DECREF(tmp_dictset_value);
            if (tmp_res != 0) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 6313;
                type_description_2 = "o";
                goto frame_exception_exit_3;
            }
        }
        {
            PyObject *tmp_called_value_70;
            PyObject *tmp_expression_value_295;
            PyObject *tmp_args_element_value_138;
            PyObject *tmp_kw_defaults_52;
            PyObject *tmp_dict_key_52;
            PyObject *tmp_dict_value_52;
            PyObject *tmp_expression_value_296;
            PyObject *tmp_annotations_128;
            tmp_expression_value_295 = PyObject_GetItem(locals_hikari$api$rest$$$class__2_RESTClient_110, mod_consts[431]);

            if (tmp_expression_value_295 == NULL) {
                if (CHECK_AND_CLEAR_KEY_ERROR_OCCURRED()) {
                    tmp_expression_value_295 = GET_STRING_DICT_VALUE(moduledict_hikari$api$rest, (Nuitka_StringObject *)mod_consts[431]);

                    if (unlikely(tmp_expression_value_295 == NULL)) {
                        tmp_expression_value_295 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[431]);
                    }

                    if (tmp_expression_value_295 == NULL) {
                        assert(ERROR_OCCURRED());

                        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                        exception_lineno = 6363;
                        type_description_2 = "o";
                        goto frame_exception_exit_3;
                    }
                    Py_INCREF(tmp_expression_value_295);
                } else {
                    goto frame_exception_exit_3;
                }
            }

            tmp_called_value_70 = LOOKUP_ATTRIBUTE(tmp_expression_value_295, mod_consts[457]);
            Py_DECREF(tmp_expression_value_295);
            if (tmp_called_value_70 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 6363;
                type_description_2 = "o";
                goto frame_exception_exit_3;
            }
            tmp_dict_key_52 = mod_consts[632];
            tmp_expression_value_296 = PyObject_GetItem(locals_hikari$api$rest$$$class__2_RESTClient_110, mod_consts[440]);

            if (tmp_expression_value_296 == NULL) {
                if (CHECK_AND_CLEAR_KEY_ERROR_OCCURRED()) {
                    tmp_expression_value_296 = GET_STRING_DICT_VALUE(moduledict_hikari$api$rest, (Nuitka_StringObject *)mod_consts[440]);

                    if (unlikely(tmp_expression_value_296 == NULL)) {
                        tmp_expression_value_296 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[440]);
                    }

                    if (tmp_expression_value_296 == NULL) {
                        assert(ERROR_OCCURRED());

                        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
                        Py_DECREF(tmp_called_value_70);

                        exception_lineno = 6369;
                        type_description_2 = "o";
                        goto frame_exception_exit_3;
                    }
                    Py_INCREF(tmp_expression_value_296);
                } else {
                    goto frame_exception_exit_3;
                }
            }

            tmp_dict_value_52 = LOOKUP_ATTRIBUTE(tmp_expression_value_296, mod_consts[485]);
            Py_DECREF(tmp_expression_value_296);
            if (tmp_dict_value_52 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
                Py_DECREF(tmp_called_value_70);

                exception_lineno = 6369;
                type_description_2 = "o";
                goto frame_exception_exit_3;
            }
            tmp_kw_defaults_52 = _PyDict_NewPresized( 1 );
            tmp_res = PyDict_SetItem(tmp_kw_defaults_52, tmp_dict_key_52, tmp_dict_value_52);
            Py_DECREF(tmp_dict_value_52);
            assert(!(tmp_res != 0));
            tmp_annotations_128 = PyDict_Copy(mod_consts[694]);


            tmp_args_element_value_138 = MAKE_FUNCTION_hikari$api$rest$$$function__124_create_guild_from_template(tmp_kw_defaults_52, tmp_annotations_128);

            frame_862833cacd6e5ba73c351f8d132a7b6b_3->m_frame.f_lineno = 6363;
            tmp_dictset_value = CALL_FUNCTION_WITH_SINGLE_ARG(tmp_called_value_70, tmp_args_element_value_138);
            Py_DECREF(tmp_called_value_70);
            Py_DECREF(tmp_args_element_value_138);
            if (tmp_dictset_value == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 6363;
                type_description_2 = "o";
                goto frame_exception_exit_3;
            }
            tmp_res = PyObject_SetItem(locals_hikari$api$rest$$$class__2_RESTClient_110, mod_consts[330], tmp_dictset_value);
            Py_DECREF(tmp_dictset_value);
            if (tmp_res != 0) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 6364;
                type_description_2 = "o";
                goto frame_exception_exit_3;
            }
        }
        {
            PyObject *tmp_called_instance_72;
            PyObject *tmp_args_element_value_139;
            PyObject *tmp_annotations_129;
            tmp_called_instance_72 = PyObject_GetItem(locals_hikari$api$rest$$$class__2_RESTClient_110, mod_consts[431]);

            if (tmp_called_instance_72 == NULL) {
                if (CHECK_AND_CLEAR_KEY_ERROR_OCCURRED()) {
                    tmp_called_instance_72 = GET_STRING_DICT_VALUE(moduledict_hikari$api$rest, (Nuitka_StringObject *)mod_consts[431]);

                    if (unlikely(tmp_called_instance_72 == NULL)) {
                        tmp_called_instance_72 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[431]);
                    }

                    if (tmp_called_instance_72 == NULL) {
                        assert(ERROR_OCCURRED());

                        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                        exception_lineno = 6416;
                        type_description_2 = "o";
                        goto frame_exception_exit_3;
                    }
                    Py_INCREF(tmp_called_instance_72);
                } else {
                    goto frame_exception_exit_3;
                }
            }

            tmp_annotations_129 = PyDict_Copy(mod_consts[695]);


            tmp_args_element_value_139 = MAKE_FUNCTION_hikari$api$rest$$$function__125_delete_template(tmp_annotations_129);

            frame_862833cacd6e5ba73c351f8d132a7b6b_3->m_frame.f_lineno = 6416;
            tmp_dictset_value = CALL_METHOD_WITH_SINGLE_ARG(tmp_called_instance_72, mod_consts[457], tmp_args_element_value_139);
            Py_DECREF(tmp_called_instance_72);
            Py_DECREF(tmp_args_element_value_139);
            if (tmp_dictset_value == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 6416;
                type_description_2 = "o";
                goto frame_exception_exit_3;
            }
            tmp_res = PyObject_SetItem(locals_hikari$api$rest$$$class__2_RESTClient_110, mod_consts[333], tmp_dictset_value);
            Py_DECREF(tmp_dictset_value);
            if (tmp_res != 0) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 6417;
                type_description_2 = "o";
                goto frame_exception_exit_3;
            }
        }
        {
            PyObject *tmp_called_value_71;
            PyObject *tmp_expression_value_297;
            PyObject *tmp_args_element_value_140;
            PyObject *tmp_kw_defaults_53;
            PyObject *tmp_dict_key_53;
            PyObject *tmp_dict_value_53;
            PyObject *tmp_expression_value_298;
            PyObject *tmp_annotations_130;
            tmp_expression_value_297 = PyObject_GetItem(locals_hikari$api$rest$$$class__2_RESTClient_110, mod_consts[431]);

            if (tmp_expression_value_297 == NULL) {
                if (CHECK_AND_CLEAR_KEY_ERROR_OCCURRED()) {
                    tmp_expression_value_297 = GET_STRING_DICT_VALUE(moduledict_hikari$api$rest, (Nuitka_StringObject *)mod_consts[431]);

                    if (unlikely(tmp_expression_value_297 == NULL)) {
                        tmp_expression_value_297 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[431]);
                    }

                    if (tmp_expression_value_297 == NULL) {
                        assert(ERROR_OCCURRED());

                        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                        exception_lineno = 6460;
                        type_description_2 = "o";
                        goto frame_exception_exit_3;
                    }
                    Py_INCREF(tmp_expression_value_297);
                } else {
                    goto frame_exception_exit_3;
                }
            }

            tmp_called_value_71 = LOOKUP_ATTRIBUTE(tmp_expression_value_297, mod_consts[457]);
            Py_DECREF(tmp_expression_value_297);
            if (tmp_called_value_71 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 6460;
                type_description_2 = "o";
                goto frame_exception_exit_3;
            }
            tmp_dict_key_53 = mod_consts[484];
            tmp_expression_value_298 = PyObject_GetItem(locals_hikari$api$rest$$$class__2_RESTClient_110, mod_consts[440]);

            if (tmp_expression_value_298 == NULL) {
                if (CHECK_AND_CLEAR_KEY_ERROR_OCCURRED()) {
                    tmp_expression_value_298 = GET_STRING_DICT_VALUE(moduledict_hikari$api$rest, (Nuitka_StringObject *)mod_consts[440]);

                    if (unlikely(tmp_expression_value_298 == NULL)) {
                        tmp_expression_value_298 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[440]);
                    }

                    if (tmp_expression_value_298 == NULL) {
                        assert(ERROR_OCCURRED());

                        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
                        Py_DECREF(tmp_called_value_71);

                        exception_lineno = 6466;
                        type_description_2 = "o";
                        goto frame_exception_exit_3;
                    }
                    Py_INCREF(tmp_expression_value_298);
                } else {
                    goto frame_exception_exit_3;
                }
            }

            tmp_dict_value_53 = LOOKUP_ATTRIBUTE(tmp_expression_value_298, mod_consts[485]);
            Py_DECREF(tmp_expression_value_298);
            if (tmp_dict_value_53 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
                Py_DECREF(tmp_called_value_71);

                exception_lineno = 6466;
                type_description_2 = "o";
                goto frame_exception_exit_3;
            }
            tmp_kw_defaults_53 = _PyDict_NewPresized( 2 );
            {
                PyObject *tmp_expression_value_299;
                tmp_res = PyDict_SetItem(tmp_kw_defaults_53, tmp_dict_key_53, tmp_dict_value_53);
                Py_DECREF(tmp_dict_value_53);
                assert(!(tmp_res != 0));
                tmp_dict_key_53 = mod_consts[616];
                tmp_expression_value_299 = PyObject_GetItem(locals_hikari$api$rest$$$class__2_RESTClient_110, mod_consts[440]);

                if (tmp_expression_value_299 == NULL) {
                    if (CHECK_AND_CLEAR_KEY_ERROR_OCCURRED()) {
                        tmp_expression_value_299 = GET_STRING_DICT_VALUE(moduledict_hikari$api$rest, (Nuitka_StringObject *)mod_consts[440]);

                        if (unlikely(tmp_expression_value_299 == NULL)) {
                            tmp_expression_value_299 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[440]);
                        }

                        if (tmp_expression_value_299 == NULL) {
                            assert(ERROR_OCCURRED());

                            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                            exception_lineno = 6467;
                            type_description_2 = "o";
                            goto dict_build_exception_38;
                        }
                        Py_INCREF(tmp_expression_value_299);
                    } else {
                        goto dict_build_exception_38;
                    }
                }

                tmp_dict_value_53 = LOOKUP_ATTRIBUTE(tmp_expression_value_299, mod_consts[485]);
                Py_DECREF(tmp_expression_value_299);
                if (tmp_dict_value_53 == NULL) {
                    assert(ERROR_OCCURRED());

                    FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                    exception_lineno = 6467;
                    type_description_2 = "o";
                    goto dict_build_exception_38;
                }
                tmp_res = PyDict_SetItem(tmp_kw_defaults_53, tmp_dict_key_53, tmp_dict_value_53);
                Py_DECREF(tmp_dict_value_53);
                assert(!(tmp_res != 0));
            }
            goto dict_build_noexception_38;
            // Exception handling pass through code for dict_build:
            dict_build_exception_38:;
            Py_DECREF(tmp_called_value_71);
            Py_DECREF(tmp_kw_defaults_53);
            goto frame_exception_exit_3;
            // Finished with no exception for dict_build:
            dict_build_noexception_38:;
            tmp_annotations_130 = PyDict_Copy(mod_consts[696]);


            tmp_args_element_value_140 = MAKE_FUNCTION_hikari$api$rest$$$function__126_edit_template(tmp_kw_defaults_53, tmp_annotations_130);

            frame_862833cacd6e5ba73c351f8d132a7b6b_3->m_frame.f_lineno = 6460;
            tmp_dictset_value = CALL_FUNCTION_WITH_SINGLE_ARG(tmp_called_value_71, tmp_args_element_value_140);
            Py_DECREF(tmp_called_value_71);
            Py_DECREF(tmp_args_element_value_140);
            if (tmp_dictset_value == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 6460;
                type_description_2 = "o";
                goto frame_exception_exit_3;
            }
            tmp_res = PyObject_SetItem(locals_hikari$api$rest$$$class__2_RESTClient_110, mod_consts[336], tmp_dictset_value);
            Py_DECREF(tmp_dictset_value);
            if (tmp_res != 0) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 6461;
                type_description_2 = "o";
                goto frame_exception_exit_3;
            }
        }
        {
            PyObject *tmp_called_instance_73;
            PyObject *tmp_args_element_value_141;
            PyObject *tmp_annotations_131;
            tmp_called_instance_73 = PyObject_GetItem(locals_hikari$api$rest$$$class__2_RESTClient_110, mod_consts[431]);

            if (tmp_called_instance_73 == NULL) {
                if (CHECK_AND_CLEAR_KEY_ERROR_OCCURRED()) {
                    tmp_called_instance_73 = GET_STRING_DICT_VALUE(moduledict_hikari$api$rest, (Nuitka_StringObject *)mod_consts[431]);

                    if (unlikely(tmp_called_instance_73 == NULL)) {
                        tmp_called_instance_73 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[431]);
                    }

                    if (tmp_called_instance_73 == NULL) {
                        assert(ERROR_OCCURRED());

                        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                        exception_lineno = 6514;
                        type_description_2 = "o";
                        goto frame_exception_exit_3;
                    }
                    Py_INCREF(tmp_called_instance_73);
                } else {
                    goto frame_exception_exit_3;
                }
            }

            tmp_annotations_131 = PyDict_Copy(mod_consts[697]);


            tmp_args_element_value_141 = MAKE_FUNCTION_hikari$api$rest$$$function__127_fetch_template(tmp_annotations_131);

            frame_862833cacd6e5ba73c351f8d132a7b6b_3->m_frame.f_lineno = 6514;
            tmp_dictset_value = CALL_METHOD_WITH_SINGLE_ARG(tmp_called_instance_73, mod_consts[457], tmp_args_element_value_141);
            Py_DECREF(tmp_called_instance_73);
            Py_DECREF(tmp_args_element_value_141);
            if (tmp_dictset_value == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 6514;
                type_description_2 = "o";
                goto frame_exception_exit_3;
            }
            tmp_res = PyObject_SetItem(locals_hikari$api$rest$$$class__2_RESTClient_110, mod_consts[339], tmp_dictset_value);
            Py_DECREF(tmp_dictset_value);
            if (tmp_res != 0) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 6515;
                type_description_2 = "o";
                goto frame_exception_exit_3;
            }
        }
        {
            PyObject *tmp_called_instance_74;
            PyObject *tmp_args_element_value_142;
            PyObject *tmp_annotations_132;
            tmp_called_instance_74 = PyObject_GetItem(locals_hikari$api$rest$$$class__2_RESTClient_110, mod_consts[431]);

            if (tmp_called_instance_74 == NULL) {
                if (CHECK_AND_CLEAR_KEY_ERROR_OCCURRED()) {
                    tmp_called_instance_74 = GET_STRING_DICT_VALUE(moduledict_hikari$api$rest, (Nuitka_StringObject *)mod_consts[431]);

                    if (unlikely(tmp_called_instance_74 == NULL)) {
                        tmp_called_instance_74 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[431]);
                    }

                    if (tmp_called_instance_74 == NULL) {
                        assert(ERROR_OCCURRED());

                        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                        exception_lineno = 6549;
                        type_description_2 = "o";
                        goto frame_exception_exit_3;
                    }
                    Py_INCREF(tmp_called_instance_74);
                } else {
                    goto frame_exception_exit_3;
                }
            }

            tmp_annotations_132 = PyDict_Copy(mod_consts[698]);


            tmp_args_element_value_142 = MAKE_FUNCTION_hikari$api$rest$$$function__128_fetch_guild_templates(tmp_annotations_132);

            frame_862833cacd6e5ba73c351f8d132a7b6b_3->m_frame.f_lineno = 6549;
            tmp_dictset_value = CALL_METHOD_WITH_SINGLE_ARG(tmp_called_instance_74, mod_consts[457], tmp_args_element_value_142);
            Py_DECREF(tmp_called_instance_74);
            Py_DECREF(tmp_args_element_value_142);
            if (tmp_dictset_value == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 6549;
                type_description_2 = "o";
                goto frame_exception_exit_3;
            }
            tmp_res = PyObject_SetItem(locals_hikari$api$rest$$$class__2_RESTClient_110, mod_consts[342], tmp_dictset_value);
            Py_DECREF(tmp_dictset_value);
            if (tmp_res != 0) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 6550;
                type_description_2 = "o";
                goto frame_exception_exit_3;
            }
        }
        {
            PyObject *tmp_called_instance_75;
            PyObject *tmp_args_element_value_143;
            PyObject *tmp_annotations_133;
            tmp_called_instance_75 = PyObject_GetItem(locals_hikari$api$rest$$$class__2_RESTClient_110, mod_consts[431]);

            if (tmp_called_instance_75 == NULL) {
                if (CHECK_AND_CLEAR_KEY_ERROR_OCCURRED()) {
                    tmp_called_instance_75 = GET_STRING_DICT_VALUE(moduledict_hikari$api$rest, (Nuitka_StringObject *)mod_consts[431]);

                    if (unlikely(tmp_called_instance_75 == NULL)) {
                        tmp_called_instance_75 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[431]);
                    }

                    if (tmp_called_instance_75 == NULL) {
                        assert(ERROR_OCCURRED());

                        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                        exception_lineno = 6589;
                        type_description_2 = "o";
                        goto frame_exception_exit_3;
                    }
                    Py_INCREF(tmp_called_instance_75);
                } else {
                    goto frame_exception_exit_3;
                }
            }

            tmp_annotations_133 = PyDict_Copy(mod_consts[695]);


            tmp_args_element_value_143 = MAKE_FUNCTION_hikari$api$rest$$$function__129_sync_guild_template(tmp_annotations_133);

            frame_862833cacd6e5ba73c351f8d132a7b6b_3->m_frame.f_lineno = 6589;
            tmp_dictset_value = CALL_METHOD_WITH_SINGLE_ARG(tmp_called_instance_75, mod_consts[457], tmp_args_element_value_143);
            Py_DECREF(tmp_called_instance_75);
            Py_DECREF(tmp_args_element_value_143);
            if (tmp_dictset_value == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 6589;
                type_description_2 = "o";
                goto frame_exception_exit_3;
            }
            tmp_res = PyObject_SetItem(locals_hikari$api$rest$$$class__2_RESTClient_110, mod_consts[345], tmp_dictset_value);
            Py_DECREF(tmp_dictset_value);
            if (tmp_res != 0) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 6590;
                type_description_2 = "o";
                goto frame_exception_exit_3;
            }
        }
        {
            PyObject *tmp_called_instance_76;
            PyObject *tmp_args_element_value_144;
            PyObject *tmp_annotations_134;
            tmp_called_instance_76 = PyObject_GetItem(locals_hikari$api$rest$$$class__2_RESTClient_110, mod_consts[431]);

            if (tmp_called_instance_76 == NULL) {
                if (CHECK_AND_CLEAR_KEY_ERROR_OCCURRED()) {
                    tmp_called_instance_76 = GET_STRING_DICT_VALUE(moduledict_hikari$api$rest, (Nuitka_StringObject *)mod_consts[431]);

                    if (unlikely(tmp_called_instance_76 == NULL)) {
                        tmp_called_instance_76 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[431]);
                    }

                    if (tmp_called_instance_76 == NULL) {
                        assert(ERROR_OCCURRED());

                        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                        exception_lineno = 6633;
                        type_description_2 = "o";
                        goto frame_exception_exit_3;
                    }
                    Py_INCREF(tmp_called_instance_76);
                } else {
                    goto frame_exception_exit_3;
                }
            }

            tmp_annotations_134 = PyDict_Copy(mod_consts[699]);


            tmp_args_element_value_144 = MAKE_FUNCTION_hikari$api$rest$$$function__130_command_builder(tmp_annotations_134);

            frame_862833cacd6e5ba73c351f8d132a7b6b_3->m_frame.f_lineno = 6633;
            tmp_dictset_value = CALL_METHOD_WITH_SINGLE_ARG(tmp_called_instance_76, mod_consts[457], tmp_args_element_value_144);
            Py_DECREF(tmp_called_instance_76);
            Py_DECREF(tmp_args_element_value_144);
            if (tmp_dictset_value == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 6633;
                type_description_2 = "o";
                goto frame_exception_exit_3;
            }
            tmp_res = PyObject_SetItem(locals_hikari$api$rest$$$class__2_RESTClient_110, mod_consts[701], tmp_dictset_value);
            Py_DECREF(tmp_dictset_value);
            if (tmp_res != 0) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 6634;
                type_description_2 = "o";
                goto frame_exception_exit_3;
            }
        }
        {
            PyObject *tmp_called_instance_77;
            PyObject *tmp_args_element_value_145;
            PyObject *tmp_annotations_135;
            tmp_called_instance_77 = PyObject_GetItem(locals_hikari$api$rest$$$class__2_RESTClient_110, mod_consts[431]);

            if (tmp_called_instance_77 == NULL) {
                if (CHECK_AND_CLEAR_KEY_ERROR_OCCURRED()) {
                    tmp_called_instance_77 = GET_STRING_DICT_VALUE(moduledict_hikari$api$rest, (Nuitka_StringObject *)mod_consts[431]);

                    if (unlikely(tmp_called_instance_77 == NULL)) {
                        tmp_called_instance_77 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[431]);
                    }

                    if (tmp_called_instance_77 == NULL) {
                        assert(ERROR_OCCURRED());

                        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                        exception_lineno = 6655;
                        type_description_2 = "o";
                        goto frame_exception_exit_3;
                    }
                    Py_INCREF(tmp_called_instance_77);
                } else {
                    goto frame_exception_exit_3;
                }
            }

            tmp_annotations_135 = PyDict_Copy(mod_consts[699]);


            tmp_args_element_value_145 = MAKE_FUNCTION_hikari$api$rest$$$function__131_slash_command_builder(tmp_annotations_135);

            frame_862833cacd6e5ba73c351f8d132a7b6b_3->m_frame.f_lineno = 6655;
            tmp_dictset_value = CALL_METHOD_WITH_SINGLE_ARG(tmp_called_instance_77, mod_consts[457], tmp_args_element_value_145);
            Py_DECREF(tmp_called_instance_77);
            Py_DECREF(tmp_args_element_value_145);
            if (tmp_dictset_value == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 6655;
                type_description_2 = "o";
                goto frame_exception_exit_3;
            }
            tmp_res = PyObject_SetItem(locals_hikari$api$rest$$$class__2_RESTClient_110, mod_consts[704], tmp_dictset_value);
            Py_DECREF(tmp_dictset_value);
            if (tmp_res != 0) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 6656;
                type_description_2 = "o";
                goto frame_exception_exit_3;
            }
        }
        {
            PyObject *tmp_called_instance_78;
            PyObject *tmp_args_element_value_146;
            PyObject *tmp_annotations_136;
            tmp_called_instance_78 = PyObject_GetItem(locals_hikari$api$rest$$$class__2_RESTClient_110, mod_consts[431]);

            if (tmp_called_instance_78 == NULL) {
                if (CHECK_AND_CLEAR_KEY_ERROR_OCCURRED()) {
                    tmp_called_instance_78 = GET_STRING_DICT_VALUE(moduledict_hikari$api$rest, (Nuitka_StringObject *)mod_consts[431]);

                    if (unlikely(tmp_called_instance_78 == NULL)) {
                        tmp_called_instance_78 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[431]);
                    }

                    if (tmp_called_instance_78 == NULL) {
                        assert(ERROR_OCCURRED());

                        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                        exception_lineno = 6678;
                        type_description_2 = "o";
                        goto frame_exception_exit_3;
                    }
                    Py_INCREF(tmp_called_instance_78);
                } else {
                    goto frame_exception_exit_3;
                }
            }

            tmp_annotations_136 = PyDict_Copy(mod_consts[706]);


            tmp_args_element_value_146 = MAKE_FUNCTION_hikari$api$rest$$$function__132_context_menu_command_builder(tmp_annotations_136);

            frame_862833cacd6e5ba73c351f8d132a7b6b_3->m_frame.f_lineno = 6678;
            tmp_dictset_value = CALL_METHOD_WITH_SINGLE_ARG(tmp_called_instance_78, mod_consts[457], tmp_args_element_value_146);
            Py_DECREF(tmp_called_instance_78);
            Py_DECREF(tmp_args_element_value_146);
            if (tmp_dictset_value == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 6678;
                type_description_2 = "o";
                goto frame_exception_exit_3;
            }
            tmp_res = PyObject_SetItem(locals_hikari$api$rest$$$class__2_RESTClient_110, mod_consts[708], tmp_dictset_value);
            Py_DECREF(tmp_dictset_value);
            if (tmp_res != 0) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 6679;
                type_description_2 = "o";
                goto frame_exception_exit_3;
            }
        }
        {
            PyObject *tmp_called_value_72;
            PyObject *tmp_expression_value_300;
            PyObject *tmp_args_element_value_147;
            PyObject *tmp_defaults_10;
            PyObject *tmp_tuple_element_17;
            PyObject *tmp_expression_value_301;
            PyObject *tmp_annotations_137;
            tmp_expression_value_300 = PyObject_GetItem(locals_hikari$api$rest$$$class__2_RESTClient_110, mod_consts[431]);

            if (tmp_expression_value_300 == NULL) {
                if (CHECK_AND_CLEAR_KEY_ERROR_OCCURRED()) {
                    tmp_expression_value_300 = GET_STRING_DICT_VALUE(moduledict_hikari$api$rest, (Nuitka_StringObject *)mod_consts[431]);

                    if (unlikely(tmp_expression_value_300 == NULL)) {
                        tmp_expression_value_300 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[431]);
                    }

                    if (tmp_expression_value_300 == NULL) {
                        assert(ERROR_OCCURRED());

                        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                        exception_lineno = 6699;
                        type_description_2 = "o";
                        goto frame_exception_exit_3;
                    }
                    Py_INCREF(tmp_expression_value_300);
                } else {
                    goto frame_exception_exit_3;
                }
            }

            tmp_called_value_72 = LOOKUP_ATTRIBUTE(tmp_expression_value_300, mod_consts[457]);
            Py_DECREF(tmp_expression_value_300);
            if (tmp_called_value_72 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 6699;
                type_description_2 = "o";
                goto frame_exception_exit_3;
            }
            tmp_expression_value_301 = PyObject_GetItem(locals_hikari$api$rest$$$class__2_RESTClient_110, mod_consts[440]);

            if (tmp_expression_value_301 == NULL) {
                if (CHECK_AND_CLEAR_KEY_ERROR_OCCURRED()) {
                    tmp_expression_value_301 = GET_STRING_DICT_VALUE(moduledict_hikari$api$rest, (Nuitka_StringObject *)mod_consts[440]);

                    if (unlikely(tmp_expression_value_301 == NULL)) {
                        tmp_expression_value_301 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[440]);
                    }

                    if (tmp_expression_value_301 == NULL) {
                        assert(ERROR_OCCURRED());

                        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
                        Py_DECREF(tmp_called_value_72);

                        exception_lineno = 6704;
                        type_description_2 = "o";
                        goto frame_exception_exit_3;
                    }
                    Py_INCREF(tmp_expression_value_301);
                } else {
                    goto frame_exception_exit_3;
                }
            }

            tmp_tuple_element_17 = LOOKUP_ATTRIBUTE(tmp_expression_value_301, mod_consts[485]);
            Py_DECREF(tmp_expression_value_301);
            if (tmp_tuple_element_17 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
                Py_DECREF(tmp_called_value_72);

                exception_lineno = 6704;
                type_description_2 = "o";
                goto frame_exception_exit_3;
            }
            tmp_defaults_10 = PyTuple_New(1);
            PyTuple_SET_ITEM(tmp_defaults_10, 0, tmp_tuple_element_17);
            tmp_annotations_137 = PyDict_Copy(mod_consts[710]);


            tmp_args_element_value_147 = MAKE_FUNCTION_hikari$api$rest$$$function__133_fetch_application_command(tmp_defaults_10, tmp_annotations_137);

            frame_862833cacd6e5ba73c351f8d132a7b6b_3->m_frame.f_lineno = 6699;
            tmp_dictset_value = CALL_FUNCTION_WITH_SINGLE_ARG(tmp_called_value_72, tmp_args_element_value_147);
            Py_DECREF(tmp_called_value_72);
            Py_DECREF(tmp_args_element_value_147);
            if (tmp_dictset_value == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 6699;
                type_description_2 = "o";
                goto frame_exception_exit_3;
            }
            tmp_res = PyObject_SetItem(locals_hikari$api$rest$$$class__2_RESTClient_110, mod_consts[348], tmp_dictset_value);
            Py_DECREF(tmp_dictset_value);
            if (tmp_res != 0) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 6700;
                type_description_2 = "o";
                goto frame_exception_exit_3;
            }
        }
        {
            PyObject *tmp_called_value_73;
            PyObject *tmp_expression_value_302;
            PyObject *tmp_args_element_value_148;
            PyObject *tmp_defaults_11;
            PyObject *tmp_tuple_element_18;
            PyObject *tmp_expression_value_303;
            PyObject *tmp_annotations_138;
            tmp_expression_value_302 = PyObject_GetItem(locals_hikari$api$rest$$$class__2_RESTClient_110, mod_consts[431]);

            if (tmp_expression_value_302 == NULL) {
                if (CHECK_AND_CLEAR_KEY_ERROR_OCCURRED()) {
                    tmp_expression_value_302 = GET_STRING_DICT_VALUE(moduledict_hikari$api$rest, (Nuitka_StringObject *)mod_consts[431]);

                    if (unlikely(tmp_expression_value_302 == NULL)) {
                        tmp_expression_value_302 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[431]);
                    }

                    if (tmp_expression_value_302 == NULL) {
                        assert(ERROR_OCCURRED());

                        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                        exception_lineno = 6750;
                        type_description_2 = "o";
                        goto frame_exception_exit_3;
                    }
                    Py_INCREF(tmp_expression_value_302);
                } else {
                    goto frame_exception_exit_3;
                }
            }

            tmp_called_value_73 = LOOKUP_ATTRIBUTE(tmp_expression_value_302, mod_consts[457]);
            Py_DECREF(tmp_expression_value_302);
            if (tmp_called_value_73 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 6750;
                type_description_2 = "o";
                goto frame_exception_exit_3;
            }
            tmp_expression_value_303 = PyObject_GetItem(locals_hikari$api$rest$$$class__2_RESTClient_110, mod_consts[440]);

            if (tmp_expression_value_303 == NULL) {
                if (CHECK_AND_CLEAR_KEY_ERROR_OCCURRED()) {
                    tmp_expression_value_303 = GET_STRING_DICT_VALUE(moduledict_hikari$api$rest, (Nuitka_StringObject *)mod_consts[440]);

                    if (unlikely(tmp_expression_value_303 == NULL)) {
                        tmp_expression_value_303 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[440]);
                    }

                    if (tmp_expression_value_303 == NULL) {
                        assert(ERROR_OCCURRED());

                        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
                        Py_DECREF(tmp_called_value_73);

                        exception_lineno = 6754;
                        type_description_2 = "o";
                        goto frame_exception_exit_3;
                    }
                    Py_INCREF(tmp_expression_value_303);
                } else {
                    goto frame_exception_exit_3;
                }
            }

            tmp_tuple_element_18 = LOOKUP_ATTRIBUTE(tmp_expression_value_303, mod_consts[485]);
            Py_DECREF(tmp_expression_value_303);
            if (tmp_tuple_element_18 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
                Py_DECREF(tmp_called_value_73);

                exception_lineno = 6754;
                type_description_2 = "o";
                goto frame_exception_exit_3;
            }
            tmp_defaults_11 = PyTuple_New(1);
            PyTuple_SET_ITEM(tmp_defaults_11, 0, tmp_tuple_element_18);
            tmp_annotations_138 = PyDict_Copy(mod_consts[711]);


            tmp_args_element_value_148 = MAKE_FUNCTION_hikari$api$rest$$$function__134_fetch_application_commands(tmp_defaults_11, tmp_annotations_138);

            frame_862833cacd6e5ba73c351f8d132a7b6b_3->m_frame.f_lineno = 6750;
            tmp_dictset_value = CALL_FUNCTION_WITH_SINGLE_ARG(tmp_called_value_73, tmp_args_element_value_148);
            Py_DECREF(tmp_called_value_73);
            Py_DECREF(tmp_args_element_value_148);
            if (tmp_dictset_value == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 6750;
                type_description_2 = "o";
                goto frame_exception_exit_3;
            }
            tmp_res = PyObject_SetItem(locals_hikari$api$rest$$$class__2_RESTClient_110, mod_consts[351], tmp_dictset_value);
            Py_DECREF(tmp_dictset_value);
            if (tmp_res != 0) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 6751;
                type_description_2 = "o";
                goto frame_exception_exit_3;
            }
        }
        {
            PyObject *tmp_called_value_74;
            PyObject *tmp_expression_value_304;
            PyObject *tmp_args_element_value_149;
            PyObject *tmp_defaults_12;
            PyObject *tmp_tuple_element_19;
            PyObject *tmp_expression_value_305;
            PyObject *tmp_kw_defaults_54;
            PyObject *tmp_dict_key_54;
            PyObject *tmp_dict_value_54;
            PyObject *tmp_expression_value_306;
            PyObject *tmp_annotations_139;
            tmp_expression_value_304 = PyObject_GetItem(locals_hikari$api$rest$$$class__2_RESTClient_110, mod_consts[431]);

            if (tmp_expression_value_304 == NULL) {
                if (CHECK_AND_CLEAR_KEY_ERROR_OCCURRED()) {
                    tmp_expression_value_304 = GET_STRING_DICT_VALUE(moduledict_hikari$api$rest, (Nuitka_StringObject *)mod_consts[431]);

                    if (unlikely(tmp_expression_value_304 == NULL)) {
                        tmp_expression_value_304 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[431]);
                    }

                    if (tmp_expression_value_304 == NULL) {
                        assert(ERROR_OCCURRED());

                        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                        exception_lineno = 6801;
                        type_description_2 = "o";
                        goto frame_exception_exit_3;
                    }
                    Py_INCREF(tmp_expression_value_304);
                } else {
                    goto frame_exception_exit_3;
                }
            }

            tmp_called_value_74 = LOOKUP_ATTRIBUTE(tmp_expression_value_304, mod_consts[457]);
            Py_DECREF(tmp_expression_value_304);
            if (tmp_called_value_74 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 6801;
                type_description_2 = "o";
                goto frame_exception_exit_3;
            }
            tmp_expression_value_305 = PyObject_GetItem(locals_hikari$api$rest$$$class__2_RESTClient_110, mod_consts[440]);

            if (tmp_expression_value_305 == NULL) {
                if (CHECK_AND_CLEAR_KEY_ERROR_OCCURRED()) {
                    tmp_expression_value_305 = GET_STRING_DICT_VALUE(moduledict_hikari$api$rest, (Nuitka_StringObject *)mod_consts[440]);

                    if (unlikely(tmp_expression_value_305 == NULL)) {
                        tmp_expression_value_305 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[440]);
                    }

                    if (tmp_expression_value_305 == NULL) {
                        assert(ERROR_OCCURRED());

                        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
                        Py_DECREF(tmp_called_value_74);

                        exception_lineno = 6807;
                        type_description_2 = "o";
                        goto frame_exception_exit_3;
                    }
                    Py_INCREF(tmp_expression_value_305);
                } else {
                    goto frame_exception_exit_3;
                }
            }

            tmp_tuple_element_19 = LOOKUP_ATTRIBUTE(tmp_expression_value_305, mod_consts[485]);
            Py_DECREF(tmp_expression_value_305);
            if (tmp_tuple_element_19 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
                Py_DECREF(tmp_called_value_74);

                exception_lineno = 6807;
                type_description_2 = "o";
                goto frame_exception_exit_3;
            }
            tmp_defaults_12 = PyTuple_New(1);
            PyTuple_SET_ITEM(tmp_defaults_12, 0, tmp_tuple_element_19);
            tmp_dict_key_54 = mod_consts[712];
            tmp_expression_value_306 = PyObject_GetItem(locals_hikari$api$rest$$$class__2_RESTClient_110, mod_consts[440]);

            if (tmp_expression_value_306 == NULL) {
                if (CHECK_AND_CLEAR_KEY_ERROR_OCCURRED()) {
                    tmp_expression_value_306 = GET_STRING_DICT_VALUE(moduledict_hikari$api$rest, (Nuitka_StringObject *)mod_consts[440]);

                    if (unlikely(tmp_expression_value_306 == NULL)) {
                        tmp_expression_value_306 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[440]);
                    }

                    if (tmp_expression_value_306 == NULL) {
                        assert(ERROR_OCCURRED());

                        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
                        Py_DECREF(tmp_called_value_74);
                        Py_DECREF(tmp_defaults_12);

                        exception_lineno = 6809;
                        type_description_2 = "o";
                        goto frame_exception_exit_3;
                    }
                    Py_INCREF(tmp_expression_value_306);
                } else {
                    goto frame_exception_exit_3;
                }
            }

            tmp_dict_value_54 = LOOKUP_ATTRIBUTE(tmp_expression_value_306, mod_consts[485]);
            Py_DECREF(tmp_expression_value_306);
            if (tmp_dict_value_54 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
                Py_DECREF(tmp_called_value_74);
                Py_DECREF(tmp_defaults_12);

                exception_lineno = 6809;
                type_description_2 = "o";
                goto frame_exception_exit_3;
            }
            tmp_kw_defaults_54 = _PyDict_NewPresized( 2 );
            {
                PyObject *tmp_expression_value_307;
                tmp_res = PyDict_SetItem(tmp_kw_defaults_54, tmp_dict_key_54, tmp_dict_value_54);
                Py_DECREF(tmp_dict_value_54);
                assert(!(tmp_res != 0));
                tmp_dict_key_54 = mod_consts[713];
                tmp_expression_value_307 = PyObject_GetItem(locals_hikari$api$rest$$$class__2_RESTClient_110, mod_consts[440]);

                if (tmp_expression_value_307 == NULL) {
                    if (CHECK_AND_CLEAR_KEY_ERROR_OCCURRED()) {
                        tmp_expression_value_307 = GET_STRING_DICT_VALUE(moduledict_hikari$api$rest, (Nuitka_StringObject *)mod_consts[440]);

                        if (unlikely(tmp_expression_value_307 == NULL)) {
                            tmp_expression_value_307 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[440]);
                        }

                        if (tmp_expression_value_307 == NULL) {
                            assert(ERROR_OCCURRED());

                            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                            exception_lineno = 6810;
                            type_description_2 = "o";
                            goto dict_build_exception_39;
                        }
                        Py_INCREF(tmp_expression_value_307);
                    } else {
                        goto dict_build_exception_39;
                    }
                }

                tmp_dict_value_54 = LOOKUP_ATTRIBUTE(tmp_expression_value_307, mod_consts[485]);
                Py_DECREF(tmp_expression_value_307);
                if (tmp_dict_value_54 == NULL) {
                    assert(ERROR_OCCURRED());

                    FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                    exception_lineno = 6810;
                    type_description_2 = "o";
                    goto dict_build_exception_39;
                }
                tmp_res = PyDict_SetItem(tmp_kw_defaults_54, tmp_dict_key_54, tmp_dict_value_54);
                Py_DECREF(tmp_dict_value_54);
                assert(!(tmp_res != 0));
            }
            goto dict_build_noexception_39;
            // Exception handling pass through code for dict_build:
            dict_build_exception_39:;
            Py_DECREF(tmp_called_value_74);
            Py_DECREF(tmp_defaults_12);
            Py_DECREF(tmp_kw_defaults_54);
            goto frame_exception_exit_3;
            // Finished with no exception for dict_build:
            dict_build_noexception_39:;
            tmp_annotations_139 = PyDict_Copy(mod_consts[714]);


            tmp_args_element_value_149 = MAKE_FUNCTION_hikari$api$rest$$$function__135_create_application_command(tmp_defaults_12, tmp_kw_defaults_54, tmp_annotations_139);

            frame_862833cacd6e5ba73c351f8d132a7b6b_3->m_frame.f_lineno = 6801;
            tmp_dictset_value = CALL_FUNCTION_WITH_SINGLE_ARG(tmp_called_value_74, tmp_args_element_value_149);
            Py_DECREF(tmp_called_value_74);
            Py_DECREF(tmp_args_element_value_149);
            if (tmp_dictset_value == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 6801;
                type_description_2 = "o";
                goto frame_exception_exit_3;
            }
            tmp_res = PyObject_SetItem(locals_hikari$api$rest$$$class__2_RESTClient_110, mod_consts[354], tmp_dictset_value);
            Py_DECREF(tmp_dictset_value);
            if (tmp_res != 0) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 6802;
                type_description_2 = "o";
                goto frame_exception_exit_3;
            }
        }
        {
            PyObject *tmp_called_value_75;
            PyObject *tmp_expression_value_308;
            PyObject *tmp_args_element_value_150;
            PyObject *tmp_kw_defaults_55;
            PyObject *tmp_dict_key_55;
            PyObject *tmp_dict_value_55;
            PyObject *tmp_expression_value_309;
            PyObject *tmp_annotations_140;
            tmp_expression_value_308 = PyObject_GetItem(locals_hikari$api$rest$$$class__2_RESTClient_110, mod_consts[431]);

            if (tmp_expression_value_308 == NULL) {
                if (CHECK_AND_CLEAR_KEY_ERROR_OCCURRED()) {
                    tmp_expression_value_308 = GET_STRING_DICT_VALUE(moduledict_hikari$api$rest, (Nuitka_StringObject *)mod_consts[431]);

                    if (unlikely(tmp_expression_value_308 == NULL)) {
                        tmp_expression_value_308 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[431]);
                    }

                    if (tmp_expression_value_308 == NULL) {
                        assert(ERROR_OCCURRED());

                        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                        exception_lineno = 6872;
                        type_description_2 = "o";
                        goto frame_exception_exit_3;
                    }
                    Py_INCREF(tmp_expression_value_308);
                } else {
                    goto frame_exception_exit_3;
                }
            }

            tmp_called_value_75 = LOOKUP_ATTRIBUTE(tmp_expression_value_308, mod_consts[457]);
            Py_DECREF(tmp_expression_value_308);
            if (tmp_called_value_75 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 6872;
                type_description_2 = "o";
                goto frame_exception_exit_3;
            }
            tmp_dict_key_55 = mod_consts[715];
            tmp_expression_value_309 = PyObject_GetItem(locals_hikari$api$rest$$$class__2_RESTClient_110, mod_consts[440]);

            if (tmp_expression_value_309 == NULL) {
                if (CHECK_AND_CLEAR_KEY_ERROR_OCCURRED()) {
                    tmp_expression_value_309 = GET_STRING_DICT_VALUE(moduledict_hikari$api$rest, (Nuitka_StringObject *)mod_consts[440]);

                    if (unlikely(tmp_expression_value_309 == NULL)) {
                        tmp_expression_value_309 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[440]);
                    }

                    if (tmp_expression_value_309 == NULL) {
                        assert(ERROR_OCCURRED());

                        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
                        Py_DECREF(tmp_called_value_75);

                        exception_lineno = 6879;
                        type_description_2 = "o";
                        goto frame_exception_exit_3;
                    }
                    Py_INCREF(tmp_expression_value_309);
                } else {
                    goto frame_exception_exit_3;
                }
            }

            tmp_dict_value_55 = LOOKUP_ATTRIBUTE(tmp_expression_value_309, mod_consts[485]);
            Py_DECREF(tmp_expression_value_309);
            if (tmp_dict_value_55 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
                Py_DECREF(tmp_called_value_75);

                exception_lineno = 6879;
                type_description_2 = "o";
                goto frame_exception_exit_3;
            }
            tmp_kw_defaults_55 = _PyDict_NewPresized( 3 );
            {
                PyObject *tmp_expression_value_310;
                PyObject *tmp_expression_value_311;
                tmp_res = PyDict_SetItem(tmp_kw_defaults_55, tmp_dict_key_55, tmp_dict_value_55);
                Py_DECREF(tmp_dict_value_55);
                assert(!(tmp_res != 0));
                tmp_dict_key_55 = mod_consts[712];
                tmp_expression_value_310 = PyObject_GetItem(locals_hikari$api$rest$$$class__2_RESTClient_110, mod_consts[440]);

                if (tmp_expression_value_310 == NULL) {
                    if (CHECK_AND_CLEAR_KEY_ERROR_OCCURRED()) {
                        tmp_expression_value_310 = GET_STRING_DICT_VALUE(moduledict_hikari$api$rest, (Nuitka_StringObject *)mod_consts[440]);

                        if (unlikely(tmp_expression_value_310 == NULL)) {
                            tmp_expression_value_310 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[440]);
                        }

                        if (tmp_expression_value_310 == NULL) {
                            assert(ERROR_OCCURRED());

                            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                            exception_lineno = 6880;
                            type_description_2 = "o";
                            goto dict_build_exception_40;
                        }
                        Py_INCREF(tmp_expression_value_310);
                    } else {
                        goto dict_build_exception_40;
                    }
                }

                tmp_dict_value_55 = LOOKUP_ATTRIBUTE(tmp_expression_value_310, mod_consts[485]);
                Py_DECREF(tmp_expression_value_310);
                if (tmp_dict_value_55 == NULL) {
                    assert(ERROR_OCCURRED());

                    FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                    exception_lineno = 6880;
                    type_description_2 = "o";
                    goto dict_build_exception_40;
                }
                tmp_res = PyDict_SetItem(tmp_kw_defaults_55, tmp_dict_key_55, tmp_dict_value_55);
                Py_DECREF(tmp_dict_value_55);
                assert(!(tmp_res != 0));
                tmp_dict_key_55 = mod_consts[713];
                tmp_expression_value_311 = PyObject_GetItem(locals_hikari$api$rest$$$class__2_RESTClient_110, mod_consts[440]);

                if (tmp_expression_value_311 == NULL) {
                    if (CHECK_AND_CLEAR_KEY_ERROR_OCCURRED()) {
                        tmp_expression_value_311 = GET_STRING_DICT_VALUE(moduledict_hikari$api$rest, (Nuitka_StringObject *)mod_consts[440]);

                        if (unlikely(tmp_expression_value_311 == NULL)) {
                            tmp_expression_value_311 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[440]);
                        }

                        if (tmp_expression_value_311 == NULL) {
                            assert(ERROR_OCCURRED());

                            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                            exception_lineno = 6881;
                            type_description_2 = "o";
                            goto dict_build_exception_40;
                        }
                        Py_INCREF(tmp_expression_value_311);
                    } else {
                        goto dict_build_exception_40;
                    }
                }

                tmp_dict_value_55 = LOOKUP_ATTRIBUTE(tmp_expression_value_311, mod_consts[485]);
                Py_DECREF(tmp_expression_value_311);
                if (tmp_dict_value_55 == NULL) {
                    assert(ERROR_OCCURRED());

                    FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                    exception_lineno = 6881;
                    type_description_2 = "o";
                    goto dict_build_exception_40;
                }
                tmp_res = PyDict_SetItem(tmp_kw_defaults_55, tmp_dict_key_55, tmp_dict_value_55);
                Py_DECREF(tmp_dict_value_55);
                assert(!(tmp_res != 0));
            }
            goto dict_build_noexception_40;
            // Exception handling pass through code for dict_build:
            dict_build_exception_40:;
            Py_DECREF(tmp_called_value_75);
            Py_DECREF(tmp_kw_defaults_55);
            goto frame_exception_exit_3;
            // Finished with no exception for dict_build:
            dict_build_noexception_40:;
            tmp_annotations_140 = PyDict_Copy(mod_consts[714]);


            tmp_args_element_value_150 = MAKE_FUNCTION_hikari$api$rest$$$function__136_create_slash_command(tmp_kw_defaults_55, tmp_annotations_140);

            frame_862833cacd6e5ba73c351f8d132a7b6b_3->m_frame.f_lineno = 6872;
            tmp_dictset_value = CALL_FUNCTION_WITH_SINGLE_ARG(tmp_called_value_75, tmp_args_element_value_150);
            Py_DECREF(tmp_called_value_75);
            Py_DECREF(tmp_args_element_value_150);
            if (tmp_dictset_value == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 6872;
                type_description_2 = "o";
                goto frame_exception_exit_3;
            }
            tmp_res = PyObject_SetItem(locals_hikari$api$rest$$$class__2_RESTClient_110, mod_consts[357], tmp_dictset_value);
            Py_DECREF(tmp_dictset_value);
            if (tmp_res != 0) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 6873;
                type_description_2 = "o";
                goto frame_exception_exit_3;
            }
        }
        {
            PyObject *tmp_called_value_76;
            PyObject *tmp_expression_value_312;
            PyObject *tmp_args_element_value_151;
            PyObject *tmp_kw_defaults_56;
            PyObject *tmp_dict_key_56;
            PyObject *tmp_dict_value_56;
            PyObject *tmp_expression_value_313;
            PyObject *tmp_annotations_141;
            tmp_expression_value_312 = PyObject_GetItem(locals_hikari$api$rest$$$class__2_RESTClient_110, mod_consts[431]);

            if (tmp_expression_value_312 == NULL) {
                if (CHECK_AND_CLEAR_KEY_ERROR_OCCURRED()) {
                    tmp_expression_value_312 = GET_STRING_DICT_VALUE(moduledict_hikari$api$rest, (Nuitka_StringObject *)mod_consts[431]);

                    if (unlikely(tmp_expression_value_312 == NULL)) {
                        tmp_expression_value_312 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[431]);
                    }

                    if (tmp_expression_value_312 == NULL) {
                        assert(ERROR_OCCURRED());

                        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                        exception_lineno = 6940;
                        type_description_2 = "o";
                        goto frame_exception_exit_3;
                    }
                    Py_INCREF(tmp_expression_value_312);
                } else {
                    goto frame_exception_exit_3;
                }
            }

            tmp_called_value_76 = LOOKUP_ATTRIBUTE(tmp_expression_value_312, mod_consts[457]);
            Py_DECREF(tmp_expression_value_312);
            if (tmp_called_value_76 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 6940;
                type_description_2 = "o";
                goto frame_exception_exit_3;
            }
            tmp_dict_key_56 = mod_consts[715];
            tmp_expression_value_313 = PyObject_GetItem(locals_hikari$api$rest$$$class__2_RESTClient_110, mod_consts[440]);

            if (tmp_expression_value_313 == NULL) {
                if (CHECK_AND_CLEAR_KEY_ERROR_OCCURRED()) {
                    tmp_expression_value_313 = GET_STRING_DICT_VALUE(moduledict_hikari$api$rest, (Nuitka_StringObject *)mod_consts[440]);

                    if (unlikely(tmp_expression_value_313 == NULL)) {
                        tmp_expression_value_313 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[440]);
                    }

                    if (tmp_expression_value_313 == NULL) {
                        assert(ERROR_OCCURRED());

                        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
                        Py_DECREF(tmp_called_value_76);

                        exception_lineno = 6947;
                        type_description_2 = "o";
                        goto frame_exception_exit_3;
                    }
                    Py_INCREF(tmp_expression_value_313);
                } else {
                    goto frame_exception_exit_3;
                }
            }

            tmp_dict_value_56 = LOOKUP_ATTRIBUTE(tmp_expression_value_313, mod_consts[485]);
            Py_DECREF(tmp_expression_value_313);
            if (tmp_dict_value_56 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
                Py_DECREF(tmp_called_value_76);

                exception_lineno = 6947;
                type_description_2 = "o";
                goto frame_exception_exit_3;
            }
            tmp_kw_defaults_56 = _PyDict_NewPresized( 2 );
            {
                PyObject *tmp_expression_value_314;
                tmp_res = PyDict_SetItem(tmp_kw_defaults_56, tmp_dict_key_56, tmp_dict_value_56);
                Py_DECREF(tmp_dict_value_56);
                assert(!(tmp_res != 0));
                tmp_dict_key_56 = mod_consts[713];
                tmp_expression_value_314 = PyObject_GetItem(locals_hikari$api$rest$$$class__2_RESTClient_110, mod_consts[440]);

                if (tmp_expression_value_314 == NULL) {
                    if (CHECK_AND_CLEAR_KEY_ERROR_OCCURRED()) {
                        tmp_expression_value_314 = GET_STRING_DICT_VALUE(moduledict_hikari$api$rest, (Nuitka_StringObject *)mod_consts[440]);

                        if (unlikely(tmp_expression_value_314 == NULL)) {
                            tmp_expression_value_314 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[440]);
                        }

                        if (tmp_expression_value_314 == NULL) {
                            assert(ERROR_OCCURRED());

                            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                            exception_lineno = 6948;
                            type_description_2 = "o";
                            goto dict_build_exception_41;
                        }
                        Py_INCREF(tmp_expression_value_314);
                    } else {
                        goto dict_build_exception_41;
                    }
                }

                tmp_dict_value_56 = LOOKUP_ATTRIBUTE(tmp_expression_value_314, mod_consts[485]);
                Py_DECREF(tmp_expression_value_314);
                if (tmp_dict_value_56 == NULL) {
                    assert(ERROR_OCCURRED());

                    FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                    exception_lineno = 6948;
                    type_description_2 = "o";
                    goto dict_build_exception_41;
                }
                tmp_res = PyDict_SetItem(tmp_kw_defaults_56, tmp_dict_key_56, tmp_dict_value_56);
                Py_DECREF(tmp_dict_value_56);
                assert(!(tmp_res != 0));
            }
            goto dict_build_noexception_41;
            // Exception handling pass through code for dict_build:
            dict_build_exception_41:;
            Py_DECREF(tmp_called_value_76);
            Py_DECREF(tmp_kw_defaults_56);
            goto frame_exception_exit_3;
            // Finished with no exception for dict_build:
            dict_build_noexception_41:;
            tmp_annotations_141 = PyDict_Copy(mod_consts[716]);


            tmp_args_element_value_151 = MAKE_FUNCTION_hikari$api$rest$$$function__137_create_context_menu_command(tmp_kw_defaults_56, tmp_annotations_141);

            frame_862833cacd6e5ba73c351f8d132a7b6b_3->m_frame.f_lineno = 6940;
            tmp_dictset_value = CALL_FUNCTION_WITH_SINGLE_ARG(tmp_called_value_76, tmp_args_element_value_151);
            Py_DECREF(tmp_called_value_76);
            Py_DECREF(tmp_args_element_value_151);
            if (tmp_dictset_value == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 6940;
                type_description_2 = "o";
                goto frame_exception_exit_3;
            }
            tmp_res = PyObject_SetItem(locals_hikari$api$rest$$$class__2_RESTClient_110, mod_consts[360], tmp_dictset_value);
            Py_DECREF(tmp_dictset_value);
            if (tmp_res != 0) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 6941;
                type_description_2 = "o";
                goto frame_exception_exit_3;
            }
        }
        {
            PyObject *tmp_called_value_77;
            PyObject *tmp_expression_value_315;
            PyObject *tmp_args_element_value_152;
            PyObject *tmp_defaults_13;
            PyObject *tmp_tuple_element_20;
            PyObject *tmp_expression_value_316;
            PyObject *tmp_annotations_142;
            tmp_expression_value_315 = PyObject_GetItem(locals_hikari$api$rest$$$class__2_RESTClient_110, mod_consts[431]);

            if (tmp_expression_value_315 == NULL) {
                if (CHECK_AND_CLEAR_KEY_ERROR_OCCURRED()) {
                    tmp_expression_value_315 = GET_STRING_DICT_VALUE(moduledict_hikari$api$rest, (Nuitka_StringObject *)mod_consts[431]);

                    if (unlikely(tmp_expression_value_315 == NULL)) {
                        tmp_expression_value_315 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[431]);
                    }

                    if (tmp_expression_value_315 == NULL) {
                        assert(ERROR_OCCURRED());

                        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                        exception_lineno = 7002;
                        type_description_2 = "o";
                        goto frame_exception_exit_3;
                    }
                    Py_INCREF(tmp_expression_value_315);
                } else {
                    goto frame_exception_exit_3;
                }
            }

            tmp_called_value_77 = LOOKUP_ATTRIBUTE(tmp_expression_value_315, mod_consts[457]);
            Py_DECREF(tmp_expression_value_315);
            if (tmp_called_value_77 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 7002;
                type_description_2 = "o";
                goto frame_exception_exit_3;
            }
            tmp_expression_value_316 = PyObject_GetItem(locals_hikari$api$rest$$$class__2_RESTClient_110, mod_consts[440]);

            if (tmp_expression_value_316 == NULL) {
                if (CHECK_AND_CLEAR_KEY_ERROR_OCCURRED()) {
                    tmp_expression_value_316 = GET_STRING_DICT_VALUE(moduledict_hikari$api$rest, (Nuitka_StringObject *)mod_consts[440]);

                    if (unlikely(tmp_expression_value_316 == NULL)) {
                        tmp_expression_value_316 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[440]);
                    }

                    if (tmp_expression_value_316 == NULL) {
                        assert(ERROR_OCCURRED());

                        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
                        Py_DECREF(tmp_called_value_77);

                        exception_lineno = 7007;
                        type_description_2 = "o";
                        goto frame_exception_exit_3;
                    }
                    Py_INCREF(tmp_expression_value_316);
                } else {
                    goto frame_exception_exit_3;
                }
            }

            tmp_tuple_element_20 = LOOKUP_ATTRIBUTE(tmp_expression_value_316, mod_consts[485]);
            Py_DECREF(tmp_expression_value_316);
            if (tmp_tuple_element_20 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
                Py_DECREF(tmp_called_value_77);

                exception_lineno = 7007;
                type_description_2 = "o";
                goto frame_exception_exit_3;
            }
            tmp_defaults_13 = PyTuple_New(1);
            PyTuple_SET_ITEM(tmp_defaults_13, 0, tmp_tuple_element_20);
            tmp_annotations_142 = PyDict_Copy(mod_consts[717]);


            tmp_args_element_value_152 = MAKE_FUNCTION_hikari$api$rest$$$function__138_set_application_commands(tmp_defaults_13, tmp_annotations_142);

            frame_862833cacd6e5ba73c351f8d132a7b6b_3->m_frame.f_lineno = 7002;
            tmp_dictset_value = CALL_FUNCTION_WITH_SINGLE_ARG(tmp_called_value_77, tmp_args_element_value_152);
            Py_DECREF(tmp_called_value_77);
            Py_DECREF(tmp_args_element_value_152);
            if (tmp_dictset_value == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 7002;
                type_description_2 = "o";
                goto frame_exception_exit_3;
            }
            tmp_res = PyObject_SetItem(locals_hikari$api$rest$$$class__2_RESTClient_110, mod_consts[363], tmp_dictset_value);
            Py_DECREF(tmp_dictset_value);
            if (tmp_res != 0) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 7003;
                type_description_2 = "o";
                goto frame_exception_exit_3;
            }
        }
        {
            PyObject *tmp_called_value_78;
            PyObject *tmp_expression_value_317;
            PyObject *tmp_args_element_value_153;
            PyObject *tmp_defaults_14;
            PyObject *tmp_tuple_element_21;
            PyObject *tmp_expression_value_318;
            PyObject *tmp_kw_defaults_57;
            PyObject *tmp_dict_key_57;
            PyObject *tmp_dict_value_57;
            PyObject *tmp_expression_value_319;
            PyObject *tmp_annotations_143;
            tmp_expression_value_317 = PyObject_GetItem(locals_hikari$api$rest$$$class__2_RESTClient_110, mod_consts[431]);

            if (tmp_expression_value_317 == NULL) {
                if (CHECK_AND_CLEAR_KEY_ERROR_OCCURRED()) {
                    tmp_expression_value_317 = GET_STRING_DICT_VALUE(moduledict_hikari$api$rest, (Nuitka_StringObject *)mod_consts[431]);

                    if (unlikely(tmp_expression_value_317 == NULL)) {
                        tmp_expression_value_317 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[431]);
                    }

                    if (tmp_expression_value_317 == NULL) {
                        assert(ERROR_OCCURRED());

                        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                        exception_lineno = 7060;
                        type_description_2 = "o";
                        goto frame_exception_exit_3;
                    }
                    Py_INCREF(tmp_expression_value_317);
                } else {
                    goto frame_exception_exit_3;
                }
            }

            tmp_called_value_78 = LOOKUP_ATTRIBUTE(tmp_expression_value_317, mod_consts[457]);
            Py_DECREF(tmp_expression_value_317);
            if (tmp_called_value_78 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 7060;
                type_description_2 = "o";
                goto frame_exception_exit_3;
            }
            tmp_expression_value_318 = PyObject_GetItem(locals_hikari$api$rest$$$class__2_RESTClient_110, mod_consts[440]);

            if (tmp_expression_value_318 == NULL) {
                if (CHECK_AND_CLEAR_KEY_ERROR_OCCURRED()) {
                    tmp_expression_value_318 = GET_STRING_DICT_VALUE(moduledict_hikari$api$rest, (Nuitka_StringObject *)mod_consts[440]);

                    if (unlikely(tmp_expression_value_318 == NULL)) {
                        tmp_expression_value_318 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[440]);
                    }

                    if (tmp_expression_value_318 == NULL) {
                        assert(ERROR_OCCURRED());

                        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
                        Py_DECREF(tmp_called_value_78);

                        exception_lineno = 7065;
                        type_description_2 = "o";
                        goto frame_exception_exit_3;
                    }
                    Py_INCREF(tmp_expression_value_318);
                } else {
                    goto frame_exception_exit_3;
                }
            }

            tmp_tuple_element_21 = LOOKUP_ATTRIBUTE(tmp_expression_value_318, mod_consts[485]);
            Py_DECREF(tmp_expression_value_318);
            if (tmp_tuple_element_21 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
                Py_DECREF(tmp_called_value_78);

                exception_lineno = 7065;
                type_description_2 = "o";
                goto frame_exception_exit_3;
            }
            tmp_defaults_14 = PyTuple_New(1);
            PyTuple_SET_ITEM(tmp_defaults_14, 0, tmp_tuple_element_21);
            tmp_dict_key_57 = mod_consts[484];
            tmp_expression_value_319 = PyObject_GetItem(locals_hikari$api$rest$$$class__2_RESTClient_110, mod_consts[440]);

            if (tmp_expression_value_319 == NULL) {
                if (CHECK_AND_CLEAR_KEY_ERROR_OCCURRED()) {
                    tmp_expression_value_319 = GET_STRING_DICT_VALUE(moduledict_hikari$api$rest, (Nuitka_StringObject *)mod_consts[440]);

                    if (unlikely(tmp_expression_value_319 == NULL)) {
                        tmp_expression_value_319 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[440]);
                    }

                    if (tmp_expression_value_319 == NULL) {
                        assert(ERROR_OCCURRED());

                        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
                        Py_DECREF(tmp_called_value_78);
                        Py_DECREF(tmp_defaults_14);

                        exception_lineno = 7067;
                        type_description_2 = "o";
                        goto frame_exception_exit_3;
                    }
                    Py_INCREF(tmp_expression_value_319);
                } else {
                    goto frame_exception_exit_3;
                }
            }

            tmp_dict_value_57 = LOOKUP_ATTRIBUTE(tmp_expression_value_319, mod_consts[485]);
            Py_DECREF(tmp_expression_value_319);
            if (tmp_dict_value_57 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
                Py_DECREF(tmp_called_value_78);
                Py_DECREF(tmp_defaults_14);

                exception_lineno = 7067;
                type_description_2 = "o";
                goto frame_exception_exit_3;
            }
            tmp_kw_defaults_57 = _PyDict_NewPresized( 3 );
            {
                PyObject *tmp_expression_value_320;
                PyObject *tmp_expression_value_321;
                tmp_res = PyDict_SetItem(tmp_kw_defaults_57, tmp_dict_key_57, tmp_dict_value_57);
                Py_DECREF(tmp_dict_value_57);
                assert(!(tmp_res != 0));
                tmp_dict_key_57 = mod_consts[616];
                tmp_expression_value_320 = PyObject_GetItem(locals_hikari$api$rest$$$class__2_RESTClient_110, mod_consts[440]);

                if (tmp_expression_value_320 == NULL) {
                    if (CHECK_AND_CLEAR_KEY_ERROR_OCCURRED()) {
                        tmp_expression_value_320 = GET_STRING_DICT_VALUE(moduledict_hikari$api$rest, (Nuitka_StringObject *)mod_consts[440]);

                        if (unlikely(tmp_expression_value_320 == NULL)) {
                            tmp_expression_value_320 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[440]);
                        }

                        if (tmp_expression_value_320 == NULL) {
                            assert(ERROR_OCCURRED());

                            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                            exception_lineno = 7068;
                            type_description_2 = "o";
                            goto dict_build_exception_42;
                        }
                        Py_INCREF(tmp_expression_value_320);
                    } else {
                        goto dict_build_exception_42;
                    }
                }

                tmp_dict_value_57 = LOOKUP_ATTRIBUTE(tmp_expression_value_320, mod_consts[485]);
                Py_DECREF(tmp_expression_value_320);
                if (tmp_dict_value_57 == NULL) {
                    assert(ERROR_OCCURRED());

                    FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                    exception_lineno = 7068;
                    type_description_2 = "o";
                    goto dict_build_exception_42;
                }
                tmp_res = PyDict_SetItem(tmp_kw_defaults_57, tmp_dict_key_57, tmp_dict_value_57);
                Py_DECREF(tmp_dict_value_57);
                assert(!(tmp_res != 0));
                tmp_dict_key_57 = mod_consts[712];
                tmp_expression_value_321 = PyObject_GetItem(locals_hikari$api$rest$$$class__2_RESTClient_110, mod_consts[440]);

                if (tmp_expression_value_321 == NULL) {
                    if (CHECK_AND_CLEAR_KEY_ERROR_OCCURRED()) {
                        tmp_expression_value_321 = GET_STRING_DICT_VALUE(moduledict_hikari$api$rest, (Nuitka_StringObject *)mod_consts[440]);

                        if (unlikely(tmp_expression_value_321 == NULL)) {
                            tmp_expression_value_321 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[440]);
                        }

                        if (tmp_expression_value_321 == NULL) {
                            assert(ERROR_OCCURRED());

                            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                            exception_lineno = 7069;
                            type_description_2 = "o";
                            goto dict_build_exception_42;
                        }
                        Py_INCREF(tmp_expression_value_321);
                    } else {
                        goto dict_build_exception_42;
                    }
                }

                tmp_dict_value_57 = LOOKUP_ATTRIBUTE(tmp_expression_value_321, mod_consts[485]);
                Py_DECREF(tmp_expression_value_321);
                if (tmp_dict_value_57 == NULL) {
                    assert(ERROR_OCCURRED());

                    FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                    exception_lineno = 7069;
                    type_description_2 = "o";
                    goto dict_build_exception_42;
                }
                tmp_res = PyDict_SetItem(tmp_kw_defaults_57, tmp_dict_key_57, tmp_dict_value_57);
                Py_DECREF(tmp_dict_value_57);
                assert(!(tmp_res != 0));
            }
            goto dict_build_noexception_42;
            // Exception handling pass through code for dict_build:
            dict_build_exception_42:;
            Py_DECREF(tmp_called_value_78);
            Py_DECREF(tmp_defaults_14);
            Py_DECREF(tmp_kw_defaults_57);
            goto frame_exception_exit_3;
            // Finished with no exception for dict_build:
            dict_build_noexception_42:;
            tmp_annotations_143 = PyDict_Copy(mod_consts[718]);


            tmp_args_element_value_153 = MAKE_FUNCTION_hikari$api$rest$$$function__139_edit_application_command(tmp_defaults_14, tmp_kw_defaults_57, tmp_annotations_143);

            frame_862833cacd6e5ba73c351f8d132a7b6b_3->m_frame.f_lineno = 7060;
            tmp_dictset_value = CALL_FUNCTION_WITH_SINGLE_ARG(tmp_called_value_78, tmp_args_element_value_153);
            Py_DECREF(tmp_called_value_78);
            Py_DECREF(tmp_args_element_value_153);
            if (tmp_dictset_value == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 7060;
                type_description_2 = "o";
                goto frame_exception_exit_3;
            }
            tmp_res = PyObject_SetItem(locals_hikari$api$rest$$$class__2_RESTClient_110, mod_consts[366], tmp_dictset_value);
            Py_DECREF(tmp_dictset_value);
            if (tmp_res != 0) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 7061;
                type_description_2 = "o";
                goto frame_exception_exit_3;
            }
        }
        {
            PyObject *tmp_called_value_79;
            PyObject *tmp_expression_value_322;
            PyObject *tmp_args_element_value_154;
            PyObject *tmp_defaults_15;
            PyObject *tmp_tuple_element_22;
            PyObject *tmp_expression_value_323;
            PyObject *tmp_annotations_144;
            tmp_expression_value_322 = PyObject_GetItem(locals_hikari$api$rest$$$class__2_RESTClient_110, mod_consts[431]);

            if (tmp_expression_value_322 == NULL) {
                if (CHECK_AND_CLEAR_KEY_ERROR_OCCURRED()) {
                    tmp_expression_value_322 = GET_STRING_DICT_VALUE(moduledict_hikari$api$rest, (Nuitka_StringObject *)mod_consts[431]);

                    if (unlikely(tmp_expression_value_322 == NULL)) {
                        tmp_expression_value_322 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[431]);
                    }

                    if (tmp_expression_value_322 == NULL) {
                        assert(ERROR_OCCURRED());

                        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                        exception_lineno = 7126;
                        type_description_2 = "o";
                        goto frame_exception_exit_3;
                    }
                    Py_INCREF(tmp_expression_value_322);
                } else {
                    goto frame_exception_exit_3;
                }
            }

            tmp_called_value_79 = LOOKUP_ATTRIBUTE(tmp_expression_value_322, mod_consts[457]);
            Py_DECREF(tmp_expression_value_322);
            if (tmp_called_value_79 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 7126;
                type_description_2 = "o";
                goto frame_exception_exit_3;
            }
            tmp_expression_value_323 = PyObject_GetItem(locals_hikari$api$rest$$$class__2_RESTClient_110, mod_consts[440]);

            if (tmp_expression_value_323 == NULL) {
                if (CHECK_AND_CLEAR_KEY_ERROR_OCCURRED()) {
                    tmp_expression_value_323 = GET_STRING_DICT_VALUE(moduledict_hikari$api$rest, (Nuitka_StringObject *)mod_consts[440]);

                    if (unlikely(tmp_expression_value_323 == NULL)) {
                        tmp_expression_value_323 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[440]);
                    }

                    if (tmp_expression_value_323 == NULL) {
                        assert(ERROR_OCCURRED());

                        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
                        Py_DECREF(tmp_called_value_79);

                        exception_lineno = 7131;
                        type_description_2 = "o";
                        goto frame_exception_exit_3;
                    }
                    Py_INCREF(tmp_expression_value_323);
                } else {
                    goto frame_exception_exit_3;
                }
            }

            tmp_tuple_element_22 = LOOKUP_ATTRIBUTE(tmp_expression_value_323, mod_consts[485]);
            Py_DECREF(tmp_expression_value_323);
            if (tmp_tuple_element_22 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
                Py_DECREF(tmp_called_value_79);

                exception_lineno = 7131;
                type_description_2 = "o";
                goto frame_exception_exit_3;
            }
            tmp_defaults_15 = PyTuple_New(1);
            PyTuple_SET_ITEM(tmp_defaults_15, 0, tmp_tuple_element_22);
            tmp_annotations_144 = PyDict_Copy(mod_consts[719]);


            tmp_args_element_value_154 = MAKE_FUNCTION_hikari$api$rest$$$function__140_delete_application_command(tmp_defaults_15, tmp_annotations_144);

            frame_862833cacd6e5ba73c351f8d132a7b6b_3->m_frame.f_lineno = 7126;
            tmp_dictset_value = CALL_FUNCTION_WITH_SINGLE_ARG(tmp_called_value_79, tmp_args_element_value_154);
            Py_DECREF(tmp_called_value_79);
            Py_DECREF(tmp_args_element_value_154);
            if (tmp_dictset_value == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 7126;
                type_description_2 = "o";
                goto frame_exception_exit_3;
            }
            tmp_res = PyObject_SetItem(locals_hikari$api$rest$$$class__2_RESTClient_110, mod_consts[369], tmp_dictset_value);
            Py_DECREF(tmp_dictset_value);
            if (tmp_res != 0) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 7127;
                type_description_2 = "o";
                goto frame_exception_exit_3;
            }
        }
        {
            PyObject *tmp_called_instance_79;
            PyObject *tmp_args_element_value_155;
            PyObject *tmp_annotations_145;
            tmp_called_instance_79 = PyObject_GetItem(locals_hikari$api$rest$$$class__2_RESTClient_110, mod_consts[431]);

            if (tmp_called_instance_79 == NULL) {
                if (CHECK_AND_CLEAR_KEY_ERROR_OCCURRED()) {
                    tmp_called_instance_79 = GET_STRING_DICT_VALUE(moduledict_hikari$api$rest, (Nuitka_StringObject *)mod_consts[431]);

                    if (unlikely(tmp_called_instance_79 == NULL)) {
                        tmp_called_instance_79 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[431]);
                    }

                    if (tmp_called_instance_79 == NULL) {
                        assert(ERROR_OCCURRED());

                        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                        exception_lineno = 7172;
                        type_description_2 = "o";
                        goto frame_exception_exit_3;
                    }
                    Py_INCREF(tmp_called_instance_79);
                } else {
                    goto frame_exception_exit_3;
                }
            }

            tmp_annotations_145 = PyDict_Copy(mod_consts[720]);


            tmp_args_element_value_155 = MAKE_FUNCTION_hikari$api$rest$$$function__141_fetch_application_guild_commands_permissions(tmp_annotations_145);

            frame_862833cacd6e5ba73c351f8d132a7b6b_3->m_frame.f_lineno = 7172;
            tmp_dictset_value = CALL_METHOD_WITH_SINGLE_ARG(tmp_called_instance_79, mod_consts[457], tmp_args_element_value_155);
            Py_DECREF(tmp_called_instance_79);
            Py_DECREF(tmp_args_element_value_155);
            if (tmp_dictset_value == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 7172;
                type_description_2 = "o";
                goto frame_exception_exit_3;
            }
            tmp_res = PyObject_SetItem(locals_hikari$api$rest$$$class__2_RESTClient_110, mod_consts[372], tmp_dictset_value);
            Py_DECREF(tmp_dictset_value);
            if (tmp_res != 0) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 7173;
                type_description_2 = "o";
                goto frame_exception_exit_3;
            }
        }
        {
            PyObject *tmp_called_instance_80;
            PyObject *tmp_args_element_value_156;
            PyObject *tmp_annotations_146;
            tmp_called_instance_80 = PyObject_GetItem(locals_hikari$api$rest$$$class__2_RESTClient_110, mod_consts[431]);

            if (tmp_called_instance_80 == NULL) {
                if (CHECK_AND_CLEAR_KEY_ERROR_OCCURRED()) {
                    tmp_called_instance_80 = GET_STRING_DICT_VALUE(moduledict_hikari$api$rest, (Nuitka_StringObject *)mod_consts[431]);

                    if (unlikely(tmp_called_instance_80 == NULL)) {
                        tmp_called_instance_80 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[431]);
                    }

                    if (tmp_called_instance_80 == NULL) {
                        assert(ERROR_OCCURRED());

                        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                        exception_lineno = 7215;
                        type_description_2 = "o";
                        goto frame_exception_exit_3;
                    }
                    Py_INCREF(tmp_called_instance_80);
                } else {
                    goto frame_exception_exit_3;
                }
            }

            tmp_annotations_146 = PyDict_Copy(mod_consts[721]);


            tmp_args_element_value_156 = MAKE_FUNCTION_hikari$api$rest$$$function__142_fetch_application_command_permissions(tmp_annotations_146);

            frame_862833cacd6e5ba73c351f8d132a7b6b_3->m_frame.f_lineno = 7215;
            tmp_dictset_value = CALL_METHOD_WITH_SINGLE_ARG(tmp_called_instance_80, mod_consts[457], tmp_args_element_value_156);
            Py_DECREF(tmp_called_instance_80);
            Py_DECREF(tmp_args_element_value_156);
            if (tmp_dictset_value == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 7215;
                type_description_2 = "o";
                goto frame_exception_exit_3;
            }
            tmp_res = PyObject_SetItem(locals_hikari$api$rest$$$class__2_RESTClient_110, mod_consts[375], tmp_dictset_value);
            Py_DECREF(tmp_dictset_value);
            if (tmp_res != 0) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 7216;
                type_description_2 = "o";
                goto frame_exception_exit_3;
            }
        }
        {
            PyObject *tmp_called_instance_81;
            PyObject *tmp_args_element_value_157;
            PyObject *tmp_annotations_147;
            tmp_called_instance_81 = PyObject_GetItem(locals_hikari$api$rest$$$class__2_RESTClient_110, mod_consts[431]);

            if (tmp_called_instance_81 == NULL) {
                if (CHECK_AND_CLEAR_KEY_ERROR_OCCURRED()) {
                    tmp_called_instance_81 = GET_STRING_DICT_VALUE(moduledict_hikari$api$rest, (Nuitka_StringObject *)mod_consts[431]);

                    if (unlikely(tmp_called_instance_81 == NULL)) {
                        tmp_called_instance_81 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[431]);
                    }

                    if (tmp_called_instance_81 == NULL) {
                        assert(ERROR_OCCURRED());

                        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                        exception_lineno = 7261;
                        type_description_2 = "o";
                        goto frame_exception_exit_3;
                    }
                    Py_INCREF(tmp_called_instance_81);
                } else {
                    goto frame_exception_exit_3;
                }
            }

            tmp_annotations_147 = PyDict_Copy(mod_consts[722]);


            tmp_args_element_value_157 = MAKE_FUNCTION_hikari$api$rest$$$function__143_set_application_guild_commands_permissions(tmp_annotations_147);

            frame_862833cacd6e5ba73c351f8d132a7b6b_3->m_frame.f_lineno = 7261;
            tmp_dictset_value = CALL_METHOD_WITH_SINGLE_ARG(tmp_called_instance_81, mod_consts[457], tmp_args_element_value_157);
            Py_DECREF(tmp_called_instance_81);
            Py_DECREF(tmp_args_element_value_157);
            if (tmp_dictset_value == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 7261;
                type_description_2 = "o";
                goto frame_exception_exit_3;
            }
            tmp_res = PyObject_SetItem(locals_hikari$api$rest$$$class__2_RESTClient_110, mod_consts[378], tmp_dictset_value);
            Py_DECREF(tmp_dictset_value);
            if (tmp_res != 0) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 7262;
                type_description_2 = "o";
                goto frame_exception_exit_3;
            }
        }
        {
            PyObject *tmp_called_instance_82;
            PyObject *tmp_args_element_value_158;
            PyObject *tmp_annotations_148;
            tmp_called_instance_82 = PyObject_GetItem(locals_hikari$api$rest$$$class__2_RESTClient_110, mod_consts[431]);

            if (tmp_called_instance_82 == NULL) {
                if (CHECK_AND_CLEAR_KEY_ERROR_OCCURRED()) {
                    tmp_called_instance_82 = GET_STRING_DICT_VALUE(moduledict_hikari$api$rest, (Nuitka_StringObject *)mod_consts[431]);

                    if (unlikely(tmp_called_instance_82 == NULL)) {
                        tmp_called_instance_82 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[431]);
                    }

                    if (tmp_called_instance_82 == NULL) {
                        assert(ERROR_OCCURRED());

                        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                        exception_lineno = 7317;
                        type_description_2 = "o";
                        goto frame_exception_exit_3;
                    }
                    Py_INCREF(tmp_called_instance_82);
                } else {
                    goto frame_exception_exit_3;
                }
            }

            tmp_annotations_148 = PyDict_Copy(mod_consts[723]);


            tmp_args_element_value_158 = MAKE_FUNCTION_hikari$api$rest$$$function__144_set_application_command_permissions(tmp_annotations_148);

            frame_862833cacd6e5ba73c351f8d132a7b6b_3->m_frame.f_lineno = 7317;
            tmp_dictset_value = CALL_METHOD_WITH_SINGLE_ARG(tmp_called_instance_82, mod_consts[457], tmp_args_element_value_158);
            Py_DECREF(tmp_called_instance_82);
            Py_DECREF(tmp_args_element_value_158);
            if (tmp_dictset_value == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 7317;
                type_description_2 = "o";
                goto frame_exception_exit_3;
            }
            tmp_res = PyObject_SetItem(locals_hikari$api$rest$$$class__2_RESTClient_110, mod_consts[381], tmp_dictset_value);
            Py_DECREF(tmp_dictset_value);
            if (tmp_res != 0) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 7318;
                type_description_2 = "o";
                goto frame_exception_exit_3;
            }
        }
        {
            PyObject *tmp_called_instance_83;
            PyObject *tmp_args_element_value_159;
            PyObject *tmp_annotations_149;
            tmp_called_instance_83 = PyObject_GetItem(locals_hikari$api$rest$$$class__2_RESTClient_110, mod_consts[431]);

            if (tmp_called_instance_83 == NULL) {
                if (CHECK_AND_CLEAR_KEY_ERROR_OCCURRED()) {
                    tmp_called_instance_83 = GET_STRING_DICT_VALUE(moduledict_hikari$api$rest, (Nuitka_StringObject *)mod_consts[431]);

                    if (unlikely(tmp_called_instance_83 == NULL)) {
                        tmp_called_instance_83 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[431]);
                    }

                    if (tmp_called_instance_83 == NULL) {
                        assert(ERROR_OCCURRED());

                        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                        exception_lineno = 7369;
                        type_description_2 = "o";
                        goto frame_exception_exit_3;
                    }
                    Py_INCREF(tmp_called_instance_83);
                } else {
                    goto frame_exception_exit_3;
                }
            }

            tmp_annotations_149 = PyDict_Copy(mod_consts[724]);


            tmp_args_element_value_159 = MAKE_FUNCTION_hikari$api$rest$$$function__145_interaction_deferred_builder(tmp_annotations_149);

            frame_862833cacd6e5ba73c351f8d132a7b6b_3->m_frame.f_lineno = 7369;
            tmp_dictset_value = CALL_METHOD_WITH_SINGLE_ARG(tmp_called_instance_83, mod_consts[457], tmp_args_element_value_159);
            Py_DECREF(tmp_called_instance_83);
            Py_DECREF(tmp_args_element_value_159);
            if (tmp_dictset_value == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 7369;
                type_description_2 = "o";
                goto frame_exception_exit_3;
            }
            tmp_res = PyObject_SetItem(locals_hikari$api$rest$$$class__2_RESTClient_110, mod_consts[726], tmp_dictset_value);
            Py_DECREF(tmp_dictset_value);
            if (tmp_res != 0) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 7370;
                type_description_2 = "o";
                goto frame_exception_exit_3;
            }
        }
        {
            PyObject *tmp_called_instance_84;
            PyObject *tmp_args_element_value_160;
            PyObject *tmp_annotations_150;
            tmp_called_instance_84 = PyObject_GetItem(locals_hikari$api$rest$$$class__2_RESTClient_110, mod_consts[431]);

            if (tmp_called_instance_84 == NULL) {
                if (CHECK_AND_CLEAR_KEY_ERROR_OCCURRED()) {
                    tmp_called_instance_84 = GET_STRING_DICT_VALUE(moduledict_hikari$api$rest, (Nuitka_StringObject *)mod_consts[431]);

                    if (unlikely(tmp_called_instance_84 == NULL)) {
                        tmp_called_instance_84 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[431]);
                    }

                    if (tmp_called_instance_84 == NULL) {
                        assert(ERROR_OCCURRED());

                        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                        exception_lineno = 7386;
                        type_description_2 = "o";
                        goto frame_exception_exit_3;
                    }
                    Py_INCREF(tmp_called_instance_84);
                } else {
                    goto frame_exception_exit_3;
                }
            }

            tmp_annotations_150 = PyDict_Copy(mod_consts[728]);


            tmp_args_element_value_160 = MAKE_FUNCTION_hikari$api$rest$$$function__146_interaction_autocomplete_builder(tmp_annotations_150);

            frame_862833cacd6e5ba73c351f8d132a7b6b_3->m_frame.f_lineno = 7386;
            tmp_dictset_value = CALL_METHOD_WITH_SINGLE_ARG(tmp_called_instance_84, mod_consts[457], tmp_args_element_value_160);
            Py_DECREF(tmp_called_instance_84);
            Py_DECREF(tmp_args_element_value_160);
            if (tmp_dictset_value == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 7386;
                type_description_2 = "o";
                goto frame_exception_exit_3;
            }
            tmp_res = PyObject_SetItem(locals_hikari$api$rest$$$class__2_RESTClient_110, mod_consts[730], tmp_dictset_value);
            Py_DECREF(tmp_dictset_value);
            if (tmp_res != 0) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 7387;
                type_description_2 = "o";
                goto frame_exception_exit_3;
            }
        }
        {
            PyObject *tmp_called_instance_85;
            PyObject *tmp_args_element_value_161;
            PyObject *tmp_annotations_151;
            tmp_called_instance_85 = PyObject_GetItem(locals_hikari$api$rest$$$class__2_RESTClient_110, mod_consts[431]);

            if (tmp_called_instance_85 == NULL) {
                if (CHECK_AND_CLEAR_KEY_ERROR_OCCURRED()) {
                    tmp_called_instance_85 = GET_STRING_DICT_VALUE(moduledict_hikari$api$rest, (Nuitka_StringObject *)mod_consts[431]);

                    if (unlikely(tmp_called_instance_85 == NULL)) {
                        tmp_called_instance_85 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[431]);
                    }

                    if (tmp_called_instance_85 == NULL) {
                        assert(ERROR_OCCURRED());

                        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                        exception_lineno = 7398;
                        type_description_2 = "o";
                        goto frame_exception_exit_3;
                    }
                    Py_INCREF(tmp_called_instance_85);
                } else {
                    goto frame_exception_exit_3;
                }
            }

            tmp_annotations_151 = PyDict_Copy(mod_consts[732]);


            tmp_args_element_value_161 = MAKE_FUNCTION_hikari$api$rest$$$function__147_interaction_message_builder(tmp_annotations_151);

            frame_862833cacd6e5ba73c351f8d132a7b6b_3->m_frame.f_lineno = 7398;
            tmp_dictset_value = CALL_METHOD_WITH_SINGLE_ARG(tmp_called_instance_85, mod_consts[457], tmp_args_element_value_161);
            Py_DECREF(tmp_called_instance_85);
            Py_DECREF(tmp_args_element_value_161);
            if (tmp_dictset_value == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 7398;
                type_description_2 = "o";
                goto frame_exception_exit_3;
            }
            tmp_res = PyObject_SetItem(locals_hikari$api$rest$$$class__2_RESTClient_110, mod_consts[734], tmp_dictset_value);
            Py_DECREF(tmp_dictset_value);
            if (tmp_res != 0) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 7399;
                type_description_2 = "o";
                goto frame_exception_exit_3;
            }
        }
        {
            PyObject *tmp_called_instance_86;
            PyObject *tmp_args_element_value_162;
            PyObject *tmp_annotations_152;
            tmp_called_instance_86 = PyObject_GetItem(locals_hikari$api$rest$$$class__2_RESTClient_110, mod_consts[431]);

            if (tmp_called_instance_86 == NULL) {
                if (CHECK_AND_CLEAR_KEY_ERROR_OCCURRED()) {
                    tmp_called_instance_86 = GET_STRING_DICT_VALUE(moduledict_hikari$api$rest, (Nuitka_StringObject *)mod_consts[431]);

                    if (unlikely(tmp_called_instance_86 == NULL)) {
                        tmp_called_instance_86 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[431]);
                    }

                    if (tmp_called_instance_86 == NULL) {
                        assert(ERROR_OCCURRED());

                        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                        exception_lineno = 7415;
                        type_description_2 = "o";
                        goto frame_exception_exit_3;
                    }
                    Py_INCREF(tmp_called_instance_86);
                } else {
                    goto frame_exception_exit_3;
                }
            }

            tmp_annotations_152 = PyDict_Copy(mod_consts[736]);


            tmp_args_element_value_162 = MAKE_FUNCTION_hikari$api$rest$$$function__148_fetch_interaction_response(tmp_annotations_152);

            frame_862833cacd6e5ba73c351f8d132a7b6b_3->m_frame.f_lineno = 7415;
            tmp_dictset_value = CALL_METHOD_WITH_SINGLE_ARG(tmp_called_instance_86, mod_consts[457], tmp_args_element_value_162);
            Py_DECREF(tmp_called_instance_86);
            Py_DECREF(tmp_args_element_value_162);
            if (tmp_dictset_value == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 7415;
                type_description_2 = "o";
                goto frame_exception_exit_3;
            }
            tmp_res = PyObject_SetItem(locals_hikari$api$rest$$$class__2_RESTClient_110, mod_consts[384], tmp_dictset_value);
            Py_DECREF(tmp_dictset_value);
            if (tmp_res != 0) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 7416;
                type_description_2 = "o";
                goto frame_exception_exit_3;
            }
        }
        {
            PyObject *tmp_called_value_80;
            PyObject *tmp_expression_value_324;
            PyObject *tmp_args_element_value_163;
            PyObject *tmp_defaults_16;
            PyObject *tmp_tuple_element_23;
            PyObject *tmp_expression_value_325;
            PyObject *tmp_kw_defaults_58;
            PyObject *tmp_dict_key_58;
            PyObject *tmp_dict_value_58;
            PyObject *tmp_expression_value_326;
            PyObject *tmp_annotations_153;
            tmp_expression_value_324 = PyObject_GetItem(locals_hikari$api$rest$$$class__2_RESTClient_110, mod_consts[431]);

            if (tmp_expression_value_324 == NULL) {
                if (CHECK_AND_CLEAR_KEY_ERROR_OCCURRED()) {
                    tmp_expression_value_324 = GET_STRING_DICT_VALUE(moduledict_hikari$api$rest, (Nuitka_StringObject *)mod_consts[431]);

                    if (unlikely(tmp_expression_value_324 == NULL)) {
                        tmp_expression_value_324 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[431]);
                    }

                    if (tmp_expression_value_324 == NULL) {
                        assert(ERROR_OCCURRED());

                        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                        exception_lineno = 7456;
                        type_description_2 = "o";
                        goto frame_exception_exit_3;
                    }
                    Py_INCREF(tmp_expression_value_324);
                } else {
                    goto frame_exception_exit_3;
                }
            }

            tmp_called_value_80 = LOOKUP_ATTRIBUTE(tmp_expression_value_324, mod_consts[457]);
            Py_DECREF(tmp_expression_value_324);
            if (tmp_called_value_80 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 7456;
                type_description_2 = "o";
                goto frame_exception_exit_3;
            }
            tmp_expression_value_325 = PyObject_GetItem(locals_hikari$api$rest$$$class__2_RESTClient_110, mod_consts[440]);

            if (tmp_expression_value_325 == NULL) {
                if (CHECK_AND_CLEAR_KEY_ERROR_OCCURRED()) {
                    tmp_expression_value_325 = GET_STRING_DICT_VALUE(moduledict_hikari$api$rest, (Nuitka_StringObject *)mod_consts[440]);

                    if (unlikely(tmp_expression_value_325 == NULL)) {
                        tmp_expression_value_325 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[440]);
                    }

                    if (tmp_expression_value_325 == NULL) {
                        assert(ERROR_OCCURRED());

                        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
                        Py_DECREF(tmp_called_value_80);

                        exception_lineno = 7462;
                        type_description_2 = "o";
                        goto frame_exception_exit_3;
                    }
                    Py_INCREF(tmp_expression_value_325);
                } else {
                    goto frame_exception_exit_3;
                }
            }

            tmp_tuple_element_23 = LOOKUP_ATTRIBUTE(tmp_expression_value_325, mod_consts[485]);
            Py_DECREF(tmp_expression_value_325);
            if (tmp_tuple_element_23 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
                Py_DECREF(tmp_called_value_80);

                exception_lineno = 7462;
                type_description_2 = "o";
                goto frame_exception_exit_3;
            }
            tmp_defaults_16 = PyTuple_New(1);
            PyTuple_SET_ITEM(tmp_defaults_16, 0, tmp_tuple_element_23);
            tmp_dict_key_58 = mod_consts[548];
            tmp_expression_value_326 = PyObject_GetItem(locals_hikari$api$rest$$$class__2_RESTClient_110, mod_consts[440]);

            if (tmp_expression_value_326 == NULL) {
                if (CHECK_AND_CLEAR_KEY_ERROR_OCCURRED()) {
                    tmp_expression_value_326 = GET_STRING_DICT_VALUE(moduledict_hikari$api$rest, (Nuitka_StringObject *)mod_consts[440]);

                    if (unlikely(tmp_expression_value_326 == NULL)) {
                        tmp_expression_value_326 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[440]);
                    }

                    if (tmp_expression_value_326 == NULL) {
                        assert(ERROR_OCCURRED());

                        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
                        Py_DECREF(tmp_called_value_80);
                        Py_DECREF(tmp_defaults_16);

                        exception_lineno = 7464;
                        type_description_2 = "o";
                        goto frame_exception_exit_3;
                    }
                    Py_INCREF(tmp_expression_value_326);
                } else {
                    goto frame_exception_exit_3;
                }
            }

            tmp_dict_value_58 = LOOKUP_ATTRIBUTE(tmp_expression_value_326, mod_consts[485]);
            Py_DECREF(tmp_expression_value_326);
            if (tmp_dict_value_58 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
                Py_DECREF(tmp_called_value_80);
                Py_DECREF(tmp_defaults_16);

                exception_lineno = 7464;
                type_description_2 = "o";
                goto frame_exception_exit_3;
            }
            tmp_kw_defaults_58 = _PyDict_NewPresized( 11 );
            {
                PyObject *tmp_expression_value_327;
                PyObject *tmp_expression_value_328;
                PyObject *tmp_expression_value_329;
                PyObject *tmp_expression_value_330;
                PyObject *tmp_expression_value_331;
                PyObject *tmp_expression_value_332;
                PyObject *tmp_expression_value_333;
                PyObject *tmp_expression_value_334;
                PyObject *tmp_expression_value_335;
                PyObject *tmp_expression_value_336;
                tmp_res = PyDict_SetItem(tmp_kw_defaults_58, tmp_dict_key_58, tmp_dict_value_58);
                Py_DECREF(tmp_dict_value_58);
                assert(!(tmp_res != 0));
                tmp_dict_key_58 = mod_consts[539];
                tmp_expression_value_327 = PyObject_GetItem(locals_hikari$api$rest$$$class__2_RESTClient_110, mod_consts[440]);

                if (tmp_expression_value_327 == NULL) {
                    if (CHECK_AND_CLEAR_KEY_ERROR_OCCURRED()) {
                        tmp_expression_value_327 = GET_STRING_DICT_VALUE(moduledict_hikari$api$rest, (Nuitka_StringObject *)mod_consts[440]);

                        if (unlikely(tmp_expression_value_327 == NULL)) {
                            tmp_expression_value_327 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[440]);
                        }

                        if (tmp_expression_value_327 == NULL) {
                            assert(ERROR_OCCURRED());

                            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                            exception_lineno = 7465;
                            type_description_2 = "o";
                            goto dict_build_exception_43;
                        }
                        Py_INCREF(tmp_expression_value_327);
                    } else {
                        goto dict_build_exception_43;
                    }
                }

                tmp_dict_value_58 = LOOKUP_ATTRIBUTE(tmp_expression_value_327, mod_consts[485]);
                Py_DECREF(tmp_expression_value_327);
                if (tmp_dict_value_58 == NULL) {
                    assert(ERROR_OCCURRED());

                    FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                    exception_lineno = 7465;
                    type_description_2 = "o";
                    goto dict_build_exception_43;
                }
                tmp_res = PyDict_SetItem(tmp_kw_defaults_58, tmp_dict_key_58, tmp_dict_value_58);
                Py_DECREF(tmp_dict_value_58);
                assert(!(tmp_res != 0));
                tmp_dict_key_58 = mod_consts[533];
                tmp_expression_value_328 = PyObject_GetItem(locals_hikari$api$rest$$$class__2_RESTClient_110, mod_consts[440]);

                if (tmp_expression_value_328 == NULL) {
                    if (CHECK_AND_CLEAR_KEY_ERROR_OCCURRED()) {
                        tmp_expression_value_328 = GET_STRING_DICT_VALUE(moduledict_hikari$api$rest, (Nuitka_StringObject *)mod_consts[440]);

                        if (unlikely(tmp_expression_value_328 == NULL)) {
                            tmp_expression_value_328 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[440]);
                        }

                        if (tmp_expression_value_328 == NULL) {
                            assert(ERROR_OCCURRED());

                            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                            exception_lineno = 7466;
                            type_description_2 = "o";
                            goto dict_build_exception_43;
                        }
                        Py_INCREF(tmp_expression_value_328);
                    } else {
                        goto dict_build_exception_43;
                    }
                }

                tmp_dict_value_58 = LOOKUP_ATTRIBUTE(tmp_expression_value_328, mod_consts[485]);
                Py_DECREF(tmp_expression_value_328);
                if (tmp_dict_value_58 == NULL) {
                    assert(ERROR_OCCURRED());

                    FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                    exception_lineno = 7466;
                    type_description_2 = "o";
                    goto dict_build_exception_43;
                }
                tmp_res = PyDict_SetItem(tmp_kw_defaults_58, tmp_dict_key_58, tmp_dict_value_58);
                Py_DECREF(tmp_dict_value_58);
                assert(!(tmp_res != 0));
                tmp_dict_key_58 = mod_consts[534];
                tmp_expression_value_329 = PyObject_GetItem(locals_hikari$api$rest$$$class__2_RESTClient_110, mod_consts[440]);

                if (tmp_expression_value_329 == NULL) {
                    if (CHECK_AND_CLEAR_KEY_ERROR_OCCURRED()) {
                        tmp_expression_value_329 = GET_STRING_DICT_VALUE(moduledict_hikari$api$rest, (Nuitka_StringObject *)mod_consts[440]);

                        if (unlikely(tmp_expression_value_329 == NULL)) {
                            tmp_expression_value_329 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[440]);
                        }

                        if (tmp_expression_value_329 == NULL) {
                            assert(ERROR_OCCURRED());

                            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                            exception_lineno = 7467;
                            type_description_2 = "o";
                            goto dict_build_exception_43;
                        }
                        Py_INCREF(tmp_expression_value_329);
                    } else {
                        goto dict_build_exception_43;
                    }
                }

                tmp_dict_value_58 = LOOKUP_ATTRIBUTE(tmp_expression_value_329, mod_consts[485]);
                Py_DECREF(tmp_expression_value_329);
                if (tmp_dict_value_58 == NULL) {
                    assert(ERROR_OCCURRED());

                    FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                    exception_lineno = 7467;
                    type_description_2 = "o";
                    goto dict_build_exception_43;
                }
                tmp_res = PyDict_SetItem(tmp_kw_defaults_58, tmp_dict_key_58, tmp_dict_value_58);
                Py_DECREF(tmp_dict_value_58);
                assert(!(tmp_res != 0));
                tmp_dict_key_58 = mod_consts[535];
                tmp_expression_value_330 = PyObject_GetItem(locals_hikari$api$rest$$$class__2_RESTClient_110, mod_consts[440]);

                if (tmp_expression_value_330 == NULL) {
                    if (CHECK_AND_CLEAR_KEY_ERROR_OCCURRED()) {
                        tmp_expression_value_330 = GET_STRING_DICT_VALUE(moduledict_hikari$api$rest, (Nuitka_StringObject *)mod_consts[440]);

                        if (unlikely(tmp_expression_value_330 == NULL)) {
                            tmp_expression_value_330 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[440]);
                        }

                        if (tmp_expression_value_330 == NULL) {
                            assert(ERROR_OCCURRED());

                            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                            exception_lineno = 7468;
                            type_description_2 = "o";
                            goto dict_build_exception_43;
                        }
                        Py_INCREF(tmp_expression_value_330);
                    } else {
                        goto dict_build_exception_43;
                    }
                }

                tmp_dict_value_58 = LOOKUP_ATTRIBUTE(tmp_expression_value_330, mod_consts[485]);
                Py_DECREF(tmp_expression_value_330);
                if (tmp_dict_value_58 == NULL) {
                    assert(ERROR_OCCURRED());

                    FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                    exception_lineno = 7468;
                    type_description_2 = "o";
                    goto dict_build_exception_43;
                }
                tmp_res = PyDict_SetItem(tmp_kw_defaults_58, tmp_dict_key_58, tmp_dict_value_58);
                Py_DECREF(tmp_dict_value_58);
                assert(!(tmp_res != 0));
                tmp_dict_key_58 = mod_consts[536];
                tmp_expression_value_331 = PyObject_GetItem(locals_hikari$api$rest$$$class__2_RESTClient_110, mod_consts[440]);

                if (tmp_expression_value_331 == NULL) {
                    if (CHECK_AND_CLEAR_KEY_ERROR_OCCURRED()) {
                        tmp_expression_value_331 = GET_STRING_DICT_VALUE(moduledict_hikari$api$rest, (Nuitka_StringObject *)mod_consts[440]);

                        if (unlikely(tmp_expression_value_331 == NULL)) {
                            tmp_expression_value_331 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[440]);
                        }

                        if (tmp_expression_value_331 == NULL) {
                            assert(ERROR_OCCURRED());

                            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                            exception_lineno = 7469;
                            type_description_2 = "o";
                            goto dict_build_exception_43;
                        }
                        Py_INCREF(tmp_expression_value_331);
                    } else {
                        goto dict_build_exception_43;
                    }
                }

                tmp_dict_value_58 = LOOKUP_ATTRIBUTE(tmp_expression_value_331, mod_consts[485]);
                Py_DECREF(tmp_expression_value_331);
                if (tmp_dict_value_58 == NULL) {
                    assert(ERROR_OCCURRED());

                    FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                    exception_lineno = 7469;
                    type_description_2 = "o";
                    goto dict_build_exception_43;
                }
                tmp_res = PyDict_SetItem(tmp_kw_defaults_58, tmp_dict_key_58, tmp_dict_value_58);
                Py_DECREF(tmp_dict_value_58);
                assert(!(tmp_res != 0));
                tmp_dict_key_58 = mod_consts[537];
                tmp_expression_value_332 = PyObject_GetItem(locals_hikari$api$rest$$$class__2_RESTClient_110, mod_consts[440]);

                if (tmp_expression_value_332 == NULL) {
                    if (CHECK_AND_CLEAR_KEY_ERROR_OCCURRED()) {
                        tmp_expression_value_332 = GET_STRING_DICT_VALUE(moduledict_hikari$api$rest, (Nuitka_StringObject *)mod_consts[440]);

                        if (unlikely(tmp_expression_value_332 == NULL)) {
                            tmp_expression_value_332 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[440]);
                        }

                        if (tmp_expression_value_332 == NULL) {
                            assert(ERROR_OCCURRED());

                            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                            exception_lineno = 7470;
                            type_description_2 = "o";
                            goto dict_build_exception_43;
                        }
                        Py_INCREF(tmp_expression_value_332);
                    } else {
                        goto dict_build_exception_43;
                    }
                }

                tmp_dict_value_58 = LOOKUP_ATTRIBUTE(tmp_expression_value_332, mod_consts[485]);
                Py_DECREF(tmp_expression_value_332);
                if (tmp_dict_value_58 == NULL) {
                    assert(ERROR_OCCURRED());

                    FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                    exception_lineno = 7470;
                    type_description_2 = "o";
                    goto dict_build_exception_43;
                }
                tmp_res = PyDict_SetItem(tmp_kw_defaults_58, tmp_dict_key_58, tmp_dict_value_58);
                Py_DECREF(tmp_dict_value_58);
                assert(!(tmp_res != 0));
                tmp_dict_key_58 = mod_consts[538];
                tmp_expression_value_333 = PyObject_GetItem(locals_hikari$api$rest$$$class__2_RESTClient_110, mod_consts[440]);

                if (tmp_expression_value_333 == NULL) {
                    if (CHECK_AND_CLEAR_KEY_ERROR_OCCURRED()) {
                        tmp_expression_value_333 = GET_STRING_DICT_VALUE(moduledict_hikari$api$rest, (Nuitka_StringObject *)mod_consts[440]);

                        if (unlikely(tmp_expression_value_333 == NULL)) {
                            tmp_expression_value_333 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[440]);
                        }

                        if (tmp_expression_value_333 == NULL) {
                            assert(ERROR_OCCURRED());

                            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                            exception_lineno = 7471;
                            type_description_2 = "o";
                            goto dict_build_exception_43;
                        }
                        Py_INCREF(tmp_expression_value_333);
                    } else {
                        goto dict_build_exception_43;
                    }
                }

                tmp_dict_value_58 = LOOKUP_ATTRIBUTE(tmp_expression_value_333, mod_consts[485]);
                Py_DECREF(tmp_expression_value_333);
                if (tmp_dict_value_58 == NULL) {
                    assert(ERROR_OCCURRED());

                    FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                    exception_lineno = 7471;
                    type_description_2 = "o";
                    goto dict_build_exception_43;
                }
                tmp_res = PyDict_SetItem(tmp_kw_defaults_58, tmp_dict_key_58, tmp_dict_value_58);
                Py_DECREF(tmp_dict_value_58);
                assert(!(tmp_res != 0));
                tmp_dict_key_58 = mod_consts[541];
                tmp_expression_value_334 = PyObject_GetItem(locals_hikari$api$rest$$$class__2_RESTClient_110, mod_consts[440]);

                if (tmp_expression_value_334 == NULL) {
                    if (CHECK_AND_CLEAR_KEY_ERROR_OCCURRED()) {
                        tmp_expression_value_334 = GET_STRING_DICT_VALUE(moduledict_hikari$api$rest, (Nuitka_StringObject *)mod_consts[440]);

                        if (unlikely(tmp_expression_value_334 == NULL)) {
                            tmp_expression_value_334 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[440]);
                        }

                        if (tmp_expression_value_334 == NULL) {
                            assert(ERROR_OCCURRED());

                            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                            exception_lineno = 7472;
                            type_description_2 = "o";
                            goto dict_build_exception_43;
                        }
                        Py_INCREF(tmp_expression_value_334);
                    } else {
                        goto dict_build_exception_43;
                    }
                }

                tmp_dict_value_58 = LOOKUP_ATTRIBUTE(tmp_expression_value_334, mod_consts[485]);
                Py_DECREF(tmp_expression_value_334);
                if (tmp_dict_value_58 == NULL) {
                    assert(ERROR_OCCURRED());

                    FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                    exception_lineno = 7472;
                    type_description_2 = "o";
                    goto dict_build_exception_43;
                }
                tmp_res = PyDict_SetItem(tmp_kw_defaults_58, tmp_dict_key_58, tmp_dict_value_58);
                Py_DECREF(tmp_dict_value_58);
                assert(!(tmp_res != 0));
                tmp_dict_key_58 = mod_consts[543];
                tmp_expression_value_335 = PyObject_GetItem(locals_hikari$api$rest$$$class__2_RESTClient_110, mod_consts[440]);

                if (tmp_expression_value_335 == NULL) {
                    if (CHECK_AND_CLEAR_KEY_ERROR_OCCURRED()) {
                        tmp_expression_value_335 = GET_STRING_DICT_VALUE(moduledict_hikari$api$rest, (Nuitka_StringObject *)mod_consts[440]);

                        if (unlikely(tmp_expression_value_335 == NULL)) {
                            tmp_expression_value_335 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[440]);
                        }

                        if (tmp_expression_value_335 == NULL) {
                            assert(ERROR_OCCURRED());

                            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                            exception_lineno = 7475;
                            type_description_2 = "o";
                            goto dict_build_exception_43;
                        }
                        Py_INCREF(tmp_expression_value_335);
                    } else {
                        goto dict_build_exception_43;
                    }
                }

                tmp_dict_value_58 = LOOKUP_ATTRIBUTE(tmp_expression_value_335, mod_consts[485]);
                Py_DECREF(tmp_expression_value_335);
                if (tmp_dict_value_58 == NULL) {
                    assert(ERROR_OCCURRED());

                    FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                    exception_lineno = 7475;
                    type_description_2 = "o";
                    goto dict_build_exception_43;
                }
                tmp_res = PyDict_SetItem(tmp_kw_defaults_58, tmp_dict_key_58, tmp_dict_value_58);
                Py_DECREF(tmp_dict_value_58);
                assert(!(tmp_res != 0));
                tmp_dict_key_58 = mod_consts[544];
                tmp_expression_value_336 = PyObject_GetItem(locals_hikari$api$rest$$$class__2_RESTClient_110, mod_consts[440]);

                if (tmp_expression_value_336 == NULL) {
                    if (CHECK_AND_CLEAR_KEY_ERROR_OCCURRED()) {
                        tmp_expression_value_336 = GET_STRING_DICT_VALUE(moduledict_hikari$api$rest, (Nuitka_StringObject *)mod_consts[440]);

                        if (unlikely(tmp_expression_value_336 == NULL)) {
                            tmp_expression_value_336 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[440]);
                        }

                        if (tmp_expression_value_336 == NULL) {
                            assert(ERROR_OCCURRED());

                            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                            exception_lineno = 7478;
                            type_description_2 = "o";
                            goto dict_build_exception_43;
                        }
                        Py_INCREF(tmp_expression_value_336);
                    } else {
                        goto dict_build_exception_43;
                    }
                }

                tmp_dict_value_58 = LOOKUP_ATTRIBUTE(tmp_expression_value_336, mod_consts[485]);
                Py_DECREF(tmp_expression_value_336);
                if (tmp_dict_value_58 == NULL) {
                    assert(ERROR_OCCURRED());

                    FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                    exception_lineno = 7478;
                    type_description_2 = "o";
                    goto dict_build_exception_43;
                }
                tmp_res = PyDict_SetItem(tmp_kw_defaults_58, tmp_dict_key_58, tmp_dict_value_58);
                Py_DECREF(tmp_dict_value_58);
                assert(!(tmp_res != 0));
            }
            goto dict_build_noexception_43;
            // Exception handling pass through code for dict_build:
            dict_build_exception_43:;
            Py_DECREF(tmp_called_value_80);
            Py_DECREF(tmp_defaults_16);
            Py_DECREF(tmp_kw_defaults_58);
            goto frame_exception_exit_3;
            // Finished with no exception for dict_build:
            dict_build_noexception_43:;
            tmp_annotations_153 = PyDict_Copy(mod_consts[737]);


            tmp_args_element_value_163 = MAKE_FUNCTION_hikari$api$rest$$$function__149_create_interaction_response(tmp_defaults_16, tmp_kw_defaults_58, tmp_annotations_153);

            frame_862833cacd6e5ba73c351f8d132a7b6b_3->m_frame.f_lineno = 7456;
            tmp_dictset_value = CALL_FUNCTION_WITH_SINGLE_ARG(tmp_called_value_80, tmp_args_element_value_163);
            Py_DECREF(tmp_called_value_80);
            Py_DECREF(tmp_args_element_value_163);
            if (tmp_dictset_value == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 7456;
                type_description_2 = "o";
                goto frame_exception_exit_3;
            }
            tmp_res = PyObject_SetItem(locals_hikari$api$rest$$$class__2_RESTClient_110, mod_consts[387], tmp_dictset_value);
            Py_DECREF(tmp_dictset_value);
            if (tmp_res != 0) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 7457;
                type_description_2 = "o";
                goto frame_exception_exit_3;
            }
        }
        {
            PyObject *tmp_called_value_81;
            PyObject *tmp_expression_value_337;
            PyObject *tmp_args_element_value_164;
            PyObject *tmp_defaults_17;
            PyObject *tmp_tuple_element_24;
            PyObject *tmp_expression_value_338;
            PyObject *tmp_kw_defaults_59;
            PyObject *tmp_dict_key_59;
            PyObject *tmp_dict_value_59;
            PyObject *tmp_expression_value_339;
            PyObject *tmp_annotations_154;
            tmp_expression_value_337 = PyObject_GetItem(locals_hikari$api$rest$$$class__2_RESTClient_110, mod_consts[431]);

            if (tmp_expression_value_337 == NULL) {
                if (CHECK_AND_CLEAR_KEY_ERROR_OCCURRED()) {
                    tmp_expression_value_337 = GET_STRING_DICT_VALUE(moduledict_hikari$api$rest, (Nuitka_StringObject *)mod_consts[431]);

                    if (unlikely(tmp_expression_value_337 == NULL)) {
                        tmp_expression_value_337 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[431]);
                    }

                    if (tmp_expression_value_337 == NULL) {
                        assert(ERROR_OCCURRED());

                        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                        exception_lineno = 7584;
                        type_description_2 = "o";
                        goto frame_exception_exit_3;
                    }
                    Py_INCREF(tmp_expression_value_337);
                } else {
                    goto frame_exception_exit_3;
                }
            }

            tmp_called_value_81 = LOOKUP_ATTRIBUTE(tmp_expression_value_337, mod_consts[457]);
            Py_DECREF(tmp_expression_value_337);
            if (tmp_called_value_81 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 7584;
                type_description_2 = "o";
                goto frame_exception_exit_3;
            }
            tmp_expression_value_338 = PyObject_GetItem(locals_hikari$api$rest$$$class__2_RESTClient_110, mod_consts[440]);

            if (tmp_expression_value_338 == NULL) {
                if (CHECK_AND_CLEAR_KEY_ERROR_OCCURRED()) {
                    tmp_expression_value_338 = GET_STRING_DICT_VALUE(moduledict_hikari$api$rest, (Nuitka_StringObject *)mod_consts[440]);

                    if (unlikely(tmp_expression_value_338 == NULL)) {
                        tmp_expression_value_338 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[440]);
                    }

                    if (tmp_expression_value_338 == NULL) {
                        assert(ERROR_OCCURRED());

                        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
                        Py_DECREF(tmp_called_value_81);

                        exception_lineno = 7589;
                        type_description_2 = "o";
                        goto frame_exception_exit_3;
                    }
                    Py_INCREF(tmp_expression_value_338);
                } else {
                    goto frame_exception_exit_3;
                }
            }

            tmp_tuple_element_24 = LOOKUP_ATTRIBUTE(tmp_expression_value_338, mod_consts[485]);
            Py_DECREF(tmp_expression_value_338);
            if (tmp_tuple_element_24 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
                Py_DECREF(tmp_called_value_81);

                exception_lineno = 7589;
                type_description_2 = "o";
                goto frame_exception_exit_3;
            }
            tmp_defaults_17 = PyTuple_New(1);
            PyTuple_SET_ITEM(tmp_defaults_17, 0, tmp_tuple_element_24);
            tmp_dict_key_59 = mod_consts[533];
            tmp_expression_value_339 = PyObject_GetItem(locals_hikari$api$rest$$$class__2_RESTClient_110, mod_consts[440]);

            if (tmp_expression_value_339 == NULL) {
                if (CHECK_AND_CLEAR_KEY_ERROR_OCCURRED()) {
                    tmp_expression_value_339 = GET_STRING_DICT_VALUE(moduledict_hikari$api$rest, (Nuitka_StringObject *)mod_consts[440]);

                    if (unlikely(tmp_expression_value_339 == NULL)) {
                        tmp_expression_value_339 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[440]);
                    }

                    if (tmp_expression_value_339 == NULL) {
                        assert(ERROR_OCCURRED());

                        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
                        Py_DECREF(tmp_called_value_81);
                        Py_DECREF(tmp_defaults_17);

                        exception_lineno = 7591;
                        type_description_2 = "o";
                        goto frame_exception_exit_3;
                    }
                    Py_INCREF(tmp_expression_value_339);
                } else {
                    goto frame_exception_exit_3;
                }
            }

            tmp_dict_value_59 = LOOKUP_ATTRIBUTE(tmp_expression_value_339, mod_consts[485]);
            Py_DECREF(tmp_expression_value_339);
            if (tmp_dict_value_59 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
                Py_DECREF(tmp_called_value_81);
                Py_DECREF(tmp_defaults_17);

                exception_lineno = 7591;
                type_description_2 = "o";
                goto frame_exception_exit_3;
            }
            tmp_kw_defaults_59 = _PyDict_NewPresized( 10 );
            {
                PyObject *tmp_expression_value_340;
                PyObject *tmp_expression_value_341;
                PyObject *tmp_expression_value_342;
                PyObject *tmp_expression_value_343;
                PyObject *tmp_expression_value_344;
                PyObject *tmp_expression_value_345;
                PyObject *tmp_expression_value_346;
                PyObject *tmp_expression_value_347;
                tmp_res = PyDict_SetItem(tmp_kw_defaults_59, tmp_dict_key_59, tmp_dict_value_59);
                Py_DECREF(tmp_dict_value_59);
                assert(!(tmp_res != 0));
                tmp_dict_key_59 = mod_consts[534];
                tmp_expression_value_340 = PyObject_GetItem(locals_hikari$api$rest$$$class__2_RESTClient_110, mod_consts[440]);

                if (tmp_expression_value_340 == NULL) {
                    if (CHECK_AND_CLEAR_KEY_ERROR_OCCURRED()) {
                        tmp_expression_value_340 = GET_STRING_DICT_VALUE(moduledict_hikari$api$rest, (Nuitka_StringObject *)mod_consts[440]);

                        if (unlikely(tmp_expression_value_340 == NULL)) {
                            tmp_expression_value_340 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[440]);
                        }

                        if (tmp_expression_value_340 == NULL) {
                            assert(ERROR_OCCURRED());

                            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                            exception_lineno = 7592;
                            type_description_2 = "o";
                            goto dict_build_exception_44;
                        }
                        Py_INCREF(tmp_expression_value_340);
                    } else {
                        goto dict_build_exception_44;
                    }
                }

                tmp_dict_value_59 = LOOKUP_ATTRIBUTE(tmp_expression_value_340, mod_consts[485]);
                Py_DECREF(tmp_expression_value_340);
                if (tmp_dict_value_59 == NULL) {
                    assert(ERROR_OCCURRED());

                    FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                    exception_lineno = 7592;
                    type_description_2 = "o";
                    goto dict_build_exception_44;
                }
                tmp_res = PyDict_SetItem(tmp_kw_defaults_59, tmp_dict_key_59, tmp_dict_value_59);
                Py_DECREF(tmp_dict_value_59);
                assert(!(tmp_res != 0));
                tmp_dict_key_59 = mod_consts[535];
                tmp_expression_value_341 = PyObject_GetItem(locals_hikari$api$rest$$$class__2_RESTClient_110, mod_consts[440]);

                if (tmp_expression_value_341 == NULL) {
                    if (CHECK_AND_CLEAR_KEY_ERROR_OCCURRED()) {
                        tmp_expression_value_341 = GET_STRING_DICT_VALUE(moduledict_hikari$api$rest, (Nuitka_StringObject *)mod_consts[440]);

                        if (unlikely(tmp_expression_value_341 == NULL)) {
                            tmp_expression_value_341 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[440]);
                        }

                        if (tmp_expression_value_341 == NULL) {
                            assert(ERROR_OCCURRED());

                            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                            exception_lineno = 7593;
                            type_description_2 = "o";
                            goto dict_build_exception_44;
                        }
                        Py_INCREF(tmp_expression_value_341);
                    } else {
                        goto dict_build_exception_44;
                    }
                }

                tmp_dict_value_59 = LOOKUP_ATTRIBUTE(tmp_expression_value_341, mod_consts[485]);
                Py_DECREF(tmp_expression_value_341);
                if (tmp_dict_value_59 == NULL) {
                    assert(ERROR_OCCURRED());

                    FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                    exception_lineno = 7593;
                    type_description_2 = "o";
                    goto dict_build_exception_44;
                }
                tmp_res = PyDict_SetItem(tmp_kw_defaults_59, tmp_dict_key_59, tmp_dict_value_59);
                Py_DECREF(tmp_dict_value_59);
                assert(!(tmp_res != 0));
                tmp_dict_key_59 = mod_consts[536];
                tmp_expression_value_342 = PyObject_GetItem(locals_hikari$api$rest$$$class__2_RESTClient_110, mod_consts[440]);

                if (tmp_expression_value_342 == NULL) {
                    if (CHECK_AND_CLEAR_KEY_ERROR_OCCURRED()) {
                        tmp_expression_value_342 = GET_STRING_DICT_VALUE(moduledict_hikari$api$rest, (Nuitka_StringObject *)mod_consts[440]);

                        if (unlikely(tmp_expression_value_342 == NULL)) {
                            tmp_expression_value_342 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[440]);
                        }

                        if (tmp_expression_value_342 == NULL) {
                            assert(ERROR_OCCURRED());

                            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                            exception_lineno = 7596;
                            type_description_2 = "o";
                            goto dict_build_exception_44;
                        }
                        Py_INCREF(tmp_expression_value_342);
                    } else {
                        goto dict_build_exception_44;
                    }
                }

                tmp_dict_value_59 = LOOKUP_ATTRIBUTE(tmp_expression_value_342, mod_consts[485]);
                Py_DECREF(tmp_expression_value_342);
                if (tmp_dict_value_59 == NULL) {
                    assert(ERROR_OCCURRED());

                    FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                    exception_lineno = 7596;
                    type_description_2 = "o";
                    goto dict_build_exception_44;
                }
                tmp_res = PyDict_SetItem(tmp_kw_defaults_59, tmp_dict_key_59, tmp_dict_value_59);
                Py_DECREF(tmp_dict_value_59);
                assert(!(tmp_res != 0));
                tmp_dict_key_59 = mod_consts[537];
                tmp_expression_value_343 = PyObject_GetItem(locals_hikari$api$rest$$$class__2_RESTClient_110, mod_consts[440]);

                if (tmp_expression_value_343 == NULL) {
                    if (CHECK_AND_CLEAR_KEY_ERROR_OCCURRED()) {
                        tmp_expression_value_343 = GET_STRING_DICT_VALUE(moduledict_hikari$api$rest, (Nuitka_StringObject *)mod_consts[440]);

                        if (unlikely(tmp_expression_value_343 == NULL)) {
                            tmp_expression_value_343 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[440]);
                        }

                        if (tmp_expression_value_343 == NULL) {
                            assert(ERROR_OCCURRED());

                            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                            exception_lineno = 7597;
                            type_description_2 = "o";
                            goto dict_build_exception_44;
                        }
                        Py_INCREF(tmp_expression_value_343);
                    } else {
                        goto dict_build_exception_44;
                    }
                }

                tmp_dict_value_59 = LOOKUP_ATTRIBUTE(tmp_expression_value_343, mod_consts[485]);
                Py_DECREF(tmp_expression_value_343);
                if (tmp_dict_value_59 == NULL) {
                    assert(ERROR_OCCURRED());

                    FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                    exception_lineno = 7597;
                    type_description_2 = "o";
                    goto dict_build_exception_44;
                }
                tmp_res = PyDict_SetItem(tmp_kw_defaults_59, tmp_dict_key_59, tmp_dict_value_59);
                Py_DECREF(tmp_dict_value_59);
                assert(!(tmp_res != 0));
                tmp_dict_key_59 = mod_consts[538];
                tmp_expression_value_344 = PyObject_GetItem(locals_hikari$api$rest$$$class__2_RESTClient_110, mod_consts[440]);

                if (tmp_expression_value_344 == NULL) {
                    if (CHECK_AND_CLEAR_KEY_ERROR_OCCURRED()) {
                        tmp_expression_value_344 = GET_STRING_DICT_VALUE(moduledict_hikari$api$rest, (Nuitka_StringObject *)mod_consts[440]);

                        if (unlikely(tmp_expression_value_344 == NULL)) {
                            tmp_expression_value_344 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[440]);
                        }

                        if (tmp_expression_value_344 == NULL) {
                            assert(ERROR_OCCURRED());

                            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                            exception_lineno = 7598;
                            type_description_2 = "o";
                            goto dict_build_exception_44;
                        }
                        Py_INCREF(tmp_expression_value_344);
                    } else {
                        goto dict_build_exception_44;
                    }
                }

                tmp_dict_value_59 = LOOKUP_ATTRIBUTE(tmp_expression_value_344, mod_consts[485]);
                Py_DECREF(tmp_expression_value_344);
                if (tmp_dict_value_59 == NULL) {
                    assert(ERROR_OCCURRED());

                    FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                    exception_lineno = 7598;
                    type_description_2 = "o";
                    goto dict_build_exception_44;
                }
                tmp_res = PyDict_SetItem(tmp_kw_defaults_59, tmp_dict_key_59, tmp_dict_value_59);
                Py_DECREF(tmp_dict_value_59);
                assert(!(tmp_res != 0));
                tmp_dict_key_59 = mod_consts[547];
                tmp_dict_value_59 = Py_False;
                tmp_res = PyDict_SetItem(tmp_kw_defaults_59, tmp_dict_key_59, tmp_dict_value_59);
                assert(!(tmp_res != 0));
                tmp_dict_key_59 = mod_consts[541];
                tmp_expression_value_345 = PyObject_GetItem(locals_hikari$api$rest$$$class__2_RESTClient_110, mod_consts[440]);

                if (tmp_expression_value_345 == NULL) {
                    if (CHECK_AND_CLEAR_KEY_ERROR_OCCURRED()) {
                        tmp_expression_value_345 = GET_STRING_DICT_VALUE(moduledict_hikari$api$rest, (Nuitka_StringObject *)mod_consts[440]);

                        if (unlikely(tmp_expression_value_345 == NULL)) {
                            tmp_expression_value_345 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[440]);
                        }

                        if (tmp_expression_value_345 == NULL) {
                            assert(ERROR_OCCURRED());

                            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                            exception_lineno = 7600;
                            type_description_2 = "o";
                            goto dict_build_exception_44;
                        }
                        Py_INCREF(tmp_expression_value_345);
                    } else {
                        goto dict_build_exception_44;
                    }
                }

                tmp_dict_value_59 = LOOKUP_ATTRIBUTE(tmp_expression_value_345, mod_consts[485]);
                Py_DECREF(tmp_expression_value_345);
                if (tmp_dict_value_59 == NULL) {
                    assert(ERROR_OCCURRED());

                    FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                    exception_lineno = 7600;
                    type_description_2 = "o";
                    goto dict_build_exception_44;
                }
                tmp_res = PyDict_SetItem(tmp_kw_defaults_59, tmp_dict_key_59, tmp_dict_value_59);
                Py_DECREF(tmp_dict_value_59);
                assert(!(tmp_res != 0));
                tmp_dict_key_59 = mod_consts[543];
                tmp_expression_value_346 = PyObject_GetItem(locals_hikari$api$rest$$$class__2_RESTClient_110, mod_consts[440]);

                if (tmp_expression_value_346 == NULL) {
                    if (CHECK_AND_CLEAR_KEY_ERROR_OCCURRED()) {
                        tmp_expression_value_346 = GET_STRING_DICT_VALUE(moduledict_hikari$api$rest, (Nuitka_StringObject *)mod_consts[440]);

                        if (unlikely(tmp_expression_value_346 == NULL)) {
                            tmp_expression_value_346 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[440]);
                        }

                        if (tmp_expression_value_346 == NULL) {
                            assert(ERROR_OCCURRED());

                            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                            exception_lineno = 7603;
                            type_description_2 = "o";
                            goto dict_build_exception_44;
                        }
                        Py_INCREF(tmp_expression_value_346);
                    } else {
                        goto dict_build_exception_44;
                    }
                }

                tmp_dict_value_59 = LOOKUP_ATTRIBUTE(tmp_expression_value_346, mod_consts[485]);
                Py_DECREF(tmp_expression_value_346);
                if (tmp_dict_value_59 == NULL) {
                    assert(ERROR_OCCURRED());

                    FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                    exception_lineno = 7603;
                    type_description_2 = "o";
                    goto dict_build_exception_44;
                }
                tmp_res = PyDict_SetItem(tmp_kw_defaults_59, tmp_dict_key_59, tmp_dict_value_59);
                Py_DECREF(tmp_dict_value_59);
                assert(!(tmp_res != 0));
                tmp_dict_key_59 = mod_consts[544];
                tmp_expression_value_347 = PyObject_GetItem(locals_hikari$api$rest$$$class__2_RESTClient_110, mod_consts[440]);

                if (tmp_expression_value_347 == NULL) {
                    if (CHECK_AND_CLEAR_KEY_ERROR_OCCURRED()) {
                        tmp_expression_value_347 = GET_STRING_DICT_VALUE(moduledict_hikari$api$rest, (Nuitka_StringObject *)mod_consts[440]);

                        if (unlikely(tmp_expression_value_347 == NULL)) {
                            tmp_expression_value_347 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[440]);
                        }

                        if (tmp_expression_value_347 == NULL) {
                            assert(ERROR_OCCURRED());

                            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                            exception_lineno = 7606;
                            type_description_2 = "o";
                            goto dict_build_exception_44;
                        }
                        Py_INCREF(tmp_expression_value_347);
                    } else {
                        goto dict_build_exception_44;
                    }
                }

                tmp_dict_value_59 = LOOKUP_ATTRIBUTE(tmp_expression_value_347, mod_consts[485]);
                Py_DECREF(tmp_expression_value_347);
                if (tmp_dict_value_59 == NULL) {
                    assert(ERROR_OCCURRED());

                    FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                    exception_lineno = 7606;
                    type_description_2 = "o";
                    goto dict_build_exception_44;
                }
                tmp_res = PyDict_SetItem(tmp_kw_defaults_59, tmp_dict_key_59, tmp_dict_value_59);
                Py_DECREF(tmp_dict_value_59);
                assert(!(tmp_res != 0));
            }
            goto dict_build_noexception_44;
            // Exception handling pass through code for dict_build:
            dict_build_exception_44:;
            Py_DECREF(tmp_called_value_81);
            Py_DECREF(tmp_defaults_17);
            Py_DECREF(tmp_kw_defaults_59);
            goto frame_exception_exit_3;
            // Finished with no exception for dict_build:
            dict_build_noexception_44:;
            tmp_annotations_154 = PyDict_Copy(mod_consts[738]);


            tmp_args_element_value_164 = MAKE_FUNCTION_hikari$api$rest$$$function__150_edit_interaction_response(tmp_defaults_17, tmp_kw_defaults_59, tmp_annotations_154);

            frame_862833cacd6e5ba73c351f8d132a7b6b_3->m_frame.f_lineno = 7584;
            tmp_dictset_value = CALL_FUNCTION_WITH_SINGLE_ARG(tmp_called_value_81, tmp_args_element_value_164);
            Py_DECREF(tmp_called_value_81);
            Py_DECREF(tmp_args_element_value_164);
            if (tmp_dictset_value == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 7584;
                type_description_2 = "o";
                goto frame_exception_exit_3;
            }
            tmp_res = PyObject_SetItem(locals_hikari$api$rest$$$class__2_RESTClient_110, mod_consts[390], tmp_dictset_value);
            Py_DECREF(tmp_dictset_value);
            if (tmp_res != 0) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 7585;
                type_description_2 = "o";
                goto frame_exception_exit_3;
            }
        }
        {
            PyObject *tmp_called_instance_87;
            PyObject *tmp_args_element_value_165;
            PyObject *tmp_annotations_155;
            tmp_called_instance_87 = PyObject_GetItem(locals_hikari$api$rest$$$class__2_RESTClient_110, mod_consts[431]);

            if (tmp_called_instance_87 == NULL) {
                if (CHECK_AND_CLEAR_KEY_ERROR_OCCURRED()) {
                    tmp_called_instance_87 = GET_STRING_DICT_VALUE(moduledict_hikari$api$rest, (Nuitka_StringObject *)mod_consts[431]);

                    if (unlikely(tmp_called_instance_87 == NULL)) {
                        tmp_called_instance_87 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[431]);
                    }

                    if (tmp_called_instance_87 == NULL) {
                        assert(ERROR_OCCURRED());

                        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                        exception_lineno = 7742;
                        type_description_2 = "o";
                        goto frame_exception_exit_3;
                    }
                    Py_INCREF(tmp_called_instance_87);
                } else {
                    goto frame_exception_exit_3;
                }
            }

            tmp_annotations_155 = PyDict_Copy(mod_consts[739]);


            tmp_args_element_value_165 = MAKE_FUNCTION_hikari$api$rest$$$function__151_delete_interaction_response(tmp_annotations_155);

            frame_862833cacd6e5ba73c351f8d132a7b6b_3->m_frame.f_lineno = 7742;
            tmp_dictset_value = CALL_METHOD_WITH_SINGLE_ARG(tmp_called_instance_87, mod_consts[457], tmp_args_element_value_165);
            Py_DECREF(tmp_called_instance_87);
            Py_DECREF(tmp_args_element_value_165);
            if (tmp_dictset_value == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 7742;
                type_description_2 = "o";
                goto frame_exception_exit_3;
            }
            tmp_res = PyObject_SetItem(locals_hikari$api$rest$$$class__2_RESTClient_110, mod_consts[393], tmp_dictset_value);
            Py_DECREF(tmp_dictset_value);
            if (tmp_res != 0) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 7743;
                type_description_2 = "o";
                goto frame_exception_exit_3;
            }
        }
        {
            PyObject *tmp_called_instance_88;
            PyObject *tmp_args_element_value_166;
            PyObject *tmp_annotations_156;
            tmp_called_instance_88 = PyObject_GetItem(locals_hikari$api$rest$$$class__2_RESTClient_110, mod_consts[431]);

            if (tmp_called_instance_88 == NULL) {
                if (CHECK_AND_CLEAR_KEY_ERROR_OCCURRED()) {
                    tmp_called_instance_88 = GET_STRING_DICT_VALUE(moduledict_hikari$api$rest, (Nuitka_StringObject *)mod_consts[431]);

                    if (unlikely(tmp_called_instance_88 == NULL)) {
                        tmp_called_instance_88 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[431]);
                    }

                    if (tmp_called_instance_88 == NULL) {
                        assert(ERROR_OCCURRED());

                        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                        exception_lineno = 7776;
                        type_description_2 = "o";
                        goto frame_exception_exit_3;
                    }
                    Py_INCREF(tmp_called_instance_88);
                } else {
                    goto frame_exception_exit_3;
                }
            }

            tmp_annotations_156 = PyDict_Copy(mod_consts[740]);


            tmp_args_element_value_166 = MAKE_FUNCTION_hikari$api$rest$$$function__152_create_autocomplete_response(tmp_annotations_156);

            frame_862833cacd6e5ba73c351f8d132a7b6b_3->m_frame.f_lineno = 7776;
            tmp_dictset_value = CALL_METHOD_WITH_SINGLE_ARG(tmp_called_instance_88, mod_consts[457], tmp_args_element_value_166);
            Py_DECREF(tmp_called_instance_88);
            Py_DECREF(tmp_args_element_value_166);
            if (tmp_dictset_value == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 7776;
                type_description_2 = "o";
                goto frame_exception_exit_3;
            }
            tmp_res = PyObject_SetItem(locals_hikari$api$rest$$$class__2_RESTClient_110, mod_consts[396], tmp_dictset_value);
            Py_DECREF(tmp_dictset_value);
            if (tmp_res != 0) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 7777;
                type_description_2 = "o";
                goto frame_exception_exit_3;
            }
        }
        {
            PyObject *tmp_called_instance_89;
            PyObject *tmp_args_element_value_167;
            PyObject *tmp_annotations_157;
            tmp_called_instance_89 = PyObject_GetItem(locals_hikari$api$rest$$$class__2_RESTClient_110, mod_consts[431]);

            if (tmp_called_instance_89 == NULL) {
                if (CHECK_AND_CLEAR_KEY_ERROR_OCCURRED()) {
                    tmp_called_instance_89 = GET_STRING_DICT_VALUE(moduledict_hikari$api$rest, (Nuitka_StringObject *)mod_consts[431]);

                    if (unlikely(tmp_called_instance_89 == NULL)) {
                        tmp_called_instance_89 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[431]);
                    }

                    if (tmp_called_instance_89 == NULL) {
                        assert(ERROR_OCCURRED());

                        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                        exception_lineno = 7819;
                        type_description_2 = "o";
                        goto frame_exception_exit_3;
                    }
                    Py_INCREF(tmp_called_instance_89);
                } else {
                    goto frame_exception_exit_3;
                }
            }

            tmp_annotations_157 = PyDict_Copy(mod_consts[741]);


            tmp_args_element_value_167 = MAKE_FUNCTION_hikari$api$rest$$$function__153_build_action_row(tmp_annotations_157);

            frame_862833cacd6e5ba73c351f8d132a7b6b_3->m_frame.f_lineno = 7819;
            tmp_dictset_value = CALL_METHOD_WITH_SINGLE_ARG(tmp_called_instance_89, mod_consts[457], tmp_args_element_value_167);
            Py_DECREF(tmp_called_instance_89);
            Py_DECREF(tmp_args_element_value_167);
            if (tmp_dictset_value == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 7819;
                type_description_2 = "o";
                goto frame_exception_exit_3;
            }
            tmp_res = PyObject_SetItem(locals_hikari$api$rest$$$class__2_RESTClient_110, mod_consts[743], tmp_dictset_value);
            Py_DECREF(tmp_dictset_value);
            if (tmp_res != 0) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 7820;
                type_description_2 = "o";
                goto frame_exception_exit_3;
            }
        }
        {
            PyObject *tmp_called_instance_90;
            PyObject *tmp_args_element_value_168;
            PyObject *tmp_annotations_158;
            tmp_called_instance_90 = PyObject_GetItem(locals_hikari$api$rest$$$class__2_RESTClient_110, mod_consts[431]);

            if (tmp_called_instance_90 == NULL) {
                if (CHECK_AND_CLEAR_KEY_ERROR_OCCURRED()) {
                    tmp_called_instance_90 = GET_STRING_DICT_VALUE(moduledict_hikari$api$rest, (Nuitka_StringObject *)mod_consts[431]);

                    if (unlikely(tmp_called_instance_90 == NULL)) {
                        tmp_called_instance_90 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[431]);
                    }

                    if (tmp_called_instance_90 == NULL) {
                        assert(ERROR_OCCURRED());

                        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                        exception_lineno = 7829;
                        type_description_2 = "o";
                        goto frame_exception_exit_3;
                    }
                    Py_INCREF(tmp_called_instance_90);
                } else {
                    goto frame_exception_exit_3;
                }
            }

            tmp_annotations_158 = PyDict_Copy(mod_consts[745]);


            tmp_args_element_value_168 = MAKE_FUNCTION_hikari$api$rest$$$function__154_fetch_scheduled_event(tmp_annotations_158);

            frame_862833cacd6e5ba73c351f8d132a7b6b_3->m_frame.f_lineno = 7829;
            tmp_dictset_value = CALL_METHOD_WITH_SINGLE_ARG(tmp_called_instance_90, mod_consts[457], tmp_args_element_value_168);
            Py_DECREF(tmp_called_instance_90);
            Py_DECREF(tmp_args_element_value_168);
            if (tmp_dictset_value == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 7829;
                type_description_2 = "o";
                goto frame_exception_exit_3;
            }
            tmp_res = PyObject_SetItem(locals_hikari$api$rest$$$class__2_RESTClient_110, mod_consts[399], tmp_dictset_value);
            Py_DECREF(tmp_dictset_value);
            if (tmp_res != 0) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 7830;
                type_description_2 = "o";
                goto frame_exception_exit_3;
            }
        }
        {
            PyObject *tmp_called_instance_91;
            PyObject *tmp_args_element_value_169;
            PyObject *tmp_annotations_159;
            tmp_called_instance_91 = PyObject_GetItem(locals_hikari$api$rest$$$class__2_RESTClient_110, mod_consts[431]);

            if (tmp_called_instance_91 == NULL) {
                if (CHECK_AND_CLEAR_KEY_ERROR_OCCURRED()) {
                    tmp_called_instance_91 = GET_STRING_DICT_VALUE(moduledict_hikari$api$rest, (Nuitka_StringObject *)mod_consts[431]);

                    if (unlikely(tmp_called_instance_91 == NULL)) {
                        tmp_called_instance_91 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[431]);
                    }

                    if (tmp_called_instance_91 == NULL) {
                        assert(ERROR_OCCURRED());

                        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                        exception_lineno = 7875;
                        type_description_2 = "o";
                        goto frame_exception_exit_3;
                    }
                    Py_INCREF(tmp_called_instance_91);
                } else {
                    goto frame_exception_exit_3;
                }
            }

            tmp_annotations_159 = PyDict_Copy(mod_consts[746]);


            tmp_args_element_value_169 = MAKE_FUNCTION_hikari$api$rest$$$function__155_fetch_scheduled_events(tmp_annotations_159);

            frame_862833cacd6e5ba73c351f8d132a7b6b_3->m_frame.f_lineno = 7875;
            tmp_dictset_value = CALL_METHOD_WITH_SINGLE_ARG(tmp_called_instance_91, mod_consts[457], tmp_args_element_value_169);
            Py_DECREF(tmp_called_instance_91);
            Py_DECREF(tmp_args_element_value_169);
            if (tmp_dictset_value == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 7875;
                type_description_2 = "o";
                goto frame_exception_exit_3;
            }
            tmp_res = PyObject_SetItem(locals_hikari$api$rest$$$class__2_RESTClient_110, mod_consts[402], tmp_dictset_value);
            Py_DECREF(tmp_dictset_value);
            if (tmp_res != 0) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 7876;
                type_description_2 = "o";
                goto frame_exception_exit_3;
            }
        }
        {
            PyObject *tmp_called_value_82;
            PyObject *tmp_expression_value_348;
            PyObject *tmp_args_element_value_170;
            PyObject *tmp_kw_defaults_60;
            PyObject *tmp_dict_key_60;
            PyObject *tmp_dict_value_60;
            PyObject *tmp_expression_value_349;
            PyObject *tmp_annotations_160;
            tmp_expression_value_348 = PyObject_GetItem(locals_hikari$api$rest$$$class__2_RESTClient_110, mod_consts[431]);

            if (tmp_expression_value_348 == NULL) {
                if (CHECK_AND_CLEAR_KEY_ERROR_OCCURRED()) {
                    tmp_expression_value_348 = GET_STRING_DICT_VALUE(moduledict_hikari$api$rest, (Nuitka_StringObject *)mod_consts[431]);

                    if (unlikely(tmp_expression_value_348 == NULL)) {
                        tmp_expression_value_348 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[431]);
                    }

                    if (tmp_expression_value_348 == NULL) {
                        assert(ERROR_OCCURRED());

                        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                        exception_lineno = 7916;
                        type_description_2 = "o";
                        goto frame_exception_exit_3;
                    }
                    Py_INCREF(tmp_expression_value_348);
                } else {
                    goto frame_exception_exit_3;
                }
            }

            tmp_called_value_82 = LOOKUP_ATTRIBUTE(tmp_expression_value_348, mod_consts[457]);
            Py_DECREF(tmp_expression_value_348);
            if (tmp_called_value_82 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 7916;
                type_description_2 = "o";
                goto frame_exception_exit_3;
            }
            tmp_dict_key_60 = mod_consts[616];
            tmp_expression_value_349 = PyObject_GetItem(locals_hikari$api$rest$$$class__2_RESTClient_110, mod_consts[440]);

            if (tmp_expression_value_349 == NULL) {
                if (CHECK_AND_CLEAR_KEY_ERROR_OCCURRED()) {
                    tmp_expression_value_349 = GET_STRING_DICT_VALUE(moduledict_hikari$api$rest, (Nuitka_StringObject *)mod_consts[440]);

                    if (unlikely(tmp_expression_value_349 == NULL)) {
                        tmp_expression_value_349 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[440]);
                    }

                    if (tmp_expression_value_349 == NULL) {
                        assert(ERROR_OCCURRED());

                        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
                        Py_DECREF(tmp_called_value_82);

                        exception_lineno = 7925;
                        type_description_2 = "o";
                        goto frame_exception_exit_3;
                    }
                    Py_INCREF(tmp_expression_value_349);
                } else {
                    goto frame_exception_exit_3;
                }
            }

            tmp_dict_value_60 = LOOKUP_ATTRIBUTE(tmp_expression_value_349, mod_consts[485]);
            Py_DECREF(tmp_expression_value_349);
            if (tmp_dict_value_60 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
                Py_DECREF(tmp_called_value_82);

                exception_lineno = 7925;
                type_description_2 = "o";
                goto frame_exception_exit_3;
            }
            tmp_kw_defaults_60 = _PyDict_NewPresized( 5 );
            {
                PyObject *tmp_expression_value_350;
                PyObject *tmp_expression_value_351;
                PyObject *tmp_expression_value_352;
                PyObject *tmp_expression_value_353;
                PyObject *tmp_expression_value_354;
                tmp_res = PyDict_SetItem(tmp_kw_defaults_60, tmp_dict_key_60, tmp_dict_value_60);
                Py_DECREF(tmp_dict_value_60);
                assert(!(tmp_res != 0));
                tmp_dict_key_60 = mod_consts[747];
                tmp_expression_value_350 = PyObject_GetItem(locals_hikari$api$rest$$$class__2_RESTClient_110, mod_consts[440]);

                if (tmp_expression_value_350 == NULL) {
                    if (CHECK_AND_CLEAR_KEY_ERROR_OCCURRED()) {
                        tmp_expression_value_350 = GET_STRING_DICT_VALUE(moduledict_hikari$api$rest, (Nuitka_StringObject *)mod_consts[440]);

                        if (unlikely(tmp_expression_value_350 == NULL)) {
                            tmp_expression_value_350 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[440]);
                        }

                        if (tmp_expression_value_350 == NULL) {
                            assert(ERROR_OCCURRED());

                            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                            exception_lineno = 7926;
                            type_description_2 = "o";
                            goto dict_build_exception_45;
                        }
                        Py_INCREF(tmp_expression_value_350);
                    } else {
                        goto dict_build_exception_45;
                    }
                }

                tmp_dict_value_60 = LOOKUP_ATTRIBUTE(tmp_expression_value_350, mod_consts[485]);
                Py_DECREF(tmp_expression_value_350);
                if (tmp_dict_value_60 == NULL) {
                    assert(ERROR_OCCURRED());

                    FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                    exception_lineno = 7926;
                    type_description_2 = "o";
                    goto dict_build_exception_45;
                }
                tmp_res = PyDict_SetItem(tmp_kw_defaults_60, tmp_dict_key_60, tmp_dict_value_60);
                Py_DECREF(tmp_dict_value_60);
                assert(!(tmp_res != 0));
                tmp_dict_key_60 = mod_consts[748];
                tmp_expression_value_351 = PyObject_GetItem(locals_hikari$api$rest$$$class__2_RESTClient_110, mod_consts[440]);

                if (tmp_expression_value_351 == NULL) {
                    if (CHECK_AND_CLEAR_KEY_ERROR_OCCURRED()) {
                        tmp_expression_value_351 = GET_STRING_DICT_VALUE(moduledict_hikari$api$rest, (Nuitka_StringObject *)mod_consts[440]);

                        if (unlikely(tmp_expression_value_351 == NULL)) {
                            tmp_expression_value_351 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[440]);
                        }

                        if (tmp_expression_value_351 == NULL) {
                            assert(ERROR_OCCURRED());

                            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                            exception_lineno = 7927;
                            type_description_2 = "o";
                            goto dict_build_exception_45;
                        }
                        Py_INCREF(tmp_expression_value_351);
                    } else {
                        goto dict_build_exception_45;
                    }
                }

                tmp_dict_value_60 = LOOKUP_ATTRIBUTE(tmp_expression_value_351, mod_consts[485]);
                Py_DECREF(tmp_expression_value_351);
                if (tmp_dict_value_60 == NULL) {
                    assert(ERROR_OCCURRED());

                    FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                    exception_lineno = 7927;
                    type_description_2 = "o";
                    goto dict_build_exception_45;
                }
                tmp_res = PyDict_SetItem(tmp_kw_defaults_60, tmp_dict_key_60, tmp_dict_value_60);
                Py_DECREF(tmp_dict_value_60);
                assert(!(tmp_res != 0));
                tmp_dict_key_60 = mod_consts[749];
                tmp_expression_value_353 = PyObject_GetItem(locals_hikari$api$rest$$$class__2_RESTClient_110, mod_consts[436]);

                if (tmp_expression_value_353 == NULL) {
                    if (CHECK_AND_CLEAR_KEY_ERROR_OCCURRED()) {
                        tmp_expression_value_353 = GET_STRING_DICT_VALUE(moduledict_hikari$api$rest, (Nuitka_StringObject *)mod_consts[436]);

                        if (unlikely(tmp_expression_value_353 == NULL)) {
                            tmp_expression_value_353 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[436]);
                        }

                        if (tmp_expression_value_353 == NULL) {
                            assert(ERROR_OCCURRED());

                            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                            exception_lineno = 7930;
                            type_description_2 = "o";
                            goto dict_build_exception_45;
                        }
                        Py_INCREF(tmp_expression_value_353);
                    } else {
                        goto dict_build_exception_45;
                    }
                }

                tmp_expression_value_352 = LOOKUP_ATTRIBUTE(tmp_expression_value_353, mod_consts[750]);
                Py_DECREF(tmp_expression_value_353);
                if (tmp_expression_value_352 == NULL) {
                    assert(ERROR_OCCURRED());

                    FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                    exception_lineno = 7930;
                    type_description_2 = "o";
                    goto dict_build_exception_45;
                }
                tmp_dict_value_60 = LOOKUP_ATTRIBUTE(tmp_expression_value_352, mod_consts[751]);
                Py_DECREF(tmp_expression_value_352);
                if (tmp_dict_value_60 == NULL) {
                    assert(ERROR_OCCURRED());

                    FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                    exception_lineno = 7930;
                    type_description_2 = "o";
                    goto dict_build_exception_45;
                }
                tmp_res = PyDict_SetItem(tmp_kw_defaults_60, tmp_dict_key_60, tmp_dict_value_60);
                Py_DECREF(tmp_dict_value_60);
                assert(!(tmp_res != 0));
                tmp_dict_key_60 = mod_consts[496];
                tmp_expression_value_354 = PyObject_GetItem(locals_hikari$api$rest$$$class__2_RESTClient_110, mod_consts[440]);

                if (tmp_expression_value_354 == NULL) {
                    if (CHECK_AND_CLEAR_KEY_ERROR_OCCURRED()) {
                        tmp_expression_value_354 = GET_STRING_DICT_VALUE(moduledict_hikari$api$rest, (Nuitka_StringObject *)mod_consts[440]);

                        if (unlikely(tmp_expression_value_354 == NULL)) {
                            tmp_expression_value_354 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[440]);
                        }

                        if (tmp_expression_value_354 == NULL) {
                            assert(ERROR_OCCURRED());

                            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                            exception_lineno = 7931;
                            type_description_2 = "o";
                            goto dict_build_exception_45;
                        }
                        Py_INCREF(tmp_expression_value_354);
                    } else {
                        goto dict_build_exception_45;
                    }
                }

                tmp_dict_value_60 = LOOKUP_ATTRIBUTE(tmp_expression_value_354, mod_consts[485]);
                Py_DECREF(tmp_expression_value_354);
                if (tmp_dict_value_60 == NULL) {
                    assert(ERROR_OCCURRED());

                    FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                    exception_lineno = 7931;
                    type_description_2 = "o";
                    goto dict_build_exception_45;
                }
                tmp_res = PyDict_SetItem(tmp_kw_defaults_60, tmp_dict_key_60, tmp_dict_value_60);
                Py_DECREF(tmp_dict_value_60);
                assert(!(tmp_res != 0));
            }
            goto dict_build_noexception_45;
            // Exception handling pass through code for dict_build:
            dict_build_exception_45:;
            Py_DECREF(tmp_called_value_82);
            Py_DECREF(tmp_kw_defaults_60);
            goto frame_exception_exit_3;
            // Finished with no exception for dict_build:
            dict_build_noexception_45:;
            tmp_annotations_160 = PyDict_Copy(mod_consts[752]);


            tmp_args_element_value_170 = MAKE_FUNCTION_hikari$api$rest$$$function__156_create_stage_event(tmp_kw_defaults_60, tmp_annotations_160);

            frame_862833cacd6e5ba73c351f8d132a7b6b_3->m_frame.f_lineno = 7916;
            tmp_dictset_value = CALL_FUNCTION_WITH_SINGLE_ARG(tmp_called_value_82, tmp_args_element_value_170);
            Py_DECREF(tmp_called_value_82);
            Py_DECREF(tmp_args_element_value_170);
            if (tmp_dictset_value == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 7916;
                type_description_2 = "o";
                goto frame_exception_exit_3;
            }
            tmp_res = PyObject_SetItem(locals_hikari$api$rest$$$class__2_RESTClient_110, mod_consts[405], tmp_dictset_value);
            Py_DECREF(tmp_dictset_value);
            if (tmp_res != 0) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 7917;
                type_description_2 = "o";
                goto frame_exception_exit_3;
            }
        }
        {
            PyObject *tmp_called_value_83;
            PyObject *tmp_expression_value_355;
            PyObject *tmp_args_element_value_171;
            PyObject *tmp_kw_defaults_61;
            PyObject *tmp_dict_key_61;
            PyObject *tmp_dict_value_61;
            PyObject *tmp_expression_value_356;
            PyObject *tmp_annotations_161;
            tmp_expression_value_355 = PyObject_GetItem(locals_hikari$api$rest$$$class__2_RESTClient_110, mod_consts[431]);

            if (tmp_expression_value_355 == NULL) {
                if (CHECK_AND_CLEAR_KEY_ERROR_OCCURRED()) {
                    tmp_expression_value_355 = GET_STRING_DICT_VALUE(moduledict_hikari$api$rest, (Nuitka_StringObject *)mod_consts[431]);

                    if (unlikely(tmp_expression_value_355 == NULL)) {
                        tmp_expression_value_355 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[431]);
                    }

                    if (tmp_expression_value_355 == NULL) {
                        assert(ERROR_OCCURRED());

                        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                        exception_lineno = 7995;
                        type_description_2 = "o";
                        goto frame_exception_exit_3;
                    }
                    Py_INCREF(tmp_expression_value_355);
                } else {
                    goto frame_exception_exit_3;
                }
            }

            tmp_called_value_83 = LOOKUP_ATTRIBUTE(tmp_expression_value_355, mod_consts[457]);
            Py_DECREF(tmp_expression_value_355);
            if (tmp_called_value_83 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 7995;
                type_description_2 = "o";
                goto frame_exception_exit_3;
            }
            tmp_dict_key_61 = mod_consts[616];
            tmp_expression_value_356 = PyObject_GetItem(locals_hikari$api$rest$$$class__2_RESTClient_110, mod_consts[440]);

            if (tmp_expression_value_356 == NULL) {
                if (CHECK_AND_CLEAR_KEY_ERROR_OCCURRED()) {
                    tmp_expression_value_356 = GET_STRING_DICT_VALUE(moduledict_hikari$api$rest, (Nuitka_StringObject *)mod_consts[440]);

                    if (unlikely(tmp_expression_value_356 == NULL)) {
                        tmp_expression_value_356 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[440]);
                    }

                    if (tmp_expression_value_356 == NULL) {
                        assert(ERROR_OCCURRED());

                        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
                        Py_DECREF(tmp_called_value_83);

                        exception_lineno = 8004;
                        type_description_2 = "o";
                        goto frame_exception_exit_3;
                    }
                    Py_INCREF(tmp_expression_value_356);
                } else {
                    goto frame_exception_exit_3;
                }
            }

            tmp_dict_value_61 = LOOKUP_ATTRIBUTE(tmp_expression_value_356, mod_consts[485]);
            Py_DECREF(tmp_expression_value_356);
            if (tmp_dict_value_61 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
                Py_DECREF(tmp_called_value_83);

                exception_lineno = 8004;
                type_description_2 = "o";
                goto frame_exception_exit_3;
            }
            tmp_kw_defaults_61 = _PyDict_NewPresized( 5 );
            {
                PyObject *tmp_expression_value_357;
                PyObject *tmp_expression_value_358;
                PyObject *tmp_expression_value_359;
                PyObject *tmp_expression_value_360;
                PyObject *tmp_expression_value_361;
                tmp_res = PyDict_SetItem(tmp_kw_defaults_61, tmp_dict_key_61, tmp_dict_value_61);
                Py_DECREF(tmp_dict_value_61);
                assert(!(tmp_res != 0));
                tmp_dict_key_61 = mod_consts[747];
                tmp_expression_value_357 = PyObject_GetItem(locals_hikari$api$rest$$$class__2_RESTClient_110, mod_consts[440]);

                if (tmp_expression_value_357 == NULL) {
                    if (CHECK_AND_CLEAR_KEY_ERROR_OCCURRED()) {
                        tmp_expression_value_357 = GET_STRING_DICT_VALUE(moduledict_hikari$api$rest, (Nuitka_StringObject *)mod_consts[440]);

                        if (unlikely(tmp_expression_value_357 == NULL)) {
                            tmp_expression_value_357 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[440]);
                        }

                        if (tmp_expression_value_357 == NULL) {
                            assert(ERROR_OCCURRED());

                            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                            exception_lineno = 8005;
                            type_description_2 = "o";
                            goto dict_build_exception_46;
                        }
                        Py_INCREF(tmp_expression_value_357);
                    } else {
                        goto dict_build_exception_46;
                    }
                }

                tmp_dict_value_61 = LOOKUP_ATTRIBUTE(tmp_expression_value_357, mod_consts[485]);
                Py_DECREF(tmp_expression_value_357);
                if (tmp_dict_value_61 == NULL) {
                    assert(ERROR_OCCURRED());

                    FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                    exception_lineno = 8005;
                    type_description_2 = "o";
                    goto dict_build_exception_46;
                }
                tmp_res = PyDict_SetItem(tmp_kw_defaults_61, tmp_dict_key_61, tmp_dict_value_61);
                Py_DECREF(tmp_dict_value_61);
                assert(!(tmp_res != 0));
                tmp_dict_key_61 = mod_consts[748];
                tmp_expression_value_358 = PyObject_GetItem(locals_hikari$api$rest$$$class__2_RESTClient_110, mod_consts[440]);

                if (tmp_expression_value_358 == NULL) {
                    if (CHECK_AND_CLEAR_KEY_ERROR_OCCURRED()) {
                        tmp_expression_value_358 = GET_STRING_DICT_VALUE(moduledict_hikari$api$rest, (Nuitka_StringObject *)mod_consts[440]);

                        if (unlikely(tmp_expression_value_358 == NULL)) {
                            tmp_expression_value_358 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[440]);
                        }

                        if (tmp_expression_value_358 == NULL) {
                            assert(ERROR_OCCURRED());

                            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                            exception_lineno = 8006;
                            type_description_2 = "o";
                            goto dict_build_exception_46;
                        }
                        Py_INCREF(tmp_expression_value_358);
                    } else {
                        goto dict_build_exception_46;
                    }
                }

                tmp_dict_value_61 = LOOKUP_ATTRIBUTE(tmp_expression_value_358, mod_consts[485]);
                Py_DECREF(tmp_expression_value_358);
                if (tmp_dict_value_61 == NULL) {
                    assert(ERROR_OCCURRED());

                    FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                    exception_lineno = 8006;
                    type_description_2 = "o";
                    goto dict_build_exception_46;
                }
                tmp_res = PyDict_SetItem(tmp_kw_defaults_61, tmp_dict_key_61, tmp_dict_value_61);
                Py_DECREF(tmp_dict_value_61);
                assert(!(tmp_res != 0));
                tmp_dict_key_61 = mod_consts[749];
                tmp_expression_value_360 = PyObject_GetItem(locals_hikari$api$rest$$$class__2_RESTClient_110, mod_consts[436]);

                if (tmp_expression_value_360 == NULL) {
                    if (CHECK_AND_CLEAR_KEY_ERROR_OCCURRED()) {
                        tmp_expression_value_360 = GET_STRING_DICT_VALUE(moduledict_hikari$api$rest, (Nuitka_StringObject *)mod_consts[436]);

                        if (unlikely(tmp_expression_value_360 == NULL)) {
                            tmp_expression_value_360 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[436]);
                        }

                        if (tmp_expression_value_360 == NULL) {
                            assert(ERROR_OCCURRED());

                            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                            exception_lineno = 8009;
                            type_description_2 = "o";
                            goto dict_build_exception_46;
                        }
                        Py_INCREF(tmp_expression_value_360);
                    } else {
                        goto dict_build_exception_46;
                    }
                }

                tmp_expression_value_359 = LOOKUP_ATTRIBUTE(tmp_expression_value_360, mod_consts[750]);
                Py_DECREF(tmp_expression_value_360);
                if (tmp_expression_value_359 == NULL) {
                    assert(ERROR_OCCURRED());

                    FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                    exception_lineno = 8009;
                    type_description_2 = "o";
                    goto dict_build_exception_46;
                }
                tmp_dict_value_61 = LOOKUP_ATTRIBUTE(tmp_expression_value_359, mod_consts[751]);
                Py_DECREF(tmp_expression_value_359);
                if (tmp_dict_value_61 == NULL) {
                    assert(ERROR_OCCURRED());

                    FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                    exception_lineno = 8009;
                    type_description_2 = "o";
                    goto dict_build_exception_46;
                }
                tmp_res = PyDict_SetItem(tmp_kw_defaults_61, tmp_dict_key_61, tmp_dict_value_61);
                Py_DECREF(tmp_dict_value_61);
                assert(!(tmp_res != 0));
                tmp_dict_key_61 = mod_consts[496];
                tmp_expression_value_361 = PyObject_GetItem(locals_hikari$api$rest$$$class__2_RESTClient_110, mod_consts[440]);

                if (tmp_expression_value_361 == NULL) {
                    if (CHECK_AND_CLEAR_KEY_ERROR_OCCURRED()) {
                        tmp_expression_value_361 = GET_STRING_DICT_VALUE(moduledict_hikari$api$rest, (Nuitka_StringObject *)mod_consts[440]);

                        if (unlikely(tmp_expression_value_361 == NULL)) {
                            tmp_expression_value_361 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[440]);
                        }

                        if (tmp_expression_value_361 == NULL) {
                            assert(ERROR_OCCURRED());

                            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                            exception_lineno = 8010;
                            type_description_2 = "o";
                            goto dict_build_exception_46;
                        }
                        Py_INCREF(tmp_expression_value_361);
                    } else {
                        goto dict_build_exception_46;
                    }
                }

                tmp_dict_value_61 = LOOKUP_ATTRIBUTE(tmp_expression_value_361, mod_consts[485]);
                Py_DECREF(tmp_expression_value_361);
                if (tmp_dict_value_61 == NULL) {
                    assert(ERROR_OCCURRED());

                    FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                    exception_lineno = 8010;
                    type_description_2 = "o";
                    goto dict_build_exception_46;
                }
                tmp_res = PyDict_SetItem(tmp_kw_defaults_61, tmp_dict_key_61, tmp_dict_value_61);
                Py_DECREF(tmp_dict_value_61);
                assert(!(tmp_res != 0));
            }
            goto dict_build_noexception_46;
            // Exception handling pass through code for dict_build:
            dict_build_exception_46:;
            Py_DECREF(tmp_called_value_83);
            Py_DECREF(tmp_kw_defaults_61);
            goto frame_exception_exit_3;
            // Finished with no exception for dict_build:
            dict_build_noexception_46:;
            tmp_annotations_161 = PyDict_Copy(mod_consts[753]);


            tmp_args_element_value_171 = MAKE_FUNCTION_hikari$api$rest$$$function__157_create_voice_event(tmp_kw_defaults_61, tmp_annotations_161);

            frame_862833cacd6e5ba73c351f8d132a7b6b_3->m_frame.f_lineno = 7995;
            tmp_dictset_value = CALL_FUNCTION_WITH_SINGLE_ARG(tmp_called_value_83, tmp_args_element_value_171);
            Py_DECREF(tmp_called_value_83);
            Py_DECREF(tmp_args_element_value_171);
            if (tmp_dictset_value == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 7995;
                type_description_2 = "o";
                goto frame_exception_exit_3;
            }
            tmp_res = PyObject_SetItem(locals_hikari$api$rest$$$class__2_RESTClient_110, mod_consts[408], tmp_dictset_value);
            Py_DECREF(tmp_dictset_value);
            if (tmp_res != 0) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 7996;
                type_description_2 = "o";
                goto frame_exception_exit_3;
            }
        }
        {
            PyObject *tmp_called_value_84;
            PyObject *tmp_expression_value_362;
            PyObject *tmp_args_element_value_172;
            PyObject *tmp_kw_defaults_62;
            PyObject *tmp_dict_key_62;
            PyObject *tmp_dict_value_62;
            PyObject *tmp_expression_value_363;
            PyObject *tmp_annotations_162;
            tmp_expression_value_362 = PyObject_GetItem(locals_hikari$api$rest$$$class__2_RESTClient_110, mod_consts[431]);

            if (tmp_expression_value_362 == NULL) {
                if (CHECK_AND_CLEAR_KEY_ERROR_OCCURRED()) {
                    tmp_expression_value_362 = GET_STRING_DICT_VALUE(moduledict_hikari$api$rest, (Nuitka_StringObject *)mod_consts[431]);

                    if (unlikely(tmp_expression_value_362 == NULL)) {
                        tmp_expression_value_362 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[431]);
                    }

                    if (tmp_expression_value_362 == NULL) {
                        assert(ERROR_OCCURRED());

                        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                        exception_lineno = 8074;
                        type_description_2 = "o";
                        goto frame_exception_exit_3;
                    }
                    Py_INCREF(tmp_expression_value_362);
                } else {
                    goto frame_exception_exit_3;
                }
            }

            tmp_called_value_84 = LOOKUP_ATTRIBUTE(tmp_expression_value_362, mod_consts[457]);
            Py_DECREF(tmp_expression_value_362);
            if (tmp_called_value_84 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 8074;
                type_description_2 = "o";
                goto frame_exception_exit_3;
            }
            tmp_dict_key_62 = mod_consts[616];
            tmp_expression_value_363 = PyObject_GetItem(locals_hikari$api$rest$$$class__2_RESTClient_110, mod_consts[440]);

            if (tmp_expression_value_363 == NULL) {
                if (CHECK_AND_CLEAR_KEY_ERROR_OCCURRED()) {
                    tmp_expression_value_363 = GET_STRING_DICT_VALUE(moduledict_hikari$api$rest, (Nuitka_StringObject *)mod_consts[440]);

                    if (unlikely(tmp_expression_value_363 == NULL)) {
                        tmp_expression_value_363 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[440]);
                    }

                    if (tmp_expression_value_363 == NULL) {
                        assert(ERROR_OCCURRED());

                        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
                        Py_DECREF(tmp_called_value_84);

                        exception_lineno = 8084;
                        type_description_2 = "o";
                        goto frame_exception_exit_3;
                    }
                    Py_INCREF(tmp_expression_value_363);
                } else {
                    goto frame_exception_exit_3;
                }
            }

            tmp_dict_value_62 = LOOKUP_ATTRIBUTE(tmp_expression_value_363, mod_consts[485]);
            Py_DECREF(tmp_expression_value_363);
            if (tmp_dict_value_62 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
                Py_DECREF(tmp_called_value_84);

                exception_lineno = 8084;
                type_description_2 = "o";
                goto frame_exception_exit_3;
            }
            tmp_kw_defaults_62 = _PyDict_NewPresized( 4 );
            {
                PyObject *tmp_expression_value_364;
                PyObject *tmp_expression_value_365;
                PyObject *tmp_expression_value_366;
                PyObject *tmp_expression_value_367;
                tmp_res = PyDict_SetItem(tmp_kw_defaults_62, tmp_dict_key_62, tmp_dict_value_62);
                Py_DECREF(tmp_dict_value_62);
                assert(!(tmp_res != 0));
                tmp_dict_key_62 = mod_consts[748];
                tmp_expression_value_364 = PyObject_GetItem(locals_hikari$api$rest$$$class__2_RESTClient_110, mod_consts[440]);

                if (tmp_expression_value_364 == NULL) {
                    if (CHECK_AND_CLEAR_KEY_ERROR_OCCURRED()) {
                        tmp_expression_value_364 = GET_STRING_DICT_VALUE(moduledict_hikari$api$rest, (Nuitka_StringObject *)mod_consts[440]);

                        if (unlikely(tmp_expression_value_364 == NULL)) {
                            tmp_expression_value_364 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[440]);
                        }

                        if (tmp_expression_value_364 == NULL) {
                            assert(ERROR_OCCURRED());

                            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                            exception_lineno = 8085;
                            type_description_2 = "o";
                            goto dict_build_exception_47;
                        }
                        Py_INCREF(tmp_expression_value_364);
                    } else {
                        goto dict_build_exception_47;
                    }
                }

                tmp_dict_value_62 = LOOKUP_ATTRIBUTE(tmp_expression_value_364, mod_consts[485]);
                Py_DECREF(tmp_expression_value_364);
                if (tmp_dict_value_62 == NULL) {
                    assert(ERROR_OCCURRED());

                    FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                    exception_lineno = 8085;
                    type_description_2 = "o";
                    goto dict_build_exception_47;
                }
                tmp_res = PyDict_SetItem(tmp_kw_defaults_62, tmp_dict_key_62, tmp_dict_value_62);
                Py_DECREF(tmp_dict_value_62);
                assert(!(tmp_res != 0));
                tmp_dict_key_62 = mod_consts[749];
                tmp_expression_value_366 = PyObject_GetItem(locals_hikari$api$rest$$$class__2_RESTClient_110, mod_consts[436]);

                if (tmp_expression_value_366 == NULL) {
                    if (CHECK_AND_CLEAR_KEY_ERROR_OCCURRED()) {
                        tmp_expression_value_366 = GET_STRING_DICT_VALUE(moduledict_hikari$api$rest, (Nuitka_StringObject *)mod_consts[436]);

                        if (unlikely(tmp_expression_value_366 == NULL)) {
                            tmp_expression_value_366 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[436]);
                        }

                        if (tmp_expression_value_366 == NULL) {
                            assert(ERROR_OCCURRED());

                            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                            exception_lineno = 8088;
                            type_description_2 = "o";
                            goto dict_build_exception_47;
                        }
                        Py_INCREF(tmp_expression_value_366);
                    } else {
                        goto dict_build_exception_47;
                    }
                }

                tmp_expression_value_365 = LOOKUP_ATTRIBUTE(tmp_expression_value_366, mod_consts[750]);
                Py_DECREF(tmp_expression_value_366);
                if (tmp_expression_value_365 == NULL) {
                    assert(ERROR_OCCURRED());

                    FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                    exception_lineno = 8088;
                    type_description_2 = "o";
                    goto dict_build_exception_47;
                }
                tmp_dict_value_62 = LOOKUP_ATTRIBUTE(tmp_expression_value_365, mod_consts[751]);
                Py_DECREF(tmp_expression_value_365);
                if (tmp_dict_value_62 == NULL) {
                    assert(ERROR_OCCURRED());

                    FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                    exception_lineno = 8088;
                    type_description_2 = "o";
                    goto dict_build_exception_47;
                }
                tmp_res = PyDict_SetItem(tmp_kw_defaults_62, tmp_dict_key_62, tmp_dict_value_62);
                Py_DECREF(tmp_dict_value_62);
                assert(!(tmp_res != 0));
                tmp_dict_key_62 = mod_consts[496];
                tmp_expression_value_367 = PyObject_GetItem(locals_hikari$api$rest$$$class__2_RESTClient_110, mod_consts[440]);

                if (tmp_expression_value_367 == NULL) {
                    if (CHECK_AND_CLEAR_KEY_ERROR_OCCURRED()) {
                        tmp_expression_value_367 = GET_STRING_DICT_VALUE(moduledict_hikari$api$rest, (Nuitka_StringObject *)mod_consts[440]);

                        if (unlikely(tmp_expression_value_367 == NULL)) {
                            tmp_expression_value_367 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[440]);
                        }

                        if (tmp_expression_value_367 == NULL) {
                            assert(ERROR_OCCURRED());

                            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                            exception_lineno = 8089;
                            type_description_2 = "o";
                            goto dict_build_exception_47;
                        }
                        Py_INCREF(tmp_expression_value_367);
                    } else {
                        goto dict_build_exception_47;
                    }
                }

                tmp_dict_value_62 = LOOKUP_ATTRIBUTE(tmp_expression_value_367, mod_consts[485]);
                Py_DECREF(tmp_expression_value_367);
                if (tmp_dict_value_62 == NULL) {
                    assert(ERROR_OCCURRED());

                    FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                    exception_lineno = 8089;
                    type_description_2 = "o";
                    goto dict_build_exception_47;
                }
                tmp_res = PyDict_SetItem(tmp_kw_defaults_62, tmp_dict_key_62, tmp_dict_value_62);
                Py_DECREF(tmp_dict_value_62);
                assert(!(tmp_res != 0));
            }
            goto dict_build_noexception_47;
            // Exception handling pass through code for dict_build:
            dict_build_exception_47:;
            Py_DECREF(tmp_called_value_84);
            Py_DECREF(tmp_kw_defaults_62);
            goto frame_exception_exit_3;
            // Finished with no exception for dict_build:
            dict_build_noexception_47:;
            tmp_annotations_162 = PyDict_Copy(mod_consts[754]);


            tmp_args_element_value_172 = MAKE_FUNCTION_hikari$api$rest$$$function__158_create_external_event(tmp_kw_defaults_62, tmp_annotations_162);

            frame_862833cacd6e5ba73c351f8d132a7b6b_3->m_frame.f_lineno = 8074;
            tmp_dictset_value = CALL_FUNCTION_WITH_SINGLE_ARG(tmp_called_value_84, tmp_args_element_value_172);
            Py_DECREF(tmp_called_value_84);
            Py_DECREF(tmp_args_element_value_172);
            if (tmp_dictset_value == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 8074;
                type_description_2 = "o";
                goto frame_exception_exit_3;
            }
            tmp_res = PyObject_SetItem(locals_hikari$api$rest$$$class__2_RESTClient_110, mod_consts[411], tmp_dictset_value);
            Py_DECREF(tmp_dictset_value);
            if (tmp_res != 0) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 8075;
                type_description_2 = "o";
                goto frame_exception_exit_3;
            }
        }
        {
            PyObject *tmp_called_value_85;
            PyObject *tmp_expression_value_368;
            PyObject *tmp_args_element_value_173;
            PyObject *tmp_kw_defaults_63;
            PyObject *tmp_dict_key_63;
            PyObject *tmp_dict_value_63;
            PyObject *tmp_expression_value_369;
            PyObject *tmp_annotations_163;
            tmp_expression_value_368 = PyObject_GetItem(locals_hikari$api$rest$$$class__2_RESTClient_110, mod_consts[431]);

            if (tmp_expression_value_368 == NULL) {
                if (CHECK_AND_CLEAR_KEY_ERROR_OCCURRED()) {
                    tmp_expression_value_368 = GET_STRING_DICT_VALUE(moduledict_hikari$api$rest, (Nuitka_StringObject *)mod_consts[431]);

                    if (unlikely(tmp_expression_value_368 == NULL)) {
                        tmp_expression_value_368 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[431]);
                    }

                    if (tmp_expression_value_368 == NULL) {
                        assert(ERROR_OCCURRED());

                        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                        exception_lineno = 8150;
                        type_description_2 = "o";
                        goto frame_exception_exit_3;
                    }
                    Py_INCREF(tmp_expression_value_368);
                } else {
                    goto frame_exception_exit_3;
                }
            }

            tmp_called_value_85 = LOOKUP_ATTRIBUTE(tmp_expression_value_368, mod_consts[457]);
            Py_DECREF(tmp_expression_value_368);
            if (tmp_called_value_85 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 8150;
                type_description_2 = "o";
                goto frame_exception_exit_3;
            }
            tmp_dict_key_63 = mod_consts[563];
            tmp_expression_value_369 = PyObject_GetItem(locals_hikari$api$rest$$$class__2_RESTClient_110, mod_consts[440]);

            if (tmp_expression_value_369 == NULL) {
                if (CHECK_AND_CLEAR_KEY_ERROR_OCCURRED()) {
                    tmp_expression_value_369 = GET_STRING_DICT_VALUE(moduledict_hikari$api$rest, (Nuitka_StringObject *)mod_consts[440]);

                    if (unlikely(tmp_expression_value_369 == NULL)) {
                        tmp_expression_value_369 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[440]);
                    }

                    if (tmp_expression_value_369 == NULL) {
                        assert(ERROR_OCCURRED());

                        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
                        Py_DECREF(tmp_called_value_85);

                        exception_lineno = 8157;
                        type_description_2 = "o";
                        goto frame_exception_exit_3;
                    }
                    Py_INCREF(tmp_expression_value_369);
                } else {
                    goto frame_exception_exit_3;
                }
            }

            tmp_dict_value_63 = LOOKUP_ATTRIBUTE(tmp_expression_value_369, mod_consts[485]);
            Py_DECREF(tmp_expression_value_369);
            if (tmp_dict_value_63 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
                Py_DECREF(tmp_called_value_85);

                exception_lineno = 8157;
                type_description_2 = "o";
                goto frame_exception_exit_3;
            }
            tmp_kw_defaults_63 = _PyDict_NewPresized( 11 );
            {
                PyObject *tmp_expression_value_370;
                PyObject *tmp_expression_value_371;
                PyObject *tmp_expression_value_372;
                PyObject *tmp_expression_value_373;
                PyObject *tmp_expression_value_374;
                PyObject *tmp_expression_value_375;
                PyObject *tmp_expression_value_376;
                PyObject *tmp_expression_value_377;
                PyObject *tmp_expression_value_378;
                PyObject *tmp_expression_value_379;
                tmp_res = PyDict_SetItem(tmp_kw_defaults_63, tmp_dict_key_63, tmp_dict_value_63);
                Py_DECREF(tmp_dict_value_63);
                assert(!(tmp_res != 0));
                tmp_dict_key_63 = mod_consts[616];
                tmp_expression_value_370 = PyObject_GetItem(locals_hikari$api$rest$$$class__2_RESTClient_110, mod_consts[440]);

                if (tmp_expression_value_370 == NULL) {
                    if (CHECK_AND_CLEAR_KEY_ERROR_OCCURRED()) {
                        tmp_expression_value_370 = GET_STRING_DICT_VALUE(moduledict_hikari$api$rest, (Nuitka_StringObject *)mod_consts[440]);

                        if (unlikely(tmp_expression_value_370 == NULL)) {
                            tmp_expression_value_370 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[440]);
                        }

                        if (tmp_expression_value_370 == NULL) {
                            assert(ERROR_OCCURRED());

                            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                            exception_lineno = 8158;
                            type_description_2 = "o";
                            goto dict_build_exception_48;
                        }
                        Py_INCREF(tmp_expression_value_370);
                    } else {
                        goto dict_build_exception_48;
                    }
                }

                tmp_dict_value_63 = LOOKUP_ATTRIBUTE(tmp_expression_value_370, mod_consts[485]);
                Py_DECREF(tmp_expression_value_370);
                if (tmp_dict_value_63 == NULL) {
                    assert(ERROR_OCCURRED());

                    FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                    exception_lineno = 8158;
                    type_description_2 = "o";
                    goto dict_build_exception_48;
                }
                tmp_res = PyDict_SetItem(tmp_kw_defaults_63, tmp_dict_key_63, tmp_dict_value_63);
                Py_DECREF(tmp_dict_value_63);
                assert(!(tmp_res != 0));
                tmp_dict_key_63 = mod_consts[755];
                tmp_expression_value_371 = PyObject_GetItem(locals_hikari$api$rest$$$class__2_RESTClient_110, mod_consts[440]);

                if (tmp_expression_value_371 == NULL) {
                    if (CHECK_AND_CLEAR_KEY_ERROR_OCCURRED()) {
                        tmp_expression_value_371 = GET_STRING_DICT_VALUE(moduledict_hikari$api$rest, (Nuitka_StringObject *)mod_consts[440]);

                        if (unlikely(tmp_expression_value_371 == NULL)) {
                            tmp_expression_value_371 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[440]);
                        }

                        if (tmp_expression_value_371 == NULL) {
                            assert(ERROR_OCCURRED());

                            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                            exception_lineno = 8161;
                            type_description_2 = "o";
                            goto dict_build_exception_48;
                        }
                        Py_INCREF(tmp_expression_value_371);
                    } else {
                        goto dict_build_exception_48;
                    }
                }

                tmp_dict_value_63 = LOOKUP_ATTRIBUTE(tmp_expression_value_371, mod_consts[485]);
                Py_DECREF(tmp_expression_value_371);
                if (tmp_dict_value_63 == NULL) {
                    assert(ERROR_OCCURRED());

                    FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                    exception_lineno = 8161;
                    type_description_2 = "o";
                    goto dict_build_exception_48;
                }
                tmp_res = PyDict_SetItem(tmp_kw_defaults_63, tmp_dict_key_63, tmp_dict_value_63);
                Py_DECREF(tmp_dict_value_63);
                assert(!(tmp_res != 0));
                tmp_dict_key_63 = mod_consts[748];
                tmp_expression_value_372 = PyObject_GetItem(locals_hikari$api$rest$$$class__2_RESTClient_110, mod_consts[440]);

                if (tmp_expression_value_372 == NULL) {
                    if (CHECK_AND_CLEAR_KEY_ERROR_OCCURRED()) {
                        tmp_expression_value_372 = GET_STRING_DICT_VALUE(moduledict_hikari$api$rest, (Nuitka_StringObject *)mod_consts[440]);

                        if (unlikely(tmp_expression_value_372 == NULL)) {
                            tmp_expression_value_372 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[440]);
                        }

                        if (tmp_expression_value_372 == NULL) {
                            assert(ERROR_OCCURRED());

                            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                            exception_lineno = 8162;
                            type_description_2 = "o";
                            goto dict_build_exception_48;
                        }
                        Py_INCREF(tmp_expression_value_372);
                    } else {
                        goto dict_build_exception_48;
                    }
                }

                tmp_dict_value_63 = LOOKUP_ATTRIBUTE(tmp_expression_value_372, mod_consts[485]);
                Py_DECREF(tmp_expression_value_372);
                if (tmp_dict_value_63 == NULL) {
                    assert(ERROR_OCCURRED());

                    FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                    exception_lineno = 8162;
                    type_description_2 = "o";
                    goto dict_build_exception_48;
                }
                tmp_res = PyDict_SetItem(tmp_kw_defaults_63, tmp_dict_key_63, tmp_dict_value_63);
                Py_DECREF(tmp_dict_value_63);
                assert(!(tmp_res != 0));
                tmp_dict_key_63 = mod_consts[756];
                tmp_expression_value_373 = PyObject_GetItem(locals_hikari$api$rest$$$class__2_RESTClient_110, mod_consts[440]);

                if (tmp_expression_value_373 == NULL) {
                    if (CHECK_AND_CLEAR_KEY_ERROR_OCCURRED()) {
                        tmp_expression_value_373 = GET_STRING_DICT_VALUE(moduledict_hikari$api$rest, (Nuitka_StringObject *)mod_consts[440]);

                        if (unlikely(tmp_expression_value_373 == NULL)) {
                            tmp_expression_value_373 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[440]);
                        }

                        if (tmp_expression_value_373 == NULL) {
                            assert(ERROR_OCCURRED());

                            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                            exception_lineno = 8163;
                            type_description_2 = "o";
                            goto dict_build_exception_48;
                        }
                        Py_INCREF(tmp_expression_value_373);
                    } else {
                        goto dict_build_exception_48;
                    }
                }

                tmp_dict_value_63 = LOOKUP_ATTRIBUTE(tmp_expression_value_373, mod_consts[485]);
                Py_DECREF(tmp_expression_value_373);
                if (tmp_dict_value_63 == NULL) {
                    assert(ERROR_OCCURRED());

                    FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                    exception_lineno = 8163;
                    type_description_2 = "o";
                    goto dict_build_exception_48;
                }
                tmp_res = PyDict_SetItem(tmp_kw_defaults_63, tmp_dict_key_63, tmp_dict_value_63);
                Py_DECREF(tmp_dict_value_63);
                assert(!(tmp_res != 0));
                tmp_dict_key_63 = mod_consts[484];
                tmp_expression_value_374 = PyObject_GetItem(locals_hikari$api$rest$$$class__2_RESTClient_110, mod_consts[440]);

                if (tmp_expression_value_374 == NULL) {
                    if (CHECK_AND_CLEAR_KEY_ERROR_OCCURRED()) {
                        tmp_expression_value_374 = GET_STRING_DICT_VALUE(moduledict_hikari$api$rest, (Nuitka_StringObject *)mod_consts[440]);

                        if (unlikely(tmp_expression_value_374 == NULL)) {
                            tmp_expression_value_374 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[440]);
                        }

                        if (tmp_expression_value_374 == NULL) {
                            assert(ERROR_OCCURRED());

                            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                            exception_lineno = 8164;
                            type_description_2 = "o";
                            goto dict_build_exception_48;
                        }
                        Py_INCREF(tmp_expression_value_374);
                    } else {
                        goto dict_build_exception_48;
                    }
                }

                tmp_dict_value_63 = LOOKUP_ATTRIBUTE(tmp_expression_value_374, mod_consts[485]);
                Py_DECREF(tmp_expression_value_374);
                if (tmp_dict_value_63 == NULL) {
                    assert(ERROR_OCCURRED());

                    FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                    exception_lineno = 8164;
                    type_description_2 = "o";
                    goto dict_build_exception_48;
                }
                tmp_res = PyDict_SetItem(tmp_kw_defaults_63, tmp_dict_key_63, tmp_dict_value_63);
                Py_DECREF(tmp_dict_value_63);
                assert(!(tmp_res != 0));
                tmp_dict_key_63 = mod_consts[749];
                tmp_expression_value_375 = PyObject_GetItem(locals_hikari$api$rest$$$class__2_RESTClient_110, mod_consts[440]);

                if (tmp_expression_value_375 == NULL) {
                    if (CHECK_AND_CLEAR_KEY_ERROR_OCCURRED()) {
                        tmp_expression_value_375 = GET_STRING_DICT_VALUE(moduledict_hikari$api$rest, (Nuitka_StringObject *)mod_consts[440]);

                        if (unlikely(tmp_expression_value_375 == NULL)) {
                            tmp_expression_value_375 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[440]);
                        }

                        if (tmp_expression_value_375 == NULL) {
                            assert(ERROR_OCCURRED());

                            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                            exception_lineno = 8167;
                            type_description_2 = "o";
                            goto dict_build_exception_48;
                        }
                        Py_INCREF(tmp_expression_value_375);
                    } else {
                        goto dict_build_exception_48;
                    }
                }

                tmp_dict_value_63 = LOOKUP_ATTRIBUTE(tmp_expression_value_375, mod_consts[485]);
                Py_DECREF(tmp_expression_value_375);
                if (tmp_dict_value_63 == NULL) {
                    assert(ERROR_OCCURRED());

                    FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                    exception_lineno = 8167;
                    type_description_2 = "o";
                    goto dict_build_exception_48;
                }
                tmp_res = PyDict_SetItem(tmp_kw_defaults_63, tmp_dict_key_63, tmp_dict_value_63);
                Py_DECREF(tmp_dict_value_63);
                assert(!(tmp_res != 0));
                tmp_dict_key_63 = mod_consts[757];
                tmp_expression_value_376 = PyObject_GetItem(locals_hikari$api$rest$$$class__2_RESTClient_110, mod_consts[440]);

                if (tmp_expression_value_376 == NULL) {
                    if (CHECK_AND_CLEAR_KEY_ERROR_OCCURRED()) {
                        tmp_expression_value_376 = GET_STRING_DICT_VALUE(moduledict_hikari$api$rest, (Nuitka_StringObject *)mod_consts[440]);

                        if (unlikely(tmp_expression_value_376 == NULL)) {
                            tmp_expression_value_376 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[440]);
                        }

                        if (tmp_expression_value_376 == NULL) {
                            assert(ERROR_OCCURRED());

                            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                            exception_lineno = 8168;
                            type_description_2 = "o";
                            goto dict_build_exception_48;
                        }
                        Py_INCREF(tmp_expression_value_376);
                    } else {
                        goto dict_build_exception_48;
                    }
                }

                tmp_dict_value_63 = LOOKUP_ATTRIBUTE(tmp_expression_value_376, mod_consts[485]);
                Py_DECREF(tmp_expression_value_376);
                if (tmp_dict_value_63 == NULL) {
                    assert(ERROR_OCCURRED());

                    FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                    exception_lineno = 8168;
                    type_description_2 = "o";
                    goto dict_build_exception_48;
                }
                tmp_res = PyDict_SetItem(tmp_kw_defaults_63, tmp_dict_key_63, tmp_dict_value_63);
                Py_DECREF(tmp_dict_value_63);
                assert(!(tmp_res != 0));
                tmp_dict_key_63 = mod_consts[747];
                tmp_expression_value_377 = PyObject_GetItem(locals_hikari$api$rest$$$class__2_RESTClient_110, mod_consts[440]);

                if (tmp_expression_value_377 == NULL) {
                    if (CHECK_AND_CLEAR_KEY_ERROR_OCCURRED()) {
                        tmp_expression_value_377 = GET_STRING_DICT_VALUE(moduledict_hikari$api$rest, (Nuitka_StringObject *)mod_consts[440]);

                        if (unlikely(tmp_expression_value_377 == NULL)) {
                            tmp_expression_value_377 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[440]);
                        }

                        if (tmp_expression_value_377 == NULL) {
                            assert(ERROR_OCCURRED());

                            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                            exception_lineno = 8169;
                            type_description_2 = "o";
                            goto dict_build_exception_48;
                        }
                        Py_INCREF(tmp_expression_value_377);
                    } else {
                        goto dict_build_exception_48;
                    }
                }

                tmp_dict_value_63 = LOOKUP_ATTRIBUTE(tmp_expression_value_377, mod_consts[485]);
                Py_DECREF(tmp_expression_value_377);
                if (tmp_dict_value_63 == NULL) {
                    assert(ERROR_OCCURRED());

                    FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                    exception_lineno = 8169;
                    type_description_2 = "o";
                    goto dict_build_exception_48;
                }
                tmp_res = PyDict_SetItem(tmp_kw_defaults_63, tmp_dict_key_63, tmp_dict_value_63);
                Py_DECREF(tmp_dict_value_63);
                assert(!(tmp_res != 0));
                tmp_dict_key_63 = mod_consts[758];
                tmp_expression_value_378 = PyObject_GetItem(locals_hikari$api$rest$$$class__2_RESTClient_110, mod_consts[440]);

                if (tmp_expression_value_378 == NULL) {
                    if (CHECK_AND_CLEAR_KEY_ERROR_OCCURRED()) {
                        tmp_expression_value_378 = GET_STRING_DICT_VALUE(moduledict_hikari$api$rest, (Nuitka_StringObject *)mod_consts[440]);

                        if (unlikely(tmp_expression_value_378 == NULL)) {
                            tmp_expression_value_378 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[440]);
                        }

                        if (tmp_expression_value_378 == NULL) {
                            assert(ERROR_OCCURRED());

                            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                            exception_lineno = 8170;
                            type_description_2 = "o";
                            goto dict_build_exception_48;
                        }
                        Py_INCREF(tmp_expression_value_378);
                    } else {
                        goto dict_build_exception_48;
                    }
                }

                tmp_dict_value_63 = LOOKUP_ATTRIBUTE(tmp_expression_value_378, mod_consts[485]);
                Py_DECREF(tmp_expression_value_378);
                if (tmp_dict_value_63 == NULL) {
                    assert(ERROR_OCCURRED());

                    FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                    exception_lineno = 8170;
                    type_description_2 = "o";
                    goto dict_build_exception_48;
                }
                tmp_res = PyDict_SetItem(tmp_kw_defaults_63, tmp_dict_key_63, tmp_dict_value_63);
                Py_DECREF(tmp_dict_value_63);
                assert(!(tmp_res != 0));
                tmp_dict_key_63 = mod_consts[496];
                tmp_expression_value_379 = PyObject_GetItem(locals_hikari$api$rest$$$class__2_RESTClient_110, mod_consts[440]);

                if (tmp_expression_value_379 == NULL) {
                    if (CHECK_AND_CLEAR_KEY_ERROR_OCCURRED()) {
                        tmp_expression_value_379 = GET_STRING_DICT_VALUE(moduledict_hikari$api$rest, (Nuitka_StringObject *)mod_consts[440]);

                        if (unlikely(tmp_expression_value_379 == NULL)) {
                            tmp_expression_value_379 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[440]);
                        }

                        if (tmp_expression_value_379 == NULL) {
                            assert(ERROR_OCCURRED());

                            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                            exception_lineno = 8171;
                            type_description_2 = "o";
                            goto dict_build_exception_48;
                        }
                        Py_INCREF(tmp_expression_value_379);
                    } else {
                        goto dict_build_exception_48;
                    }
                }

                tmp_dict_value_63 = LOOKUP_ATTRIBUTE(tmp_expression_value_379, mod_consts[485]);
                Py_DECREF(tmp_expression_value_379);
                if (tmp_dict_value_63 == NULL) {
                    assert(ERROR_OCCURRED());

                    FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                    exception_lineno = 8171;
                    type_description_2 = "o";
                    goto dict_build_exception_48;
                }
                tmp_res = PyDict_SetItem(tmp_kw_defaults_63, tmp_dict_key_63, tmp_dict_value_63);
                Py_DECREF(tmp_dict_value_63);
                assert(!(tmp_res != 0));
            }
            goto dict_build_noexception_48;
            // Exception handling pass through code for dict_build:
            dict_build_exception_48:;
            Py_DECREF(tmp_called_value_85);
            Py_DECREF(tmp_kw_defaults_63);
            goto frame_exception_exit_3;
            // Finished with no exception for dict_build:
            dict_build_noexception_48:;
            tmp_annotations_163 = PyDict_Copy(mod_consts[759]);


            tmp_args_element_value_173 = MAKE_FUNCTION_hikari$api$rest$$$function__159_edit_scheduled_event(tmp_kw_defaults_63, tmp_annotations_163);

            frame_862833cacd6e5ba73c351f8d132a7b6b_3->m_frame.f_lineno = 8150;
            tmp_dictset_value = CALL_FUNCTION_WITH_SINGLE_ARG(tmp_called_value_85, tmp_args_element_value_173);
            Py_DECREF(tmp_called_value_85);
            Py_DECREF(tmp_args_element_value_173);
            if (tmp_dictset_value == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 8150;
                type_description_2 = "o";
                goto frame_exception_exit_3;
            }
            tmp_res = PyObject_SetItem(locals_hikari$api$rest$$$class__2_RESTClient_110, mod_consts[414], tmp_dictset_value);
            Py_DECREF(tmp_dictset_value);
            if (tmp_res != 0) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 8151;
                type_description_2 = "o";
                goto frame_exception_exit_3;
            }
        }
        {
            PyObject *tmp_called_instance_92;
            PyObject *tmp_args_element_value_174;
            PyObject *tmp_annotations_164;
            tmp_called_instance_92 = PyObject_GetItem(locals_hikari$api$rest$$$class__2_RESTClient_110, mod_consts[431]);

            if (tmp_called_instance_92 == NULL) {
                if (CHECK_AND_CLEAR_KEY_ERROR_OCCURRED()) {
                    tmp_called_instance_92 = GET_STRING_DICT_VALUE(moduledict_hikari$api$rest, (Nuitka_StringObject *)mod_consts[431]);

                    if (unlikely(tmp_called_instance_92 == NULL)) {
                        tmp_called_instance_92 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[431]);
                    }

                    if (tmp_called_instance_92 == NULL) {
                        assert(ERROR_OCCURRED());

                        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                        exception_lineno = 8254;
                        type_description_2 = "o";
                        goto frame_exception_exit_3;
                    }
                    Py_INCREF(tmp_called_instance_92);
                } else {
                    goto frame_exception_exit_3;
                }
            }

            tmp_annotations_164 = PyDict_Copy(mod_consts[760]);


            tmp_args_element_value_174 = MAKE_FUNCTION_hikari$api$rest$$$function__160_delete_scheduled_event(tmp_annotations_164);

            frame_862833cacd6e5ba73c351f8d132a7b6b_3->m_frame.f_lineno = 8254;
            tmp_dictset_value = CALL_METHOD_WITH_SINGLE_ARG(tmp_called_instance_92, mod_consts[457], tmp_args_element_value_174);
            Py_DECREF(tmp_called_instance_92);
            Py_DECREF(tmp_args_element_value_174);
            if (tmp_dictset_value == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 8254;
                type_description_2 = "o";
                goto frame_exception_exit_3;
            }
            tmp_res = PyObject_SetItem(locals_hikari$api$rest$$$class__2_RESTClient_110, mod_consts[417], tmp_dictset_value);
            Py_DECREF(tmp_dictset_value);
            if (tmp_res != 0) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 8255;
                type_description_2 = "o";
                goto frame_exception_exit_3;
            }
        }
        {
            PyObject *tmp_called_value_86;
            PyObject *tmp_expression_value_380;
            PyObject *tmp_args_element_value_175;
            PyObject *tmp_kw_defaults_64;
            PyObject *tmp_dict_key_64;
            PyObject *tmp_dict_value_64;
            PyObject *tmp_annotations_165;
            tmp_expression_value_380 = PyObject_GetItem(locals_hikari$api$rest$$$class__2_RESTClient_110, mod_consts[431]);

            if (tmp_expression_value_380 == NULL) {
                if (CHECK_AND_CLEAR_KEY_ERROR_OCCURRED()) {
                    tmp_expression_value_380 = GET_STRING_DICT_VALUE(moduledict_hikari$api$rest, (Nuitka_StringObject *)mod_consts[431]);

                    if (unlikely(tmp_expression_value_380 == NULL)) {
                        tmp_expression_value_380 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[431]);
                    }

                    if (tmp_expression_value_380 == NULL) {
                        assert(ERROR_OCCURRED());

                        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                        exception_lineno = 8293;
                        type_description_2 = "o";
                        goto frame_exception_exit_3;
                    }
                    Py_INCREF(tmp_expression_value_380);
                } else {
                    goto frame_exception_exit_3;
                }
            }

            tmp_called_value_86 = LOOKUP_ATTRIBUTE(tmp_expression_value_380, mod_consts[457]);
            Py_DECREF(tmp_expression_value_380);
            if (tmp_called_value_86 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 8293;
                type_description_2 = "o";
                goto frame_exception_exit_3;
            }
            tmp_dict_key_64 = mod_consts[578];
            tmp_dict_value_64 = Py_False;
            tmp_kw_defaults_64 = _PyDict_NewPresized( 2 );
            {
                PyObject *tmp_expression_value_381;
                tmp_res = PyDict_SetItem(tmp_kw_defaults_64, tmp_dict_key_64, tmp_dict_value_64);
                assert(!(tmp_res != 0));
                tmp_dict_key_64 = mod_consts[579];
                tmp_expression_value_381 = PyObject_GetItem(locals_hikari$api$rest$$$class__2_RESTClient_110, mod_consts[440]);

                if (tmp_expression_value_381 == NULL) {
                    if (CHECK_AND_CLEAR_KEY_ERROR_OCCURRED()) {
                        tmp_expression_value_381 = GET_STRING_DICT_VALUE(moduledict_hikari$api$rest, (Nuitka_StringObject *)mod_consts[440]);

                        if (unlikely(tmp_expression_value_381 == NULL)) {
                            tmp_expression_value_381 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[440]);
                        }

                        if (tmp_expression_value_381 == NULL) {
                            assert(ERROR_OCCURRED());

                            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                            exception_lineno = 8301;
                            type_description_2 = "o";
                            goto dict_build_exception_49;
                        }
                        Py_INCREF(tmp_expression_value_381);
                    } else {
                        goto dict_build_exception_49;
                    }
                }

                tmp_dict_value_64 = LOOKUP_ATTRIBUTE(tmp_expression_value_381, mod_consts[485]);
                Py_DECREF(tmp_expression_value_381);
                if (tmp_dict_value_64 == NULL) {
                    assert(ERROR_OCCURRED());

                    FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                    exception_lineno = 8301;
                    type_description_2 = "o";
                    goto dict_build_exception_49;
                }
                tmp_res = PyDict_SetItem(tmp_kw_defaults_64, tmp_dict_key_64, tmp_dict_value_64);
                Py_DECREF(tmp_dict_value_64);
                assert(!(tmp_res != 0));
            }
            goto dict_build_noexception_49;
            // Exception handling pass through code for dict_build:
            dict_build_exception_49:;
            Py_DECREF(tmp_called_value_86);
            Py_DECREF(tmp_kw_defaults_64);
            goto frame_exception_exit_3;
            // Finished with no exception for dict_build:
            dict_build_noexception_49:;
            tmp_annotations_165 = PyDict_Copy(mod_consts[761]);


            tmp_args_element_value_175 = MAKE_FUNCTION_hikari$api$rest$$$function__161_fetch_scheduled_event_users(tmp_kw_defaults_64, tmp_annotations_165);

            frame_862833cacd6e5ba73c351f8d132a7b6b_3->m_frame.f_lineno = 8293;
            tmp_dictset_value = CALL_FUNCTION_WITH_SINGLE_ARG(tmp_called_value_86, tmp_args_element_value_175);
            Py_DECREF(tmp_called_value_86);
            Py_DECREF(tmp_args_element_value_175);
            if (tmp_dictset_value == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 8293;
                type_description_2 = "o";
                goto frame_exception_exit_3;
            }
            tmp_res = PyObject_SetItem(locals_hikari$api$rest$$$class__2_RESTClient_110, mod_consts[763], tmp_dictset_value);
            Py_DECREF(tmp_dictset_value);
            if (tmp_res != 0) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 8294;
                type_description_2 = "o";
                goto frame_exception_exit_3;
            }
        }

#if 0
        RESTORE_FRAME_EXCEPTION(frame_862833cacd6e5ba73c351f8d132a7b6b_3);
#endif

        // Put the previous frame back on top.
        popFrameStack();

        goto frame_no_exception_2;

        frame_exception_exit_3:;

#if 0
        RESTORE_FRAME_EXCEPTION(frame_862833cacd6e5ba73c351f8d132a7b6b_3);
#endif

        if (exception_tb == NULL) {
            exception_tb = MAKE_TRACEBACK(frame_862833cacd6e5ba73c351f8d132a7b6b_3, exception_lineno);
        } else if (exception_tb->tb_frame != &frame_862833cacd6e5ba73c351f8d132a7b6b_3->m_frame) {
            exception_tb = ADD_TRACEBACK(exception_tb, frame_862833cacd6e5ba73c351f8d132a7b6b_3, exception_lineno);
        }

        // Attaches locals to frame if any.
        Nuitka_Frame_AttachLocals(
            frame_862833cacd6e5ba73c351f8d132a7b6b_3,
            type_description_2,
            outline_1_var___class__
        );


        // Release cached frame if used for exception.
        if (frame_862833cacd6e5ba73c351f8d132a7b6b_3 == cache_frame_862833cacd6e5ba73c351f8d132a7b6b_3) {
#if _DEBUG_REFCOUNTS
            count_active_frame_cache_instances -= 1;
            count_released_frame_cache_instances += 1;
#endif

            Py_DECREF(cache_frame_862833cacd6e5ba73c351f8d132a7b6b_3);
            cache_frame_862833cacd6e5ba73c351f8d132a7b6b_3 = NULL;
        }

        assertFrameObject(frame_862833cacd6e5ba73c351f8d132a7b6b_3);

        // Put the previous frame back on top.
        popFrameStack();

        // Return the error.
        goto nested_frame_exit_2;

        frame_no_exception_2:;
        goto skip_nested_handling_2;
        nested_frame_exit_2:;

        goto try_except_handler_6;
        skip_nested_handling_2:;
        {
            nuitka_bool tmp_condition_result_16;
            PyObject *tmp_cmp_expr_left_2;
            PyObject *tmp_cmp_expr_right_2;
            CHECK_OBJECT(tmp_class_creation_2__bases);
            tmp_cmp_expr_left_2 = tmp_class_creation_2__bases;
            CHECK_OBJECT(tmp_class_creation_2__bases_orig);
            tmp_cmp_expr_right_2 = tmp_class_creation_2__bases_orig;
            tmp_condition_result_16 = RICH_COMPARE_NE_NBOOL_OBJECT_TUPLE(tmp_cmp_expr_left_2, tmp_cmp_expr_right_2);
            if (tmp_condition_result_16 == NUITKA_BOOL_EXCEPTION) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 110;

                goto try_except_handler_6;
            }
            if (tmp_condition_result_16 == NUITKA_BOOL_TRUE) {
                goto branch_yes_8;
            } else {
                goto branch_no_8;
            }
            assert(tmp_condition_result_16 != NUITKA_BOOL_UNASSIGNED);
        }
        branch_yes_8:;
        CHECK_OBJECT(tmp_class_creation_2__bases_orig);
        tmp_dictset_value = tmp_class_creation_2__bases_orig;
        tmp_res = PyObject_SetItem(locals_hikari$api$rest$$$class__2_RESTClient_110, mod_consts[467], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 110;

            goto try_except_handler_6;
        }
        branch_no_8:;
        {
            PyObject *tmp_assign_source_27;
            PyObject *tmp_called_value_87;
            PyObject *tmp_args_value_4;
            PyObject *tmp_tuple_element_25;
            PyObject *tmp_kwargs_value_4;
            CHECK_OBJECT(tmp_class_creation_2__metaclass);
            tmp_called_value_87 = tmp_class_creation_2__metaclass;
            tmp_tuple_element_25 = mod_consts[469];
            tmp_args_value_4 = PyTuple_New(3);
            PyTuple_SET_ITEM0(tmp_args_value_4, 0, tmp_tuple_element_25);
            CHECK_OBJECT(tmp_class_creation_2__bases);
            tmp_tuple_element_25 = tmp_class_creation_2__bases;
            PyTuple_SET_ITEM0(tmp_args_value_4, 1, tmp_tuple_element_25);
            tmp_tuple_element_25 = locals_hikari$api$rest$$$class__2_RESTClient_110;
            PyTuple_SET_ITEM0(tmp_args_value_4, 2, tmp_tuple_element_25);
            CHECK_OBJECT(tmp_class_creation_2__class_decl_dict);
            tmp_kwargs_value_4 = tmp_class_creation_2__class_decl_dict;
            frame_79a9a0fab045cdec33bf55099eaef1e6->m_frame.f_lineno = 110;
            tmp_assign_source_27 = CALL_FUNCTION(tmp_called_value_87, tmp_args_value_4, tmp_kwargs_value_4);
            Py_DECREF(tmp_args_value_4);
            if (tmp_assign_source_27 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 110;

                goto try_except_handler_6;
            }
            assert(outline_1_var___class__ == NULL);
            outline_1_var___class__ = tmp_assign_source_27;
        }
        CHECK_OBJECT(outline_1_var___class__);
        tmp_assign_source_26 = outline_1_var___class__;
        Py_INCREF(tmp_assign_source_26);
        goto try_return_handler_6;
        NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
        return NULL;
        // Return handler code:
        try_return_handler_6:;
        Py_DECREF(locals_hikari$api$rest$$$class__2_RESTClient_110);
        locals_hikari$api$rest$$$class__2_RESTClient_110 = NULL;
        goto try_return_handler_5;
        // Exception handler code:
        try_except_handler_6:;
        exception_keeper_type_4 = exception_type;
        exception_keeper_value_4 = exception_value;
        exception_keeper_tb_4 = exception_tb;
        exception_keeper_lineno_4 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        Py_DECREF(locals_hikari$api$rest$$$class__2_RESTClient_110);
        locals_hikari$api$rest$$$class__2_RESTClient_110 = NULL;
        // Re-raise.
        exception_type = exception_keeper_type_4;
        exception_value = exception_keeper_value_4;
        exception_tb = exception_keeper_tb_4;
        exception_lineno = exception_keeper_lineno_4;

        goto try_except_handler_5;
        // End of try:
        NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
        return NULL;
        // Return handler code:
        try_return_handler_5:;
        CHECK_OBJECT(outline_1_var___class__);
        Py_DECREF(outline_1_var___class__);
        outline_1_var___class__ = NULL;
        goto outline_result_2;
        // Exception handler code:
        try_except_handler_5:;
        exception_keeper_type_5 = exception_type;
        exception_keeper_value_5 = exception_value;
        exception_keeper_tb_5 = exception_tb;
        exception_keeper_lineno_5 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        // Re-raise.
        exception_type = exception_keeper_type_5;
        exception_value = exception_keeper_value_5;
        exception_tb = exception_keeper_tb_5;
        exception_lineno = exception_keeper_lineno_5;

        goto outline_exception_2;
        // End of try:
        NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
        return NULL;
        outline_exception_2:;
        exception_lineno = 110;
        goto try_except_handler_4;
        outline_result_2:;
        UPDATE_STRING_DICT1(moduledict_hikari$api$rest, (Nuitka_StringObject *)mod_consts[469], tmp_assign_source_26);
    }
    goto try_end_2;
    // Exception handler code:
    try_except_handler_4:;
    exception_keeper_type_6 = exception_type;
    exception_keeper_value_6 = exception_value;
    exception_keeper_tb_6 = exception_tb;
    exception_keeper_lineno_6 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF(tmp_class_creation_2__bases_orig);
    tmp_class_creation_2__bases_orig = NULL;
    Py_XDECREF(tmp_class_creation_2__bases);
    tmp_class_creation_2__bases = NULL;
    Py_XDECREF(tmp_class_creation_2__class_decl_dict);
    tmp_class_creation_2__class_decl_dict = NULL;
    Py_XDECREF(tmp_class_creation_2__metaclass);
    tmp_class_creation_2__metaclass = NULL;
    Py_XDECREF(tmp_class_creation_2__prepared);
    tmp_class_creation_2__prepared = NULL;
    // Re-raise.
    exception_type = exception_keeper_type_6;
    exception_value = exception_keeper_value_6;
    exception_tb = exception_keeper_tb_6;
    exception_lineno = exception_keeper_lineno_6;

    goto frame_exception_exit_1;
    // End of try:
    try_end_2:;

    // Restore frame exception if necessary.
#if 0
    RESTORE_FRAME_EXCEPTION(frame_79a9a0fab045cdec33bf55099eaef1e6);
#endif
    popFrameStack();

    assertFrameObject(frame_79a9a0fab045cdec33bf55099eaef1e6);

    goto frame_no_exception_3;

    frame_exception_exit_1:;
#if 0
    RESTORE_FRAME_EXCEPTION(frame_79a9a0fab045cdec33bf55099eaef1e6);
#endif

    if (exception_tb == NULL) {
        exception_tb = MAKE_TRACEBACK(frame_79a9a0fab045cdec33bf55099eaef1e6, exception_lineno);
    } else if (exception_tb->tb_frame != &frame_79a9a0fab045cdec33bf55099eaef1e6->m_frame) {
        exception_tb = ADD_TRACEBACK(exception_tb, frame_79a9a0fab045cdec33bf55099eaef1e6, exception_lineno);
    }

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto module_exception_exit;

    frame_no_exception_3:;
    CHECK_OBJECT(tmp_class_creation_2__bases_orig);
    Py_DECREF(tmp_class_creation_2__bases_orig);
    tmp_class_creation_2__bases_orig = NULL;
    CHECK_OBJECT(tmp_class_creation_2__bases);
    Py_DECREF(tmp_class_creation_2__bases);
    tmp_class_creation_2__bases = NULL;
    CHECK_OBJECT(tmp_class_creation_2__class_decl_dict);
    Py_DECREF(tmp_class_creation_2__class_decl_dict);
    tmp_class_creation_2__class_decl_dict = NULL;
    CHECK_OBJECT(tmp_class_creation_2__metaclass);
    Py_DECREF(tmp_class_creation_2__metaclass);
    tmp_class_creation_2__metaclass = NULL;
    CHECK_OBJECT(tmp_class_creation_2__prepared);
    Py_DECREF(tmp_class_creation_2__prepared);
    tmp_class_creation_2__prepared = NULL;

    // Report to PGO about leaving the module without error.
    PGO_onModuleExit("hikari.api.rest", false);

    return module_hikari$api$rest;
    module_exception_exit:

#if defined(_NUITKA_MODULE) && 0
    {
        PyObject *module_name = GET_STRING_DICT_VALUE(moduledict_hikari$api$rest, (Nuitka_StringObject *)const_str_plain___name__);

        if (module_name != NULL) {
            Nuitka_DelModule(module_name);
        }
    }
#endif
    PGO_onModuleExit("hikari$api$rest", false);

    RESTORE_ERROR_OCCURRED(exception_type, exception_value, exception_tb);
    return NULL;
}
